
SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  0800a688  0800a688  0000b688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b300  0800b300  0000d278  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b300  0800b300  0000c300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b308  0800b308  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b308  0800b308  0000c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b30c  0800b30c  0000c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800b310  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20000278  0800b588  0000d278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  0800b588  0000de70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011850  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f80  00000000  00000000  0001eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000259aa  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014302  00000000  00000000  00048252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d478f  00000000  00000000  0005c554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00130ce3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000b21  00000000  00000000  00130d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005078  00000000  00000000  00131848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001368c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000278 	.word	0x20000278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a670 	.word	0x0800a670

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000027c 	.word	0x2000027c
 800020c:	0800a670 	.word	0x0800a670

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e015      	b.n	8000f7c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff f9bd 	bl	80002d0 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	4798      	blx	r3
 8000f64:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e005      	b.n	8000f7c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f006 ffe2 	bl	8007f3e <memcpy>

    return copy;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2028      	movs	r0, #40	@ 0x28
 8000f92:	4798      	blx	r3
 8000f94:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f9c:	2228      	movs	r2, #40	@ 0x28
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f006 f983 	bl	80072ac <memset>
    }

    return node;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000fbc:	e037      	b.n	800102e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d108      	bne.n	8000fe2 <cJSON_Delete+0x32>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffe7 	bl	8000fb0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <cJSON_Delete+0x52>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <cJSON_Delete+0x90>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6912      	ldr	r2, [r2, #16]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <cJSON_Delete+0x72>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <cJSON_Delete+0x90>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6a12      	ldr	r2, [r2, #32]
 800101e:	4610      	mov	r0, r2
 8001020:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <cJSON_Delete+0x90>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
        item = next;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1c4      	bne.n	8000fbe <cJSON_Delete+0xe>
    }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000030 	.word	0x20000030

08001044 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001048:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <ensure+0x20>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <ensure+0x24>
    {
        return NULL;
 8001074:	2300      	movs	r3, #0
 8001076:	e086      	b.n	8001186 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <ensure+0x3c>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d301      	bcc.n	8001090 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800108c:	2300      	movs	r3, #0
 800108e:	e07a      	b.n	8001186 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	da01      	bge.n	800109a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001096:	2300      	movs	r3, #0
 8001098:	e075      	b.n	8001186 <ensure+0x132>
    }

    needed += p->offset + 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	3301      	adds	r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d805      	bhi.n	80010bc <ensure+0x68>
    {
        return p->buffer + p->offset;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4413      	add	r3, r2
 80010ba:	e064      	b.n	8001186 <ensure+0x132>
    }

    if (p->noalloc) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <ensure+0x74>
        return NULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e05e      	b.n	8001186 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ce:	d308      	bcc.n	80010e2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db03      	blt.n	80010de <ensure+0x8a>
        {
            newsize = INT_MAX;
 80010d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	e004      	b.n	80010e8 <ensure+0x94>
        }
        else
        {
            return NULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	e051      	b.n	8001186 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d018      	beq.n	8001122 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	4610      	mov	r0, r2
 80010fc:	4798      	blx	r3
 80010fe:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d135      	bne.n	8001172 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	4798      	blx	r3
            p->length = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

            return NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	e031      	b.n	8001186 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	68b8      	ldr	r0, [r7, #8]
 8001128:	4798      	blx	r3
 800112a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	4610      	mov	r0, r2
 800113c:	4798      	blx	r3
            p->length = 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

            return NULL;
 800114a:	2300      	movs	r3, #0
 800114c:	e01b      	b.n	8001186 <ensure+0x132>
        }
        if (newbuffer)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	461a      	mov	r2, r3
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f006 feec 	bl	8007f3e <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	4610      	mov	r0, r2
 8001170:	4798      	blx	r3
    }
    p->length = newsize;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800118e:	b590      	push	{r4, r7, lr}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <update_offset+0x3a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00f      	beq.n	80011c8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689c      	ldr	r4, [r3, #8]
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff f889 	bl	80002d0 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	18e2      	adds	r2, r4, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	e000      	b.n	80011ca <update_offset+0x3c>
        return;
 80011c8:	bf00      	nop
}
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}

080011d0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80011d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d4:	b087      	sub	sp, #28
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80011dc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80011e0:	68b8      	ldr	r0, [r7, #8]
 80011e2:	68fe      	ldr	r6, [r7, #12]
 80011e4:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	687e      	ldr	r6, [r7, #4]
 80011ec:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80011f0:	f7ff fcc2 	bl	8000b78 <__aeabi_dcmpgt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <compare_double+0x34>
 80011fa:	68bc      	ldr	r4, [r7, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001202:	e003      	b.n	800120c <compare_double+0x3c>
 8001204:	683c      	ldr	r4, [r7, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800120c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001218:	f7ff f866 	bl	80002e8 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4690      	mov	r8, r2
 8001222:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <compare_double+0x8c>)
 800122c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001230:	f7ff fa12 	bl	8000658 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	2101      	movs	r1, #1
 800123a:	460c      	mov	r4, r1
 800123c:	4640      	mov	r0, r8
 800123e:	4649      	mov	r1, r9
 8001240:	f7ff fc86 	bl	8000b50 <__aeabi_dcmple>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <compare_double+0x7e>
 800124a:	2300      	movs	r3, #0
 800124c:	461c      	mov	r4, r3
 800124e:	b2e3      	uxtb	r3, r4
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800125a:	bf00      	nop
 800125c:	3cb00000 	.word	0x3cb00000

08001260 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	b093      	sub	sp, #76	@ 0x4c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001274:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8001294:	f7ff fed6 	bl	8001044 <get_decimal_point>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <print_number+0x54>
    {
        return false;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e09c      	b.n	80013ee <print_number+0x18e>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80012b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012bc:	f7ff fc66 	bl	8000b8c <__aeabi_dcmpun>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d121      	bne.n	800130a <print_number+0xaa>
 80012c6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80012c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ca:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012ce:	2301      	movs	r3, #1
 80012d0:	461e      	mov	r6, r3
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295
 80012d6:	4b48      	ldr	r3, [pc, #288]	@ (80013f8 <print_number+0x198>)
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff fc56 	bl	8000b8c <__aeabi_dcmpun>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10b      	bne.n	80012fe <print_number+0x9e>
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	4b43      	ldr	r3, [pc, #268]	@ (80013f8 <print_number+0x198>)
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7ff fc2e 	bl	8000b50 <__aeabi_dcmple>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <print_number+0x9e>
 80012fa:	2300      	movs	r3, #0
 80012fc:	461e      	mov	r6, r3
 80012fe:	b2f3      	uxtb	r3, r6
 8001300:	f083 0301 	eor.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	493b      	ldr	r1, [pc, #236]	@ (80013fc <print_number+0x19c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fea3 	bl	800705c <siprintf>
 8001316:	6478      	str	r0, [r7, #68]	@ 0x44
 8001318:	e027      	b.n	800136a <print_number+0x10a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800131a:	f107 0014 	add.w	r0, r7, #20
 800131e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001322:	4937      	ldr	r1, [pc, #220]	@ (8001400 <print_number+0x1a0>)
 8001324:	f005 fe9a 	bl	800705c <siprintf>
 8001328:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4934      	ldr	r1, [pc, #208]	@ (8001404 <print_number+0x1a4>)
 8001334:	4618      	mov	r0, r3
 8001336:	f005 feb3 	bl	80070a0 <siscanf>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10c      	bne.n	800135a <print_number+0xfa>
 8001340:	ed97 7b02 	vldr	d7, [r7, #8]
 8001344:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001348:	eeb0 0a47 	vmov.f32	s0, s14
 800134c:	eef0 0a67 	vmov.f32	s1, s15
 8001350:	f7ff ff3e 	bl	80011d0 <compare_double>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <print_number+0x10a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800135a:	f107 0014 	add.w	r0, r7, #20
 800135e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001362:	4929      	ldr	r1, [pc, #164]	@ (8001408 <print_number+0x1a8>)
 8001364:	f005 fe7a 	bl	800705c <siprintf>
 8001368:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800136a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800136c:	2b00      	cmp	r3, #0
 800136e:	db02      	blt.n	8001376 <print_number+0x116>
 8001370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001372:	2b19      	cmp	r3, #25
 8001374:	dd01      	ble.n	800137a <print_number+0x11a>
    {
        return false;
 8001376:	2300      	movs	r3, #0
 8001378:	e039      	b.n	80013ee <print_number+0x18e>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800137a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800137c:	3301      	adds	r3, #1
 800137e:	4619      	mov	r1, r3
 8001380:	6838      	ldr	r0, [r7, #0]
 8001382:	f7ff fe67 	bl	8001054 <ensure>
 8001386:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <print_number+0x132>
    {
        return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e02d      	b.n	80013ee <print_number+0x18e>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	@ 0x40
 8001396:	e01a      	b.n	80013ce <print_number+0x16e>
    {
        if (number_buffer[i] == decimal_point)
 8001398:	f107 0214 	add.w	r2, r7, #20
 800139c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d105      	bne.n	80013b6 <print_number+0x156>
        {
            output_pointer[i] = '.';
 80013aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ae:	4413      	add	r3, r2
 80013b0:	222e      	movs	r2, #46	@ 0x2e
 80013b2:	701a      	strb	r2, [r3, #0]
            continue;
 80013b4:	e008      	b.n	80013c8 <print_number+0x168>
        }

        output_pointer[i] = number_buffer[i];
 80013b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ba:	4413      	add	r3, r2
 80013bc:	f107 0114 	add.w	r1, r7, #20
 80013c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013c2:	440a      	add	r2, r1
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80013c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ca:	3301      	adds	r3, #1
 80013cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80013ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3e0      	bcc.n	8001398 <print_number+0x138>
    }
    output_pointer[i] = '\0';
 80013d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013da:	4413      	add	r3, r2
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013e6:	441a      	add	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	609a      	str	r2, [r3, #8]

    return true;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	374c      	adds	r7, #76	@ 0x4c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	7fefffff 	.word	0x7fefffff
 80013fc:	0800a6c0 	.word	0x0800a6c0
 8001400:	0800a6c8 	.word	0x0800a6c8
 8001404:	0800a6d0 	.word	0x0800a6d0
 8001408:	0800a6d4 	.word	0x0800a6d4

0800140c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <print_string_ptr+0x28>
    {
        return false;
 8001430:	2300      	movs	r3, #0
 8001432:	e110      	b.n	8001656 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d111      	bne.n	800145e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800143a:	2103      	movs	r1, #3
 800143c:	6838      	ldr	r0, [r7, #0]
 800143e:	f7ff fe09 	bl	8001054 <ensure>
 8001442:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <print_string_ptr+0x42>
        {
            return false;
 800144a:	2300      	movs	r3, #0
 800144c:	e103      	b.n	8001656 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4a83      	ldr	r2, [pc, #524]	@ (8001660 <print_string_ptr+0x254>)
 8001452:	8811      	ldrh	r1, [r2, #0]
 8001454:	7892      	ldrb	r2, [r2, #2]
 8001456:	8019      	strh	r1, [r3, #0]
 8001458:	709a      	strb	r2, [r3, #2]

        return true;
 800145a:	2301      	movs	r3, #1
 800145c:	e0fb      	b.n	8001656 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e024      	b.n	80014ae <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b22      	cmp	r3, #34	@ 0x22
 800146a:	dc0f      	bgt.n	800148c <print_string_ptr+0x80>
 800146c:	2b08      	cmp	r3, #8
 800146e:	db13      	blt.n	8001498 <print_string_ptr+0x8c>
 8001470:	3b08      	subs	r3, #8
 8001472:	4a7c      	ldr	r2, [pc, #496]	@ (8001664 <print_string_ptr+0x258>)
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf14      	ite	ne
 8001480:	2301      	movne	r3, #1
 8001482:	2300      	moveq	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <print_string_ptr+0x84>
 800148a:	e005      	b.n	8001498 <print_string_ptr+0x8c>
 800148c:	2b5c      	cmp	r3, #92	@ 0x5c
 800148e:	d103      	bne.n	8001498 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
                break;
 8001496:	e007      	b.n	80014a8 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b1f      	cmp	r3, #31
 800149e:	d802      	bhi.n	80014a6 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3305      	adds	r3, #5
 80014a4:	617b      	str	r3, [r7, #20]
                }
                break;
 80014a6:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1d6      	bne.n	8001464 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4413      	add	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3303      	adds	r3, #3
 80014c8:	4619      	mov	r1, r3
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f7ff fdc2 	bl	8001054 <ensure>
 80014d0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <print_string_ptr+0xd0>
    {
        return false;
 80014d8:	2300      	movs	r3, #0
 80014da:	e0bc      	b.n	8001656 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d117      	bne.n	8001512 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2222      	movs	r2, #34	@ 0x22
 80014e6:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 fd24 	bl	8007f3e <memcpy>
        output[output_length + 1] = '\"';
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4413      	add	r3, r2
 80014fe:	2222      	movs	r2, #34	@ 0x22
 8001500:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3302      	adds	r3, #2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]

        return true;
 800150e:	2301      	movs	r3, #1
 8001510:	e0a1      	b.n	8001656 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2222      	movs	r2, #34	@ 0x22
 8001516:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e086      	b.n	8001632 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b1f      	cmp	r3, #31
 800152a:	d90c      	bls.n	8001546 <print_string_ptr+0x13a>
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b22      	cmp	r3, #34	@ 0x22
 8001532:	d008      	beq.n	8001546 <print_string_ptr+0x13a>
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b5c      	cmp	r3, #92	@ 0x5c
 800153a:	d004      	beq.n	8001546 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e06f      	b.n	8001626 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	61ba      	str	r2, [r7, #24]
 800154c:	225c      	movs	r2, #92	@ 0x5c
 800154e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b22      	cmp	r3, #34	@ 0x22
 8001556:	dc3d      	bgt.n	80015d4 <print_string_ptr+0x1c8>
 8001558:	2b08      	cmp	r3, #8
 800155a:	db59      	blt.n	8001610 <print_string_ptr+0x204>
 800155c:	3b08      	subs	r3, #8
 800155e:	2b1a      	cmp	r3, #26
 8001560:	d856      	bhi.n	8001610 <print_string_ptr+0x204>
 8001562:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <print_string_ptr+0x15c>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e9 	.word	0x080015e9
 800156c:	08001609 	.word	0x08001609
 8001570:	080015f9 	.word	0x080015f9
 8001574:	08001611 	.word	0x08001611
 8001578:	080015f1 	.word	0x080015f1
 800157c:	08001601 	.word	0x08001601
 8001580:	08001611 	.word	0x08001611
 8001584:	08001611 	.word	0x08001611
 8001588:	08001611 	.word	0x08001611
 800158c:	08001611 	.word	0x08001611
 8001590:	08001611 	.word	0x08001611
 8001594:	08001611 	.word	0x08001611
 8001598:	08001611 	.word	0x08001611
 800159c:	08001611 	.word	0x08001611
 80015a0:	08001611 	.word	0x08001611
 80015a4:	08001611 	.word	0x08001611
 80015a8:	08001611 	.word	0x08001611
 80015ac:	08001611 	.word	0x08001611
 80015b0:	08001611 	.word	0x08001611
 80015b4:	08001611 	.word	0x08001611
 80015b8:	08001611 	.word	0x08001611
 80015bc:	08001611 	.word	0x08001611
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001611 	.word	0x08001611
 80015c8:	08001611 	.word	0x08001611
 80015cc:	08001611 	.word	0x08001611
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d6:	d11b      	bne.n	8001610 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	225c      	movs	r2, #92	@ 0x5c
 80015dc:	701a      	strb	r2, [r3, #0]
                    break;
 80015de:	e022      	b.n	8001626 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2222      	movs	r2, #34	@ 0x22
 80015e4:	701a      	strb	r2, [r3, #0]
                    break;
 80015e6:	e01e      	b.n	8001626 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2262      	movs	r2, #98	@ 0x62
 80015ec:	701a      	strb	r2, [r3, #0]
                    break;
 80015ee:	e01a      	b.n	8001626 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2266      	movs	r2, #102	@ 0x66
 80015f4:	701a      	strb	r2, [r3, #0]
                    break;
 80015f6:	e016      	b.n	8001626 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	226e      	movs	r2, #110	@ 0x6e
 80015fc:	701a      	strb	r2, [r3, #0]
                    break;
 80015fe:	e012      	b.n	8001626 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2272      	movs	r2, #114	@ 0x72
 8001604:	701a      	strb	r2, [r3, #0]
                    break;
 8001606:	e00e      	b.n	8001626 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2274      	movs	r2, #116	@ 0x74
 800160c:	701a      	strb	r2, [r3, #0]
                    break;
 800160e:	e00a      	b.n	8001626 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4914      	ldr	r1, [pc, #80]	@ (8001668 <print_string_ptr+0x25c>)
 8001618:	69b8      	ldr	r0, [r7, #24]
 800161a:	f005 fd1f 	bl	800705c <siprintf>
                    output_pointer += 4;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3304      	adds	r3, #4
 8001622:	61bb      	str	r3, [r7, #24]
                    break;
 8001624:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	3301      	adds	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f47f af74 	bne.w	8001524 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4413      	add	r3, r2
 8001644:	2222      	movs	r2, #34	@ 0x22
 8001646:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3302      	adds	r3, #2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4413      	add	r3, r2
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

    return true;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	0800a6dc 	.word	0x0800a6dc
 8001664:	04000037 	.word	0x04000037
 8001668:	0800a6e0 	.word	0x0800a6e0

0800166c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fec5 	bl	800140c <print_string_ptr>
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	@ 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2224      	movs	r2, #36	@ 0x24
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 fe01 	bl	80072ac <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <print+0x104>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4610      	mov	r0, r2
 80016b4:	4798      	blx	r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80016ba:	4b35      	ldr	r3, [pc, #212]	@ (8001790 <print+0x104>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80016cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f869 	bl	80017b4 <print_value>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d039      	beq.n	800175c <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd4e 	bl	800118e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00d      	beq.n	8001716 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	3201      	adds	r2, #1
 8001704:	4611      	mov	r1, r2
 8001706:	4798      	blx	r3
 8001708:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800170a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170c:	2b00      	cmp	r3, #0
 800170e:	d027      	beq.n	8001760 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	e01e      	b.n	8001754 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	3201      	adds	r2, #1
 800171e:	4610      	mov	r0, r2
 8001720:	4798      	blx	r3
 8001722:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01c      	beq.n	8001764 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800172a:	6939      	ldr	r1, [r7, #16]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	4293      	cmp	r3, r2
 8001734:	bf28      	it	cs
 8001736:	4613      	movcs	r3, r2
 8001738:	461a      	mov	r2, r3
 800173a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800173c:	f006 fbff 	bl	8007f3e <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001744:	4413      	add	r3, r2
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4610      	mov	r0, r2
 8001752:	4798      	blx	r3
    }

    return printed;
 8001754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001756:	e016      	b.n	8001786 <print+0xfa>
        goto fail;
 8001758:	bf00      	nop
 800175a:	e004      	b.n	8001766 <print+0xda>
        goto fail;
 800175c:	bf00      	nop
 800175e:	e002      	b.n	8001766 <print+0xda>
            goto fail;
 8001760:	bf00      	nop
 8001762:	e000      	b.n	8001766 <print+0xda>
            goto fail;
 8001764:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4610      	mov	r0, r2
 8001774:	4798      	blx	r3
    }

    if (printed != NULL)
 8001776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <print+0xf8>
    {
        hooks->deallocate(printed);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001782:	4798      	blx	r3
    }

    return NULL;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3738      	adds	r7, #56	@ 0x38
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800ac48 	.word	0x0800ac48

08001794 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <cJSON_PrintUnformatted+0x1c>)
 800179e:	2100      	movs	r1, #0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff73 	bl	800168c <print>
 80017a6:	4603      	mov	r3, r0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000030 	.word	0x20000030

080017b4 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <print_value+0x1a>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <print_value+0x1e>
    {
        return false;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e0c9      	b.n	8001966 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b80      	cmp	r3, #128	@ 0x80
 80017da:	f000 808e 	beq.w	80018fa <print_value+0x146>
 80017de:	2b80      	cmp	r3, #128	@ 0x80
 80017e0:	f300 80c0 	bgt.w	8001964 <print_value+0x1b0>
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	dc49      	bgt.n	800187c <print_value+0xc8>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f340 80bb 	ble.w	8001964 <print_value+0x1b0>
 80017ee:	3b01      	subs	r3, #1
 80017f0:	2b1f      	cmp	r3, #31
 80017f2:	f200 80b7 	bhi.w	8001964 <print_value+0x1b0>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <print_value+0x48>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	080018a7 	.word	0x080018a7
 8001800:	080018cb 	.word	0x080018cb
 8001804:	08001965 	.word	0x08001965
 8001808:	08001883 	.word	0x08001883
 800180c:	08001965 	.word	0x08001965
 8001810:	08001965 	.word	0x08001965
 8001814:	08001965 	.word	0x08001965
 8001818:	080018ef 	.word	0x080018ef
 800181c:	08001965 	.word	0x08001965
 8001820:	08001965 	.word	0x08001965
 8001824:	08001965 	.word	0x08001965
 8001828:	08001965 	.word	0x08001965
 800182c:	08001965 	.word	0x08001965
 8001830:	08001965 	.word	0x08001965
 8001834:	08001965 	.word	0x08001965
 8001838:	08001941 	.word	0x08001941
 800183c:	08001965 	.word	0x08001965
 8001840:	08001965 	.word	0x08001965
 8001844:	08001965 	.word	0x08001965
 8001848:	08001965 	.word	0x08001965
 800184c:	08001965 	.word	0x08001965
 8001850:	08001965 	.word	0x08001965
 8001854:	08001965 	.word	0x08001965
 8001858:	08001965 	.word	0x08001965
 800185c:	08001965 	.word	0x08001965
 8001860:	08001965 	.word	0x08001965
 8001864:	08001965 	.word	0x08001965
 8001868:	08001965 	.word	0x08001965
 800186c:	08001965 	.word	0x08001965
 8001870:	08001965 	.word	0x08001965
 8001874:	08001965 	.word	0x08001965
 8001878:	0800194d 	.word	0x0800194d
 800187c:	2b40      	cmp	r3, #64	@ 0x40
 800187e:	d06b      	beq.n	8001958 <print_value+0x1a4>
 8001880:	e070      	b.n	8001964 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001882:	2105      	movs	r1, #5
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f7ff fbe5 	bl	8001054 <ensure>
 800188a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <print_value+0xe2>
            {
                return false;
 8001892:	2300      	movs	r3, #0
 8001894:	e067      	b.n	8001966 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a35      	ldr	r2, [pc, #212]	@ (8001970 <print_value+0x1bc>)
 800189a:	6810      	ldr	r0, [r2, #0]
 800189c:	6018      	str	r0, [r3, #0]
 800189e:	7912      	ldrb	r2, [r2, #4]
 80018a0:	711a      	strb	r2, [r3, #4]
            return true;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e05f      	b.n	8001966 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80018a6:	2106      	movs	r1, #6
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f7ff fbd3 	bl	8001054 <ensure>
 80018ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <print_value+0x106>
            {
                return false;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e055      	b.n	8001966 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001974 <print_value+0x1c0>)
 80018be:	6810      	ldr	r0, [r2, #0]
 80018c0:	6018      	str	r0, [r3, #0]
 80018c2:	8892      	ldrh	r2, [r2, #4]
 80018c4:	809a      	strh	r2, [r3, #4]
            return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e04d      	b.n	8001966 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80018ca:	2105      	movs	r1, #5
 80018cc:	6838      	ldr	r0, [r7, #0]
 80018ce:	f7ff fbc1 	bl	8001054 <ensure>
 80018d2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <print_value+0x12a>
            {
                return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e043      	b.n	8001966 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <print_value+0x1c4>)
 80018e2:	6810      	ldr	r0, [r2, #0]
 80018e4:	6018      	str	r0, [r3, #0]
 80018e6:	7912      	ldrb	r2, [r2, #4]
 80018e8:	711a      	strb	r2, [r3, #4]
            return true;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e03b      	b.n	8001966 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fcb5 	bl	8001260 <print_number>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e035      	b.n	8001966 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <print_value+0x156>
            {
                return false;
 8001906:	2300      	movs	r3, #0
 8001908:	e02d      	b.n	8001966 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fcde 	bl	80002d0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	3301      	adds	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	6838      	ldr	r0, [r7, #0]
 800191e:	f7ff fb99 	bl	8001054 <ensure>
 8001922:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <print_value+0x17a>
            {
                return false;
 800192a:	2300      	movs	r3, #0
 800192c:	e01b      	b.n	8001966 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4619      	mov	r1, r3
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f006 fb01 	bl	8007f3e <memcpy>
            return true;
 800193c:	2301      	movs	r3, #1
 800193e:	e012      	b.n	8001966 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fe92 	bl	800166c <print_string>
 8001948:	4603      	mov	r3, r0
 800194a:	e00c      	b.n	8001966 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800194c:	6839      	ldr	r1, [r7, #0]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f814 	bl	800197c <print_array>
 8001954:	4603      	mov	r3, r0
 8001956:	e006      	b.n	8001966 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f894 	bl	8001a88 <print_object>
 8001960:	4603      	mov	r3, r0
 8001962:	e000      	b.n	8001966 <print_value+0x1b2>

        default:
            return false;
 8001964:	2300      	movs	r3, #0
    }
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	0800a6c0 	.word	0x0800a6c0
 8001974:	0800a6ec 	.word	0x0800a6ec
 8001978:	0800a6f4 	.word	0x0800a6f4

0800197c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <print_array+0x22>
    {
        return false;
 800199a:	2300      	movs	r3, #0
 800199c:	e070      	b.n	8001a80 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800199e:	2101      	movs	r1, #1
 80019a0:	6838      	ldr	r0, [r7, #0]
 80019a2:	f7ff fb57 	bl	8001054 <ensure>
 80019a6:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <print_array+0x36>
    {
        return false;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e066      	b.n	8001a80 <print_array+0x104>
    }

    *output_pointer = '[';
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	225b      	movs	r2, #91	@ 0x5b
 80019b6:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80019cc:	e03d      	b.n	8001a4a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80019ce:	6839      	ldr	r1, [r7, #0]
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f7ff feef 	bl	80017b4 <print_value>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <print_array+0x64>
        {
            return false;
 80019dc:	2300      	movs	r3, #0
 80019de:	e04f      	b.n	8001a80 <print_array+0x104>
        }
        update_offset(output_buffer);
 80019e0:	6838      	ldr	r0, [r7, #0]
 80019e2:	f7ff fbd4 	bl	800118e <update_offset>
        if (current_element->next)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d02a      	beq.n	8001a44 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <print_array+0x7e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e000      	b.n	80019fc <print_array+0x80>
 80019fa:	2301      	movs	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4619      	mov	r1, r3
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff fb25 	bl	8001054 <ensure>
 8001a0a:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <print_array+0x9a>
            {
                return false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e034      	b.n	8001a80 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	617a      	str	r2, [r7, #20]
 8001a1c:	222c      	movs	r2, #44	@ 0x2c
 8001a1e:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	617a      	str	r2, [r7, #20]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	441a      	add	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1be      	bne.n	80019ce <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001a50:	2102      	movs	r1, #2
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f7ff fafe 	bl	8001054 <ensure>
 8001a58:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <print_array+0xe8>
    {
        return false;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e00d      	b.n	8001a80 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	617a      	str	r2, [r7, #20]
 8001a6a:	225d      	movs	r2, #93	@ 0x5d
 8001a6c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	60da      	str	r2, [r3, #12]

    return true;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <print_object+0x22>
    {
        return false;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e108      	b.n	8001cbc <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <print_object+0x2e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e000      	b.n	8001ab8 <print_object+0x30>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7ff fac7 	bl	8001054 <ensure>
 8001ac6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <print_object+0x4a>
    {
        return false;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e0f4      	b.n	8001cbc <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	61fa      	str	r2, [r7, #28]
 8001ad8:	227b      	movs	r2, #123	@ 0x7b
 8001ada:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	61fa      	str	r2, [r7, #28]
 8001af4:	220a      	movs	r2, #10
 8001af6:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	441a      	add	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001b04:	e0a0      	b.n	8001c48 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d022      	beq.n	8001b54 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f7ff fa9d 	bl	8001054 <ensure>
 8001b1a:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <print_object+0x9e>
            {
                return false;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e0ca      	b.n	8001cbc <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e007      	b.n	8001b3c <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	61fa      	str	r2, [r7, #28]
 8001b32:	2209      	movs	r2, #9
 8001b34:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d3f2      	bcc.n	8001b2c <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	441a      	add	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc56 	bl	800140c <print_string_ptr>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <print_object+0xe2>
        {
            return false;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e0a8      	b.n	8001cbc <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f7ff fb0f 	bl	800118e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <print_object+0xf4>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e000      	b.n	8001b7e <print_object+0xf6>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	6838      	ldr	r0, [r7, #0]
 8001b84:	f7ff fa66 	bl	8001054 <ensure>
 8001b88:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <print_object+0x10c>
        {
            return false;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e093      	b.n	8001cbc <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	61fa      	str	r2, [r7, #28]
 8001b9a:	223a      	movs	r2, #58	@ 0x3a
 8001b9c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	61fa      	str	r2, [r7, #28]
 8001bac:	2209      	movs	r2, #9
 8001bae:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	441a      	add	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	69b8      	ldr	r0, [r7, #24]
 8001bc0:	f7ff fdf8 	bl	80017b4 <print_value>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <print_object+0x146>
        {
            return false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e076      	b.n	8001cbc <print_object+0x234>
        }
        update_offset(output_buffer);
 8001bce:	6838      	ldr	r0, [r7, #0]
 8001bd0:	f7ff fadd 	bl	800118e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <print_object+0x158>
 8001bdc:	2201      	movs	r2, #1
 8001bde:	e000      	b.n	8001be2 <print_object+0x15a>
 8001be0:	2200      	movs	r2, #0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <print_object+0x166>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <print_object+0x168>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f7ff fa2a 	bl	8001054 <ensure>
 8001c00:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <print_object+0x184>
        {
            return false;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e057      	b.n	8001cbc <print_object+0x234>
        }
        if (current_item->next)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d004      	beq.n	8001c1e <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	61fa      	str	r2, [r7, #28]
 8001c1a:	222c      	movs	r2, #44	@ 0x2c
 8001c1c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	441a      	add	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f af5b 	bne.w	8001b06 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <print_object+0x1d8>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	e000      	b.n	8001c62 <print_object+0x1da>
 8001c60:	2302      	movs	r3, #2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f7ff f9f5 	bl	8001054 <ensure>
 8001c6a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <print_object+0x1ee>
    {
        return false;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e022      	b.n	8001cbc <print_object+0x234>
    }
    if (output_buffer->format)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	e007      	b.n	8001c94 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	61fa      	str	r2, [r7, #28]
 8001c8a:	2209      	movs	r2, #9
 8001c8c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	3301      	adds	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3f1      	bcc.n	8001c84 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	61fa      	str	r2, [r7, #28]
 8001ca6:	227d      	movs	r2, #125	@ 0x7d
 8001ca8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	60da      	str	r2, [r3, #12]

    return true;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <add_item_to_array+0x22>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <add_item_to_array+0x22>
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d101      	bne.n	8001d0c <add_item_to_array+0x26>
    {
        return false;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e01e      	b.n	8001d4a <add_item_to_array+0x64>
    }

    child = array->child;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e00d      	b.n	8001d48 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	6839      	ldr	r1, [r7, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffc2 	bl	8001cc4 <suffix_object>
            array->child->prev = item;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <add_item_to_object+0x30>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <add_item_to_object+0x30>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <add_item_to_object+0x30>
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d101      	bne.n	8001d9c <add_item_to_object+0x34>
    {
        return false;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e036      	b.n	8001e0a <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001da2:	68b8      	ldr	r0, [r7, #8]
 8001da4:	f7ff ffd5 	bl	8001d52 <cast_away_const>
 8001da8:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e00e      	b.n	8001dd4 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	68b8      	ldr	r0, [r7, #8]
 8001dba:	f7ff f8bb 	bl	8000f34 <cJSON_strdup>
 8001dbe:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <add_item_to_object+0x62>
        {
            return false;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e01f      	b.n	8001e0a <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001dd2:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <add_item_to_object+0x8c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6a12      	ldr	r2, [r2, #32]
 8001df0:	4610      	mov	r0, r2
 8001df2:	4798      	blx	r3
    }

    item->string = new_key;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff ff6f 	bl	8001ce6 <add_item_to_array>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001e20:	2300      	movs	r3, #0
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <cJSON_AddItemToObject+0x28>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff ff9c 	bl	8001d68 <add_item_to_object>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000030 	.word	0x20000030

08001e40 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001e4e:	ed97 0b00 	vldr	d0, [r7]
 8001e52:	f000 f819 	bl	8001e88 <cJSON_CreateNumber>
 8001e56:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <cJSON_AddNumberToObject+0x44>)
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff ff80 	bl	8001d68 <add_item_to_object>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	e003      	b.n	8001e7a <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff f89c 	bl	8000fb0 <cJSON_Delete>
    return NULL;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000030 	.word	0x20000030

08001e88 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e92:	481f      	ldr	r0, [pc, #124]	@ (8001f10 <cJSON_CreateNumber+0x88>)
 8001e94:	f7ff f876 	bl	8000f84 <cJSON_New_Item>
 8001e98:	60f8      	str	r0, [r7, #12]
    if(item)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02c      	beq.n	8001efa <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eac:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001eb0:	a315      	add	r3, pc, #84	@ (adr r3, 8001f08 <cJSON_CreateNumber+0x80>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eba:	f7fe fe53 	bl	8000b64 <__aeabi_dcmpge>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	e015      	b.n	8001efa <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <cJSON_CreateNumber+0x8c>)
 8001ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ed8:	f7fe fe3a 	bl	8000b50 <__aeabi_dcmple>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ee8:	615a      	str	r2, [r3, #20]
 8001eea:	e006      	b.n	8001efa <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8001eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ef0:	f7fe fe62 	bl	8000bb8 <__aeabi_d2iz>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f3af 8000 	nop.w
 8001f08:	ffc00000 	.word	0xffc00000
 8001f0c:	41dfffff 	.word	0x41dfffff
 8001f10:	20000030 	.word	0x20000030
 8001f14:	c1e00000 	.word	0xc1e00000

08001f18 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001f1e:	4807      	ldr	r0, [pc, #28]	@ (8001f3c <cJSON_CreateObject+0x24>)
 8001f20:	f7ff f830 	bl	8000f84 <cJSON_New_Item>
 8001f24:	6078      	str	r0, [r7, #4]
    if (item)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000030 	.word	0x20000030

08001f40 <data>:
#include "main.h"
#include "sys_init.h"



void data() {
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001f46:	af00      	add	r7, sp, #0
    // Create a JSON object
    cJSON *root = cJSON_CreateObject();
 8001f48:	f7ff ffe6 	bl	8001f18 <cJSON_CreateObject>
 8001f4c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001f50:	f103 0318 	add.w	r3, r3, #24
 8001f54:	6018      	str	r0, [r3, #0]
    if (root == NULL) return;
 8001f56:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001f5a:	f103 0318 	add.w	r3, r3, #24
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 815b 	beq.w	800221c <data+0x2dc>

    uint64_t epoch = RTC_Get_Epoch();
 8001f66:	f000 fe0f 	bl	8002b88 <RTC_Get_Epoch>
 8001f6a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001f6e:	f103 0310 	add.w	r3, r3, #16
 8001f72:	e9c3 0100 	strd	r0, r1, [r3]


    cJSON_AddNumberToObject(root, "ts", epoch);
 8001f76:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001f7a:	f103 0310 	add.w	r3, r3, #16
 8001f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f82:	f7fe fb33 	bl	80005ec <__aeabi_ul2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b10 	vmov	d0, r2, r3
 8001f8e:	49a6      	ldr	r1, [pc, #664]	@ (8002228 <data+0x2e8>)
 8001f90:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001f94:	f103 0318 	add.w	r3, r3, #24
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	f7ff ff51 	bl	8001e40 <cJSON_AddNumberToObject>

    cJSON *values = cJSON_CreateObject();
 8001f9e:	f7ff ffbb 	bl	8001f18 <cJSON_CreateObject>
 8001fa2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001fa6:	f103 030c 	add.w	r3, r3, #12
 8001faa:	6018      	str	r0, [r3, #0]
    if (values == NULL) {
 8001fac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001fb0:	f103 030c 	add.w	r3, r3, #12
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <data+0x8a>
        cJSON_Delete(root);
 8001fba:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001fbe:	f103 0318 	add.w	r3, r3, #24
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	f7fe fff4 	bl	8000fb0 <cJSON_Delete>
        return;
 8001fc8:	e129      	b.n	800221e <data+0x2de>
    }


    for (int i = 0; i < 4; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001fd0:	f102 021c 	add.w	r2, r2, #28
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e0cc      	b.n	8002172 <data+0x232>
    	if (registers[i].length == 2) {
 8001fd8:	4994      	ldr	r1, [pc, #592]	@ (800222c <data+0x2ec>)
 8001fda:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001fde:	f103 031c 	add.w	r3, r3, #28
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3308      	adds	r3, #8
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d15b      	bne.n	80020ae <data+0x16e>
    	    float val = modbus_float(registers[i].SlaveID, registers[i].Functioncode, registers[i].address, registers[i].length);
 8001ff6:	498d      	ldr	r1, [pc, #564]	@ (800222c <data+0x2ec>)
 8001ff8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ffc:	f103 031c 	add.w	r3, r3, #28
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3304      	adds	r3, #4
 800200e:	7818      	ldrb	r0, [r3, #0]
 8002010:	4986      	ldr	r1, [pc, #536]	@ (800222c <data+0x2ec>)
 8002012:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002016:	f103 031c 	add.w	r3, r3, #28
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3305      	adds	r3, #5
 8002028:	7819      	ldrb	r1, [r3, #0]
 800202a:	4c80      	ldr	r4, [pc, #512]	@ (800222c <data+0x2ec>)
 800202c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002030:	f103 031c 	add.w	r3, r3, #28
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4423      	add	r3, r4
 8002040:	3306      	adds	r3, #6
 8002042:	881c      	ldrh	r4, [r3, #0]
 8002044:	4d79      	ldr	r5, [pc, #484]	@ (800222c <data+0x2ec>)
 8002046:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800204a:	f103 031c 	add.w	r3, r3, #28
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	442b      	add	r3, r5
 800205a:	3308      	adds	r3, #8
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	4622      	mov	r2, r4
 8002060:	f000 fbb8 	bl	80027d4 <modbus_float>
 8002064:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002068:	f103 0304 	add.w	r3, r3, #4
 800206c:	ed83 0a00 	vstr	s0, [r3]
    	    cJSON_AddNumberToObject(values, registers[i].key, val);
 8002070:	496e      	ldr	r1, [pc, #440]	@ (800222c <data+0x2ec>)
 8002072:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002076:	f103 031c 	add.w	r3, r3, #28
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	681c      	ldr	r4, [r3, #0]
 8002088:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800208c:	f103 0304 	add.w	r3, r3, #4
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	f7fe fa89 	bl	80005a8 <__aeabi_f2d>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	ec43 2b10 	vmov	d0, r2, r3
 800209e:	4621      	mov	r1, r4
 80020a0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80020a4:	f103 030c 	add.w	r3, r3, #12
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f7ff fec9 	bl	8001e40 <cJSON_AddNumberToObject>
    	}
    	    int val = modbus_int(registers[i].SlaveID, registers[i].Functioncode, registers[i].address, registers[i].length);
 80020ae:	495f      	ldr	r1, [pc, #380]	@ (800222c <data+0x2ec>)
 80020b0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80020b4:	f103 031c 	add.w	r3, r3, #28
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3304      	adds	r3, #4
 80020c6:	7818      	ldrb	r0, [r3, #0]
 80020c8:	4958      	ldr	r1, [pc, #352]	@ (800222c <data+0x2ec>)
 80020ca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80020ce:	f103 031c 	add.w	r3, r3, #28
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3305      	adds	r3, #5
 80020e0:	7819      	ldrb	r1, [r3, #0]
 80020e2:	4c52      	ldr	r4, [pc, #328]	@ (800222c <data+0x2ec>)
 80020e4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80020e8:	f103 031c 	add.w	r3, r3, #28
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4423      	add	r3, r4
 80020f8:	3306      	adds	r3, #6
 80020fa:	881c      	ldrh	r4, [r3, #0]
 80020fc:	4d4b      	ldr	r5, [pc, #300]	@ (800222c <data+0x2ec>)
 80020fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002102:	f103 031c 	add.w	r3, r3, #28
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	442b      	add	r3, r5
 8002112:	3308      	adds	r3, #8
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	4622      	mov	r2, r4
 8002118:	f000 fbf2 	bl	8002900 <modbus_int>
 800211c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002120:	6018      	str	r0, [r3, #0]
    	    cJSON_AddNumberToObject(values, registers[i].key, val);
 8002122:	4942      	ldr	r1, [pc, #264]	@ (800222c <data+0x2ec>)
 8002124:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002128:	f103 031c 	add.w	r3, r3, #28
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	681c      	ldr	r4, [r3, #0]
 800213a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	f7fe fa20 	bl	8000584 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	ec43 2b10 	vmov	d0, r2, r3
 800214c:	4621      	mov	r1, r4
 800214e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002152:	f103 030c 	add.w	r3, r3, #12
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f7ff fe72 	bl	8001e40 <cJSON_AddNumberToObject>
    for (int i = 0; i < 4; i++) {
 800215c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002160:	f103 031c 	add.w	r3, r3, #28
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800216c:	f102 021c 	add.w	r2, r2, #28
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002176:	f103 031c 	add.w	r3, r3, #28
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b03      	cmp	r3, #3
 800217e:	f77f af2b 	ble.w	8001fd8 <data+0x98>

    }

    cJSON_AddItemToObject(root, "values", values);
 8002182:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002186:	f103 030c 	add.w	r3, r3, #12
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4928      	ldr	r1, [pc, #160]	@ (8002230 <data+0x2f0>)
 800218e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002192:	f103 0318 	add.w	r3, r3, #24
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f7ff fe3c 	bl	8001e14 <cJSON_AddItemToObject>

    char *json_str = cJSON_PrintUnformatted(root);  // or cJSON_Print() for pretty
 800219c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80021a0:	f103 0318 	add.w	r3, r3, #24
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f7ff faf5 	bl	8001794 <cJSON_PrintUnformatted>
 80021aa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80021ae:	f103 0308 	add.w	r3, r3, #8
 80021b2:	6018      	str	r0, [r3, #0]
//    char *json_str = cJSON_Print(root);

    if (json_str) {
 80021b4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80021b8:	f103 0308 	add.w	r3, r3, #8
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d024      	beq.n	800220c <data+0x2cc>
    	char Json[4096];
        sprintf(Json,"JSON: \n%s\r\n", json_str);
 80021c2:	463b      	mov	r3, r7
 80021c4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80021c8:	f102 0208 	add.w	r2, r2, #8
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	4919      	ldr	r1, [pc, #100]	@ (8002234 <data+0x2f4>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 ff43 	bl	800705c <siprintf>
        HAL_UART_Transmit(&huart2,(uint8_t *)Json,strlen(Json),1000);
 80021d6:	463b      	mov	r3, r7
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f879 	bl	80002d0 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	4639      	mov	r1, r7
 80021e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e8:	4813      	ldr	r0, [pc, #76]	@ (8002238 <data+0x2f8>)
 80021ea:	f003 f815 	bl	8005218 <HAL_UART_Transmit>
        // === Use this string to send over MQTT ===
        mqtt_publish("v1/devices/me/telemetry", json_str);
 80021ee:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80021f2:	f103 0308 	add.w	r3, r3, #8
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	4810      	ldr	r0, [pc, #64]	@ (800223c <data+0x2fc>)
 80021fa:	f000 f8c1 	bl	8002380 <mqtt_publish>
//        process_sensor_data(json_str);

        free(json_str);
 80021fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002202:	f103 0308 	add.w	r3, r3, #8
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f004 f86c 	bl	80062e4 <free>
    }

    cJSON_Delete(root);
 800220c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002210:	f103 0318 	add.w	r3, r3, #24
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f7fe fecb 	bl	8000fb0 <cJSON_Delete>
 800221a:	e000      	b.n	800221e <data+0x2de>
    if (root == NULL) return;
 800221c:	bf00      	nop
}
 800221e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002222:	46bd      	mov	sp, r7
 8002224:	bdb0      	pop	{r4, r5, r7, pc}
 8002226:	bf00      	nop
 8002228:	0800a6fc 	.word	0x0800a6fc
 800222c:	20000000 	.word	0x20000000
 8002230:	0800a700 	.word	0x0800a700
 8002234:	0800a708 	.word	0x0800a708
 8002238:	20000bfc 	.word	0x20000bfc
 800223c:	0800a714 	.word	0x0800a714

08002240 <Error_Handler>:
 */
#include "error_handler.h"
#include "sys_init.h"

void Error_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b094      	sub	sp, #80	@ 0x50
 8002244:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002246:	b672      	cpsid	i
}
 8002248:	bf00      	nop
	__disable_irq();
	char Error[80];
    sprintf(Error,"ERROR\r\n");
 800224a:	463b      	mov	r3, r7
 800224c:	4908      	ldr	r1, [pc, #32]	@ (8002270 <Error_Handler+0x30>)
 800224e:	4618      	mov	r0, r3
 8002250:	f004 ff04 	bl	800705c <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)Error,strlen(Error),1000);
 8002254:	463b      	mov	r3, r7
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f83a 	bl	80002d0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	4639      	mov	r1, r7
 8002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002266:	4803      	ldr	r0, [pc, #12]	@ (8002274 <Error_Handler+0x34>)
 8002268:	f002 ffd6 	bl	8005218 <HAL_UART_Transmit>
//  HAL_NVIC_SystemReset();
  while(1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Error_Handler+0x2c>
 8002270:	0800a7c4 	.word	0x0800a7c4
 8002274:	20000bfc 	.word	0x20000bfc

08002278 <send_at_command>:
"-----END CERTIFICATE-----\r\n";

const uint16_t certificate_size = strlen(certificate);


void send_at_command(const char *cmd, char *response, int timeout_ms) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
    memset(buffer, 0, sizeof(buffer));  // Clear receive buffer
 8002284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002288:	2100      	movs	r1, #0
 800228a:	4834      	ldr	r0, [pc, #208]	@ (800235c <send_at_command+0xe4>)
 800228c:	f005 f80e 	bl	80072ac <memset>
    memset(response, 0, 512);           // Clear response buffer
 8002290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002294:	2100      	movs	r1, #0
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f005 f808 	bl	80072ac <memset>
    memset(ATcommand, 0, sizeof(ATcommand)); // Clear AT command buffer
 800229c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a0:	2100      	movs	r1, #0
 80022a2:	482f      	ldr	r0, [pc, #188]	@ (8002360 <send_at_command+0xe8>)
 80022a4:	f005 f802 	bl	80072ac <memset>

    sprintf(ATcommand, "%s", cmd); // Safely copy the command
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	492e      	ldr	r1, [pc, #184]	@ (8002364 <send_at_command+0xec>)
 80022ac:	482c      	ldr	r0, [pc, #176]	@ (8002360 <send_at_command+0xe8>)
 80022ae:	f004 fed5 	bl	800705c <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), HAL_MAX_DELAY);
 80022b2:	482b      	ldr	r0, [pc, #172]	@ (8002360 <send_at_command+0xe8>)
 80022b4:	f7fe f80c 	bl	80002d0 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	4927      	ldr	r1, [pc, #156]	@ (8002360 <send_at_command+0xe8>)
 80022c2:	4829      	ldr	r0, [pc, #164]	@ (8002368 <send_at_command+0xf0>)
 80022c4:	f002 ffa8 	bl	8005218 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, buffer, 512, timeout_ms);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ce:	4923      	ldr	r1, [pc, #140]	@ (800235c <send_at_command+0xe4>)
 80022d0:	4825      	ldr	r0, [pc, #148]	@ (8002368 <send_at_command+0xf0>)
 80022d2:	f003 f82c 	bl	800532e <HAL_UART_Receive>

    if (strstr((char *)buffer, "OK")) {
 80022d6:	4925      	ldr	r1, [pc, #148]	@ (800236c <send_at_command+0xf4>)
 80022d8:	4820      	ldr	r0, [pc, #128]	@ (800235c <send_at_command+0xe4>)
 80022da:	f005 f814 	bl	8007306 <strstr>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01c      	beq.n	800231e <send_at_command+0xa6>
        strncpy(response, (char *)buffer, 512);
 80022e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e8:	491c      	ldr	r1, [pc, #112]	@ (800235c <send_at_command+0xe4>)
 80022ea:	68b8      	ldr	r0, [r7, #8]
 80022ec:	f004 fff8 	bl	80072e0 <strncpy>
        response[255] = '\0';
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	33ff      	adds	r3, #255	@ 0xff
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

        snprintf(command, sizeof(command), "Response: %s\r\n", response);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <send_at_command+0xf8>)
 80022fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002300:	481c      	ldr	r0, [pc, #112]	@ (8002374 <send_at_command+0xfc>)
 8002302:	f004 fe75 	bl	8006ff0 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
 8002306:	481b      	ldr	r0, [pc, #108]	@ (8002374 <send_at_command+0xfc>)
 8002308:	f7fd ffe2 	bl	80002d0 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002314:	4917      	ldr	r1, [pc, #92]	@ (8002374 <send_at_command+0xfc>)
 8002316:	4818      	ldr	r0, [pc, #96]	@ (8002378 <send_at_command+0x100>)
 8002318:	f002 ff7e 	bl	8005218 <HAL_UART_Transmit>
        snprintf(command, sizeof(command), "ResponseNO: %s\r\n", response);
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
    }

//    HAL_Delay(1000);
}
 800231c:	e01a      	b.n	8002354 <send_at_command+0xdc>
    	strncpy(response, (char *)buffer, 512);
 800231e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002322:	490e      	ldr	r1, [pc, #56]	@ (800235c <send_at_command+0xe4>)
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f004 ffdb 	bl	80072e0 <strncpy>
        response[0] = '\0';  // Clear response if "OK" not found
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
        snprintf(command, sizeof(command), "ResponseNO: %s\r\n", response);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <send_at_command+0x104>)
 8002334:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002338:	480e      	ldr	r0, [pc, #56]	@ (8002374 <send_at_command+0xfc>)
 800233a:	f004 fe59 	bl	8006ff0 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <send_at_command+0xfc>)
 8002340:	f7fd ffc6 	bl	80002d0 <strlen>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234c:	4909      	ldr	r1, [pc, #36]	@ (8002374 <send_at_command+0xfc>)
 800234e:	480a      	ldr	r0, [pc, #40]	@ (8002378 <send_at_command+0x100>)
 8002350:	f002 ff62 	bl	8005218 <HAL_UART_Transmit>
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000694 	.word	0x20000694
 8002360:	20000494 	.word	0x20000494
 8002364:	0800a7cc 	.word	0x0800a7cc
 8002368:	20000bb4 	.word	0x20000bb4
 800236c:	0800a7d0 	.word	0x0800a7d0
 8002370:	0800a7d4 	.word	0x0800a7d4
 8002374:	20000294 	.word	0x20000294
 8002378:	20000bfc 	.word	0x20000bfc
 800237c:	0800a7e4 	.word	0x0800a7e4

08002380 <mqtt_publish>:

void mqtt_publish(const char *topic, const char *data) {
 8002380:	b580      	push	{r7, lr}
 8002382:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8002386:	af00      	add	r7, sp, #0
 8002388:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800238c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8002390:	6018      	str	r0, [r3, #0]
 8002392:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8002396:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 800239a:	6019      	str	r1, [r3, #0]
    // Set topic
    char mqtt_topic[128];
    int len;
    len=strlen(topic);
 800239c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80023a0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	f7fd ff93 	bl	80002d0 <strlen>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
    snprintf(mqtt_topic, sizeof(mqtt_topic), "AT+CMQTTTOPIC=0,%d\r\n", len);
 80023b0:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80023b4:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80023b8:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <mqtt_publish+0xc4>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	f004 fe18 	bl	8006ff0 <sniprintf>
    send_at_command(mqtt_topic, response, 1000);
 80023c0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80023c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023c8:	491f      	ldr	r1, [pc, #124]	@ (8002448 <mqtt_publish+0xc8>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff54 	bl	8002278 <send_at_command>
    send_at_command(topic,response,1000);
 80023d0:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80023d4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80023d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023dc:	491a      	ldr	r1, [pc, #104]	@ (8002448 <mqtt_publish+0xc8>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	f7ff ff4a 	bl	8002278 <send_at_command>

    // Send payload
    char mqtt_payload[512];
    len=strlen(data);
 80023e4:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 80023e8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f7fd ff6f 	bl	80002d0 <strlen>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
    snprintf(mqtt_payload, sizeof(mqtt_payload), "AT+CMQTTPAYLOAD=0,%d\r\n", len);
 80023f8:	f107 000c 	add.w	r0, r7, #12
 80023fc:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <mqtt_publish+0xcc>)
 8002402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002406:	f004 fdf3 	bl	8006ff0 <sniprintf>
    send_at_command(mqtt_payload, response, 1000);
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002412:	490d      	ldr	r1, [pc, #52]	@ (8002448 <mqtt_publish+0xc8>)
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff2f 	bl	8002278 <send_at_command>
    send_at_command(data,response,1000);
 800241a:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 800241e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002422:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <mqtt_publish+0xc8>)
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f7ff ff25 	bl	8002278 <send_at_command>

    // Publish Data
    send_at_command("AT+CMQTTPUB=0,0,60,1\r\n",response,500);
 800242e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002432:	4905      	ldr	r1, [pc, #20]	@ (8002448 <mqtt_publish+0xc8>)
 8002434:	4806      	ldr	r0, [pc, #24]	@ (8002450 <mqtt_publish+0xd0>)
 8002436:	f7ff ff1f 	bl	8002278 <send_at_command>

    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);

}
 800243a:	bf00      	nop
 800243c:	f507 7724 	add.w	r7, r7, #656	@ 0x290
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800a7f8 	.word	0x0800a7f8
 8002448:	20000894 	.word	0x20000894
 800244c:	0800a810 	.word	0x0800a810
 8002450:	0800a828 	.word	0x0800a828

08002454 <mqtt_init>:
    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);

}

void mqtt_init(const char *broker, const char *accesstoken, const char *clientid) {
 8002454:	b580      	push	{r7, lr}
 8002456:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 800245a:	af02      	add	r7, sp, #8
 800245c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002460:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8002464:	6018      	str	r0, [r3, #0]
 8002466:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800246a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800246e:	6019      	str	r1, [r3, #0]
 8002470:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002474:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002478:	601a      	str	r2, [r3, #0]


    send_at_command("AT\r\n",response,500);
 800247a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800247e:	4966      	ldr	r1, [pc, #408]	@ (8002618 <mqtt_init+0x1c4>)
 8002480:	4866      	ldr	r0, [pc, #408]	@ (800261c <mqtt_init+0x1c8>)
 8002482:	f7ff fef9 	bl	8002278 <send_at_command>
    send_at_command("ATI\r\n",response,500);
 8002486:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800248a:	4963      	ldr	r1, [pc, #396]	@ (8002618 <mqtt_init+0x1c4>)
 800248c:	4864      	ldr	r0, [pc, #400]	@ (8002620 <mqtt_init+0x1cc>)
 800248e:	f7ff fef3 	bl	8002278 <send_at_command>
//    HAL_Delay(2500);// New
//    send_at_command("AT+CFUN=1\r\n",response,500);
//    send_at_command("AT+CPIN?\r\n",response,500);
    send_at_command("AT+CSQ\r\n",response,500);
 8002492:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002496:	4960      	ldr	r1, [pc, #384]	@ (8002618 <mqtt_init+0x1c4>)
 8002498:	4862      	ldr	r0, [pc, #392]	@ (8002624 <mqtt_init+0x1d0>)
 800249a:	f7ff feed 	bl	8002278 <send_at_command>
//    send_at_command("AT+CREG=2\r\n",response,500);
//    send_at_command("AT+CEREG=2\r\n",response,500);
     send_at_command("AT+COPS?\r\n",response,1000);
 800249e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024a2:	495d      	ldr	r1, [pc, #372]	@ (8002618 <mqtt_init+0x1c4>)
 80024a4:	4860      	ldr	r0, [pc, #384]	@ (8002628 <mqtt_init+0x1d4>)
 80024a6:	f7ff fee7 	bl	8002278 <send_at_command>
    send_at_command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r\n",response,500);
 80024aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024ae:	495a      	ldr	r1, [pc, #360]	@ (8002618 <mqtt_init+0x1c4>)
 80024b0:	485e      	ldr	r0, [pc, #376]	@ (800262c <mqtt_init+0x1d8>)
 80024b2:	f7ff fee1 	bl	8002278 <send_at_command>

    send_at_command("AT+CGATT=1\r\n",response,500);
 80024b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024ba:	4957      	ldr	r1, [pc, #348]	@ (8002618 <mqtt_init+0x1c4>)
 80024bc:	485c      	ldr	r0, [pc, #368]	@ (8002630 <mqtt_init+0x1dc>)
 80024be:	f7ff fedb 	bl	8002278 <send_at_command>
    send_at_command("AT+CGACT=0,1\r\n",response,500);
 80024c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024c6:	4954      	ldr	r1, [pc, #336]	@ (8002618 <mqtt_init+0x1c4>)
 80024c8:	485a      	ldr	r0, [pc, #360]	@ (8002634 <mqtt_init+0x1e0>)
 80024ca:	f7ff fed5 	bl	8002278 <send_at_command>

    send_at_command("AT+CGPADDR\r\n",response,500);
 80024ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024d2:	4951      	ldr	r1, [pc, #324]	@ (8002618 <mqtt_init+0x1c4>)
 80024d4:	4858      	ldr	r0, [pc, #352]	@ (8002638 <mqtt_init+0x1e4>)
 80024d6:	f7ff fecf 	bl	8002278 <send_at_command>
    send_at_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n",response,500);
 80024da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024de:	494e      	ldr	r1, [pc, #312]	@ (8002618 <mqtt_init+0x1c4>)
 80024e0:	4856      	ldr	r0, [pc, #344]	@ (800263c <mqtt_init+0x1e8>)
 80024e2:	f7ff fec9 	bl	8002278 <send_at_command>
    send_at_command("AT+CNTP\r\n",response,500);
 80024e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024ea:	494b      	ldr	r1, [pc, #300]	@ (8002618 <mqtt_init+0x1c4>)
 80024ec:	4854      	ldr	r0, [pc, #336]	@ (8002640 <mqtt_init+0x1ec>)
 80024ee:	f7ff fec3 	bl	8002278 <send_at_command>
    send_at_command("AT+CCLK?\r\n",response,500);
 80024f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024f6:	4948      	ldr	r1, [pc, #288]	@ (8002618 <mqtt_init+0x1c4>)
 80024f8:	4852      	ldr	r0, [pc, #328]	@ (8002644 <mqtt_init+0x1f0>)
 80024fa:	f7ff febd 	bl	8002278 <send_at_command>
     send_at_command("AT+IPADDR\r\n",response,1000);
 80024fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002502:	4945      	ldr	r1, [pc, #276]	@ (8002618 <mqtt_init+0x1c4>)
 8002504:	4850      	ldr	r0, [pc, #320]	@ (8002648 <mqtt_init+0x1f4>)
 8002506:	f7ff feb7 	bl	8002278 <send_at_command>
//    send_at_command("AT+CGATT=1\r\n",response,500);
//    send_at_command("AT+CGPADDR=1\r\n",response,500);
     send_at_command("AT+CGACT?\r\n",response,1000);
 800250a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800250e:	4942      	ldr	r1, [pc, #264]	@ (8002618 <mqtt_init+0x1c4>)
 8002510:	484e      	ldr	r0, [pc, #312]	@ (800264c <mqtt_init+0x1f8>)
 8002512:	f7ff feb1 	bl	8002278 <send_at_command>
     send_at_command("AT+CEREG?\r\n",response,1000);
 8002516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800251a:	493f      	ldr	r1, [pc, #252]	@ (8002618 <mqtt_init+0x1c4>)
 800251c:	484c      	ldr	r0, [pc, #304]	@ (8002650 <mqtt_init+0x1fc>)
 800251e:	f7ff feab 	bl	8002278 <send_at_command>
    send_at_command("AT+NETOPEN\r\n",response,500);
 8002522:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002526:	493c      	ldr	r1, [pc, #240]	@ (8002618 <mqtt_init+0x1c4>)
 8002528:	484a      	ldr	r0, [pc, #296]	@ (8002654 <mqtt_init+0x200>)
 800252a:	f7ff fea5 	bl	8002278 <send_at_command>
//    send_at_command(at_command, response, 1000);
//    if (strchr(response, '>') != NULL) {
//    	send_at_command(private_key, response, 5000);
//
//    }
    send_at_command("AT+CMQTTSTART\r\n",response,100);
 800252e:	2264      	movs	r2, #100	@ 0x64
 8002530:	4939      	ldr	r1, [pc, #228]	@ (8002618 <mqtt_init+0x1c4>)
 8002532:	4849      	ldr	r0, [pc, #292]	@ (8002658 <mqtt_init+0x204>)
 8002534:	f7ff fea0 	bl	8002278 <send_at_command>





     send_at_command("AT+CSSLCFG=\"sslversion\",0,4\r\n",response,1000);
 8002538:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800253c:	4936      	ldr	r1, [pc, #216]	@ (8002618 <mqtt_init+0x1c4>)
 800253e:	4847      	ldr	r0, [pc, #284]	@ (800265c <mqtt_init+0x208>)
 8002540:	f7ff fe9a 	bl	8002278 <send_at_command>
    send_at_command("AT+CSSLCFG=\"authmode\",0,2\r\n",response,500);
 8002544:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002548:	4933      	ldr	r1, [pc, #204]	@ (8002618 <mqtt_init+0x1c4>)
 800254a:	4845      	ldr	r0, [pc, #276]	@ (8002660 <mqtt_init+0x20c>)
 800254c:	f7ff fe94 	bl	8002278 <send_at_command>
    send_at_command("AT+CSSLCFG=\"cacert\",0,\"ca_cert.pem\"\r\n",response,500);
 8002550:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002554:	4930      	ldr	r1, [pc, #192]	@ (8002618 <mqtt_init+0x1c4>)
 8002556:	4843      	ldr	r0, [pc, #268]	@ (8002664 <mqtt_init+0x210>)
 8002558:	f7ff fe8e 	bl	8002278 <send_at_command>
     send_at_command("AT+CSSLCFG=\"clientcert\",0,\"client_cert.pem\"\r\n",response,1000);
 800255c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002560:	492d      	ldr	r1, [pc, #180]	@ (8002618 <mqtt_init+0x1c4>)
 8002562:	4841      	ldr	r0, [pc, #260]	@ (8002668 <mqtt_init+0x214>)
 8002564:	f7ff fe88 	bl	8002278 <send_at_command>
     send_at_command("AT+CSSLCFG=\"clientkey\",0,\"client_key.pem\"\r\n",response,1000);
 8002568:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800256c:	492a      	ldr	r1, [pc, #168]	@ (8002618 <mqtt_init+0x1c4>)
 800256e:	483f      	ldr	r0, [pc, #252]	@ (800266c <mqtt_init+0x218>)
 8002570:	f7ff fe82 	bl	8002278 <send_at_command>
//     send_at_command("AT+CSSLCFG=\"password\",0,\"password.pem\"\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"enableSNI\",0,1\r\n",response,500);
 8002574:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002578:	4927      	ldr	r1, [pc, #156]	@ (8002618 <mqtt_init+0x1c4>)
 800257a:	483d      	ldr	r0, [pc, #244]	@ (8002670 <mqtt_init+0x21c>)
 800257c:	f7ff fe7c 	bl	8002278 <send_at_command>
//    send_at_command("AT+CSSLCFG=0,4,2,0,300,\"cacert.pem\",\"clientcert.pem\",\"clientkey.pem\","",1\r\n",response,1000);

    //Set ID
    char mqtt_id[512];
//    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMQTTACCQ=0,\"%s\",1\r\n",accesstoken);
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMQTTACCQ=0,\"%s\",1\r\n",clientid);
 8002580:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002584:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8002588:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a39      	ldr	r2, [pc, #228]	@ (8002674 <mqtt_init+0x220>)
 8002590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002594:	f004 fd2c 	bl	8006ff0 <sniprintf>
    send_at_command(mqtt_id, response, 2000);
 8002598:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 800259c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80025a0:	491d      	ldr	r1, [pc, #116]	@ (8002618 <mqtt_init+0x1c4>)
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fe68 	bl	8002278 <send_at_command>

//    send_at_command("AT+CMQTTCFG=\"checkUTF8\",0,1\r\n",response,1000);
//    send_at_command("AT+CMQTTCFG=\"optimeout\",0,60\r\n",response,1000);
     send_at_command("AT+CMQTTCONNECT?\r\n",response,1000);
 80025a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025ac:	491a      	ldr	r1, [pc, #104]	@ (8002618 <mqtt_init+0x1c4>)
 80025ae:	4832      	ldr	r0, [pc, #200]	@ (8002678 <mqtt_init+0x224>)
 80025b0:	f7ff fe62 	bl	8002278 <send_at_command>
//     send_at_command("AT+CCERTLIST", response, 5000);
    // send_at_command("AT+CCERTDELE=\"ca_cert.pem\"", response, 1000);

    for(int i=0;i<3;i++){
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 80025ba:	e023      	b.n	8002604 <mqtt_init+0x1b0>
    char mqtt_conn[512];
    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",60,1,\"%s\"\r\n",broker, accesstoken);
 80025bc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80025c0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80025c4:	f107 0014 	add.w	r0, r7, #20
 80025c8:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 80025cc:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	9200      	str	r2, [sp, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a29      	ldr	r2, [pc, #164]	@ (800267c <mqtt_init+0x228>)
 80025d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025dc:	f004 fd08 	bl	8006ff0 <sniprintf>

//    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",300,1,\"%s,\"%s\"\r\n",broker, accesstoken, clientid);
    printf(mqtt_conn);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 fc93 	bl	8006f10 <iprintf>
    send_at_command(mqtt_conn, response, 10000);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80025f2:	4909      	ldr	r1, [pc, #36]	@ (8002618 <mqtt_init+0x1c4>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe3f 	bl	8002278 <send_at_command>
    for(int i=0;i<3;i++){
 80025fa:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80025fe:	3301      	adds	r3, #1
 8002600:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8002604:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8002608:	2b02      	cmp	r3, #2
 800260a:	ddd7      	ble.n	80025bc <mqtt_init+0x168>
    }
//    HAL_Delay(1500);
    // ESP_LOGI("MQTT", "MQTT connection response: %s", response);

}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000894 	.word	0x20000894
 800261c:	0800a884 	.word	0x0800a884
 8002620:	0800a88c 	.word	0x0800a88c
 8002624:	0800a894 	.word	0x0800a894
 8002628:	0800a8a0 	.word	0x0800a8a0
 800262c:	0800a8ac 	.word	0x0800a8ac
 8002630:	0800a8d4 	.word	0x0800a8d4
 8002634:	0800a8e4 	.word	0x0800a8e4
 8002638:	0800a8f4 	.word	0x0800a8f4
 800263c:	0800a904 	.word	0x0800a904
 8002640:	0800a924 	.word	0x0800a924
 8002644:	0800a930 	.word	0x0800a930
 8002648:	0800a93c 	.word	0x0800a93c
 800264c:	0800a948 	.word	0x0800a948
 8002650:	0800a954 	.word	0x0800a954
 8002654:	0800a960 	.word	0x0800a960
 8002658:	0800a970 	.word	0x0800a970
 800265c:	0800a980 	.word	0x0800a980
 8002660:	0800a9a0 	.word	0x0800a9a0
 8002664:	0800a9bc 	.word	0x0800a9bc
 8002668:	0800a9e4 	.word	0x0800a9e4
 800266c:	0800aa14 	.word	0x0800aa14
 8002670:	0800aa40 	.word	0x0800aa40
 8002674:	0800aa60 	.word	0x0800aa60
 8002678:	0800aa78 	.word	0x0800aa78
 800267c:	0800aa8c 	.word	0x0800aa8c

08002680 <gsm_init>:


void gsm_init(){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
//    const char *accesstoken = "aCWxFWJedGshl1DowCT8";
//    const char *clientid = "KP";
//    const char *broker = "61f18205d9d64ad1b29f6e99d0679efc.s1.eu.hivemq.cloud:8883";
//    const char *accesstoken = "demo1";
//    const char *clientid = "Demo1234";
    const char *broker = "a38rhx6jdboq9n-ats.iot.ap-south-1.amazonaws.com:8883";
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <gsm_init+0x24>)
 8002688:	60fb      	str	r3, [r7, #12]
    const char *accesstoken = "Device_001";
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <gsm_init+0x28>)
 800268c:	60bb      	str	r3, [r7, #8]
    const char *clientid = "Device_001";
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <gsm_init+0x28>)
 8002690:	607b      	str	r3, [r7, #4]

    mqtt_init(broker, accesstoken, clientid);
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff fedc 	bl	8002454 <mqtt_init>
//	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
//  mqtt_publish("v1/devices/me/telemetry", "{\"temperature\": 51, \"humidity\": 03, \"flowRate\": 4, \"energy\": 91, \"volume\": 563, \"totalVolume\": 64}");
//    mqtt_publish("v1/devices/me/telemetry", msg);

    // mqtt_subscribe("v1/devices/me/telemetry");
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	0800aab8 	.word	0x0800aab8
 80026a8:	0800aaf0 	.word	0x0800aaf0

080026ac <main>:
char response[512];



int main(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

  HAL_Init();
 80026b0:	f000 ff44 	bl	800353c <HAL_Init>
  SystemClock_Config();
 80026b4:	f000 fc9c 	bl	8002ff0 <SystemClock_Config>
  MX_GPIO_Init();
 80026b8:	f000 fdb0 	bl	800321c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80026bc:	f000 fd30 	bl	8003120 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026c0:	f000 fd58 	bl	8003174 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80026c4:	f000 fd80 	bl	80031c8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80026c8:	f000 fd04 	bl	80030d4 <MX_RTC_Init>

  uart_init();
 80026cc:	f000 fed0 	bl	8003470 <uart_init>
  sprintf(command,"Start\r\n");
 80026d0:	4922      	ldr	r1, [pc, #136]	@ (800275c <main+0xb0>)
 80026d2:	4823      	ldr	r0, [pc, #140]	@ (8002760 <main+0xb4>)
 80026d4:	f004 fcc2 	bl	800705c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80026d8:	4821      	ldr	r0, [pc, #132]	@ (8002760 <main+0xb4>)
 80026da:	f7fd fdf9 	bl	80002d0 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e6:	491e      	ldr	r1, [pc, #120]	@ (8002760 <main+0xb4>)
 80026e8:	481e      	ldr	r0, [pc, #120]	@ (8002764 <main+0xb8>)
 80026ea:	f002 fd95 	bl	8005218 <HAL_UART_Transmit>
  rtc_int();
 80026ee:	f000 f9c9 	bl	8002a84 <rtc_int>
  sprintf(command,"RTC OK\r\n");
 80026f2:	491d      	ldr	r1, [pc, #116]	@ (8002768 <main+0xbc>)
 80026f4:	481a      	ldr	r0, [pc, #104]	@ (8002760 <main+0xb4>)
 80026f6:	f004 fcb1 	bl	800705c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80026fa:	4819      	ldr	r0, [pc, #100]	@ (8002760 <main+0xb4>)
 80026fc:	f7fd fde8 	bl	80002d0 <strlen>
 8002700:	4603      	mov	r3, r0
 8002702:	b29a      	uxth	r2, r3
 8002704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002708:	4915      	ldr	r1, [pc, #84]	@ (8002760 <main+0xb4>)
 800270a:	4816      	ldr	r0, [pc, #88]	@ (8002764 <main+0xb8>)
 800270c:	f002 fd84 	bl	8005218 <HAL_UART_Transmit>

  gsm_init();
 8002710:	f7ff ffb6 	bl	8002680 <gsm_init>
//  gsm_set_clock();
  sprintf(command,"GSM OK\r\n");
 8002714:	4915      	ldr	r1, [pc, #84]	@ (800276c <main+0xc0>)
 8002716:	4812      	ldr	r0, [pc, #72]	@ (8002760 <main+0xb4>)
 8002718:	f004 fca0 	bl	800705c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 800271c:	4810      	ldr	r0, [pc, #64]	@ (8002760 <main+0xb4>)
 800271e:	f7fd fdd7 	bl	80002d0 <strlen>
 8002722:	4603      	mov	r3, r0
 8002724:	b29a      	uxth	r2, r3
 8002726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800272a:	490d      	ldr	r1, [pc, #52]	@ (8002760 <main+0xb4>)
 800272c:	480d      	ldr	r0, [pc, #52]	@ (8002764 <main+0xb8>)
 800272e:	f002 fd73 	bl	8005218 <HAL_UART_Transmit>
//while(1){
  data();
 8002732:	f7ff fc05 	bl	8001f40 <data>
  sprintf(command,"JSON OK\r\n");
 8002736:	490e      	ldr	r1, [pc, #56]	@ (8002770 <main+0xc4>)
 8002738:	4809      	ldr	r0, [pc, #36]	@ (8002760 <main+0xb4>)
 800273a:	f004 fc8f 	bl	800705c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 800273e:	4808      	ldr	r0, [pc, #32]	@ (8002760 <main+0xb4>)
 8002740:	f7fd fdc6 	bl	80002d0 <strlen>
 8002744:	4603      	mov	r3, r0
 8002746:	b29a      	uxth	r2, r3
 8002748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800274c:	4904      	ldr	r1, [pc, #16]	@ (8002760 <main+0xb4>)
 800274e:	4805      	ldr	r0, [pc, #20]	@ (8002764 <main+0xb8>)
 8002750:	f002 fd62 	bl	8005218 <HAL_UART_Transmit>
 8002754:	2300      	movs	r3, #0
//  send_sms(phone, msg);
//  sprintf(command,"sms ok\r\n");
//  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);


}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	0800ab0c 	.word	0x0800ab0c
 8002760:	20000294 	.word	0x20000294
 8002764:	20000bfc 	.word	0x20000bfc
 8002768:	0800ab14 	.word	0x0800ab14
 800276c:	0800ab20 	.word	0x0800ab20
 8002770:	0800ab2c 	.word	0x0800ab2c

08002774 <IEEE754tofloat>:
#include "modbus_crc.h"
uint8_t RxData[256];
uint8_t TxData[8];
uint16_t Data[10];

float  IEEE754tofloat(uint32_t value) {
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	union {
	        float f;
	        uint32_t bytes;
	    } u;
	    u.bytes = value;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60fb      	str	r3, [r7, #12]
    return u.f;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	ee07 3a90 	vmov	s15, r3
}
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <sendData>:



void sendData (uint8_t *data)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027a2:	480a      	ldr	r0, [pc, #40]	@ (80027cc <sendData+0x38>)
 80027a4:	f001 fa74 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, data, 8, HAL_MAX_DELAY);
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	2208      	movs	r2, #8
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <sendData+0x3c>)
 80027b2:	f002 fd31 	bl	8005218 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <sendData+0x38>)
 80027be:	f001 fa67 	bl	8003c90 <HAL_GPIO_WritePin>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40020000 	.word	0x40020000
 80027d0:	20000c44 	.word	0x20000c44

080027d4 <modbus_float>:


float modbus_float(uint8_t SlaveID, uint8_t FunctionCode, uint16_t Address, uint16_t Datalength){
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4604      	mov	r4, r0
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	4603      	mov	r3, r0
 80027e8:	71bb      	strb	r3, [r7, #6]
 80027ea:	460b      	mov	r3, r1
 80027ec:	80bb      	strh	r3, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	807b      	strh	r3, [r7, #2]

	float value = 0;
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
	TxData[0] = SlaveID& 0xFF;  // slave address
 80027f8:	4a3d      	ldr	r2, [pc, #244]	@ (80028f0 <modbus_float+0x11c>)
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	7013      	strb	r3, [r2, #0]
	TxData[1] = FunctionCode& 0xFF; // Function Code
 80027fe:	4a3c      	ldr	r2, [pc, #240]	@ (80028f0 <modbus_float+0x11c>)
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	7053      	strb	r3, [r2, #1]
	//Address
	TxData[2] = (Address >> 8) & 0xFF;  // High byte
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b38      	ldr	r3, [pc, #224]	@ (80028f0 <modbus_float+0x11c>)
 800280e:	709a      	strb	r2, [r3, #2]
	TxData[3] = Address & 0xFF;         // Low byte
 8002810:	88bb      	ldrh	r3, [r7, #4]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b36      	ldr	r3, [pc, #216]	@ (80028f0 <modbus_float+0x11c>)
 8002816:	70da      	strb	r2, [r3, #3]
	//Datalength
	TxData[4] = (Datalength >> 8) & 0xFF;  // High byte
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b29b      	uxth	r3, r3
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b33      	ldr	r3, [pc, #204]	@ (80028f0 <modbus_float+0x11c>)
 8002822:	711a      	strb	r2, [r3, #4]
	TxData[5] = Datalength & 0xFF;         // Low byte
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <modbus_float+0x11c>)
 800282a:	715a      	strb	r2, [r3, #5]

	uint16_t crc = crc16(TxData, 6);
 800282c:	2106      	movs	r1, #6
 800282e:	4830      	ldr	r0, [pc, #192]	@ (80028f0 <modbus_float+0x11c>)
 8002830:	f000 f8f0 	bl	8002a14 <crc16>
 8002834:	4603      	mov	r3, r0
 8002836:	827b      	strh	r3, [r7, #18]
	TxData[6] = crc&0xFF;   // CRC LOW
 8002838:	8a7b      	ldrh	r3, [r7, #18]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b2c      	ldr	r3, [pc, #176]	@ (80028f0 <modbus_float+0x11c>)
 800283e:	719a      	strb	r2, [r3, #6]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <modbus_float+0x11c>)
 800284a:	71da      	strb	r2, [r3, #7]

	sendData(TxData);
 800284c:	4828      	ldr	r0, [pc, #160]	@ (80028f0 <modbus_float+0x11c>)
 800284e:	f7ff ffa1 	bl	8002794 <sendData>



    uint8_t response_length = 5 + 2 * Datalength;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3305      	adds	r3, #5
 800285c:	747b      	strb	r3, [r7, #17]
    if (HAL_UART_Receive(&huart3, RxData, response_length, 100) == HAL_OK) {
 800285e:	7c7b      	ldrb	r3, [r7, #17]
 8002860:	b29a      	uxth	r2, r3
 8002862:	2364      	movs	r3, #100	@ 0x64
 8002864:	4923      	ldr	r1, [pc, #140]	@ (80028f4 <modbus_float+0x120>)
 8002866:	4824      	ldr	r0, [pc, #144]	@ (80028f8 <modbus_float+0x124>)
 8002868:	f002 fd61 	bl	800532e <HAL_UART_Receive>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d134      	bne.n	80028dc <modbus_float+0x108>
        // Check CRC
        uint16_t resp_crc = crc16(RxData, response_length - 2);
 8002872:	7c7b      	ldrb	r3, [r7, #17]
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b02      	subs	r3, #2
 8002878:	b29b      	uxth	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	481d      	ldr	r0, [pc, #116]	@ (80028f4 <modbus_float+0x120>)
 800287e:	f000 f8c9 	bl	8002a14 <crc16>
 8002882:	4603      	mov	r3, r0
 8002884:	81fb      	strh	r3, [r7, #14]
        uint16_t received_crc = (RxData[response_length - 1] << 8) | RxData[response_length - 2];
 8002886:	7c7b      	ldrb	r3, [r7, #17]
 8002888:	3b01      	subs	r3, #1
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <modbus_float+0x120>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	b21b      	sxth	r3, r3
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	b21a      	sxth	r2, r3
 8002894:	7c7b      	ldrb	r3, [r7, #17]
 8002896:	3b02      	subs	r3, #2
 8002898:	4916      	ldr	r1, [pc, #88]	@ (80028f4 <modbus_float+0x120>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	b21b      	sxth	r3, r3
 800289e:	4313      	orrs	r3, r2
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	81bb      	strh	r3, [r7, #12]
        if (resp_crc == received_crc) {
 80028a4:	89fa      	ldrh	r2, [r7, #14]
 80028a6:	89bb      	ldrh	r3, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d115      	bne.n	80028d8 <modbus_float+0x104>
            // Extract data
            uint32_t raw = (RxData[3] << 24) | (RxData[4] << 16) | (RxData[5] << 8) | RxData[6];
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <modbus_float+0x120>)
 80028ae:	78db      	ldrb	r3, [r3, #3]
 80028b0:	061a      	lsls	r2, r3, #24
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <modbus_float+0x120>)
 80028b4:	791b      	ldrb	r3, [r3, #4]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <modbus_float+0x120>)
 80028bc:	795b      	ldrb	r3, [r3, #5]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	4313      	orrs	r3, r2
 80028c2:	4a0c      	ldr	r2, [pc, #48]	@ (80028f4 <modbus_float+0x120>)
 80028c4:	7992      	ldrb	r2, [r2, #6]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60bb      	str	r3, [r7, #8]

            value = IEEE754tofloat(raw & 0xFFFFFFFF);
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	f7ff ff52 	bl	8002774 <IEEE754tofloat>
 80028d0:	ed87 0a05 	vstr	s0, [r7, #20]
    } else {
        // Timeout or communication error
        return -2;
    }

    return value;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	e003      	b.n	80028e0 <modbus_float+0x10c>
            return -1;
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <modbus_float+0x128>)
 80028da:	e001      	b.n	80028e0 <modbus_float+0x10c>
        return -2;
 80028dc:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000

}
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb0 0a67 	vmov.f32	s0, s15
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000b94 	.word	0x20000b94
 80028f4:	20000a94 	.word	0x20000a94
 80028f8:	20000c44 	.word	0x20000c44
 80028fc:	bf800000 	.word	0xbf800000

08002900 <modbus_int>:

int modbus_int(uint8_t SlaveID, uint8_t FunctionCode, uint16_t Address, uint16_t Datalength) {
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	4603      	mov	r3, r0
 8002914:	71bb      	strb	r3, [r7, #6]
 8002916:	460b      	mov	r3, r1
 8002918:	80bb      	strh	r3, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	807b      	strh	r3, [r7, #2]

    int value = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]

    // Construct Modbus RTU request
    TxData[0] = SlaveID;
 8002922:	4a39      	ldr	r2, [pc, #228]	@ (8002a08 <modbus_int+0x108>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	7013      	strb	r3, [r2, #0]
    TxData[1] = FunctionCode;
 8002928:	4a37      	ldr	r2, [pc, #220]	@ (8002a08 <modbus_int+0x108>)
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	7053      	strb	r3, [r2, #1]
    TxData[2] = (Address >> 8) & 0xFF;     // Address high byte
 800292e:	88bb      	ldrh	r3, [r7, #4]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b29b      	uxth	r3, r3
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <modbus_int+0x108>)
 8002938:	709a      	strb	r2, [r3, #2]
    TxData[3] = Address & 0xFF;            // Address low byte
 800293a:	88bb      	ldrh	r3, [r7, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <modbus_int+0x108>)
 8002940:	70da      	strb	r2, [r3, #3]
    TxData[4] = (Datalength >> 8) & 0xFF;  // Quantity high byte
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	b29b      	uxth	r3, r3
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <modbus_int+0x108>)
 800294c:	711a      	strb	r2, [r3, #4]
    TxData[5] = Datalength & 0xFF;         // Quantity low byte
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <modbus_int+0x108>)
 8002954:	715a      	strb	r2, [r3, #5]


    // Calculate CRC
    uint16_t crc = crc16(TxData, 6);
 8002956:	2106      	movs	r1, #6
 8002958:	482b      	ldr	r0, [pc, #172]	@ (8002a08 <modbus_int+0x108>)
 800295a:	f000 f85b 	bl	8002a14 <crc16>
 800295e:	4603      	mov	r3, r0
 8002960:	827b      	strh	r3, [r7, #18]
    TxData[6] = crc & 0xFF;          // CRC low byte
 8002962:	8a7b      	ldrh	r3, [r7, #18]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <modbus_int+0x108>)
 8002968:	719a      	strb	r2, [r3, #6]
    TxData[7] = (crc >> 8) & 0xFF;   // CRC high byte
 800296a:	8a7b      	ldrh	r3, [r7, #18]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <modbus_int+0x108>)
 8002974:	71da      	strb	r2, [r3, #7]

    // Send the Modbus frame
    sendData(TxData);
 8002976:	4824      	ldr	r0, [pc, #144]	@ (8002a08 <modbus_int+0x108>)
 8002978:	f7ff ff0c 	bl	8002794 <sendData>
    // Wait and receive the response using polling
    // Expected response size: 5 (header) + 2 * Datalength + 2 (CRC)
    uint8_t response_length = 5 + 2 * Datalength ;
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3305      	adds	r3, #5
 8002986:	747b      	strb	r3, [r7, #17]
    if (HAL_UART_Receive(&huart3, RxData, response_length, 100) == HAL_OK) {
 8002988:	7c7b      	ldrb	r3, [r7, #17]
 800298a:	b29a      	uxth	r2, r3
 800298c:	2364      	movs	r3, #100	@ 0x64
 800298e:	491f      	ldr	r1, [pc, #124]	@ (8002a0c <modbus_int+0x10c>)
 8002990:	481f      	ldr	r0, [pc, #124]	@ (8002a10 <modbus_int+0x110>)
 8002992:	f002 fccc 	bl	800532e <HAL_UART_Receive>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d12e      	bne.n	80029fa <modbus_int+0xfa>
        // Check CRC
        uint16_t resp_crc = crc16(RxData, response_length - 2);
 800299c:	7c7b      	ldrb	r3, [r7, #17]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b02      	subs	r3, #2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	4819      	ldr	r0, [pc, #100]	@ (8002a0c <modbus_int+0x10c>)
 80029a8:	f000 f834 	bl	8002a14 <crc16>
 80029ac:	4603      	mov	r3, r0
 80029ae:	81fb      	strh	r3, [r7, #14]
        uint16_t received_crc = (RxData[response_length - 1] << 8) | RxData[response_length - 2];
 80029b0:	7c7b      	ldrb	r3, [r7, #17]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <modbus_int+0x10c>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	b21a      	sxth	r2, r3
 80029be:	7c7b      	ldrb	r3, [r7, #17]
 80029c0:	3b02      	subs	r3, #2
 80029c2:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <modbus_int+0x10c>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	b21b      	sxth	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	81bb      	strh	r3, [r7, #12]
        if (resp_crc == received_crc) {
 80029ce:	89fa      	ldrh	r2, [r7, #14]
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10e      	bne.n	80029f4 <modbus_int+0xf4>
            // Extract data
            uint16_t raw = (RxData[3] << 8) | RxData[4];
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <modbus_int+0x10c>)
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <modbus_int+0x10c>)
 80029e2:	791b      	ldrb	r3, [r3, #4]
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	817b      	strh	r3, [r7, #10]
            value = (int)raw;
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	617b      	str	r3, [r7, #20]
    } else {
        // Timeout or communication error
        return -2;
    }

    return value;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	e004      	b.n	80029fe <modbus_int+0xfe>
            return -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	e001      	b.n	80029fe <modbus_int+0xfe>
        return -2;
 80029fa:	f06f 0301 	mvn.w	r3, #1
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000b94 	.word	0x20000b94
 8002a0c:	20000a94 	.word	0x20000a94
 8002a10:	20000c44 	.word	0x20000c44

08002a14 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8002a20:	23ff      	movs	r3, #255	@ 0xff
 8002a22:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8002a24:	23ff      	movs	r3, #255	@ 0xff
 8002a26:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8002a28:	e013      	b.n	8002a52 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	7bbb      	ldrb	r3, [r7, #14]
 8002a34:	4053      	eors	r3, r2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002a3a:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <crc16+0x68>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	4053      	eors	r3, r2
 8002a46:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <crc16+0x6c>)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	807a      	strh	r2, [r7, #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e6      	bne.n	8002a2a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	b29b      	uxth	r3, r3
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	0800ac4c 	.word	0x0800ac4c
 8002a80:	0800ad4c 	.word	0x0800ad4c

08002a84 <rtc_int>:

RTC_DateTypeDef Date;
RTC_TimeTypeDef Time;

void rtc_int(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af02      	add	r7, sp, #8

	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	491f      	ldr	r1, [pc, #124]	@ (8002b0c <rtc_int+0x88>)
 8002a8e:	4820      	ldr	r0, [pc, #128]	@ (8002b10 <rtc_int+0x8c>)
 8002a90:	f002 fa25 	bl	8004ede <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002a94:	2200      	movs	r2, #0
 8002a96:	491f      	ldr	r1, [pc, #124]	@ (8002b14 <rtc_int+0x90>)
 8002a98:	481d      	ldr	r0, [pc, #116]	@ (8002b10 <rtc_int+0x8c>)
 8002a9a:	f002 fa7e 	bl	8004f9a <HAL_RTC_GetDate>


	  sprintf(command,"%02d-%02d-%2d, ", Date.Date, Date.Month, 2000+ Date.Year);
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b14 <rtc_int+0x90>)
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <rtc_int+0x90>)
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <rtc_int+0x90>)
 8002aac:	78db      	ldrb	r3, [r3, #3]
 8002aae:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4918      	ldr	r1, [pc, #96]	@ (8002b18 <rtc_int+0x94>)
 8002ab8:	4818      	ldr	r0, [pc, #96]	@ (8002b1c <rtc_int+0x98>)
 8002aba:	f004 facf 	bl	800705c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 8002abe:	4817      	ldr	r0, [pc, #92]	@ (8002b1c <rtc_int+0x98>)
 8002ac0:	f7fd fc06 	bl	80002d0 <strlen>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002acc:	4913      	ldr	r1, [pc, #76]	@ (8002b1c <rtc_int+0x98>)
 8002ace:	4814      	ldr	r0, [pc, #80]	@ (8002b20 <rtc_int+0x9c>)
 8002ad0:	f002 fba2 	bl	8005218 <HAL_UART_Transmit>

	  sprintf(command,"%02d:%02d:%02d\r\n", Time.Hours, Time.Minutes, Time.Seconds);
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <rtc_int+0x88>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <rtc_int+0x88>)
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <rtc_int+0x88>)
 8002ae2:	789b      	ldrb	r3, [r3, #2]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <rtc_int+0xa0>)
 8002aea:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <rtc_int+0x98>)
 8002aec:	f004 fab6 	bl	800705c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 8002af0:	480a      	ldr	r0, [pc, #40]	@ (8002b1c <rtc_int+0x98>)
 8002af2:	f7fd fbed 	bl	80002d0 <strlen>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	4907      	ldr	r1, [pc, #28]	@ (8002b1c <rtc_int+0x98>)
 8002b00:	4807      	ldr	r0, [pc, #28]	@ (8002b20 <rtc_int+0x9c>)
 8002b02:	f002 fb89 	bl	8005218 <HAL_UART_Transmit>
//	  sprintf(rtc,"Epoch: %lu\r\n", Rtc);
//	  HAL_UART_Transmit(&huart2,(uint8_t *)rtc,strlen(rtc),1000);
//	  HAL_Delay(500);


}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000ba0 	.word	0x20000ba0
 8002b10:	20000c8c 	.word	0x20000c8c
 8002b14:	20000b9c 	.word	0x20000b9c
 8002b18:	0800ab38 	.word	0x0800ab38
 8002b1c:	20000294 	.word	0x20000294
 8002b20:	20000bfc 	.word	0x20000bfc
 8002b24:	0800ab48 	.word	0x0800ab48

08002b28 <is_leap_year>:


// Helper function to determine leap year
int is_leap_year(int year) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <is_leap_year+0x2c>
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <is_leap_year+0x5c>)
 8002b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b42:	1159      	asrs	r1, r3, #5
 8002b44:	17d3      	asrs	r3, r2, #31
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	2164      	movs	r1, #100	@ 0x64
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <is_leap_year+0x48>
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <is_leap_year+0x5c>)
 8002b58:	fb83 1302 	smull	r1, r3, r3, r2
 8002b5c:	11d9      	asrs	r1, r3, #7
 8002b5e:	17d3      	asrs	r3, r2, #31
 8002b60:	1acb      	subs	r3, r1, r3
 8002b62:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <is_leap_year+0x4c>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <is_leap_year+0x4e>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	51eb851f 	.word	0x51eb851f

08002b88 <RTC_Get_Epoch>:

// Convert RTC time to Epoch
uint64_t RTC_Get_Epoch(void) {
 8002b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0a3      	sub	sp, #140	@ 0x8c
 8002b8e:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b94:	2200      	movs	r2, #0
 8002b96:	4619      	mov	r1, r3
 8002b98:	485f      	ldr	r0, [pc, #380]	@ (8002d18 <RTC_Get_Epoch+0x190>)
 8002b9a:	f002 f9a0 	bl	8004ede <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // MUST be called after GetTime
 8002b9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	485c      	ldr	r0, [pc, #368]	@ (8002d18 <RTC_Get_Epoch+0x190>)
 8002ba8:	f002 f9f7 	bl	8004f9a <HAL_RTC_GetDate>

    struct tm t;
    t.tm_year = 2000 + sDate.Year - 1900;  // RTC returns year offset from 2000
 8002bac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002bb0:	3364      	adds	r3, #100	@ 0x64
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    t.tm_mon  = sDate.Month - 1;           // tm_mon: 0 = Jan
 8002bb4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
    t.tm_mday = sDate.Date;
 8002bbc:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
    t.tm_hour = sTime.Hours;
 8002bc2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t.tm_min  = sTime.Minutes;
 8002bc8:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
    t.tm_sec  = sTime.Seconds;
 8002bce:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    t.tm_isdst = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	657b      	str	r3, [r7, #84]	@ 0x54

    // Calculate Epoch manually
    const int days_in_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <RTC_Get_Epoch+0x194>)
 8002bda:	1d3e      	adds	r6, r7, #4
 8002bdc:	469c      	mov	ip, r3
 8002bde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002be2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002be4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002be8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002bea:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002bee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    uint32_t days = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (int year = 1970; year < t.tm_year + 1900; year++) {
 8002bf8:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8002bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c00:	e016      	b.n	8002c30 <RTC_Get_Epoch+0xa8>
        days += is_leap_year(year) ? 366 : 365;
 8002c02:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002c06:	f7ff ff8f 	bl	8002b28 <is_leap_year>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <RTC_Get_Epoch+0x8e>
 8002c10:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002c14:	e001      	b.n	8002c1a <RTC_Get_Epoch+0x92>
 8002c16:	f240 136d 	movw	r3, #365	@ 0x16d
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c20:	4413      	add	r3, r2
 8002c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (int year = 1970; year < t.tm_year + 1900; year++) {
 8002c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c32:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8002c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dde1      	ble.n	8002c02 <RTC_Get_Epoch+0x7a>
    }

    for (int month = 0; month < t.tm_mon; month++) {
 8002c3e:	2300      	movs	r3, #0
 8002c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c42:	e020      	b.n	8002c86 <RTC_Get_Epoch+0xfe>
        if (month == 1 && is_leap_year(t.tm_year + 1900)) {
 8002c44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10e      	bne.n	8002c68 <RTC_Get_Epoch+0xe0>
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c4c:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff69 	bl	8002b28 <is_leap_year>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <RTC_Get_Epoch+0xe0>
            days += 29;
 8002c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c60:	331d      	adds	r3, #29
 8002c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c66:	e00b      	b.n	8002c80 <RTC_Get_Epoch+0xf8>
        } else {
            days += days_in_month[month];
 8002c68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3388      	adds	r3, #136	@ 0x88
 8002c6e:	443b      	add	r3, r7
 8002c70:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    for (int month = 0; month < t.tm_mon; month++) {
 8002c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c82:	3301      	adds	r3, #1
 8002c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c88:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	dbda      	blt.n	8002c44 <RTC_Get_Epoch+0xbc>
        }
    }

    days += t.tm_mday - 1;
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c90:	461a      	mov	r2, r3
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c96:	4413      	add	r3, r2
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

//    return (days * 86400) + (t.tm_hour * 3600) + (t.tm_min * 60) + t.tm_sec;
    time_t epoch_sec = mktime(&t);  // Converts struct tm to epoch seconds
 8002c9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fc1a 	bl	80074dc <mktime>
 8002ca8:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
    return ((uint64_t)epoch_sec * 1000UL);  // Convert to milliseconds
 8002cac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	f04f 0a00 	mov.w	sl, #0
 8002cb8:	f04f 0b00 	mov.w	fp, #0
 8002cbc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002cc0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002cc4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002cc8:	4652      	mov	r2, sl
 8002cca:	465b      	mov	r3, fp
 8002ccc:	1a14      	subs	r4, r2, r0
 8002cce:	eb63 0501 	sbc.w	r5, r3, r1
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	00ab      	lsls	r3, r5, #2
 8002cdc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002ce0:	00a2      	lsls	r2, r4, #2
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	eb14 0800 	adds.w	r8, r4, r0
 8002cea:	eb45 0901 	adc.w	r9, r5, r1
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d02:	4690      	mov	r8, r2
 8002d04:	4699      	mov	r9, r3
 8002d06:	4642      	mov	r2, r8
 8002d08:	464b      	mov	r3, r9
}
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	378c      	adds	r7, #140	@ 0x8c
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	20000c8c 	.word	0x20000c8c
 8002d1c:	0800ab5c 	.word	0x0800ab5c

08002d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d36:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	4a08      	ldr	r2, [pc, #32]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b09a      	sub	sp, #104	@ 0x68
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	225c      	movs	r2, #92	@ 0x5c
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 fa93 	bl	80072ac <memset>
  if(hrtc->Instance==RTC)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <HAL_RTC_MspInit+0x4c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d90:	2320      	movs	r3, #32
 8002d92:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f8aa 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002daa:	f7ff fa49 	bl	8002240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dae:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_RTC_MspInit+0x50>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002db4:	bf00      	nop
 8002db6:	3768      	adds	r7, #104	@ 0x68
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40002800 	.word	0x40002800
 8002dc0:	42470e3c 	.word	0x42470e3c

08002dc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5f      	ldr	r2, [pc, #380]	@ (8002f60 <HAL_UART_MspInit+0x19c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12d      	bne.n	8002e42 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	4b5e      	ldr	r3, [pc, #376]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a5d      	ldr	r2, [pc, #372]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002df0:	f043 0310 	orr.w	r3, r3, #16
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	4b57      	ldr	r3, [pc, #348]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a56      	ldr	r2, [pc, #344]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e30:	2307      	movs	r3, #7
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	484b      	ldr	r0, [pc, #300]	@ (8002f68 <HAL_UART_MspInit+0x1a4>)
 8002e3c:	f000 fd94 	bl	8003968 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e40:	e089      	b.n	8002f56 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a49      	ldr	r2, [pc, #292]	@ (8002f6c <HAL_UART_MspInit+0x1a8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d12c      	bne.n	8002ea6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	4b44      	ldr	r3, [pc, #272]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a43      	ldr	r2, [pc, #268]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	4a3c      	ldr	r2, [pc, #240]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e78:	4b3a      	ldr	r3, [pc, #232]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e84:	230c      	movs	r3, #12
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e94:	2307      	movs	r3, #7
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4832      	ldr	r0, [pc, #200]	@ (8002f68 <HAL_UART_MspInit+0x1a4>)
 8002ea0:	f000 fd62 	bl	8003968 <HAL_GPIO_Init>
}
 8002ea4:	e057      	b.n	8002f56 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	@ (8002f70 <HAL_UART_MspInit+0x1ac>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d152      	bne.n	8002f56 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec0:	4b28      	ldr	r3, [pc, #160]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	4a23      	ldr	r2, [pc, #140]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_UART_MspInit+0x1a0>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f04:	2320      	movs	r3, #32
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f14:	2307      	movs	r3, #7
 8002f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4815      	ldr	r0, [pc, #84]	@ (8002f74 <HAL_UART_MspInit+0x1b0>)
 8002f20:	f000 fd22 	bl	8003968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f32:	2303      	movs	r3, #3
 8002f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f36:	2307      	movs	r3, #7
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <HAL_UART_MspInit+0x1b4>)
 8002f42:	f000 fd11 	bl	8003968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2027      	movs	r0, #39	@ 0x27
 8002f4c:	f000 fc43 	bl	80037d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f50:	2027      	movs	r0, #39	@ 0x27
 8002f52:	f000 fc5c 	bl	800380e <HAL_NVIC_EnableIRQ>
}
 8002f56:	bf00      	nop
 8002f58:	3738      	adds	r7, #56	@ 0x38
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020400 	.word	0x40020400

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <NMI_Handler+0x4>

08002f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <MemManage_Handler+0x4>

08002f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <BusFault_Handler+0x4>

08002f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <UsageFault_Handler+0x4>

08002fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd2:	f000 fb05 	bl	80035e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <USART3_IRQHandler+0x10>)
 8002fe2:	f002 fa3b 	bl	800545c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000c44 	.word	0x20000c44

08002ff0 <SystemClock_Config>:
RTC_HandleTypeDef hrtc;



extern void SystemClock_Config(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b094      	sub	sp, #80	@ 0x50
 8002ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2234      	movs	r2, #52	@ 0x34
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 f954 	bl	80072ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003004:	f107 0308 	add.w	r3, r7, #8
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <SystemClock_Config+0xdc>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	4a2b      	ldr	r2, [pc, #172]	@ (80030cc <SystemClock_Config+0xdc>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003022:	6413      	str	r3, [r2, #64]	@ 0x40
 8003024:	4b29      	ldr	r3, [pc, #164]	@ (80030cc <SystemClock_Config+0xdc>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003030:	2300      	movs	r3, #0
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <SystemClock_Config+0xe0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800303c:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <SystemClock_Config+0xe0>)
 800303e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <SystemClock_Config+0xe0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8003050:	230a      	movs	r3, #10
 8003052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003058:	2301      	movs	r3, #1
 800305a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800305c:	2310      	movs	r3, #16
 800305e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003060:	2301      	movs	r3, #1
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003064:	2302      	movs	r3, #2
 8003066:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003068:	2300      	movs	r3, #0
 800306a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800306c:	2308      	movs	r3, #8
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003070:	2348      	movs	r3, #72	@ 0x48
 8003072:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003074:	2302      	movs	r3, #2
 8003076:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003078:	2302      	movs	r3, #2
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800307c:	2302      	movs	r3, #2
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fc0b 	bl	80048a0 <HAL_RCC_OscConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003090:	f7ff f8d6 	bl	8002240 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8003094:	230f      	movs	r3, #15
 8003096:	60bb      	str	r3, [r7, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003098:	2302      	movs	r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fe06 	bl	8003cc4 <HAL_RCC_ClockConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80030be:	f7ff f8bf 	bl	8002240 <Error_Handler>
  }
}
 80030c2:	bf00      	nop
 80030c4:	3750      	adds	r7, #80	@ 0x50
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000

080030d4 <MX_RTC_Init>:

extern void MX_RTC_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};

  hrtc.Instance = RTC;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <MX_RTC_Init+0x44>)
 80030da:	4a10      	ldr	r2, [pc, #64]	@ (800311c <MX_RTC_Init+0x48>)
 80030dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <MX_RTC_Init+0x44>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <MX_RTC_Init+0x44>)
 80030e6:	227f      	movs	r2, #127	@ 0x7f
 80030e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <MX_RTC_Init+0x44>)
 80030ec:	22ff      	movs	r2, #255	@ 0xff
 80030ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030f0:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <MX_RTC_Init+0x44>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <MX_RTC_Init+0x44>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <MX_RTC_Init+0x44>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003102:	4805      	ldr	r0, [pc, #20]	@ (8003118 <MX_RTC_Init+0x44>)
 8003104:	f001 fe6a 	bl	8004ddc <HAL_RTC_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800310e:	f7ff f897 	bl	8002240 <Error_Handler>
//
//  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000c8c 	.word	0x20000c8c
 800311c:	40002800 	.word	0x40002800

08003120 <MX_USART1_UART_Init>:

extern void MX_USART1_UART_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003126:	4a12      	ldr	r2, [pc, #72]	@ (8003170 <MX_USART1_UART_Init+0x50>)
 8003128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 800312c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003146:	220c      	movs	r2, #12
 8003148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003156:	4805      	ldr	r0, [pc, #20]	@ (800316c <MX_USART1_UART_Init+0x4c>)
 8003158:	f002 f80e 	bl	8005178 <HAL_UART_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003162:	f7ff f86d 	bl	8002240 <Error_Handler>
  }
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000bb4 	.word	0x20000bb4
 8003170:	40011000 	.word	0x40011000

08003174 <MX_USART2_UART_Init>:

extern void MX_USART2_UART_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <MX_USART2_UART_Init+0x50>)
 800317c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 8003180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003192:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003198:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 800319a:	220c      	movs	r2, #12
 800319c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 80031a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031aa:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ac:	4804      	ldr	r0, [pc, #16]	@ (80031c0 <MX_USART2_UART_Init+0x4c>)
 80031ae:	f001 ffe3 	bl	8005178 <HAL_UART_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80031b8:	f7ff f842 	bl	8002240 <Error_Handler>
  }
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000bfc 	.word	0x20000bfc
 80031c4:	40004400 	.word	0x40004400

080031c8 <MX_USART3_UART_Init>:

extern void MX_USART3_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	@ (8003218 <MX_USART3_UART_Init+0x50>)
 80031d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <MX_USART3_UART_Init+0x4c>)
 8003200:	f001 ffba 	bl	8005178 <HAL_UART_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800320a:	f7ff f819 	bl	8002240 <Error_Handler>
  }
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000c44 	.word	0x20000c44
 8003218:	40004800 	.word	0x40004800

0800321c <MX_GPIO_Init>:

extern void MX_GPIO_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	4a1f      	ldr	r2, [pc, #124]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6313      	str	r3, [r2, #48]	@ 0x30
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	@ 0x30
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <MX_GPIO_Init+0x9c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003286:	2200      	movs	r2, #0
 8003288:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800328c:	480b      	ldr	r0, [pc, #44]	@ (80032bc <MX_GPIO_Init+0xa0>)
 800328e:	f000 fcff 	bl	8003c90 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003298:	2301      	movs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	4619      	mov	r1, r3
 80032aa:	4804      	ldr	r0, [pc, #16]	@ (80032bc <MX_GPIO_Init+0xa0>)
 80032ac:	f000 fb5c 	bl	8003968 <HAL_GPIO_Init>
}
 80032b0:	bf00      	nop
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020000 	.word	0x40020000

080032c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return 1;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <_kill>:

int _kill(int pid, int sig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032da:	f004 fdf9 	bl	8007ed0 <__errno>
 80032de:	4603      	mov	r3, r0
 80032e0:	2216      	movs	r2, #22
 80032e2:	601a      	str	r2, [r3, #0]
  return -1;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_exit>:

void _exit (int status)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffe7 	bl	80032d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <_exit+0x12>

08003306 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e00a      	b.n	800332e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003318:	f3af 8000 	nop.w
 800331c:	4601      	mov	r1, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	60ba      	str	r2, [r7, #8]
 8003324:	b2ca      	uxtb	r2, r1
 8003326:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	dbf0      	blt.n	8003318 <_read+0x12>
  }

  return len;
 8003336:	687b      	ldr	r3, [r7, #4]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e009      	b.n	8003366 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60ba      	str	r2, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f8b2 	bl	80034c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	dbf1      	blt.n	8003352 <_write+0x12>
  }
  return len;
 800336e:	687b      	ldr	r3, [r7, #4]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_close>:

int _close(int file)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a0:	605a      	str	r2, [r3, #4]
  return 0;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_isatty>:

int _isatty(int file)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033b8:	2301      	movs	r3, #1
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e8:	4a14      	ldr	r2, [pc, #80]	@ (800343c <_sbrk+0x5c>)
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <_sbrk+0x60>)
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <_sbrk+0x64>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <_sbrk+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d207      	bcs.n	8003420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003410:	f004 fd5e 	bl	8007ed0 <__errno>
 8003414:	4603      	mov	r3, r0
 8003416:	220c      	movs	r2, #12
 8003418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e009      	b.n	8003434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <_sbrk+0x64>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <_sbrk+0x64>)
 8003430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20020000 	.word	0x20020000
 8003440:	00000400 	.word	0x00000400
 8003444:	20000cb0 	.word	0x20000cb0
 8003448:	20000e70 	.word	0x20000e70

0800344c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <SystemInit+0x20>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <SystemInit+0x20>)
 8003458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800345c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <uart_init>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void uart_init(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	   *  RTS: The sender (transmitter) asserts this signal to indicate that it is ready to send data.
	   *  CTS: The receiver (or the device at the receiving end) asserts this signal to indicate that it is ready to receive data.
	   *  When hardware flow control is enabled, the sender waits for a CTS signal from the receiver before transmitting data.
	   *  Similarly, the receiver checks the RTS signal to determine when it is ready to accept new data.*/

	  UartHandle.Instance          = USART2;
 8003474:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <uart_init+0x48>)
 8003476:	4a11      	ldr	r2, [pc, #68]	@ (80034bc <uart_init+0x4c>)
 8003478:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate     = 115200;
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <uart_init+0x48>)
 800347c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003480:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <uart_init+0x48>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <uart_init+0x48>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800348e:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <uart_init+0x48>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <uart_init+0x48>)
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800349a:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <uart_init+0x48>)
 800349c:	220c      	movs	r2, #12
 800349e:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <uart_init+0x48>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]

	  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80034a6:	4804      	ldr	r0, [pc, #16]	@ (80034b8 <uart_init+0x48>)
 80034a8:	f001 fe66 	bl	8005178 <HAL_UART_Init>
	    /* Initialization Error */
//	    Error_Handler();
	  }

	  /* Output a message on Hyperterminal using printf function */
	  printf("\n\r UART Printf Example: retarget the C library printf function to the UART \r\n");
 80034ac:	4804      	ldr	r0, [pc, #16]	@ (80034c0 <uart_init+0x50>)
 80034ae:	f003 fd97 	bl	8006fe0 <puts>

}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000cb4 	.word	0x20000cb4
 80034bc:	40004400 	.word	0x40004400
 80034c0:	0800abec 	.word	0x0800abec

080034c4 <__io_putchar>:



PUTCHAR_PROTOTYPE
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80034cc:	1d39      	adds	r1, r7, #4
 80034ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034d2:	2201      	movs	r2, #1
 80034d4:	4803      	ldr	r0, [pc, #12]	@ (80034e4 <__io_putchar+0x20>)
 80034d6:	f001 fe9f 	bl	8005218 <HAL_UART_Transmit>

  return ch;
 80034da:	687b      	ldr	r3, [r7, #4]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000cb4 	.word	0x20000cb4

080034e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034ec:	f7ff ffae 	bl	800344c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f0:	480c      	ldr	r0, [pc, #48]	@ (8003524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034f2:	490d      	ldr	r1, [pc, #52]	@ (8003528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034f4:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f8:	e002      	b.n	8003500 <LoopCopyDataInit>

080034fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034fe:	3304      	adds	r3, #4

08003500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003504:	d3f9      	bcc.n	80034fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003506:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003508:	4c0a      	ldr	r4, [pc, #40]	@ (8003534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800350c:	e001      	b.n	8003512 <LoopFillZerobss>

0800350e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800350e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003510:	3204      	adds	r2, #4

08003512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003514:	d3fb      	bcc.n	800350e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003516:	f004 fce1 	bl	8007edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800351a:	f7ff f8c7 	bl	80026ac <main>
  bx  lr    
 800351e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003528:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 800352c:	0800b310 	.word	0x0800b310
  ldr r2, =_sbss
 8003530:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003534:	20000e70 	.word	0x20000e70

08003538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003538:	e7fe      	b.n	8003538 <ADC_IRQHandler>
	...

0800353c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003540:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_Init+0x40>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <HAL_Init+0x40>)
 8003546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800354a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800354c:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <HAL_Init+0x40>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <HAL_Init+0x40>)
 8003552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003558:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a07      	ldr	r2, [pc, #28]	@ (800357c <HAL_Init+0x40>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003564:	2003      	movs	r0, #3
 8003566:	f000 f92b 	bl	80037c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356a:	200f      	movs	r0, #15
 800356c:	f000 f808 	bl	8003580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003570:	f7ff fbd6 	bl	8002d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023c00 	.word	0x40023c00

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <HAL_InitTick+0x54>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <HAL_InitTick+0x58>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f943 	bl	800382a <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00e      	b.n	80035cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d80a      	bhi.n	80035ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b4:	2200      	movs	r2, #0
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f000 f90b 	bl	80037d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c0:	4a06      	ldr	r2, [pc, #24]	@ (80035dc <HAL_InitTick+0x5c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000040 	.word	0x20000040
 80035d8:	20000048 	.word	0x20000048
 80035dc:	20000044 	.word	0x20000044

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000048 	.word	0x20000048
 8003604:	20000cfc 	.word	0x20000cfc

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000cfc 	.word	0x20000cfc

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	@ (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	@ (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	@ (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800378c:	d301      	bcc.n	8003792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800378e:	2301      	movs	r3, #1
 8003790:	e00f      	b.n	80037b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <SysTick_Config+0x40>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800379a:	210f      	movs	r1, #15
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f7ff ff8e 	bl	80036c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <SysTick_Config+0x40>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037aa:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <SysTick_Config+0x40>)
 80037ac:	2207      	movs	r2, #7
 80037ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff29 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037e8:	f7ff ff3e 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	6978      	ldr	r0, [r7, #20]
 80037f4:	f7ff ff8e 	bl	8003714 <NVIC_EncodePriority>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff5d 	bl	80036c0 <__NVIC_SetPriority>
}
 8003806:	bf00      	nop
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff31 	bl	8003684 <__NVIC_EnableIRQ>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ffa2 	bl	800377c <SysTick_Config>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003850:	f7ff feda 	bl	8003608 <HAL_GetTick>
 8003854:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d008      	beq.n	8003874 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e052      	b.n	800391a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0216 	bic.w	r2, r2, #22
 8003882:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003892:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_DMA_Abort+0x62>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0208 	bic.w	r2, r2, #8
 80038b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c4:	e013      	b.n	80038ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c6:	f7ff fe9f 	bl	8003608 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d90c      	bls.n	80038ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e015      	b.n	800391a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e4      	bne.n	80038c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	223f      	movs	r2, #63	@ 0x3f
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d004      	beq.n	8003940 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2280      	movs	r2, #128	@ 0x80
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e00c      	b.n	800395a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2205      	movs	r2, #5
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	@ 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e165      	b.n	8003c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003984:	2201      	movs	r2, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	429a      	cmp	r2, r3
 800399e:	f040 8154 	bne.w	8003c4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d005      	beq.n	80039ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d130      	bne.n	8003a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f0:	2201      	movs	r2, #1
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 0201 	and.w	r2, r3, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d017      	beq.n	8003a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d123      	bne.n	8003aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	08da      	lsrs	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3208      	adds	r2, #8
 8003a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0203 	and.w	r2, r3, #3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ae 	beq.w	8003c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c68 <HAL_GPIO_Init+0x300>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c68 <HAL_GPIO_Init+0x300>)
 8003af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003afe:	4b5a      	ldr	r3, [pc, #360]	@ (8003c68 <HAL_GPIO_Init+0x300>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0a:	4a58      	ldr	r2, [pc, #352]	@ (8003c6c <HAL_GPIO_Init+0x304>)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	3302      	adds	r3, #2
 8003b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	220f      	movs	r2, #15
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4f      	ldr	r2, [pc, #316]	@ (8003c70 <HAL_GPIO_Init+0x308>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d025      	beq.n	8003b82 <HAL_GPIO_Init+0x21a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4e      	ldr	r2, [pc, #312]	@ (8003c74 <HAL_GPIO_Init+0x30c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01f      	beq.n	8003b7e <HAL_GPIO_Init+0x216>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4d      	ldr	r2, [pc, #308]	@ (8003c78 <HAL_GPIO_Init+0x310>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d019      	beq.n	8003b7a <HAL_GPIO_Init+0x212>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	@ (8003c7c <HAL_GPIO_Init+0x314>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_GPIO_Init+0x20e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_GPIO_Init+0x318>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00d      	beq.n	8003b72 <HAL_GPIO_Init+0x20a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_GPIO_Init+0x31c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d007      	beq.n	8003b6e <HAL_GPIO_Init+0x206>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a49      	ldr	r2, [pc, #292]	@ (8003c88 <HAL_GPIO_Init+0x320>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_GPIO_Init+0x202>
 8003b66:	2306      	movs	r3, #6
 8003b68:	e00c      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	e00a      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b6e:	2305      	movs	r3, #5
 8003b70:	e008      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b72:	2304      	movs	r3, #4
 8003b74:	e006      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b76:	2303      	movs	r3, #3
 8003b78:	e004      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e002      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_GPIO_Init+0x21c>
 8003b82:	2300      	movs	r3, #0
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	f002 0203 	and.w	r2, r2, #3
 8003b8a:	0092      	lsls	r2, r2, #2
 8003b8c:	4093      	lsls	r3, r2
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b94:	4935      	ldr	r1, [pc, #212]	@ (8003c6c <HAL_GPIO_Init+0x304>)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bc6:	4a31      	ldr	r2, [pc, #196]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bf0:	4a26      	ldr	r2, [pc, #152]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bf6:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c20:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c44:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <HAL_GPIO_Init+0x324>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	f67f ae96 	bls.w	8003984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3724      	adds	r7, #36	@ 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40020400 	.word	0x40020400
 8003c78:	40020800 	.word	0x40020800
 8003c7c:	40020c00 	.word	0x40020c00
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40021400 	.word	0x40021400
 8003c88:	40021800 	.word	0x40021800
 8003c8c:	40013c00 	.word	0x40013c00

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0cc      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b68      	ldr	r3, [pc, #416]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90c      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b65      	ldr	r3, [pc, #404]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b63      	ldr	r3, [pc, #396]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0b8      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b59      	ldr	r3, [pc, #356]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a58      	ldr	r2, [pc, #352]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d30:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a52      	ldr	r2, [pc, #328]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b50      	ldr	r3, [pc, #320]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	494d      	ldr	r1, [pc, #308]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d044      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b47      	ldr	r3, [pc, #284]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d119      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b3f      	ldr	r3, [pc, #252]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e067      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da2:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4934      	ldr	r1, [pc, #208]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db4:	f7ff fc28 	bl	8003608 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbc:	f7ff fc24 	bl	8003608 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e04f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 020c 	and.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1eb      	bne.n	8003dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b25      	ldr	r3, [pc, #148]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d20c      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b22      	ldr	r3, [pc, #136]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b20      	ldr	r3, [pc, #128]	@ (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e032      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e18:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4916      	ldr	r1, [pc, #88]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	490e      	ldr	r1, [pc, #56]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e4a:	f000 fb7f 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	490a      	ldr	r1, [pc, #40]	@ (8003e84 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e62:	4a09      	ldr	r2, [pc, #36]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fb88 	bl	8003580 <HAL_InitTick>

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023c00 	.word	0x40023c00
 8003e80:	40023800 	.word	0x40023800
 8003e84:	0800ae4c 	.word	0x0800ae4c
 8003e88:	20000040 	.word	0x20000040
 8003e8c:	20000044 	.word	0x20000044

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000040 	.word	0x20000040

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff0 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	0800ae5c 	.word	0x0800ae5c

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	f7ff ffdc 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0b5b      	lsrs	r3, r3, #13
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	0800ae5c 	.word	0x0800ae5c

08003ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	@ 0x30
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f30:	4b6f      	ldr	r3, [pc, #444]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f36:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	496c      	ldr	r1, [pc, #432]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f5e:	4b64      	ldr	r3, [pc, #400]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f64:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	4960      	ldr	r1, [pc, #384]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f8c:	4b58      	ldr	r3, [pc, #352]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	4955      	ldr	r1, [pc, #340]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d017      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fc8:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd6:	4946      	ldr	r1, [pc, #280]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe6:	d101      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 808a 	beq.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	4a38      	ldr	r2, [pc, #224]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	@ 0x40
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004022:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a33      	ldr	r2, [pc, #204]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800402e:	f7ff faeb 	bl	8003608 <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004036:	f7ff fae7 	bl	8003608 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e278      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004048:	4b2a      	ldr	r3, [pc, #168]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004054:	4b26      	ldr	r3, [pc, #152]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02f      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	429a      	cmp	r2, r3
 8004070:	d028      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004072:	4b1f      	ldr	r3, [pc, #124]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407c:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004082:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800408e:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d114      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800409a:	f7ff fab5 	bl	8003608 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7ff fab1 	bl	8003608 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e240      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b8:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ee      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d0:	d114      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e6:	4902      	ldr	r1, [pc, #8]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]
 80040ec:	e00c      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40007000 	.word	0x40007000
 80040f8:	42470e40 	.word	0x42470e40
 80040fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a49      	ldr	r2, [pc, #292]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004102:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	4b47      	ldr	r3, [pc, #284]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800410a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	4944      	ldr	r1, [pc, #272]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004116:	4313      	orrs	r3, r2
 8004118:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800412c:	4b3f      	ldr	r3, [pc, #252]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800412e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800413c:	4b3a      	ldr	r3, [pc, #232]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004142:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414a:	4937      	ldr	r1, [pc, #220]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800415e:	4b32      	ldr	r3, [pc, #200]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004164:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416c:	492e      	ldr	r1, [pc, #184]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d011      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004180:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	4926      	ldr	r1, [pc, #152]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800419e:	d101      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041a0:	2301      	movs	r3, #1
 80041a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80041b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	491a      	ldr	r1, [pc, #104]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	4911      	ldr	r1, [pc, #68]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80041f2:	2301      	movs	r3, #1
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d005      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004204:	f040 80ff 	bne.w	8004406 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004208:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800420e:	f7ff f9fb 	bl	8003608 <HAL_GetTick>
 8004212:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004214:	e00e      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004216:	f7ff f9f7 	bl	8003608 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d907      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e188      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004228:	40023800 	.word	0x40023800
 800422c:	424711e0 	.word	0x424711e0
 8004230:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004234:	4b7e      	ldr	r3, [pc, #504]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ea      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d028      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d124      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004268:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	3301      	adds	r3, #1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800427c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004280:	0e1b      	lsrs	r3, r3, #24
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	431a      	orrs	r2, r3
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	4961      	ldr	r1, [pc, #388]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d035      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042dc:	d130      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042de:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	3301      	adds	r3, #1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	0f1b      	lsrs	r3, r3, #28
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	019b      	lsls	r3, r3, #6
 8004308:	431a      	orrs	r2, r3
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	431a      	orrs	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	071b      	lsls	r3, r3, #28
 8004320:	4943      	ldr	r1, [pc, #268]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004328:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800432a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432e:	f023 021f 	bic.w	r2, r3, #31
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	493d      	ldr	r1, [pc, #244]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d029      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004354:	d124      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004356:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004368:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	019b      	lsls	r3, r3, #6
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	431a      	orrs	r2, r3
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	431a      	orrs	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	071b      	lsls	r3, r3, #28
 8004398:	4925      	ldr	r1, [pc, #148]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	4917      	ldr	r1, [pc, #92]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043da:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e0:	f7ff f912 	bl	8003608 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043e8:	f7ff f90e 	bl	8003608 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e09f      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 8095 	bne.w	8004538 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004414:	f7ff f8f8 	bl	8003608 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800441a:	e00f      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800441c:	f7ff f8f4 	bl	8003608 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d908      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e085      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	42470068 	.word	0x42470068
 8004438:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800443c:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004448:	d0e8      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02b      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446e:	2b00      	cmp	r3, #0
 8004470:	d127      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004472:	4b34      	ldr	r3, [pc, #208]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	431a      	orrs	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	4928      	ldr	r1, [pc, #160]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044a8:	4b26      	ldr	r3, [pc, #152]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	3b01      	subs	r3, #1
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4922      	ldr	r1, [pc, #136]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01d      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044d6:	d118      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	0e1b      	lsrs	r3, r3, #24
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	019b      	lsls	r3, r3, #6
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	4910      	ldr	r1, [pc, #64]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800450a:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004510:	f7ff f87a 	bl	8003608 <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004518:	f7ff f876 	bl	8003608 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e007      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004536:	d1ef      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3730      	adds	r7, #48	@ 0x30
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	42470070 	.word	0x42470070

0800454c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800454c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004550:	b0a6      	sub	sp, #152	@ 0x98
 8004552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004572:	4bc8      	ldr	r3, [pc, #800]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b0c      	cmp	r3, #12
 800457c:	f200 817e 	bhi.w	800487c <HAL_RCC_GetSysClockFreq+0x330>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045bd 	.word	0x080045bd
 800458c:	0800487d 	.word	0x0800487d
 8004590:	0800487d 	.word	0x0800487d
 8004594:	0800487d 	.word	0x0800487d
 8004598:	080045c5 	.word	0x080045c5
 800459c:	0800487d 	.word	0x0800487d
 80045a0:	0800487d 	.word	0x0800487d
 80045a4:	0800487d 	.word	0x0800487d
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	0800487d 	.word	0x0800487d
 80045b0:	0800487d 	.word	0x0800487d
 80045b4:	0800487d 	.word	0x0800487d
 80045b8:	08004737 	.word	0x08004737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4bb6      	ldr	r3, [pc, #728]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x34c>)
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80045c2:	e15f      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c4:	4bb5      	ldr	r3, [pc, #724]	@ (800489c <HAL_RCC_GetSysClockFreq+0x350>)
 80045c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80045ca:	e15b      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d8:	4bae      	ldr	r3, [pc, #696]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d031      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e4:	4bab      	ldr	r3, [pc, #684]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	2200      	movs	r2, #0
 80045ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f8:	2300      	movs	r3, #0
 80045fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045fc:	4ba7      	ldr	r3, [pc, #668]	@ (800489c <HAL_RCC_GetSysClockFreq+0x350>)
 80045fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004602:	462a      	mov	r2, r5
 8004604:	fb03 f202 	mul.w	r2, r3, r2
 8004608:	2300      	movs	r3, #0
 800460a:	4621      	mov	r1, r4
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	4aa2      	ldr	r2, [pc, #648]	@ (800489c <HAL_RCC_GetSysClockFreq+0x350>)
 8004614:	4621      	mov	r1, r4
 8004616:	fba1 1202 	umull	r1, r2, r1, r2
 800461a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800461c:	460a      	mov	r2, r1
 800461e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004620:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004622:	4413      	add	r3, r2
 8004624:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800462a:	2200      	movs	r2, #0
 800462c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800462e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004630:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004634:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004638:	f7fc fae6 	bl	8000c08 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004646:	e064      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004648:	4b92      	ldr	r3, [pc, #584]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	2200      	movs	r2, #0
 8004650:	653b      	str	r3, [r7, #80]	@ 0x50
 8004652:	657a      	str	r2, [r7, #84]	@ 0x54
 8004654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800465c:	2300      	movs	r3, #0
 800465e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004660:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004664:	4622      	mov	r2, r4
 8004666:	462b      	mov	r3, r5
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004676:	0150      	lsls	r0, r2, #5
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4621      	mov	r1, r4
 800467e:	1a51      	subs	r1, r2, r1
 8004680:	6139      	str	r1, [r7, #16]
 8004682:	4629      	mov	r1, r5
 8004684:	eb63 0301 	sbc.w	r3, r3, r1
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004696:	4659      	mov	r1, fp
 8004698:	018b      	lsls	r3, r1, #6
 800469a:	4651      	mov	r1, sl
 800469c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046a0:	4651      	mov	r1, sl
 80046a2:	018a      	lsls	r2, r1, #6
 80046a4:	4651      	mov	r1, sl
 80046a6:	ebb2 0801 	subs.w	r8, r2, r1
 80046aa:	4659      	mov	r1, fp
 80046ac:	eb63 0901 	sbc.w	r9, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c4:	4690      	mov	r8, r2
 80046c6:	4699      	mov	r9, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	eb18 0303 	adds.w	r3, r8, r3
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	462b      	mov	r3, r5
 80046d2:	eb49 0303 	adc.w	r3, r9, r3
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046e4:	4629      	mov	r1, r5
 80046e6:	028b      	lsls	r3, r1, #10
 80046e8:	4621      	mov	r1, r4
 80046ea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ee:	4621      	mov	r1, r4
 80046f0:	028a      	lsls	r2, r1, #10
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046fa:	2200      	movs	r2, #0
 80046fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004704:	f7fc fa80 	bl	8000c08 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4613      	mov	r3, r2
 800470e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004712:	4b60      	ldr	r3, [pc, #384]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	3301      	adds	r3, #1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004724:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004728:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004734:	e0a6      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004736:	4b57      	ldr	r3, [pc, #348]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800473e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004742:	4b54      	ldr	r3, [pc, #336]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02a      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4b51      	ldr	r3, [pc, #324]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	2200      	movs	r2, #0
 8004756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004758:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004760:	2100      	movs	r1, #0
 8004762:	4b4e      	ldr	r3, [pc, #312]	@ (800489c <HAL_RCC_GetSysClockFreq+0x350>)
 8004764:	fb03 f201 	mul.w	r2, r3, r1
 8004768:	2300      	movs	r3, #0
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	4413      	add	r3, r2
 8004770:	4a4a      	ldr	r2, [pc, #296]	@ (800489c <HAL_RCC_GetSysClockFreq+0x350>)
 8004772:	fba0 1202 	umull	r1, r2, r0, r2
 8004776:	677a      	str	r2, [r7, #116]	@ 0x74
 8004778:	460a      	mov	r2, r1
 800477a:	673a      	str	r2, [r7, #112]	@ 0x70
 800477c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800477e:	4413      	add	r3, r2
 8004780:	677b      	str	r3, [r7, #116]	@ 0x74
 8004782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004786:	2200      	movs	r2, #0
 8004788:	633b      	str	r3, [r7, #48]	@ 0x30
 800478a:	637a      	str	r2, [r7, #52]	@ 0x34
 800478c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004790:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004794:	f7fc fa38 	bl	8000c08 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4613      	mov	r3, r2
 800479e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047a2:	e05b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	2200      	movs	r2, #0
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80047bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0159      	lsls	r1, r3, #5
 80047ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d2:	0150      	lsls	r0, r2, #5
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4641      	mov	r1, r8
 80047da:	ebb2 0a01 	subs.w	sl, r2, r1
 80047de:	4649      	mov	r1, r9
 80047e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047f8:	ebb2 040a 	subs.w	r4, r2, sl
 80047fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	00eb      	lsls	r3, r5, #3
 800480a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480e:	00e2      	lsls	r2, r4, #3
 8004810:	4614      	mov	r4, r2
 8004812:	461d      	mov	r5, r3
 8004814:	4643      	mov	r3, r8
 8004816:	18e3      	adds	r3, r4, r3
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	464b      	mov	r3, r9
 800481c:	eb45 0303 	adc.w	r3, r5, r3
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482e:	4629      	mov	r1, r5
 8004830:	028b      	lsls	r3, r1, #10
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004838:	4621      	mov	r1, r4
 800483a:	028a      	lsls	r2, r1, #10
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004844:	2200      	movs	r2, #0
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	61fa      	str	r2, [r7, #28]
 800484a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800484e:	f7fc f9db 	bl	8000c08 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4613      	mov	r3, r2
 8004858:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x348>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800486a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800486e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800487a:	e003      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <HAL_RCC_GetSysClockFreq+0x34c>)
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004884:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004888:	4618      	mov	r0, r3
 800488a:	3798      	adds	r7, #152	@ 0x98
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400
 800489c:	017d7840 	.word	0x017d7840

080048a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e28d      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8083 	beq.w	80049c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048c0:	4b94      	ldr	r3, [pc, #592]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d019      	beq.n	8004900 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048cc:	4b91      	ldr	r3, [pc, #580]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e4:	d00c      	beq.n	8004900 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d112      	bne.n	8004918 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b88      	ldr	r3, [pc, #544]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048fe:	d10b      	bne.n	8004918 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	4b84      	ldr	r3, [pc, #528]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05b      	beq.n	80049c4 <HAL_RCC_OscConfig+0x124>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d157      	bne.n	80049c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e25a      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d106      	bne.n	8004930 <HAL_RCC_OscConfig+0x90>
 8004922:	4b7c      	ldr	r3, [pc, #496]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xcc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xb4>
 800493a:	4b76      	ldr	r3, [pc, #472]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xcc>
 8004954:	4b6f      	ldr	r3, [pc, #444]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b6c      	ldr	r3, [pc, #432]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe fe48 	bl	8003608 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fe fe44 	bl	8003608 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21f      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b61      	ldr	r3, [pc, #388]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xdc>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fe fe34 	bl	8003608 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fe fe30 	bl	8003608 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e20b      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b57      	ldr	r3, [pc, #348]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x104>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06f      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049d2:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d017      	beq.n	8004a0e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049de:	4b4d      	ldr	r3, [pc, #308]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b47      	ldr	r3, [pc, #284]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d11c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	4b44      	ldr	r3, [pc, #272]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_RCC_OscConfig+0x186>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e1d3      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b3b      	ldr	r3, [pc, #236]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4937      	ldr	r1, [pc, #220]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	e03a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a44:	4b34      	ldr	r3, [pc, #208]	@ (8004b18 <HAL_RCC_OscConfig+0x278>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fe fddd 	bl	8003608 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a52:	f7fe fdd9 	bl	8003608 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1b4      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a64:	4b2b      	ldr	r3, [pc, #172]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4925      	ldr	r1, [pc, #148]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a86:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <HAL_RCC_OscConfig+0x278>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fdbc 	bl	8003608 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fe fdb8 	bl	8003608 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e193      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d036      	beq.n	8004b2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fe fd9c 	bl	8003608 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fe fd98 	bl	8003608 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e173      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x234>
 8004af2:	e01b      	b.n	8004b2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <HAL_RCC_OscConfig+0x27c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fe fd85 	bl	8003608 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00e      	b.n	8004b20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fe fd81 	bl	8003608 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d907      	bls.n	8004b20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e15c      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	42470000 	.word	0x42470000
 8004b1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	4b8a      	ldr	r3, [pc, #552]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ea      	bne.n	8004b02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8097 	beq.w	8004c68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3e:	4b83      	ldr	r3, [pc, #524]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	4a7e      	ldr	r2, [pc, #504]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b79      	ldr	r3, [pc, #484]	@ (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b76      	ldr	r3, [pc, #472]	@ (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a75      	ldr	r2, [pc, #468]	@ (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fe fd41 	bl	8003608 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fe fd3d 	bl	8003608 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e118      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x31e>
 8004bb0:	4b66      	ldr	r3, [pc, #408]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb4:	4a65      	ldr	r2, [pc, #404]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x358>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x340>
 8004bc6:	4b61      	ldr	r3, [pc, #388]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	4a60      	ldr	r2, [pc, #384]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x358>
 8004be0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be4:	4a59      	ldr	r2, [pc, #356]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bec:	4b57      	ldr	r3, [pc, #348]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf0:	4a56      	ldr	r2, [pc, #344]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fe fd02 	bl	8003608 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fcfe 	bl	8003608 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0d7      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ee      	beq.n	8004c08 <HAL_RCC_OscConfig+0x368>
 8004c2a:	e014      	b.n	8004c56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fe fcec 	bl	8003608 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fe fce8 	bl	8003608 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0c1      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4a:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ee      	bne.n	8004c34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	4a3a      	ldr	r2, [pc, #232]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80ad 	beq.w	8004dcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c72:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d060      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d145      	bne.n	8004d12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b33      	ldr	r3, [pc, #204]	@ (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fcbc 	bl	8003608 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fe fcb8 	bl	8003608 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e093      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	4b29      	ldr	r3, [pc, #164]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	071b      	lsls	r3, r3, #28
 8004cde:	491b      	ldr	r1, [pc, #108]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fe fc8d 	bl	8003608 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fe fc89 	bl	8003608 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e064      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x452>
 8004d10:	e05c      	b.n	8004dcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fc76 	bl	8003608 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fe fc72 	bl	8003608 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04d      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x480>
 8004d3e:	e045      	b.n	8004dcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e040      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d58:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <HAL_RCC_OscConfig+0x538>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d030      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d129      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d122      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d119      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	3b01      	subs	r3, #1
 8004da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10f      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e073      	b.n	8004ed6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	7f5b      	ldrb	r3, [r3, #29]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd ffb6 	bl	8002d70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d055      	beq.n	8004ec4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	22ca      	movs	r2, #202	@ 0xca
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2253      	movs	r2, #83	@ 0x53
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f92b 	bl	8005084 <RTC_EnterInitMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d12c      	bne.n	8004e92 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6919      	ldr	r1, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	041a      	lsls	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f932 	bl	80050f2 <RTC_ExitInitMode>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d110      	bne.n	8004eba <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	22ff      	movs	r2, #255	@ 0xff
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ec2:	e001      	b.n	8004ec8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f10:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f14:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	0d9b      	lsrs	r3, r3, #22
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11a      	bne.n	8004f90 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f8ec 	bl	800513c <RTC_Bcd2ToByte>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f8e3 	bl	800513c <RTC_Bcd2ToByte>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f8da 	bl	800513c <RTC_Bcd2ToByte>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	0b5b      	lsrs	r3, r3, #13
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11a      	bne.n	800502e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f89d 	bl	800513c <RTC_Bcd2ToByte>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f894 	bl	800513c <RTC_Bcd2ToByte>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	789b      	ldrb	r3, [r3, #2]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f88b 	bl	800513c <RTC_Bcd2ToByte>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a0d      	ldr	r2, [pc, #52]	@ (8005080 <HAL_RTC_WaitForSynchro+0x48>)
 800504a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800504c:	f7fe fadc 	bl	8003608 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005052:	e009      	b.n	8005068 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005054:	f7fe fad8 	bl	8003608 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005062:	d901      	bls.n	8005068 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e007      	b.n	8005078 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ee      	beq.n	8005054 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	00017f5f 	.word	0x00017f5f

08005084 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d122      	bne.n	80050e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050b2:	f7fe faa9 	bl	8003608 <HAL_GetTick>
 80050b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050b8:	e00c      	b.n	80050d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050ba:	f7fe faa5 	bl	8003608 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050c8:	d904      	bls.n	80050d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <RTC_EnterInitMode+0x64>
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d1e8      	bne.n	80050ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800510c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff8b 	bl	8005038 <HAL_RTC_WaitForSynchro>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2204      	movs	r2, #4
 800512c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4413      	add	r3, r2
 800516a:	b2db      	uxtb	r3, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e042      	b.n	8005210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd fe10 	bl	8002dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	@ 0x24
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fe15 	bl	8005dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	@ 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	d175      	bne.n	8005324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Transmit+0x2c>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e06e      	b.n	8005326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2221      	movs	r2, #33	@ 0x21
 8005252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005256:	f7fe f9d7 	bl	8003608 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005270:	d108      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e003      	b.n	800528c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800528c:	e02e      	b.n	80052ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2180      	movs	r1, #128	@ 0x80
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fbb3 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03a      	b.n	8005326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3302      	adds	r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	e007      	b.n	80052de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3301      	adds	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1cb      	bne.n	800528e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	2140      	movs	r1, #64	@ 0x40
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fb7f 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e006      	b.n	8005326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08a      	sub	sp, #40	@ 0x28
 8005332:	af02      	add	r7, sp, #8
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b20      	cmp	r3, #32
 800534c:	f040 8081 	bne.w	8005452 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Receive+0x2e>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e079      	b.n	8005454 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2222      	movs	r2, #34	@ 0x22
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005374:	f7fe f948 	bl	8003608 <HAL_GetTick>
 8005378:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538e:	d108      	bne.n	80053a2 <HAL_UART_Receive+0x74>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e003      	b.n	80053aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80053aa:	e047      	b.n	800543c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2120      	movs	r1, #32
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fb24 	bl	8005a04 <UART_WaitOnFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e042      	b.n	8005454 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10c      	bne.n	80053ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3302      	adds	r3, #2
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e01f      	b.n	800542e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	d007      	beq.n	8005408 <HAL_UART_Receive+0xda>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <HAL_UART_Receive+0xe8>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e008      	b.n	8005428 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1b2      	bne.n	80053ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005452:	2302      	movs	r3, #2
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b0ba      	sub	sp, #232	@ 0xe8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800549a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_UART_IRQHandler+0x66>
 80054ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fbd7 	bl	8005c6e <UART_Receive_IT>
      return;
 80054c0:	e273      	b.n	80059aa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80de 	beq.w	8005688 <HAL_UART_IRQHandler+0x22c>
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80d1 	beq.w	8005688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0xae>
 80054f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	f043 0201 	orr.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xd2>
 8005516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0202 	orr.w	r2, r3, #2
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_UART_IRQHandler+0xf6>
 800553a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <HAL_UART_IRQHandler+0x126>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800556a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	f043 0208 	orr.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 820a 	beq.w	80059a0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_UART_IRQHandler+0x14e>
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb62 	bl	8005c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <HAL_UART_IRQHandler+0x17a>
 80055ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04f      	beq.n	8005676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa6d 	bl	8005ab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e6:	2b40      	cmp	r3, #64	@ 0x40
 80055e8:	d141      	bne.n	800566e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800561a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800562e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1d9      	bne.n	80055ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d013      	beq.n	8005666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005642:	4a8a      	ldr	r2, [pc, #552]	@ (800586c <HAL_UART_IRQHandler+0x410>)
 8005644:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe f969 	bl	8003922 <HAL_DMA_Abort_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005660:	4610      	mov	r0, r2
 8005662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e00e      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f9b6 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e00a      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9b2 	bl	80059d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	e006      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9ae 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005682:	e18d      	b.n	80059a0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	bf00      	nop
    return;
 8005686:	e18b      	b.n	80059a0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	f040 8167 	bne.w	8005960 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8160 	beq.w	8005960 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8159 	beq.w	8005960 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	f040 80ce 	bne.w	8005870 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a9 	beq.w	800583c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f080 80a2 	bcs.w	800583c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570a:	f000 8088 	beq.w	800581e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800572c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800573a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800573e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1d9      	bne.n	800570e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800576a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800577e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e1      	bne.n	800575a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e3      	bne.n	8005796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005800:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005802:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800580e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e3      	bne.n	80057dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe f812 	bl	8003842 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800582c:	b29b      	uxth	r3, r3
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	b29b      	uxth	r3, r3
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8d9 	bl	80059ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800583a:	e0b3      	b.n	80059a4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005844:	429a      	cmp	r2, r3
 8005846:	f040 80ad 	bne.w	80059a4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005854:	f040 80a6 	bne.w	80059a4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f8c1 	bl	80059ec <HAL_UARTEx_RxEventCallback>
      return;
 800586a:	e09b      	b.n	80059a4 <HAL_UART_IRQHandler+0x548>
 800586c:	08005b7d 	.word	0x08005b7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005878:	b29b      	uxth	r3, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 808e 	beq.w	80059a8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800588c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8089 	beq.w	80059a8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80058bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e3      	bne.n	8005896 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	623b      	str	r3, [r7, #32]
   return(result);
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3314      	adds	r3, #20
 80058ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e3      	bne.n	80058ce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	60fb      	str	r3, [r7, #12]
   return(result);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0310 	bic.w	r3, r3, #16
 800592a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005938:	61fa      	str	r2, [r7, #28]
 800593a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	617b      	str	r3, [r7, #20]
   return(result);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e3      	bne.n	8005914 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f847 	bl	80059ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800595e:	e023      	b.n	80059a8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_UART_IRQHandler+0x524>
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f910 	bl	8005b9e <UART_Transmit_IT>
    return;
 800597e:	e014      	b.n	80059aa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00e      	beq.n	80059aa <HAL_UART_IRQHandler+0x54e>
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f950 	bl	8005c3e <UART_EndTransmit_IT>
    return;
 800599e:	e004      	b.n	80059aa <HAL_UART_IRQHandler+0x54e>
    return;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <HAL_UART_IRQHandler+0x54e>
      return;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_UART_IRQHandler+0x54e>
      return;
 80059a8:	bf00      	nop
  }
}
 80059aa:	37e8      	adds	r7, #232	@ 0xe8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a14:	e03b      	b.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d037      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fd fdf3 	bl	8003608 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03a      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d023      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b80      	cmp	r3, #128	@ 0x80
 8005a4a:	d020      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d01d      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d116      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f81d 	bl	8005ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00f      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4013      	ands	r3, r2
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d0b4      	beq.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b095      	sub	sp, #84	@ 0x54
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ade:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e5      	bne.n	8005af2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d119      	bne.n	8005b62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4e:	61ba      	str	r2, [r7, #24]
 8005b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6979      	ldr	r1, [r7, #20]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e5      	bne.n	8005b2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b70:	bf00      	nop
 8005b72:	3754      	adds	r7, #84	@ 0x54
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ff21 	bl	80059d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b21      	cmp	r3, #33	@ 0x21
 8005bb0:	d13e      	bne.n	8005c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d114      	bne.n	8005be6 <UART_Transmit_IT+0x48>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1c9a      	adds	r2, r3, #2
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]
 8005be4:	e008      	b.n	8005bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6211      	str	r1, [r2, #32]
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4619      	mov	r1, r3
 8005c06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fea6 	bl	80059b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08c      	sub	sp, #48	@ 0x30
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b22      	cmp	r3, #34	@ 0x22
 8005c88:	f040 80aa 	bne.w	8005de0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c94:	d115      	bne.n	8005cc2 <UART_Receive_IT+0x54>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d111      	bne.n	8005cc2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cba:	1c9a      	adds	r2, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cc0:	e024      	b.n	8005d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd0:	d007      	beq.n	8005ce2 <UART_Receive_IT+0x74>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <UART_Receive_IT+0x82>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e008      	b.n	8005d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d15d      	bne.n	8005ddc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0220 	bic.w	r2, r2, #32
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d135      	bne.n	8005dd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 0310 	bic.w	r3, r3, #16
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	623a      	str	r2, [r7, #32]
 8005d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	69f9      	ldr	r1, [r7, #28]
 8005d92:	6a3a      	ldr	r2, [r7, #32]
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d10a      	bne.n	8005dc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fe0e 	bl	80059ec <HAL_UARTEx_RxEventCallback>
 8005dd0:	e002      	b.n	8005dd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fdf6 	bl	80059c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e002      	b.n	8005de2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3730      	adds	r7, #48	@ 0x30
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df0:	b0c0      	sub	sp, #256	@ 0x100
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e08:	68d9      	ldr	r1, [r3, #12]
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	ea40 0301 	orr.w	r3, r0, r1
 8005e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e44:	f021 010c 	bic.w	r1, r1, #12
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e52:	430b      	orrs	r3, r1
 8005e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e66:	6999      	ldr	r1, [r3, #24]
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	ea40 0301 	orr.w	r3, r0, r1
 8005e72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80060b8 <UART_SetConfig+0x2cc>)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d005      	beq.n	8005e8c <UART_SetConfig+0xa0>
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b8d      	ldr	r3, [pc, #564]	@ (80060bc <UART_SetConfig+0x2d0>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d104      	bne.n	8005e96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e8c:	f7fe f820 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8005e90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e94:	e003      	b.n	8005e9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7fe f807 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8005e9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea8:	f040 810c 	bne.w	80060c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ece:	4621      	mov	r1, r4
 8005ed0:	eb12 0801 	adds.w	r8, r2, r1
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	eb43 0901 	adc.w	r9, r3, r1
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eee:	4690      	mov	r8, r2
 8005ef0:	4699      	mov	r9, r3
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	eb18 0303 	adds.w	r3, r8, r3
 8005ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005efc:	462b      	mov	r3, r5
 8005efe:	eb49 0303 	adc.w	r3, r9, r3
 8005f02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	18db      	adds	r3, r3, r3
 8005f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f20:	4613      	mov	r3, r2
 8005f22:	eb42 0303 	adc.w	r3, r2, r3
 8005f26:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f30:	f7fa fe6a 	bl	8000c08 <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4b61      	ldr	r3, [pc, #388]	@ (80060c0 <UART_SetConfig+0x2d4>)
 8005f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	011c      	lsls	r4, r3, #4
 8005f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f54:	4642      	mov	r2, r8
 8005f56:	464b      	mov	r3, r9
 8005f58:	1891      	adds	r1, r2, r2
 8005f5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f5c:	415b      	adcs	r3, r3
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f64:	4641      	mov	r1, r8
 8005f66:	eb12 0a01 	adds.w	sl, r2, r1
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f84:	4692      	mov	sl, r2
 8005f86:	469b      	mov	fp, r3
 8005f88:	4643      	mov	r3, r8
 8005f8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f92:	464b      	mov	r3, r9
 8005f94:	eb4b 0303 	adc.w	r3, fp, r3
 8005f98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	18db      	adds	r3, r3, r3
 8005fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	eb42 0303 	adc.w	r3, r2, r3
 8005fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fc6:	f7fa fe1f 	bl	8000c08 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <UART_SetConfig+0x2d4>)
 8005fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	2264      	movs	r2, #100	@ 0x64
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	1acb      	subs	r3, r1, r3
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fe6:	4b36      	ldr	r3, [pc, #216]	@ (80060c0 <UART_SetConfig+0x2d4>)
 8005fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ff4:	441c      	add	r4, r3
 8005ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006000:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006004:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006008:	4642      	mov	r2, r8
 800600a:	464b      	mov	r3, r9
 800600c:	1891      	adds	r1, r2, r2
 800600e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006010:	415b      	adcs	r3, r3
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006018:	4641      	mov	r1, r8
 800601a:	1851      	adds	r1, r2, r1
 800601c:	6339      	str	r1, [r7, #48]	@ 0x30
 800601e:	4649      	mov	r1, r9
 8006020:	414b      	adcs	r3, r1
 8006022:	637b      	str	r3, [r7, #52]	@ 0x34
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006030:	4659      	mov	r1, fp
 8006032:	00cb      	lsls	r3, r1, #3
 8006034:	4651      	mov	r1, sl
 8006036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800603a:	4651      	mov	r1, sl
 800603c:	00ca      	lsls	r2, r1, #3
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	4603      	mov	r3, r0
 8006044:	4642      	mov	r2, r8
 8006046:	189b      	adds	r3, r3, r2
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800604c:	464b      	mov	r3, r9
 800604e:	460a      	mov	r2, r1
 8006050:	eb42 0303 	adc.w	r3, r2, r3
 8006054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006064:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800606c:	460b      	mov	r3, r1
 800606e:	18db      	adds	r3, r3, r3
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006072:	4613      	mov	r3, r2
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800607a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800607e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006082:	f7fa fdc1 	bl	8000c08 <__aeabi_uldivmod>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <UART_SetConfig+0x2d4>)
 800608c:	fba3 1302 	umull	r1, r3, r3, r2
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	2164      	movs	r1, #100	@ 0x64
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	3332      	adds	r3, #50	@ 0x32
 800609e:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <UART_SetConfig+0x2d4>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f003 0207 	and.w	r2, r3, #7
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4422      	add	r2, r4
 80060b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060b4:	e106      	b.n	80062c4 <UART_SetConfig+0x4d8>
 80060b6:	bf00      	nop
 80060b8:	40011000 	.word	0x40011000
 80060bc:	40011400 	.word	0x40011400
 80060c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060d6:	4642      	mov	r2, r8
 80060d8:	464b      	mov	r3, r9
 80060da:	1891      	adds	r1, r2, r2
 80060dc:	6239      	str	r1, [r7, #32]
 80060de:	415b      	adcs	r3, r3
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e6:	4641      	mov	r1, r8
 80060e8:	1854      	adds	r4, r2, r1
 80060ea:	4649      	mov	r1, r9
 80060ec:	eb43 0501 	adc.w	r5, r3, r1
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	00eb      	lsls	r3, r5, #3
 80060fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fe:	00e2      	lsls	r2, r4, #3
 8006100:	4614      	mov	r4, r2
 8006102:	461d      	mov	r5, r3
 8006104:	4643      	mov	r3, r8
 8006106:	18e3      	adds	r3, r4, r3
 8006108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800610c:	464b      	mov	r3, r9
 800610e:	eb45 0303 	adc.w	r3, r5, r3
 8006112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006132:	4629      	mov	r1, r5
 8006134:	008b      	lsls	r3, r1, #2
 8006136:	4621      	mov	r1, r4
 8006138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800613c:	4621      	mov	r1, r4
 800613e:	008a      	lsls	r2, r1, #2
 8006140:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006144:	f7fa fd60 	bl	8000c08 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4b60      	ldr	r3, [pc, #384]	@ (80062d0 <UART_SetConfig+0x4e4>)
 800614e:	fba3 2302 	umull	r2, r3, r3, r2
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	011c      	lsls	r4, r3, #4
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006160:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006164:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	61b9      	str	r1, [r7, #24]
 8006170:	415b      	adcs	r3, r3
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006178:	4641      	mov	r1, r8
 800617a:	1851      	adds	r1, r2, r1
 800617c:	6139      	str	r1, [r7, #16]
 800617e:	4649      	mov	r1, r9
 8006180:	414b      	adcs	r3, r1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006190:	4659      	mov	r1, fp
 8006192:	00cb      	lsls	r3, r1, #3
 8006194:	4651      	mov	r1, sl
 8006196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619a:	4651      	mov	r1, sl
 800619c:	00ca      	lsls	r2, r1, #3
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	4642      	mov	r2, r8
 80061a6:	189b      	adds	r3, r3, r2
 80061a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061ac:	464b      	mov	r3, r9
 80061ae:	460a      	mov	r2, r1
 80061b0:	eb42 0303 	adc.w	r3, r2, r3
 80061b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061d0:	4649      	mov	r1, r9
 80061d2:	008b      	lsls	r3, r1, #2
 80061d4:	4641      	mov	r1, r8
 80061d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061da:	4641      	mov	r1, r8
 80061dc:	008a      	lsls	r2, r1, #2
 80061de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061e2:	f7fa fd11 	bl	8000c08 <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	4b38      	ldr	r3, [pc, #224]	@ (80062d0 <UART_SetConfig+0x4e4>)
 80061ee:	fba3 2301 	umull	r2, r3, r3, r1
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2264      	movs	r2, #100	@ 0x64
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	1acb      	subs	r3, r1, r3
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	3332      	adds	r3, #50	@ 0x32
 8006200:	4a33      	ldr	r2, [pc, #204]	@ (80062d0 <UART_SetConfig+0x4e4>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800620c:	441c      	add	r4, r3
 800620e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006212:	2200      	movs	r2, #0
 8006214:	673b      	str	r3, [r7, #112]	@ 0x70
 8006216:	677a      	str	r2, [r7, #116]	@ 0x74
 8006218:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	1891      	adds	r1, r2, r2
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	415b      	adcs	r3, r3
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800622c:	4641      	mov	r1, r8
 800622e:	1851      	adds	r1, r2, r1
 8006230:	6039      	str	r1, [r7, #0]
 8006232:	4649      	mov	r1, r9
 8006234:	414b      	adcs	r3, r1
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006244:	4659      	mov	r1, fp
 8006246:	00cb      	lsls	r3, r1, #3
 8006248:	4651      	mov	r1, sl
 800624a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624e:	4651      	mov	r1, sl
 8006250:	00ca      	lsls	r2, r1, #3
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	4603      	mov	r3, r0
 8006258:	4642      	mov	r2, r8
 800625a:	189b      	adds	r3, r3, r2
 800625c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800625e:	464b      	mov	r3, r9
 8006260:	460a      	mov	r2, r1
 8006262:	eb42 0303 	adc.w	r3, r2, r3
 8006266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	663b      	str	r3, [r7, #96]	@ 0x60
 8006272:	667a      	str	r2, [r7, #100]	@ 0x64
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006280:	4649      	mov	r1, r9
 8006282:	008b      	lsls	r3, r1, #2
 8006284:	4641      	mov	r1, r8
 8006286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800628a:	4641      	mov	r1, r8
 800628c:	008a      	lsls	r2, r1, #2
 800628e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006292:	f7fa fcb9 	bl	8000c08 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <UART_SetConfig+0x4e4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	@ 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	3332      	adds	r3, #50	@ 0x32
 80062ae:	4a08      	ldr	r2, [pc, #32]	@ (80062d0 <UART_SetConfig+0x4e4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4422      	add	r2, r4
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062ca:	46bd      	mov	sp, r7
 80062cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d0:	51eb851f 	.word	0x51eb851f

080062d4 <malloc>:
 80062d4:	4b02      	ldr	r3, [pc, #8]	@ (80062e0 <malloc+0xc>)
 80062d6:	4601      	mov	r1, r0
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	f000 b82d 	b.w	8006338 <_malloc_r>
 80062de:	bf00      	nop
 80062e0:	200001cc 	.word	0x200001cc

080062e4 <free>:
 80062e4:	4b02      	ldr	r3, [pc, #8]	@ (80062f0 <free+0xc>)
 80062e6:	4601      	mov	r1, r0
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	f002 bc99 	b.w	8008c20 <_free_r>
 80062ee:	bf00      	nop
 80062f0:	200001cc 	.word	0x200001cc

080062f4 <sbrk_aligned>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006334 <sbrk_aligned+0x40>)
 80062f8:	460c      	mov	r4, r1
 80062fa:	6831      	ldr	r1, [r6, #0]
 80062fc:	4605      	mov	r5, r0
 80062fe:	b911      	cbnz	r1, 8006306 <sbrk_aligned+0x12>
 8006300:	f001 fdc4 	bl	8007e8c <_sbrk_r>
 8006304:	6030      	str	r0, [r6, #0]
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f001 fdbf 	bl	8007e8c <_sbrk_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d103      	bne.n	800631a <sbrk_aligned+0x26>
 8006312:	f04f 34ff 	mov.w	r4, #4294967295
 8006316:	4620      	mov	r0, r4
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	1cc4      	adds	r4, r0, #3
 800631c:	f024 0403 	bic.w	r4, r4, #3
 8006320:	42a0      	cmp	r0, r4
 8006322:	d0f8      	beq.n	8006316 <sbrk_aligned+0x22>
 8006324:	1a21      	subs	r1, r4, r0
 8006326:	4628      	mov	r0, r5
 8006328:	f001 fdb0 	bl	8007e8c <_sbrk_r>
 800632c:	3001      	adds	r0, #1
 800632e:	d1f2      	bne.n	8006316 <sbrk_aligned+0x22>
 8006330:	e7ef      	b.n	8006312 <sbrk_aligned+0x1e>
 8006332:	bf00      	nop
 8006334:	20000d00 	.word	0x20000d00

08006338 <_malloc_r>:
 8006338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800633c:	1ccd      	adds	r5, r1, #3
 800633e:	f025 0503 	bic.w	r5, r5, #3
 8006342:	3508      	adds	r5, #8
 8006344:	2d0c      	cmp	r5, #12
 8006346:	bf38      	it	cc
 8006348:	250c      	movcc	r5, #12
 800634a:	2d00      	cmp	r5, #0
 800634c:	4606      	mov	r6, r0
 800634e:	db01      	blt.n	8006354 <_malloc_r+0x1c>
 8006350:	42a9      	cmp	r1, r5
 8006352:	d904      	bls.n	800635e <_malloc_r+0x26>
 8006354:	230c      	movs	r3, #12
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	2000      	movs	r0, #0
 800635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800635e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006434 <_malloc_r+0xfc>
 8006362:	f000 f869 	bl	8006438 <__malloc_lock>
 8006366:	f8d8 3000 	ldr.w	r3, [r8]
 800636a:	461c      	mov	r4, r3
 800636c:	bb44      	cbnz	r4, 80063c0 <_malloc_r+0x88>
 800636e:	4629      	mov	r1, r5
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff ffbf 	bl	80062f4 <sbrk_aligned>
 8006376:	1c43      	adds	r3, r0, #1
 8006378:	4604      	mov	r4, r0
 800637a:	d158      	bne.n	800642e <_malloc_r+0xf6>
 800637c:	f8d8 4000 	ldr.w	r4, [r8]
 8006380:	4627      	mov	r7, r4
 8006382:	2f00      	cmp	r7, #0
 8006384:	d143      	bne.n	800640e <_malloc_r+0xd6>
 8006386:	2c00      	cmp	r4, #0
 8006388:	d04b      	beq.n	8006422 <_malloc_r+0xea>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	4639      	mov	r1, r7
 800638e:	4630      	mov	r0, r6
 8006390:	eb04 0903 	add.w	r9, r4, r3
 8006394:	f001 fd7a 	bl	8007e8c <_sbrk_r>
 8006398:	4581      	cmp	r9, r0
 800639a:	d142      	bne.n	8006422 <_malloc_r+0xea>
 800639c:	6821      	ldr	r1, [r4, #0]
 800639e:	1a6d      	subs	r5, r5, r1
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f7ff ffa6 	bl	80062f4 <sbrk_aligned>
 80063a8:	3001      	adds	r0, #1
 80063aa:	d03a      	beq.n	8006422 <_malloc_r+0xea>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	442b      	add	r3, r5
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	f8d8 3000 	ldr.w	r3, [r8]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	bb62      	cbnz	r2, 8006414 <_malloc_r+0xdc>
 80063ba:	f8c8 7000 	str.w	r7, [r8]
 80063be:	e00f      	b.n	80063e0 <_malloc_r+0xa8>
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	1b52      	subs	r2, r2, r5
 80063c4:	d420      	bmi.n	8006408 <_malloc_r+0xd0>
 80063c6:	2a0b      	cmp	r2, #11
 80063c8:	d917      	bls.n	80063fa <_malloc_r+0xc2>
 80063ca:	1961      	adds	r1, r4, r5
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	6059      	strne	r1, [r3, #4]
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	bf08      	it	eq
 80063d8:	f8c8 1000 	streq.w	r1, [r8]
 80063dc:	5162      	str	r2, [r4, r5]
 80063de:	604b      	str	r3, [r1, #4]
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 f82f 	bl	8006444 <__malloc_unlock>
 80063e6:	f104 000b 	add.w	r0, r4, #11
 80063ea:	1d23      	adds	r3, r4, #4
 80063ec:	f020 0007 	bic.w	r0, r0, #7
 80063f0:	1ac2      	subs	r2, r0, r3
 80063f2:	bf1c      	itt	ne
 80063f4:	1a1b      	subne	r3, r3, r0
 80063f6:	50a3      	strne	r3, [r4, r2]
 80063f8:	e7af      	b.n	800635a <_malloc_r+0x22>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	bf0c      	ite	eq
 8006400:	f8c8 2000 	streq.w	r2, [r8]
 8006404:	605a      	strne	r2, [r3, #4]
 8006406:	e7eb      	b.n	80063e0 <_malloc_r+0xa8>
 8006408:	4623      	mov	r3, r4
 800640a:	6864      	ldr	r4, [r4, #4]
 800640c:	e7ae      	b.n	800636c <_malloc_r+0x34>
 800640e:	463c      	mov	r4, r7
 8006410:	687f      	ldr	r7, [r7, #4]
 8006412:	e7b6      	b.n	8006382 <_malloc_r+0x4a>
 8006414:	461a      	mov	r2, r3
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	42a3      	cmp	r3, r4
 800641a:	d1fb      	bne.n	8006414 <_malloc_r+0xdc>
 800641c:	2300      	movs	r3, #0
 800641e:	6053      	str	r3, [r2, #4]
 8006420:	e7de      	b.n	80063e0 <_malloc_r+0xa8>
 8006422:	230c      	movs	r3, #12
 8006424:	6033      	str	r3, [r6, #0]
 8006426:	4630      	mov	r0, r6
 8006428:	f000 f80c 	bl	8006444 <__malloc_unlock>
 800642c:	e794      	b.n	8006358 <_malloc_r+0x20>
 800642e:	6005      	str	r5, [r0, #0]
 8006430:	e7d6      	b.n	80063e0 <_malloc_r+0xa8>
 8006432:	bf00      	nop
 8006434:	20000d04 	.word	0x20000d04

08006438 <__malloc_lock>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__malloc_lock+0x8>)
 800643a:	f001 bd75 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 800643e:	bf00      	nop
 8006440:	20000e6e 	.word	0x20000e6e

08006444 <__malloc_unlock>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__malloc_unlock+0x8>)
 8006446:	f001 bd71 	b.w	8007f2c <__retarget_lock_release_recursive>
 800644a:	bf00      	nop
 800644c:	20000e6e 	.word	0x20000e6e

08006450 <realloc>:
 8006450:	4b02      	ldr	r3, [pc, #8]	@ (800645c <realloc+0xc>)
 8006452:	460a      	mov	r2, r1
 8006454:	4601      	mov	r1, r0
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	f000 b802 	b.w	8006460 <_realloc_r>
 800645c:	200001cc 	.word	0x200001cc

08006460 <_realloc_r>:
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	4607      	mov	r7, r0
 8006466:	4614      	mov	r4, r2
 8006468:	460d      	mov	r5, r1
 800646a:	b921      	cbnz	r1, 8006476 <_realloc_r+0x16>
 800646c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4611      	mov	r1, r2
 8006472:	f7ff bf61 	b.w	8006338 <_malloc_r>
 8006476:	b92a      	cbnz	r2, 8006484 <_realloc_r+0x24>
 8006478:	f002 fbd2 	bl	8008c20 <_free_r>
 800647c:	4625      	mov	r5, r4
 800647e:	4628      	mov	r0, r5
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	f002 ffe6 	bl	8009454 <_malloc_usable_size_r>
 8006488:	4284      	cmp	r4, r0
 800648a:	4606      	mov	r6, r0
 800648c:	d802      	bhi.n	8006494 <_realloc_r+0x34>
 800648e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006492:	d8f4      	bhi.n	800647e <_realloc_r+0x1e>
 8006494:	4621      	mov	r1, r4
 8006496:	4638      	mov	r0, r7
 8006498:	f7ff ff4e 	bl	8006338 <_malloc_r>
 800649c:	4680      	mov	r8, r0
 800649e:	b908      	cbnz	r0, 80064a4 <_realloc_r+0x44>
 80064a0:	4645      	mov	r5, r8
 80064a2:	e7ec      	b.n	800647e <_realloc_r+0x1e>
 80064a4:	42b4      	cmp	r4, r6
 80064a6:	4622      	mov	r2, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	bf28      	it	cs
 80064ac:	4632      	movcs	r2, r6
 80064ae:	f001 fd46 	bl	8007f3e <memcpy>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4638      	mov	r0, r7
 80064b6:	f002 fbb3 	bl	8008c20 <_free_r>
 80064ba:	e7f1      	b.n	80064a0 <_realloc_r+0x40>

080064bc <__cvt>:
 80064bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	ec57 6b10 	vmov	r6, r7, d0
 80064c4:	2f00      	cmp	r7, #0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4619      	mov	r1, r3
 80064ca:	463b      	mov	r3, r7
 80064cc:	bfbb      	ittet	lt
 80064ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80064d2:	461f      	movlt	r7, r3
 80064d4:	2300      	movge	r3, #0
 80064d6:	232d      	movlt	r3, #45	@ 0x2d
 80064d8:	700b      	strb	r3, [r1, #0]
 80064da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80064e0:	4691      	mov	r9, r2
 80064e2:	f023 0820 	bic.w	r8, r3, #32
 80064e6:	bfbc      	itt	lt
 80064e8:	4632      	movlt	r2, r6
 80064ea:	4616      	movlt	r6, r2
 80064ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f0:	d005      	beq.n	80064fe <__cvt+0x42>
 80064f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064f6:	d100      	bne.n	80064fa <__cvt+0x3e>
 80064f8:	3401      	adds	r4, #1
 80064fa:	2102      	movs	r1, #2
 80064fc:	e000      	b.n	8006500 <__cvt+0x44>
 80064fe:	2103      	movs	r1, #3
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	ab02      	add	r3, sp, #8
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	ec47 6b10 	vmov	d0, r6, r7
 800650c:	4653      	mov	r3, sl
 800650e:	4622      	mov	r2, r4
 8006510:	f001 fdb6 	bl	8008080 <_dtoa_r>
 8006514:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006518:	4605      	mov	r5, r0
 800651a:	d119      	bne.n	8006550 <__cvt+0x94>
 800651c:	f019 0f01 	tst.w	r9, #1
 8006520:	d00e      	beq.n	8006540 <__cvt+0x84>
 8006522:	eb00 0904 	add.w	r9, r0, r4
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	f7fa fafb 	bl	8000b28 <__aeabi_dcmpeq>
 8006532:	b108      	cbz	r0, 8006538 <__cvt+0x7c>
 8006534:	f8cd 900c 	str.w	r9, [sp, #12]
 8006538:	2230      	movs	r2, #48	@ 0x30
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	454b      	cmp	r3, r9
 800653e:	d31e      	bcc.n	800657e <__cvt+0xc2>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006544:	1b5b      	subs	r3, r3, r5
 8006546:	4628      	mov	r0, r5
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	b004      	add	sp, #16
 800654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006554:	eb00 0904 	add.w	r9, r0, r4
 8006558:	d1e5      	bne.n	8006526 <__cvt+0x6a>
 800655a:	7803      	ldrb	r3, [r0, #0]
 800655c:	2b30      	cmp	r3, #48	@ 0x30
 800655e:	d10a      	bne.n	8006576 <__cvt+0xba>
 8006560:	2200      	movs	r2, #0
 8006562:	2300      	movs	r3, #0
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f7fa fade 	bl	8000b28 <__aeabi_dcmpeq>
 800656c:	b918      	cbnz	r0, 8006576 <__cvt+0xba>
 800656e:	f1c4 0401 	rsb	r4, r4, #1
 8006572:	f8ca 4000 	str.w	r4, [sl]
 8006576:	f8da 3000 	ldr.w	r3, [sl]
 800657a:	4499      	add	r9, r3
 800657c:	e7d3      	b.n	8006526 <__cvt+0x6a>
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e7d9      	b.n	800653a <__cvt+0x7e>

08006586 <__exponent>:
 8006586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006588:	2900      	cmp	r1, #0
 800658a:	bfba      	itte	lt
 800658c:	4249      	neglt	r1, r1
 800658e:	232d      	movlt	r3, #45	@ 0x2d
 8006590:	232b      	movge	r3, #43	@ 0x2b
 8006592:	2909      	cmp	r1, #9
 8006594:	7002      	strb	r2, [r0, #0]
 8006596:	7043      	strb	r3, [r0, #1]
 8006598:	dd29      	ble.n	80065ee <__exponent+0x68>
 800659a:	f10d 0307 	add.w	r3, sp, #7
 800659e:	461d      	mov	r5, r3
 80065a0:	270a      	movs	r7, #10
 80065a2:	461a      	mov	r2, r3
 80065a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80065a8:	fb07 1416 	mls	r4, r7, r6, r1
 80065ac:	3430      	adds	r4, #48	@ 0x30
 80065ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065b2:	460c      	mov	r4, r1
 80065b4:	2c63      	cmp	r4, #99	@ 0x63
 80065b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80065ba:	4631      	mov	r1, r6
 80065bc:	dcf1      	bgt.n	80065a2 <__exponent+0x1c>
 80065be:	3130      	adds	r1, #48	@ 0x30
 80065c0:	1e94      	subs	r4, r2, #2
 80065c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065c6:	1c41      	adds	r1, r0, #1
 80065c8:	4623      	mov	r3, r4
 80065ca:	42ab      	cmp	r3, r5
 80065cc:	d30a      	bcc.n	80065e4 <__exponent+0x5e>
 80065ce:	f10d 0309 	add.w	r3, sp, #9
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	42ac      	cmp	r4, r5
 80065d6:	bf88      	it	hi
 80065d8:	2300      	movhi	r3, #0
 80065da:	3302      	adds	r3, #2
 80065dc:	4403      	add	r3, r0
 80065de:	1a18      	subs	r0, r3, r0
 80065e0:	b003      	add	sp, #12
 80065e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065ec:	e7ed      	b.n	80065ca <__exponent+0x44>
 80065ee:	2330      	movs	r3, #48	@ 0x30
 80065f0:	3130      	adds	r1, #48	@ 0x30
 80065f2:	7083      	strb	r3, [r0, #2]
 80065f4:	70c1      	strb	r1, [r0, #3]
 80065f6:	1d03      	adds	r3, r0, #4
 80065f8:	e7f1      	b.n	80065de <__exponent+0x58>
	...

080065fc <_printf_float>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	b08d      	sub	sp, #52	@ 0x34
 8006602:	460c      	mov	r4, r1
 8006604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006608:	4616      	mov	r6, r2
 800660a:	461f      	mov	r7, r3
 800660c:	4605      	mov	r5, r0
 800660e:	f001 fc05 	bl	8007e1c <_localeconv_r>
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 fe5a 	bl	80002d0 <strlen>
 800661c:	2300      	movs	r3, #0
 800661e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006620:	f8d8 3000 	ldr.w	r3, [r8]
 8006624:	9005      	str	r0, [sp, #20]
 8006626:	3307      	adds	r3, #7
 8006628:	f023 0307 	bic.w	r3, r3, #7
 800662c:	f103 0208 	add.w	r2, r3, #8
 8006630:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006634:	f8d4 b000 	ldr.w	fp, [r4]
 8006638:	f8c8 2000 	str.w	r2, [r8]
 800663c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006644:	9307      	str	r3, [sp, #28]
 8006646:	f8cd 8018 	str.w	r8, [sp, #24]
 800664a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	4b9c      	ldr	r3, [pc, #624]	@ (80068c4 <_printf_float+0x2c8>)
 8006654:	f04f 32ff 	mov.w	r2, #4294967295
 8006658:	f7fa fa98 	bl	8000b8c <__aeabi_dcmpun>
 800665c:	bb70      	cbnz	r0, 80066bc <_printf_float+0xc0>
 800665e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006662:	4b98      	ldr	r3, [pc, #608]	@ (80068c4 <_printf_float+0x2c8>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	f7fa fa72 	bl	8000b50 <__aeabi_dcmple>
 800666c:	bb30      	cbnz	r0, 80066bc <_printf_float+0xc0>
 800666e:	2200      	movs	r2, #0
 8006670:	2300      	movs	r3, #0
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	f7fa fa61 	bl	8000b3c <__aeabi_dcmplt>
 800667a:	b110      	cbz	r0, 8006682 <_printf_float+0x86>
 800667c:	232d      	movs	r3, #45	@ 0x2d
 800667e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006682:	4a91      	ldr	r2, [pc, #580]	@ (80068c8 <_printf_float+0x2cc>)
 8006684:	4b91      	ldr	r3, [pc, #580]	@ (80068cc <_printf_float+0x2d0>)
 8006686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800668a:	bf8c      	ite	hi
 800668c:	4690      	movhi	r8, r2
 800668e:	4698      	movls	r8, r3
 8006690:	2303      	movs	r3, #3
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	f02b 0304 	bic.w	r3, fp, #4
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	9700      	str	r7, [sp, #0]
 80066a0:	4633      	mov	r3, r6
 80066a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f9d2 	bl	8006a50 <_printf_common>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f040 808d 	bne.w	80067cc <_printf_float+0x1d0>
 80066b2:	f04f 30ff 	mov.w	r0, #4294967295
 80066b6:	b00d      	add	sp, #52	@ 0x34
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7fa fa62 	bl	8000b8c <__aeabi_dcmpun>
 80066c8:	b140      	cbz	r0, 80066dc <_printf_float+0xe0>
 80066ca:	464b      	mov	r3, r9
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfbc      	itt	lt
 80066d0:	232d      	movlt	r3, #45	@ 0x2d
 80066d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80066d6:	4a7e      	ldr	r2, [pc, #504]	@ (80068d0 <_printf_float+0x2d4>)
 80066d8:	4b7e      	ldr	r3, [pc, #504]	@ (80068d4 <_printf_float+0x2d8>)
 80066da:	e7d4      	b.n	8006686 <_printf_float+0x8a>
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80066e2:	9206      	str	r2, [sp, #24]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	d13b      	bne.n	8006760 <_printf_float+0x164>
 80066e8:	2306      	movs	r3, #6
 80066ea:	6063      	str	r3, [r4, #4]
 80066ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066f0:	2300      	movs	r3, #0
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	9303      	str	r3, [sp, #12]
 80066f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80066f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066fc:	ab09      	add	r3, sp, #36	@ 0x24
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	6861      	ldr	r1, [r4, #4]
 8006702:	ec49 8b10 	vmov	d0, r8, r9
 8006706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800670a:	4628      	mov	r0, r5
 800670c:	f7ff fed6 	bl	80064bc <__cvt>
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006714:	2b47      	cmp	r3, #71	@ 0x47
 8006716:	4680      	mov	r8, r0
 8006718:	d129      	bne.n	800676e <_printf_float+0x172>
 800671a:	1cc8      	adds	r0, r1, #3
 800671c:	db02      	blt.n	8006724 <_printf_float+0x128>
 800671e:	6863      	ldr	r3, [r4, #4]
 8006720:	4299      	cmp	r1, r3
 8006722:	dd41      	ble.n	80067a8 <_printf_float+0x1ac>
 8006724:	f1aa 0a02 	sub.w	sl, sl, #2
 8006728:	fa5f fa8a 	uxtb.w	sl, sl
 800672c:	3901      	subs	r1, #1
 800672e:	4652      	mov	r2, sl
 8006730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006734:	9109      	str	r1, [sp, #36]	@ 0x24
 8006736:	f7ff ff26 	bl	8006586 <__exponent>
 800673a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800673c:	1813      	adds	r3, r2, r0
 800673e:	2a01      	cmp	r2, #1
 8006740:	4681      	mov	r9, r0
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	dc02      	bgt.n	800674c <_printf_float+0x150>
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	07d2      	lsls	r2, r2, #31
 800674a:	d501      	bpl.n	8006750 <_printf_float+0x154>
 800674c:	3301      	adds	r3, #1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0a2      	beq.n	800669e <_printf_float+0xa2>
 8006758:	232d      	movs	r3, #45	@ 0x2d
 800675a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800675e:	e79e      	b.n	800669e <_printf_float+0xa2>
 8006760:	9a06      	ldr	r2, [sp, #24]
 8006762:	2a47      	cmp	r2, #71	@ 0x47
 8006764:	d1c2      	bne.n	80066ec <_printf_float+0xf0>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1c0      	bne.n	80066ec <_printf_float+0xf0>
 800676a:	2301      	movs	r3, #1
 800676c:	e7bd      	b.n	80066ea <_printf_float+0xee>
 800676e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006772:	d9db      	bls.n	800672c <_printf_float+0x130>
 8006774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006778:	d118      	bne.n	80067ac <_printf_float+0x1b0>
 800677a:	2900      	cmp	r1, #0
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	dd0b      	ble.n	8006798 <_printf_float+0x19c>
 8006780:	6121      	str	r1, [r4, #16]
 8006782:	b913      	cbnz	r3, 800678a <_printf_float+0x18e>
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	07d0      	lsls	r0, r2, #31
 8006788:	d502      	bpl.n	8006790 <_printf_float+0x194>
 800678a:	3301      	adds	r3, #1
 800678c:	440b      	add	r3, r1
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	e7db      	b.n	8006750 <_printf_float+0x154>
 8006798:	b913      	cbnz	r3, 80067a0 <_printf_float+0x1a4>
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	07d2      	lsls	r2, r2, #31
 800679e:	d501      	bpl.n	80067a4 <_printf_float+0x1a8>
 80067a0:	3302      	adds	r3, #2
 80067a2:	e7f4      	b.n	800678e <_printf_float+0x192>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e7f2      	b.n	800678e <_printf_float+0x192>
 80067a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ae:	4299      	cmp	r1, r3
 80067b0:	db05      	blt.n	80067be <_printf_float+0x1c2>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	6121      	str	r1, [r4, #16]
 80067b6:	07d8      	lsls	r0, r3, #31
 80067b8:	d5ea      	bpl.n	8006790 <_printf_float+0x194>
 80067ba:	1c4b      	adds	r3, r1, #1
 80067bc:	e7e7      	b.n	800678e <_printf_float+0x192>
 80067be:	2900      	cmp	r1, #0
 80067c0:	bfd4      	ite	le
 80067c2:	f1c1 0202 	rsble	r2, r1, #2
 80067c6:	2201      	movgt	r2, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	e7e0      	b.n	800678e <_printf_float+0x192>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	055a      	lsls	r2, r3, #21
 80067d0:	d407      	bmi.n	80067e2 <_printf_float+0x1e6>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	4642      	mov	r2, r8
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	d12b      	bne.n	8006838 <_printf_float+0x23c>
 80067e0:	e767      	b.n	80066b2 <_printf_float+0xb6>
 80067e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067e6:	f240 80dd 	bls.w	80069a4 <_printf_float+0x3a8>
 80067ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	f7fa f999 	bl	8000b28 <__aeabi_dcmpeq>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d033      	beq.n	8006862 <_printf_float+0x266>
 80067fa:	4a37      	ldr	r2, [pc, #220]	@ (80068d8 <_printf_float+0x2dc>)
 80067fc:	2301      	movs	r3, #1
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	f43f af54 	beq.w	80066b2 <_printf_float+0xb6>
 800680a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800680e:	4543      	cmp	r3, r8
 8006810:	db02      	blt.n	8006818 <_printf_float+0x21c>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	07d8      	lsls	r0, r3, #31
 8006816:	d50f      	bpl.n	8006838 <_printf_float+0x23c>
 8006818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f af45 	beq.w	80066b2 <_printf_float+0xb6>
 8006828:	f04f 0900 	mov.w	r9, #0
 800682c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006830:	f104 0a1a 	add.w	sl, r4, #26
 8006834:	45c8      	cmp	r8, r9
 8006836:	dc09      	bgt.n	800684c <_printf_float+0x250>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	079b      	lsls	r3, r3, #30
 800683c:	f100 8103 	bmi.w	8006a46 <_printf_float+0x44a>
 8006840:	68e0      	ldr	r0, [r4, #12]
 8006842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006844:	4298      	cmp	r0, r3
 8006846:	bfb8      	it	lt
 8006848:	4618      	movlt	r0, r3
 800684a:	e734      	b.n	80066b6 <_printf_float+0xba>
 800684c:	2301      	movs	r3, #1
 800684e:	4652      	mov	r2, sl
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f af2b 	beq.w	80066b2 <_printf_float+0xb6>
 800685c:	f109 0901 	add.w	r9, r9, #1
 8006860:	e7e8      	b.n	8006834 <_printf_float+0x238>
 8006862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc39      	bgt.n	80068dc <_printf_float+0x2e0>
 8006868:	4a1b      	ldr	r2, [pc, #108]	@ (80068d8 <_printf_float+0x2dc>)
 800686a:	2301      	movs	r3, #1
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f af1d 	beq.w	80066b2 <_printf_float+0xb6>
 8006878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800687c:	ea59 0303 	orrs.w	r3, r9, r3
 8006880:	d102      	bne.n	8006888 <_printf_float+0x28c>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	07d9      	lsls	r1, r3, #31
 8006886:	d5d7      	bpl.n	8006838 <_printf_float+0x23c>
 8006888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f af0d 	beq.w	80066b2 <_printf_float+0xb6>
 8006898:	f04f 0a00 	mov.w	sl, #0
 800689c:	f104 0b1a 	add.w	fp, r4, #26
 80068a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a2:	425b      	negs	r3, r3
 80068a4:	4553      	cmp	r3, sl
 80068a6:	dc01      	bgt.n	80068ac <_printf_float+0x2b0>
 80068a8:	464b      	mov	r3, r9
 80068aa:	e793      	b.n	80067d4 <_printf_float+0x1d8>
 80068ac:	2301      	movs	r3, #1
 80068ae:	465a      	mov	r2, fp
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f aefb 	beq.w	80066b2 <_printf_float+0xb6>
 80068bc:	f10a 0a01 	add.w	sl, sl, #1
 80068c0:	e7ee      	b.n	80068a0 <_printf_float+0x2a4>
 80068c2:	bf00      	nop
 80068c4:	7fefffff 	.word	0x7fefffff
 80068c8:	0800af69 	.word	0x0800af69
 80068cc:	0800af65 	.word	0x0800af65
 80068d0:	0800af71 	.word	0x0800af71
 80068d4:	0800af6d 	.word	0x0800af6d
 80068d8:	0800b0fc 	.word	0x0800b0fc
 80068dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068e2:	4553      	cmp	r3, sl
 80068e4:	bfa8      	it	ge
 80068e6:	4653      	movge	r3, sl
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	4699      	mov	r9, r3
 80068ec:	dc36      	bgt.n	800695c <_printf_float+0x360>
 80068ee:	f04f 0b00 	mov.w	fp, #0
 80068f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068f6:	f104 021a 	add.w	r2, r4, #26
 80068fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068fc:	9306      	str	r3, [sp, #24]
 80068fe:	eba3 0309 	sub.w	r3, r3, r9
 8006902:	455b      	cmp	r3, fp
 8006904:	dc31      	bgt.n	800696a <_printf_float+0x36e>
 8006906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006908:	459a      	cmp	sl, r3
 800690a:	dc3a      	bgt.n	8006982 <_printf_float+0x386>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07da      	lsls	r2, r3, #31
 8006910:	d437      	bmi.n	8006982 <_printf_float+0x386>
 8006912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006914:	ebaa 0903 	sub.w	r9, sl, r3
 8006918:	9b06      	ldr	r3, [sp, #24]
 800691a:	ebaa 0303 	sub.w	r3, sl, r3
 800691e:	4599      	cmp	r9, r3
 8006920:	bfa8      	it	ge
 8006922:	4699      	movge	r9, r3
 8006924:	f1b9 0f00 	cmp.w	r9, #0
 8006928:	dc33      	bgt.n	8006992 <_printf_float+0x396>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006932:	f104 0b1a 	add.w	fp, r4, #26
 8006936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006938:	ebaa 0303 	sub.w	r3, sl, r3
 800693c:	eba3 0309 	sub.w	r3, r3, r9
 8006940:	4543      	cmp	r3, r8
 8006942:	f77f af79 	ble.w	8006838 <_printf_float+0x23c>
 8006946:	2301      	movs	r3, #1
 8006948:	465a      	mov	r2, fp
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	f43f aeae 	beq.w	80066b2 <_printf_float+0xb6>
 8006956:	f108 0801 	add.w	r8, r8, #1
 800695a:	e7ec      	b.n	8006936 <_printf_float+0x33a>
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	d1c2      	bne.n	80068ee <_printf_float+0x2f2>
 8006968:	e6a3      	b.n	80066b2 <_printf_float+0xb6>
 800696a:	2301      	movs	r3, #1
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	9206      	str	r2, [sp, #24]
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae9c 	beq.w	80066b2 <_printf_float+0xb6>
 800697a:	9a06      	ldr	r2, [sp, #24]
 800697c:	f10b 0b01 	add.w	fp, fp, #1
 8006980:	e7bb      	b.n	80068fa <_printf_float+0x2fe>
 8006982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d1c0      	bne.n	8006912 <_printf_float+0x316>
 8006990:	e68f      	b.n	80066b2 <_printf_float+0xb6>
 8006992:	9a06      	ldr	r2, [sp, #24]
 8006994:	464b      	mov	r3, r9
 8006996:	4442      	add	r2, r8
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	d1c3      	bne.n	800692a <_printf_float+0x32e>
 80069a2:	e686      	b.n	80066b2 <_printf_float+0xb6>
 80069a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069a8:	f1ba 0f01 	cmp.w	sl, #1
 80069ac:	dc01      	bgt.n	80069b2 <_printf_float+0x3b6>
 80069ae:	07db      	lsls	r3, r3, #31
 80069b0:	d536      	bpl.n	8006a20 <_printf_float+0x424>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4642      	mov	r2, r8
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae78 	beq.w	80066b2 <_printf_float+0xb6>
 80069c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f ae70 	beq.w	80066b2 <_printf_float+0xb6>
 80069d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069de:	f7fa f8a3 	bl	8000b28 <__aeabi_dcmpeq>
 80069e2:	b9c0      	cbnz	r0, 8006a16 <_printf_float+0x41a>
 80069e4:	4653      	mov	r3, sl
 80069e6:	f108 0201 	add.w	r2, r8, #1
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d10c      	bne.n	8006a0e <_printf_float+0x412>
 80069f4:	e65d      	b.n	80066b2 <_printf_float+0xb6>
 80069f6:	2301      	movs	r3, #1
 80069f8:	465a      	mov	r2, fp
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f ae56 	beq.w	80066b2 <_printf_float+0xb6>
 8006a06:	f108 0801 	add.w	r8, r8, #1
 8006a0a:	45d0      	cmp	r8, sl
 8006a0c:	dbf3      	blt.n	80069f6 <_printf_float+0x3fa>
 8006a0e:	464b      	mov	r3, r9
 8006a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a14:	e6df      	b.n	80067d6 <_printf_float+0x1da>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	f104 0b1a 	add.w	fp, r4, #26
 8006a1e:	e7f4      	b.n	8006a0a <_printf_float+0x40e>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4642      	mov	r2, r8
 8006a24:	e7e1      	b.n	80069ea <_printf_float+0x3ee>
 8006a26:	2301      	movs	r3, #1
 8006a28:	464a      	mov	r2, r9
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae3e 	beq.w	80066b2 <_printf_float+0xb6>
 8006a36:	f108 0801 	add.w	r8, r8, #1
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a3e:	1a5b      	subs	r3, r3, r1
 8006a40:	4543      	cmp	r3, r8
 8006a42:	dcf0      	bgt.n	8006a26 <_printf_float+0x42a>
 8006a44:	e6fc      	b.n	8006840 <_printf_float+0x244>
 8006a46:	f04f 0800 	mov.w	r8, #0
 8006a4a:	f104 0919 	add.w	r9, r4, #25
 8006a4e:	e7f4      	b.n	8006a3a <_printf_float+0x43e>

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4698      	mov	r8, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc26      	bgt.n	8006ae6 <_printf_common+0x96>
 8006a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	3b00      	subs	r3, #0
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d42b      	bmi.n	8006b00 <_printf_common+0xb0>
 8006aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006aac:	4641      	mov	r1, r8
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c8      	blx	r9
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d01e      	beq.n	8006af4 <_printf_common+0xa4>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	f003 0306 	and.w	r3, r3, #6
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	bf02      	ittt	eq
 8006ac2:	68e5      	ldreq	r5, [r4, #12]
 8006ac4:	6833      	ldreq	r3, [r6, #0]
 8006ac6:	1aed      	subeq	r5, r5, r3
 8006ac8:	68a3      	ldr	r3, [r4, #8]
 8006aca:	bf0c      	ite	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	2500      	movne	r5, #0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfc4      	itt	gt
 8006ad6:	1a9b      	subgt	r3, r3, r2
 8006ad8:	18ed      	addgt	r5, r5, r3
 8006ada:	2600      	movs	r6, #0
 8006adc:	341a      	adds	r4, #26
 8006ade:	42b5      	cmp	r5, r6
 8006ae0:	d11a      	bne.n	8006b18 <_printf_common+0xc8>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e008      	b.n	8006af8 <_printf_common+0xa8>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4641      	mov	r1, r8
 8006aec:	4638      	mov	r0, r7
 8006aee:	47c8      	blx	r9
 8006af0:	3001      	adds	r0, #1
 8006af2:	d103      	bne.n	8006afc <_printf_common+0xac>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7c6      	b.n	8006a8e <_printf_common+0x3e>
 8006b00:	18e1      	adds	r1, r4, r3
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	2030      	movs	r0, #48	@ 0x30
 8006b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b0a:	4422      	add	r2, r4
 8006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7c7      	b.n	8006aa8 <_printf_common+0x58>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c8      	blx	r9
 8006b22:	3001      	adds	r0, #1
 8006b24:	d0e6      	beq.n	8006af4 <_printf_common+0xa4>
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7d9      	b.n	8006ade <_printf_common+0x8e>
	...

08006b2c <_printf_i>:
 8006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	7e0f      	ldrb	r7, [r1, #24]
 8006b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b34:	2f78      	cmp	r7, #120	@ 0x78
 8006b36:	4691      	mov	r9, r2
 8006b38:	4680      	mov	r8, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b42:	d807      	bhi.n	8006b54 <_printf_i+0x28>
 8006b44:	2f62      	cmp	r7, #98	@ 0x62
 8006b46:	d80a      	bhi.n	8006b5e <_printf_i+0x32>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f000 80d1 	beq.w	8006cf0 <_printf_i+0x1c4>
 8006b4e:	2f58      	cmp	r7, #88	@ 0x58
 8006b50:	f000 80b8 	beq.w	8006cc4 <_printf_i+0x198>
 8006b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b5c:	e03a      	b.n	8006bd4 <_printf_i+0xa8>
 8006b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b62:	2b15      	cmp	r3, #21
 8006b64:	d8f6      	bhi.n	8006b54 <_printf_i+0x28>
 8006b66:	a101      	add	r1, pc, #4	@ (adr r1, 8006b6c <_printf_i+0x40>)
 8006b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006b55 	.word	0x08006b55
 8006b78:	08006b55 	.word	0x08006b55
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b55 	.word	0x08006b55
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006cd7 	.word	0x08006cd7
 8006b9c:	08006c03 	.word	0x08006c03
 8006ba0:	08006c91 	.word	0x08006c91
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006b55 	.word	0x08006b55
 8006bac:	08006cf9 	.word	0x08006cf9
 8006bb0:	08006b55 	.word	0x08006b55
 8006bb4:	08006c03 	.word	0x08006c03
 8006bb8:	08006b55 	.word	0x08006b55
 8006bbc:	08006b55 	.word	0x08006b55
 8006bc0:	08006c99 	.word	0x08006c99
 8006bc4:	6833      	ldr	r3, [r6, #0]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6032      	str	r2, [r6, #0]
 8006bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e09c      	b.n	8006d12 <_printf_i+0x1e6>
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	1d19      	adds	r1, r3, #4
 8006bde:	6031      	str	r1, [r6, #0]
 8006be0:	0606      	lsls	r6, r0, #24
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0xbc>
 8006be4:	681d      	ldr	r5, [r3, #0]
 8006be6:	e003      	b.n	8006bf0 <_printf_i+0xc4>
 8006be8:	0645      	lsls	r5, r0, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0xb8>
 8006bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	da03      	bge.n	8006bfc <_printf_i+0xd0>
 8006bf4:	232d      	movs	r3, #45	@ 0x2d
 8006bf6:	426d      	negs	r5, r5
 8006bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bfc:	4858      	ldr	r0, [pc, #352]	@ (8006d60 <_printf_i+0x234>)
 8006bfe:	230a      	movs	r3, #10
 8006c00:	e011      	b.n	8006c26 <_printf_i+0xfa>
 8006c02:	6821      	ldr	r1, [r4, #0]
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	0608      	lsls	r0, r1, #24
 8006c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c0c:	d402      	bmi.n	8006c14 <_printf_i+0xe8>
 8006c0e:	0649      	lsls	r1, r1, #25
 8006c10:	bf48      	it	mi
 8006c12:	b2ad      	uxthmi	r5, r5
 8006c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c16:	4852      	ldr	r0, [pc, #328]	@ (8006d60 <_printf_i+0x234>)
 8006c18:	6033      	str	r3, [r6, #0]
 8006c1a:	bf14      	ite	ne
 8006c1c:	230a      	movne	r3, #10
 8006c1e:	2308      	moveq	r3, #8
 8006c20:	2100      	movs	r1, #0
 8006c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c26:	6866      	ldr	r6, [r4, #4]
 8006c28:	60a6      	str	r6, [r4, #8]
 8006c2a:	2e00      	cmp	r6, #0
 8006c2c:	db05      	blt.n	8006c3a <_printf_i+0x10e>
 8006c2e:	6821      	ldr	r1, [r4, #0]
 8006c30:	432e      	orrs	r6, r5
 8006c32:	f021 0104 	bic.w	r1, r1, #4
 8006c36:	6021      	str	r1, [r4, #0]
 8006c38:	d04b      	beq.n	8006cd2 <_printf_i+0x1a6>
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c40:	fb03 5711 	mls	r7, r3, r1, r5
 8006c44:	5dc7      	ldrb	r7, [r0, r7]
 8006c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c4a:	462f      	mov	r7, r5
 8006c4c:	42bb      	cmp	r3, r7
 8006c4e:	460d      	mov	r5, r1
 8006c50:	d9f4      	bls.n	8006c3c <_printf_i+0x110>
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d10b      	bne.n	8006c6e <_printf_i+0x142>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	07df      	lsls	r7, r3, #31
 8006c5a:	d508      	bpl.n	8006c6e <_printf_i+0x142>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	6861      	ldr	r1, [r4, #4]
 8006c60:	4299      	cmp	r1, r3
 8006c62:	bfde      	ittt	le
 8006c64:	2330      	movle	r3, #48	@ 0x30
 8006c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c6e:	1b92      	subs	r2, r2, r6
 8006c70:	6122      	str	r2, [r4, #16]
 8006c72:	f8cd a000 	str.w	sl, [sp]
 8006c76:	464b      	mov	r3, r9
 8006c78:	aa03      	add	r2, sp, #12
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	f7ff fee7 	bl	8006a50 <_printf_common>
 8006c82:	3001      	adds	r0, #1
 8006c84:	d14a      	bne.n	8006d1c <_printf_i+0x1f0>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	b004      	add	sp, #16
 8006c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	4832      	ldr	r0, [pc, #200]	@ (8006d64 <_printf_i+0x238>)
 8006c9a:	2778      	movs	r7, #120	@ 0x78
 8006c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	6831      	ldr	r1, [r6, #0]
 8006ca4:	061f      	lsls	r7, r3, #24
 8006ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006caa:	d402      	bmi.n	8006cb2 <_printf_i+0x186>
 8006cac:	065f      	lsls	r7, r3, #25
 8006cae:	bf48      	it	mi
 8006cb0:	b2ad      	uxthmi	r5, r5
 8006cb2:	6031      	str	r1, [r6, #0]
 8006cb4:	07d9      	lsls	r1, r3, #31
 8006cb6:	bf44      	itt	mi
 8006cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cbc:	6023      	strmi	r3, [r4, #0]
 8006cbe:	b11d      	cbz	r5, 8006cc8 <_printf_i+0x19c>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	e7ad      	b.n	8006c20 <_printf_i+0xf4>
 8006cc4:	4826      	ldr	r0, [pc, #152]	@ (8006d60 <_printf_i+0x234>)
 8006cc6:	e7e9      	b.n	8006c9c <_printf_i+0x170>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	f023 0320 	bic.w	r3, r3, #32
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	e7f6      	b.n	8006cc0 <_printf_i+0x194>
 8006cd2:	4616      	mov	r6, r2
 8006cd4:	e7bd      	b.n	8006c52 <_printf_i+0x126>
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	6825      	ldr	r5, [r4, #0]
 8006cda:	6961      	ldr	r1, [r4, #20]
 8006cdc:	1d18      	adds	r0, r3, #4
 8006cde:	6030      	str	r0, [r6, #0]
 8006ce0:	062e      	lsls	r6, r5, #24
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	d501      	bpl.n	8006cea <_printf_i+0x1be>
 8006ce6:	6019      	str	r1, [r3, #0]
 8006ce8:	e002      	b.n	8006cf0 <_printf_i+0x1c4>
 8006cea:	0668      	lsls	r0, r5, #25
 8006cec:	d5fb      	bpl.n	8006ce6 <_printf_i+0x1ba>
 8006cee:	8019      	strh	r1, [r3, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	e7bc      	b.n	8006c72 <_printf_i+0x146>
 8006cf8:	6833      	ldr	r3, [r6, #0]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	6032      	str	r2, [r6, #0]
 8006cfe:	681e      	ldr	r6, [r3, #0]
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	2100      	movs	r1, #0
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7f9 fa93 	bl	8000230 <memchr>
 8006d0a:	b108      	cbz	r0, 8006d10 <_printf_i+0x1e4>
 8006d0c:	1b80      	subs	r0, r0, r6
 8006d0e:	6060      	str	r0, [r4, #4]
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	2300      	movs	r3, #0
 8006d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1a:	e7aa      	b.n	8006c72 <_printf_i+0x146>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	4632      	mov	r2, r6
 8006d20:	4649      	mov	r1, r9
 8006d22:	4640      	mov	r0, r8
 8006d24:	47d0      	blx	sl
 8006d26:	3001      	adds	r0, #1
 8006d28:	d0ad      	beq.n	8006c86 <_printf_i+0x15a>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	079b      	lsls	r3, r3, #30
 8006d2e:	d413      	bmi.n	8006d58 <_printf_i+0x22c>
 8006d30:	68e0      	ldr	r0, [r4, #12]
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	4298      	cmp	r0, r3
 8006d36:	bfb8      	it	lt
 8006d38:	4618      	movlt	r0, r3
 8006d3a:	e7a6      	b.n	8006c8a <_printf_i+0x15e>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4632      	mov	r2, r6
 8006d40:	4649      	mov	r1, r9
 8006d42:	4640      	mov	r0, r8
 8006d44:	47d0      	blx	sl
 8006d46:	3001      	adds	r0, #1
 8006d48:	d09d      	beq.n	8006c86 <_printf_i+0x15a>
 8006d4a:	3501      	adds	r5, #1
 8006d4c:	68e3      	ldr	r3, [r4, #12]
 8006d4e:	9903      	ldr	r1, [sp, #12]
 8006d50:	1a5b      	subs	r3, r3, r1
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	dcf2      	bgt.n	8006d3c <_printf_i+0x210>
 8006d56:	e7eb      	b.n	8006d30 <_printf_i+0x204>
 8006d58:	2500      	movs	r5, #0
 8006d5a:	f104 0619 	add.w	r6, r4, #25
 8006d5e:	e7f5      	b.n	8006d4c <_printf_i+0x220>
 8006d60:	0800af75 	.word	0x0800af75
 8006d64:	0800af86 	.word	0x0800af86

08006d68 <std>:
 8006d68:	2300      	movs	r3, #0
 8006d6a:	b510      	push	{r4, lr}
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d76:	6083      	str	r3, [r0, #8]
 8006d78:	8181      	strh	r1, [r0, #12]
 8006d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d7c:	81c2      	strh	r2, [r0, #14]
 8006d7e:	6183      	str	r3, [r0, #24]
 8006d80:	4619      	mov	r1, r3
 8006d82:	2208      	movs	r2, #8
 8006d84:	305c      	adds	r0, #92	@ 0x5c
 8006d86:	f000 fa91 	bl	80072ac <memset>
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <std+0x58>)
 8006d8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <std+0x5c>)
 8006d90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d92:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <std+0x60>)
 8006d94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x64>)
 8006d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x68>)
 8006d9c:	6224      	str	r4, [r4, #32]
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d006      	beq.n	8006db0 <std+0x48>
 8006da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006da6:	4294      	cmp	r4, r2
 8006da8:	d002      	beq.n	8006db0 <std+0x48>
 8006daa:	33d0      	adds	r3, #208	@ 0xd0
 8006dac:	429c      	cmp	r4, r3
 8006dae:	d105      	bne.n	8006dbc <std+0x54>
 8006db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f001 b8b4 	b.w	8007f24 <__retarget_lock_init_recursive>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080070f9 	.word	0x080070f9
 8006dc4:	0800711f 	.word	0x0800711f
 8006dc8:	08007157 	.word	0x08007157
 8006dcc:	0800717b 	.word	0x0800717b
 8006dd0:	20000d08 	.word	0x20000d08

08006dd4 <stdio_exit_handler>:
 8006dd4:	4a02      	ldr	r2, [pc, #8]	@ (8006de0 <stdio_exit_handler+0xc>)
 8006dd6:	4903      	ldr	r1, [pc, #12]	@ (8006de4 <stdio_exit_handler+0x10>)
 8006dd8:	4803      	ldr	r0, [pc, #12]	@ (8006de8 <stdio_exit_handler+0x14>)
 8006dda:	f000 b87b 	b.w	8006ed4 <_fwalk_sglue>
 8006dde:	bf00      	nop
 8006de0:	2000004c 	.word	0x2000004c
 8006de4:	0800a1e9 	.word	0x0800a1e9
 8006de8:	200001d0 	.word	0x200001d0

08006dec <cleanup_stdio>:
 8006dec:	6841      	ldr	r1, [r0, #4]
 8006dee:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <cleanup_stdio+0x34>)
 8006df0:	4299      	cmp	r1, r3
 8006df2:	b510      	push	{r4, lr}
 8006df4:	4604      	mov	r4, r0
 8006df6:	d001      	beq.n	8006dfc <cleanup_stdio+0x10>
 8006df8:	f003 f9f6 	bl	800a1e8 <_fflush_r>
 8006dfc:	68a1      	ldr	r1, [r4, #8]
 8006dfe:	4b09      	ldr	r3, [pc, #36]	@ (8006e24 <cleanup_stdio+0x38>)
 8006e00:	4299      	cmp	r1, r3
 8006e02:	d002      	beq.n	8006e0a <cleanup_stdio+0x1e>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f003 f9ef 	bl	800a1e8 <_fflush_r>
 8006e0a:	68e1      	ldr	r1, [r4, #12]
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <cleanup_stdio+0x3c>)
 8006e0e:	4299      	cmp	r1, r3
 8006e10:	d004      	beq.n	8006e1c <cleanup_stdio+0x30>
 8006e12:	4620      	mov	r0, r4
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	f003 b9e6 	b.w	800a1e8 <_fflush_r>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000d08 	.word	0x20000d08
 8006e24:	20000d70 	.word	0x20000d70
 8006e28:	20000dd8 	.word	0x20000dd8

08006e2c <global_stdio_init.part.0>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e5c <global_stdio_init.part.0+0x30>)
 8006e30:	4c0b      	ldr	r4, [pc, #44]	@ (8006e60 <global_stdio_init.part.0+0x34>)
 8006e32:	4a0c      	ldr	r2, [pc, #48]	@ (8006e64 <global_stdio_init.part.0+0x38>)
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	4620      	mov	r0, r4
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	f7ff ff94 	bl	8006d68 <std>
 8006e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e44:	2201      	movs	r2, #1
 8006e46:	2109      	movs	r1, #9
 8006e48:	f7ff ff8e 	bl	8006d68 <std>
 8006e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e50:	2202      	movs	r2, #2
 8006e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e56:	2112      	movs	r1, #18
 8006e58:	f7ff bf86 	b.w	8006d68 <std>
 8006e5c:	20000e40 	.word	0x20000e40
 8006e60:	20000d08 	.word	0x20000d08
 8006e64:	08006dd5 	.word	0x08006dd5

08006e68 <__sfp_lock_acquire>:
 8006e68:	4801      	ldr	r0, [pc, #4]	@ (8006e70 <__sfp_lock_acquire+0x8>)
 8006e6a:	f001 b85d 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20000e6f 	.word	0x20000e6f

08006e74 <__sfp_lock_release>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__sfp_lock_release+0x8>)
 8006e76:	f001 b859 	b.w	8007f2c <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000e6f 	.word	0x20000e6f

08006e80 <__sinit>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4604      	mov	r4, r0
 8006e84:	f7ff fff0 	bl	8006e68 <__sfp_lock_acquire>
 8006e88:	6a23      	ldr	r3, [r4, #32]
 8006e8a:	b11b      	cbz	r3, 8006e94 <__sinit+0x14>
 8006e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e90:	f7ff bff0 	b.w	8006e74 <__sfp_lock_release>
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <__sinit+0x28>)
 8006e96:	6223      	str	r3, [r4, #32]
 8006e98:	4b04      	ldr	r3, [pc, #16]	@ (8006eac <__sinit+0x2c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f5      	bne.n	8006e8c <__sinit+0xc>
 8006ea0:	f7ff ffc4 	bl	8006e2c <global_stdio_init.part.0>
 8006ea4:	e7f2      	b.n	8006e8c <__sinit+0xc>
 8006ea6:	bf00      	nop
 8006ea8:	08006ded 	.word	0x08006ded
 8006eac:	20000e40 	.word	0x20000e40

08006eb0 <fiprintf>:
 8006eb0:	b40e      	push	{r1, r2, r3}
 8006eb2:	b503      	push	{r0, r1, lr}
 8006eb4:	4601      	mov	r1, r0
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	4805      	ldr	r0, [pc, #20]	@ (8006ed0 <fiprintf+0x20>)
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	f002 fea7 	bl	8009c14 <_vfiprintf_r>
 8006ec6:	b002      	add	sp, #8
 8006ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ecc:	b003      	add	sp, #12
 8006ece:	4770      	bx	lr
 8006ed0:	200001cc 	.word	0x200001cc

08006ed4 <_fwalk_sglue>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4607      	mov	r7, r0
 8006eda:	4688      	mov	r8, r1
 8006edc:	4614      	mov	r4, r2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee8:	d505      	bpl.n	8006ef6 <_fwalk_sglue+0x22>
 8006eea:	6824      	ldr	r4, [r4, #0]
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	d1f7      	bne.n	8006ee0 <_fwalk_sglue+0xc>
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d907      	bls.n	8006f0c <_fwalk_sglue+0x38>
 8006efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f00:	3301      	adds	r3, #1
 8006f02:	d003      	beq.n	8006f0c <_fwalk_sglue+0x38>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	4306      	orrs	r6, r0
 8006f0c:	3568      	adds	r5, #104	@ 0x68
 8006f0e:	e7e9      	b.n	8006ee4 <_fwalk_sglue+0x10>

08006f10 <iprintf>:
 8006f10:	b40f      	push	{r0, r1, r2, r3}
 8006f12:	b507      	push	{r0, r1, r2, lr}
 8006f14:	4906      	ldr	r1, [pc, #24]	@ (8006f30 <iprintf+0x20>)
 8006f16:	ab04      	add	r3, sp, #16
 8006f18:	6808      	ldr	r0, [r1, #0]
 8006f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1e:	6881      	ldr	r1, [r0, #8]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	f002 fe77 	bl	8009c14 <_vfiprintf_r>
 8006f26:	b003      	add	sp, #12
 8006f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f2c:	b004      	add	sp, #16
 8006f2e:	4770      	bx	lr
 8006f30:	200001cc 	.word	0x200001cc

08006f34 <_puts_r>:
 8006f34:	6a03      	ldr	r3, [r0, #32]
 8006f36:	b570      	push	{r4, r5, r6, lr}
 8006f38:	6884      	ldr	r4, [r0, #8]
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_puts_r+0x10>
 8006f40:	f7ff ff9e 	bl	8006e80 <__sinit>
 8006f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f46:	07db      	lsls	r3, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_puts_r+0x22>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	0598      	lsls	r0, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_puts_r+0x22>
 8006f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f52:	f000 ffe9 	bl	8007f28 <__retarget_lock_acquire_recursive>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	0719      	lsls	r1, r3, #28
 8006f5a:	d502      	bpl.n	8006f62 <_puts_r+0x2e>
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d135      	bne.n	8006fce <_puts_r+0x9a>
 8006f62:	4621      	mov	r1, r4
 8006f64:	4628      	mov	r0, r5
 8006f66:	f000 f94b 	bl	8007200 <__swsetup_r>
 8006f6a:	b380      	cbz	r0, 8006fce <_puts_r+0x9a>
 8006f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f72:	07da      	lsls	r2, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_puts_r+0x4e>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	059b      	lsls	r3, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_puts_r+0x4e>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7e:	f000 ffd5 	bl	8007f2c <__retarget_lock_release_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da04      	bge.n	8006f94 <_puts_r+0x60>
 8006f8a:	69a2      	ldr	r2, [r4, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	dc17      	bgt.n	8006fc0 <_puts_r+0x8c>
 8006f90:	290a      	cmp	r1, #10
 8006f92:	d015      	beq.n	8006fc0 <_puts_r+0x8c>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	6022      	str	r2, [r4, #0]
 8006f9a:	7019      	strb	r1, [r3, #0]
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d1ed      	bne.n	8006f86 <_puts_r+0x52>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da11      	bge.n	8006fd2 <_puts_r+0x9e>
 8006fae:	4622      	mov	r2, r4
 8006fb0:	210a      	movs	r1, #10
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f8e5 	bl	8007182 <__swbuf_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0d7      	beq.n	8006f6c <_puts_r+0x38>
 8006fbc:	250a      	movs	r5, #10
 8006fbe:	e7d7      	b.n	8006f70 <_puts_r+0x3c>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f8dd 	bl	8007182 <__swbuf_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1e7      	bne.n	8006f9c <_puts_r+0x68>
 8006fcc:	e7ce      	b.n	8006f6c <_puts_r+0x38>
 8006fce:	3e01      	subs	r6, #1
 8006fd0:	e7e4      	b.n	8006f9c <_puts_r+0x68>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	220a      	movs	r2, #10
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e7ee      	b.n	8006fbc <_puts_r+0x88>
	...

08006fe0 <puts>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	@ (8006fec <puts+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f7ff bfa5 	b.w	8006f34 <_puts_r>
 8006fea:	bf00      	nop
 8006fec:	200001cc 	.word	0x200001cc

08006ff0 <sniprintf>:
 8006ff0:	b40c      	push	{r2, r3}
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	4b18      	ldr	r3, [pc, #96]	@ (8007058 <sniprintf+0x68>)
 8006ff6:	1e0c      	subs	r4, r1, #0
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	b09d      	sub	sp, #116	@ 0x74
 8006ffc:	da08      	bge.n	8007010 <sniprintf+0x20>
 8006ffe:	238b      	movs	r3, #139	@ 0x8b
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	b01d      	add	sp, #116	@ 0x74
 8007008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800700c:	b002      	add	sp, #8
 800700e:	4770      	bx	lr
 8007010:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800701e:	bf14      	ite	ne
 8007020:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007024:	4623      	moveq	r3, r4
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800702e:	9002      	str	r0, [sp, #8]
 8007030:	9006      	str	r0, [sp, #24]
 8007032:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007036:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007038:	ab21      	add	r3, sp, #132	@ 0x84
 800703a:	a902      	add	r1, sp, #8
 800703c:	4628      	mov	r0, r5
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f002 faf2 	bl	8009628 <_svfiprintf_r>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	bfbc      	itt	lt
 8007048:	238b      	movlt	r3, #139	@ 0x8b
 800704a:	602b      	strlt	r3, [r5, #0]
 800704c:	2c00      	cmp	r4, #0
 800704e:	d0da      	beq.n	8007006 <sniprintf+0x16>
 8007050:	9b02      	ldr	r3, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e7d6      	b.n	8007006 <sniprintf+0x16>
 8007058:	200001cc 	.word	0x200001cc

0800705c <siprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	b510      	push	{r4, lr}
 8007060:	b09d      	sub	sp, #116	@ 0x74
 8007062:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9006      	str	r0, [sp, #24]
 8007068:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800706c:	480a      	ldr	r0, [pc, #40]	@ (8007098 <siprintf+0x3c>)
 800706e:	9107      	str	r1, [sp, #28]
 8007070:	9104      	str	r1, [sp, #16]
 8007072:	490a      	ldr	r1, [pc, #40]	@ (800709c <siprintf+0x40>)
 8007074:	f853 2b04 	ldr.w	r2, [r3], #4
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	2400      	movs	r4, #0
 800707c:	a902      	add	r1, sp, #8
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007084:	f002 fad0 	bl	8009628 <_svfiprintf_r>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	701c      	strb	r4, [r3, #0]
 800708c:	b01d      	add	sp, #116	@ 0x74
 800708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007092:	b003      	add	sp, #12
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	200001cc 	.word	0x200001cc
 800709c:	ffff0208 	.word	0xffff0208

080070a0 <siscanf>:
 80070a0:	b40e      	push	{r1, r2, r3}
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	b09d      	sub	sp, #116	@ 0x74
 80070a6:	ac21      	add	r4, sp, #132	@ 0x84
 80070a8:	2500      	movs	r5, #0
 80070aa:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80070ae:	f854 6b04 	ldr.w	r6, [r4], #4
 80070b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80070b6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80070b8:	9002      	str	r0, [sp, #8]
 80070ba:	9006      	str	r0, [sp, #24]
 80070bc:	f7f9 f908 	bl	80002d0 <strlen>
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <siscanf+0x50>)
 80070c2:	9003      	str	r0, [sp, #12]
 80070c4:	9007      	str	r0, [sp, #28]
 80070c6:	480b      	ldr	r0, [pc, #44]	@ (80070f4 <siscanf+0x54>)
 80070c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070d2:	4632      	mov	r2, r6
 80070d4:	4623      	mov	r3, r4
 80070d6:	a902      	add	r1, sp, #8
 80070d8:	6800      	ldr	r0, [r0, #0]
 80070da:	950f      	str	r5, [sp, #60]	@ 0x3c
 80070dc:	9514      	str	r5, [sp, #80]	@ 0x50
 80070de:	9401      	str	r4, [sp, #4]
 80070e0:	f002 fbf8 	bl	80098d4 <__ssvfiscanf_r>
 80070e4:	b01d      	add	sp, #116	@ 0x74
 80070e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070ea:	b003      	add	sp, #12
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	0800711b 	.word	0x0800711b
 80070f4:	200001cc 	.word	0x200001cc

080070f8 <__sread>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	460c      	mov	r4, r1
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	f000 feb2 	bl	8007e68 <_read_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	bfab      	itete	ge
 8007108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800710a:	89a3      	ldrhlt	r3, [r4, #12]
 800710c:	181b      	addge	r3, r3, r0
 800710e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007112:	bfac      	ite	ge
 8007114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007116:	81a3      	strhlt	r3, [r4, #12]
 8007118:	bd10      	pop	{r4, pc}

0800711a <__seofread>:
 800711a:	2000      	movs	r0, #0
 800711c:	4770      	bx	lr

0800711e <__swrite>:
 800711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007122:	461f      	mov	r7, r3
 8007124:	898b      	ldrh	r3, [r1, #12]
 8007126:	05db      	lsls	r3, r3, #23
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4616      	mov	r6, r2
 800712e:	d505      	bpl.n	800713c <__swrite+0x1e>
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2302      	movs	r3, #2
 8007136:	2200      	movs	r2, #0
 8007138:	f000 fe84 	bl	8007e44 <_lseek_r>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007146:	81a3      	strh	r3, [r4, #12]
 8007148:	4632      	mov	r2, r6
 800714a:	463b      	mov	r3, r7
 800714c:	4628      	mov	r0, r5
 800714e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007152:	f000 beab 	b.w	8007eac <_write_r>

08007156 <__sseek>:
 8007156:	b510      	push	{r4, lr}
 8007158:	460c      	mov	r4, r1
 800715a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800715e:	f000 fe71 	bl	8007e44 <_lseek_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	bf15      	itete	ne
 8007168:	6560      	strne	r0, [r4, #84]	@ 0x54
 800716a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800716e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007172:	81a3      	strheq	r3, [r4, #12]
 8007174:	bf18      	it	ne
 8007176:	81a3      	strhne	r3, [r4, #12]
 8007178:	bd10      	pop	{r4, pc}

0800717a <__sclose>:
 800717a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717e:	f000 be51 	b.w	8007e24 <_close_r>

08007182 <__swbuf_r>:
 8007182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007184:	460e      	mov	r6, r1
 8007186:	4614      	mov	r4, r2
 8007188:	4605      	mov	r5, r0
 800718a:	b118      	cbz	r0, 8007194 <__swbuf_r+0x12>
 800718c:	6a03      	ldr	r3, [r0, #32]
 800718e:	b90b      	cbnz	r3, 8007194 <__swbuf_r+0x12>
 8007190:	f7ff fe76 	bl	8006e80 <__sinit>
 8007194:	69a3      	ldr	r3, [r4, #24]
 8007196:	60a3      	str	r3, [r4, #8]
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	071a      	lsls	r2, r3, #28
 800719c:	d501      	bpl.n	80071a2 <__swbuf_r+0x20>
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	b943      	cbnz	r3, 80071b4 <__swbuf_r+0x32>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f82b 	bl	8007200 <__swsetup_r>
 80071aa:	b118      	cbz	r0, 80071b4 <__swbuf_r+0x32>
 80071ac:	f04f 37ff 	mov.w	r7, #4294967295
 80071b0:	4638      	mov	r0, r7
 80071b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	6922      	ldr	r2, [r4, #16]
 80071b8:	1a98      	subs	r0, r3, r2
 80071ba:	6963      	ldr	r3, [r4, #20]
 80071bc:	b2f6      	uxtb	r6, r6
 80071be:	4283      	cmp	r3, r0
 80071c0:	4637      	mov	r7, r6
 80071c2:	dc05      	bgt.n	80071d0 <__swbuf_r+0x4e>
 80071c4:	4621      	mov	r1, r4
 80071c6:	4628      	mov	r0, r5
 80071c8:	f003 f80e 	bl	800a1e8 <_fflush_r>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d1ed      	bne.n	80071ac <__swbuf_r+0x2a>
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	6022      	str	r2, [r4, #0]
 80071dc:	701e      	strb	r6, [r3, #0]
 80071de:	6962      	ldr	r2, [r4, #20]
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d004      	beq.n	80071f0 <__swbuf_r+0x6e>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	07db      	lsls	r3, r3, #31
 80071ea:	d5e1      	bpl.n	80071b0 <__swbuf_r+0x2e>
 80071ec:	2e0a      	cmp	r6, #10
 80071ee:	d1df      	bne.n	80071b0 <__swbuf_r+0x2e>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f002 fff8 	bl	800a1e8 <_fflush_r>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d0d9      	beq.n	80071b0 <__swbuf_r+0x2e>
 80071fc:	e7d6      	b.n	80071ac <__swbuf_r+0x2a>
	...

08007200 <__swsetup_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <__swsetup_r+0xa8>)
 8007204:	4605      	mov	r5, r0
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	460c      	mov	r4, r1
 800720a:	b118      	cbz	r0, 8007214 <__swsetup_r+0x14>
 800720c:	6a03      	ldr	r3, [r0, #32]
 800720e:	b90b      	cbnz	r3, 8007214 <__swsetup_r+0x14>
 8007210:	f7ff fe36 	bl	8006e80 <__sinit>
 8007214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007218:	0719      	lsls	r1, r3, #28
 800721a:	d422      	bmi.n	8007262 <__swsetup_r+0x62>
 800721c:	06da      	lsls	r2, r3, #27
 800721e:	d407      	bmi.n	8007230 <__swsetup_r+0x30>
 8007220:	2209      	movs	r2, #9
 8007222:	602a      	str	r2, [r5, #0]
 8007224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	f04f 30ff 	mov.w	r0, #4294967295
 800722e:	e033      	b.n	8007298 <__swsetup_r+0x98>
 8007230:	0758      	lsls	r0, r3, #29
 8007232:	d512      	bpl.n	800725a <__swsetup_r+0x5a>
 8007234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007236:	b141      	cbz	r1, 800724a <__swsetup_r+0x4a>
 8007238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <__swsetup_r+0x46>
 8007240:	4628      	mov	r0, r5
 8007242:	f001 fced 	bl	8008c20 <_free_r>
 8007246:	2300      	movs	r3, #0
 8007248:	6363      	str	r3, [r4, #52]	@ 0x34
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	2300      	movs	r3, #0
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0308 	orr.w	r3, r3, #8
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	b94b      	cbnz	r3, 800727a <__swsetup_r+0x7a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800726c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007270:	d003      	beq.n	800727a <__swsetup_r+0x7a>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f003 f805 	bl	800a284 <__smakebuf_r>
 800727a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727e:	f013 0201 	ands.w	r2, r3, #1
 8007282:	d00a      	beq.n	800729a <__swsetup_r+0x9a>
 8007284:	2200      	movs	r2, #0
 8007286:	60a2      	str	r2, [r4, #8]
 8007288:	6962      	ldr	r2, [r4, #20]
 800728a:	4252      	negs	r2, r2
 800728c:	61a2      	str	r2, [r4, #24]
 800728e:	6922      	ldr	r2, [r4, #16]
 8007290:	b942      	cbnz	r2, 80072a4 <__swsetup_r+0xa4>
 8007292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007296:	d1c5      	bne.n	8007224 <__swsetup_r+0x24>
 8007298:	bd38      	pop	{r3, r4, r5, pc}
 800729a:	0799      	lsls	r1, r3, #30
 800729c:	bf58      	it	pl
 800729e:	6962      	ldrpl	r2, [r4, #20]
 80072a0:	60a2      	str	r2, [r4, #8]
 80072a2:	e7f4      	b.n	800728e <__swsetup_r+0x8e>
 80072a4:	2000      	movs	r0, #0
 80072a6:	e7f7      	b.n	8007298 <__swsetup_r+0x98>
 80072a8:	200001cc 	.word	0x200001cc

080072ac <memset>:
 80072ac:	4402      	add	r2, r0
 80072ae:	4603      	mov	r3, r0
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d100      	bne.n	80072b6 <memset+0xa>
 80072b4:	4770      	bx	lr
 80072b6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ba:	e7f9      	b.n	80072b0 <memset+0x4>

080072bc <strncmp>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	b16a      	cbz	r2, 80072dc <strncmp+0x20>
 80072c0:	3901      	subs	r1, #1
 80072c2:	1884      	adds	r4, r0, r2
 80072c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d103      	bne.n	80072d8 <strncmp+0x1c>
 80072d0:	42a0      	cmp	r0, r4
 80072d2:	d001      	beq.n	80072d8 <strncmp+0x1c>
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d1f5      	bne.n	80072c4 <strncmp+0x8>
 80072d8:	1ad0      	subs	r0, r2, r3
 80072da:	bd10      	pop	{r4, pc}
 80072dc:	4610      	mov	r0, r2
 80072de:	e7fc      	b.n	80072da <strncmp+0x1e>

080072e0 <strncpy>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	3901      	subs	r1, #1
 80072e4:	4603      	mov	r3, r0
 80072e6:	b132      	cbz	r2, 80072f6 <strncpy+0x16>
 80072e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072ec:	f803 4b01 	strb.w	r4, [r3], #1
 80072f0:	3a01      	subs	r2, #1
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d1f7      	bne.n	80072e6 <strncpy+0x6>
 80072f6:	441a      	add	r2, r3
 80072f8:	2100      	movs	r1, #0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d100      	bne.n	8007300 <strncpy+0x20>
 80072fe:	bd10      	pop	{r4, pc}
 8007300:	f803 1b01 	strb.w	r1, [r3], #1
 8007304:	e7f9      	b.n	80072fa <strncpy+0x1a>

08007306 <strstr>:
 8007306:	780a      	ldrb	r2, [r1, #0]
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	b96a      	cbnz	r2, 8007328 <strstr+0x22>
 800730c:	bd70      	pop	{r4, r5, r6, pc}
 800730e:	429a      	cmp	r2, r3
 8007310:	d109      	bne.n	8007326 <strstr+0x20>
 8007312:	460c      	mov	r4, r1
 8007314:	4605      	mov	r5, r0
 8007316:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f6      	beq.n	800730c <strstr+0x6>
 800731e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007322:	429e      	cmp	r6, r3
 8007324:	d0f7      	beq.n	8007316 <strstr+0x10>
 8007326:	3001      	adds	r0, #1
 8007328:	7803      	ldrb	r3, [r0, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1ef      	bne.n	800730e <strstr+0x8>
 800732e:	4618      	mov	r0, r3
 8007330:	e7ec      	b.n	800730c <strstr+0x6>
	...

08007334 <validate_structure>:
 8007334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007336:	6801      	ldr	r1, [r0, #0]
 8007338:	293b      	cmp	r1, #59	@ 0x3b
 800733a:	4604      	mov	r4, r0
 800733c:	d911      	bls.n	8007362 <validate_structure+0x2e>
 800733e:	223c      	movs	r2, #60	@ 0x3c
 8007340:	4668      	mov	r0, sp
 8007342:	f000 fe0a 	bl	8007f5a <div>
 8007346:	9a01      	ldr	r2, [sp, #4]
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	9900      	ldr	r1, [sp, #0]
 800734c:	2a00      	cmp	r2, #0
 800734e:	440b      	add	r3, r1
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bfbb      	ittet	lt
 8007354:	323c      	addlt	r2, #60	@ 0x3c
 8007356:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800735a:	6022      	strge	r2, [r4, #0]
 800735c:	6022      	strlt	r2, [r4, #0]
 800735e:	bfb8      	it	lt
 8007360:	6063      	strlt	r3, [r4, #4]
 8007362:	6861      	ldr	r1, [r4, #4]
 8007364:	293b      	cmp	r1, #59	@ 0x3b
 8007366:	d911      	bls.n	800738c <validate_structure+0x58>
 8007368:	223c      	movs	r2, #60	@ 0x3c
 800736a:	4668      	mov	r0, sp
 800736c:	f000 fdf5 	bl	8007f5a <div>
 8007370:	9a01      	ldr	r2, [sp, #4]
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	9900      	ldr	r1, [sp, #0]
 8007376:	2a00      	cmp	r2, #0
 8007378:	440b      	add	r3, r1
 800737a:	60a3      	str	r3, [r4, #8]
 800737c:	bfbb      	ittet	lt
 800737e:	323c      	addlt	r2, #60	@ 0x3c
 8007380:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007384:	6062      	strge	r2, [r4, #4]
 8007386:	6062      	strlt	r2, [r4, #4]
 8007388:	bfb8      	it	lt
 800738a:	60a3      	strlt	r3, [r4, #8]
 800738c:	68a1      	ldr	r1, [r4, #8]
 800738e:	2917      	cmp	r1, #23
 8007390:	d911      	bls.n	80073b6 <validate_structure+0x82>
 8007392:	2218      	movs	r2, #24
 8007394:	4668      	mov	r0, sp
 8007396:	f000 fde0 	bl	8007f5a <div>
 800739a:	9a01      	ldr	r2, [sp, #4]
 800739c:	68e3      	ldr	r3, [r4, #12]
 800739e:	9900      	ldr	r1, [sp, #0]
 80073a0:	2a00      	cmp	r2, #0
 80073a2:	440b      	add	r3, r1
 80073a4:	60e3      	str	r3, [r4, #12]
 80073a6:	bfbb      	ittet	lt
 80073a8:	3218      	addlt	r2, #24
 80073aa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80073ae:	60a2      	strge	r2, [r4, #8]
 80073b0:	60a2      	strlt	r2, [r4, #8]
 80073b2:	bfb8      	it	lt
 80073b4:	60e3      	strlt	r3, [r4, #12]
 80073b6:	6921      	ldr	r1, [r4, #16]
 80073b8:	290b      	cmp	r1, #11
 80073ba:	d911      	bls.n	80073e0 <validate_structure+0xac>
 80073bc:	220c      	movs	r2, #12
 80073be:	4668      	mov	r0, sp
 80073c0:	f000 fdcb 	bl	8007f5a <div>
 80073c4:	9a01      	ldr	r2, [sp, #4]
 80073c6:	6963      	ldr	r3, [r4, #20]
 80073c8:	9900      	ldr	r1, [sp, #0]
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	440b      	add	r3, r1
 80073ce:	6163      	str	r3, [r4, #20]
 80073d0:	bfbb      	ittet	lt
 80073d2:	320c      	addlt	r2, #12
 80073d4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80073d8:	6122      	strge	r2, [r4, #16]
 80073da:	6122      	strlt	r2, [r4, #16]
 80073dc:	bfb8      	it	lt
 80073de:	6163      	strlt	r3, [r4, #20]
 80073e0:	6963      	ldr	r3, [r4, #20]
 80073e2:	079a      	lsls	r2, r3, #30
 80073e4:	d11c      	bne.n	8007420 <validate_structure+0xec>
 80073e6:	2164      	movs	r1, #100	@ 0x64
 80073e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80073ec:	fb01 3212 	mls	r2, r1, r2, r3
 80073f0:	b9c2      	cbnz	r2, 8007424 <validate_structure+0xf0>
 80073f2:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80073f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80073fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80073fe:	fb02 3311 	mls	r3, r2, r1, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf0c      	ite	eq
 8007406:	231d      	moveq	r3, #29
 8007408:	231c      	movne	r3, #28
 800740a:	68e2      	ldr	r2, [r4, #12]
 800740c:	2a00      	cmp	r2, #0
 800740e:	dc0b      	bgt.n	8007428 <validate_structure+0xf4>
 8007410:	4d31      	ldr	r5, [pc, #196]	@ (80074d8 <validate_structure+0x1a4>)
 8007412:	200b      	movs	r0, #11
 8007414:	2164      	movs	r1, #100	@ 0x64
 8007416:	68e6      	ldr	r6, [r4, #12]
 8007418:	2e00      	cmp	r6, #0
 800741a:	dd30      	ble.n	800747e <validate_structure+0x14a>
 800741c:	b003      	add	sp, #12
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007420:	231c      	movs	r3, #28
 8007422:	e7f2      	b.n	800740a <validate_structure+0xd6>
 8007424:	231d      	movs	r3, #29
 8007426:	e7f0      	b.n	800740a <validate_structure+0xd6>
 8007428:	4d2b      	ldr	r5, [pc, #172]	@ (80074d8 <validate_structure+0x1a4>)
 800742a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800742e:	2a01      	cmp	r2, #1
 8007430:	bf14      	ite	ne
 8007432:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8007436:	4618      	moveq	r0, r3
 8007438:	4281      	cmp	r1, r0
 800743a:	ddef      	ble.n	800741c <validate_structure+0xe8>
 800743c:	3201      	adds	r2, #1
 800743e:	1a09      	subs	r1, r1, r0
 8007440:	2a0c      	cmp	r2, #12
 8007442:	60e1      	str	r1, [r4, #12]
 8007444:	6122      	str	r2, [r4, #16]
 8007446:	d1f0      	bne.n	800742a <validate_structure+0xf6>
 8007448:	6963      	ldr	r3, [r4, #20]
 800744a:	2100      	movs	r1, #0
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	6121      	str	r1, [r4, #16]
 8007450:	0791      	lsls	r1, r2, #30
 8007452:	6162      	str	r2, [r4, #20]
 8007454:	d13c      	bne.n	80074d0 <validate_structure+0x19c>
 8007456:	2164      	movs	r1, #100	@ 0x64
 8007458:	fb92 f0f1 	sdiv	r0, r2, r1
 800745c:	fb01 2210 	mls	r2, r1, r0, r2
 8007460:	2a00      	cmp	r2, #0
 8007462:	d137      	bne.n	80074d4 <validate_structure+0x1a0>
 8007464:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8007468:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800746c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007470:	fb02 3311 	mls	r3, r2, r1, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf0c      	ite	eq
 8007478:	231d      	moveq	r3, #29
 800747a:	231c      	movne	r3, #28
 800747c:	e7d5      	b.n	800742a <validate_structure+0xf6>
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	3a01      	subs	r2, #1
 8007482:	6122      	str	r2, [r4, #16]
 8007484:	3201      	adds	r2, #1
 8007486:	d116      	bne.n	80074b6 <validate_structure+0x182>
 8007488:	6963      	ldr	r3, [r4, #20]
 800748a:	1e5a      	subs	r2, r3, #1
 800748c:	0797      	lsls	r7, r2, #30
 800748e:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8007492:	d119      	bne.n	80074c8 <validate_structure+0x194>
 8007494:	fb92 f7f1 	sdiv	r7, r2, r1
 8007498:	fb01 2217 	mls	r2, r1, r7, r2
 800749c:	b9b2      	cbnz	r2, 80074cc <validate_structure+0x198>
 800749e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80074a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80074a6:	fb93 f7f2 	sdiv	r7, r3, r2
 80074aa:	fb02 3317 	mls	r3, r2, r7, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf0c      	ite	eq
 80074b2:	231d      	moveq	r3, #29
 80074b4:	231c      	movne	r3, #28
 80074b6:	6922      	ldr	r2, [r4, #16]
 80074b8:	2a01      	cmp	r2, #1
 80074ba:	bf14      	ite	ne
 80074bc:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 80074c0:	461a      	moveq	r2, r3
 80074c2:	4432      	add	r2, r6
 80074c4:	60e2      	str	r2, [r4, #12]
 80074c6:	e7a6      	b.n	8007416 <validate_structure+0xe2>
 80074c8:	231c      	movs	r3, #28
 80074ca:	e7f4      	b.n	80074b6 <validate_structure+0x182>
 80074cc:	231d      	movs	r3, #29
 80074ce:	e7f2      	b.n	80074b6 <validate_structure+0x182>
 80074d0:	231c      	movs	r3, #28
 80074d2:	e7aa      	b.n	800742a <validate_structure+0xf6>
 80074d4:	231d      	movs	r3, #29
 80074d6:	e7a8      	b.n	800742a <validate_structure+0xf6>
 80074d8:	0800b170 	.word	0x0800b170

080074dc <mktime>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	b085      	sub	sp, #20
 80074e2:	4607      	mov	r7, r0
 80074e4:	f002 ff98 	bl	800a418 <__gettzinfo>
 80074e8:	4681      	mov	r9, r0
 80074ea:	4638      	mov	r0, r7
 80074ec:	f7ff ff22 	bl	8007334 <validate_structure>
 80074f0:	e9d7 4300 	ldrd	r4, r3, [r7]
 80074f4:	223c      	movs	r2, #60	@ 0x3c
 80074f6:	fb02 4403 	mla	r4, r2, r3, r4
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	697d      	ldr	r5, [r7, #20]
 80074fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007502:	fb02 4403 	mla	r4, r2, r3, r4
 8007506:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800750a:	4ac3      	ldr	r2, [pc, #780]	@ (8007818 <mktime+0x33c>)
 800750c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007510:	3e01      	subs	r6, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	4416      	add	r6, r2
 8007516:	dd11      	ble.n	800753c <mktime+0x60>
 8007518:	07a9      	lsls	r1, r5, #30
 800751a:	d10f      	bne.n	800753c <mktime+0x60>
 800751c:	2264      	movs	r2, #100	@ 0x64
 800751e:	fb95 f3f2 	sdiv	r3, r5, r2
 8007522:	fb02 5313 	mls	r3, r2, r3, r5
 8007526:	b943      	cbnz	r3, 800753a <mktime+0x5e>
 8007528:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800752c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007530:	fb93 f1f2 	sdiv	r1, r3, r2
 8007534:	fb02 3311 	mls	r3, r2, r1, r3
 8007538:	b903      	cbnz	r3, 800753c <mktime+0x60>
 800753a:	3601      	adds	r6, #1
 800753c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8007540:	3310      	adds	r3, #16
 8007542:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007546:	4293      	cmp	r3, r2
 8007548:	61fe      	str	r6, [r7, #28]
 800754a:	f200 8170 	bhi.w	800782e <mktime+0x352>
 800754e:	2d46      	cmp	r5, #70	@ 0x46
 8007550:	f340 80b6 	ble.w	80076c0 <mktime+0x1e4>
 8007554:	2346      	movs	r3, #70	@ 0x46
 8007556:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800755a:	2164      	movs	r1, #100	@ 0x64
 800755c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8007560:	079a      	lsls	r2, r3, #30
 8007562:	f040 80a7 	bne.w	80076b4 <mktime+0x1d8>
 8007566:	fb93 f2f1 	sdiv	r2, r3, r1
 800756a:	fb01 3212 	mls	r2, r1, r2, r3
 800756e:	2a00      	cmp	r2, #0
 8007570:	f040 80a3 	bne.w	80076ba <mktime+0x1de>
 8007574:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8007578:	fb92 fef0 	sdiv	lr, r2, r0
 800757c:	fb00 221e 	mls	r2, r0, lr, r2
 8007580:	2a00      	cmp	r2, #0
 8007582:	bf0c      	ite	eq
 8007584:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8007588:	4662      	movne	r2, ip
 800758a:	3301      	adds	r3, #1
 800758c:	429d      	cmp	r5, r3
 800758e:	4416      	add	r6, r2
 8007590:	d1e6      	bne.n	8007560 <mktime+0x84>
 8007592:	4ba2      	ldr	r3, [pc, #648]	@ (800781c <mktime+0x340>)
 8007594:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8007598:	fbc6 4803 	smlal	r4, r8, r6, r3
 800759c:	f000 fa0a 	bl	80079b4 <__tz_lock>
 80075a0:	f000 fa14 	bl	80079cc <_tzset_unlocked>
 80075a4:	4b9e      	ldr	r3, [pc, #632]	@ (8007820 <mktime+0x344>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8147 	beq.w	800783c <mktime+0x360>
 80075ae:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80075b2:	6978      	ldr	r0, [r7, #20]
 80075b4:	4653      	mov	r3, sl
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	bfa8      	it	ge
 80075ba:	2301      	movge	r3, #1
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80075c2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80075c6:	4283      	cmp	r3, r0
 80075c8:	f040 80bd 	bne.w	8007746 <mktime+0x26a>
 80075cc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 80075d0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 80075d4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 80075d8:	1a13      	subs	r3, r2, r0
 80075da:	9303      	str	r3, [sp, #12]
 80075dc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	9a02      	ldr	r2, [sp, #8]
 80075e4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80075e8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 80075ec:	ebb2 0e03 	subs.w	lr, r2, r3
 80075f0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 80075f4:	4574      	cmp	r4, lr
 80075f6:	eb78 0201 	sbcs.w	r2, r8, r1
 80075fa:	f280 80c7 	bge.w	800778c <mktime+0x2b0>
 80075fe:	f8d9 2000 	ldr.w	r2, [r9]
 8007602:	2a00      	cmp	r2, #0
 8007604:	f000 80d0 	beq.w	80077a8 <mktime+0x2cc>
 8007608:	9a03      	ldr	r2, [sp, #12]
 800760a:	4294      	cmp	r4, r2
 800760c:	eb78 020b 	sbcs.w	r2, r8, fp
 8007610:	f2c0 8111 	blt.w	8007836 <mktime+0x35a>
 8007614:	4574      	cmp	r4, lr
 8007616:	eb78 0101 	sbcs.w	r1, r8, r1
 800761a:	bfb4      	ite	lt
 800761c:	f04f 0b01 	movlt.w	fp, #1
 8007620:	f04f 0b00 	movge.w	fp, #0
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	f2c0 8094 	blt.w	8007754 <mktime+0x278>
 800762c:	9a01      	ldr	r2, [sp, #4]
 800762e:	ea82 0a0b 	eor.w	sl, r2, fp
 8007632:	f1ba 0f01 	cmp.w	sl, #1
 8007636:	f040 808d 	bne.w	8007754 <mktime+0x278>
 800763a:	f1bb 0f00 	cmp.w	fp, #0
 800763e:	f000 80c2 	beq.w	80077c6 <mktime+0x2ea>
 8007642:	1a1b      	subs	r3, r3, r0
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	441a      	add	r2, r3
 8007648:	191c      	adds	r4, r3, r4
 800764a:	603a      	str	r2, [r7, #0]
 800764c:	4638      	mov	r0, r7
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007656:	f7ff fe6d 	bl	8007334 <validate_structure>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	9a01      	ldr	r2, [sp, #4]
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	d078      	beq.n	8007754 <mktime+0x278>
 8007662:	2b01      	cmp	r3, #1
 8007664:	f300 80b1 	bgt.w	80077ca <mktime+0x2ee>
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	bfa8      	it	ge
 800766e:	469a      	movge	sl, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	eb1a 0303 	adds.w	r3, sl, r3
 8007676:	4456      	add	r6, sl
 8007678:	f140 80b0 	bpl.w	80077dc <mktime+0x300>
 800767c:	1e6b      	subs	r3, r5, #1
 800767e:	0799      	lsls	r1, r3, #30
 8007680:	f040 80a6 	bne.w	80077d0 <mktime+0x2f4>
 8007684:	2264      	movs	r2, #100	@ 0x64
 8007686:	fb93 f1f2 	sdiv	r1, r3, r2
 800768a:	fb02 3311 	mls	r3, r2, r1, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 80a1 	bne.w	80077d6 <mktime+0x2fa>
 8007694:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007698:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800769c:	fb95 f2f3 	sdiv	r2, r5, r3
 80076a0:	fb03 5512 	mls	r5, r3, r2, r5
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	f240 136d 	movw	r3, #365	@ 0x16d
 80076aa:	bf18      	it	ne
 80076ac:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	e04f      	b.n	8007754 <mktime+0x278>
 80076b4:	f240 126d 	movw	r2, #365	@ 0x16d
 80076b8:	e767      	b.n	800758a <mktime+0xae>
 80076ba:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80076be:	e764      	b.n	800758a <mktime+0xae>
 80076c0:	f43f af67 	beq.w	8007592 <mktime+0xb6>
 80076c4:	2345      	movs	r3, #69	@ 0x45
 80076c6:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80076ca:	2164      	movs	r1, #100	@ 0x64
 80076cc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80076d0:	e012      	b.n	80076f8 <mktime+0x21c>
 80076d2:	bb62      	cbnz	r2, 800772e <mktime+0x252>
 80076d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80076d8:	fb01 3212 	mls	r2, r1, r2, r3
 80076dc:	bb52      	cbnz	r2, 8007734 <mktime+0x258>
 80076de:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80076e2:	fb92 fef0 	sdiv	lr, r2, r0
 80076e6:	fb00 221e 	mls	r2, r0, lr, r2
 80076ea:	2a00      	cmp	r2, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80076f2:	4662      	movne	r2, ip
 80076f4:	1ab6      	subs	r6, r6, r2
 80076f6:	3b01      	subs	r3, #1
 80076f8:	429d      	cmp	r5, r3
 80076fa:	f003 0203 	and.w	r2, r3, #3
 80076fe:	dbe8      	blt.n	80076d2 <mktime+0x1f6>
 8007700:	b9da      	cbnz	r2, 800773a <mktime+0x25e>
 8007702:	2264      	movs	r2, #100	@ 0x64
 8007704:	fb95 f3f2 	sdiv	r3, r5, r2
 8007708:	fb02 5313 	mls	r3, r2, r3, r5
 800770c:	b9c3      	cbnz	r3, 8007740 <mktime+0x264>
 800770e:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8007712:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007716:	fb93 f1f2 	sdiv	r1, r3, r2
 800771a:	fb02 3311 	mls	r3, r2, r1, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	f240 136d 	movw	r3, #365	@ 0x16d
 8007724:	bf08      	it	eq
 8007726:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800772a:	1af6      	subs	r6, r6, r3
 800772c:	e731      	b.n	8007592 <mktime+0xb6>
 800772e:	f240 126d 	movw	r2, #365	@ 0x16d
 8007732:	e7df      	b.n	80076f4 <mktime+0x218>
 8007734:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8007738:	e7dc      	b.n	80076f4 <mktime+0x218>
 800773a:	f240 136d 	movw	r3, #365	@ 0x16d
 800773e:	e7f4      	b.n	800772a <mktime+0x24e>
 8007740:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8007744:	e7f1      	b.n	800772a <mktime+0x24e>
 8007746:	f000 f881 	bl	800784c <__tzcalc_limits>
 800774a:	2800      	cmp	r0, #0
 800774c:	f47f af3e 	bne.w	80075cc <mktime+0xf0>
 8007750:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007754:	f1bb 0f01 	cmp.w	fp, #1
 8007758:	d172      	bne.n	8007840 <mktime+0x364>
 800775a:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800775e:	191c      	adds	r4, r3, r4
 8007760:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007764:	f04f 0b01 	mov.w	fp, #1
 8007768:	f000 f92a 	bl	80079c0 <__tz_unlock>
 800776c:	3604      	adds	r6, #4
 800776e:	2307      	movs	r3, #7
 8007770:	fb96 f3f3 	sdiv	r3, r6, r3
 8007774:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007778:	1af6      	subs	r6, r6, r3
 800777a:	d456      	bmi.n	800782a <mktime+0x34e>
 800777c:	f8c7 b020 	str.w	fp, [r7, #32]
 8007780:	61be      	str	r6, [r7, #24]
 8007782:	4620      	mov	r0, r4
 8007784:	4641      	mov	r1, r8
 8007786:	b005      	add	sp, #20
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	9a02      	ldr	r2, [sp, #8]
 800778e:	1a12      	subs	r2, r2, r0
 8007790:	9202      	str	r2, [sp, #8]
 8007792:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8007796:	eb6c 0c02 	sbc.w	ip, ip, r2
 800779a:	9a02      	ldr	r2, [sp, #8]
 800779c:	4294      	cmp	r4, r2
 800779e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 80077a2:	f6bf af2c 	bge.w	80075fe <mktime+0x122>
 80077a6:	e7d3      	b.n	8007750 <mktime+0x274>
 80077a8:	9a03      	ldr	r2, [sp, #12]
 80077aa:	4294      	cmp	r4, r2
 80077ac:	eb78 020b 	sbcs.w	r2, r8, fp
 80077b0:	f6ff af30 	blt.w	8007614 <mktime+0x138>
 80077b4:	f1ba 0f00 	cmp.w	sl, #0
 80077b8:	dbcf      	blt.n	800775a <mktime+0x27e>
 80077ba:	f04f 0b01 	mov.w	fp, #1
 80077be:	e735      	b.n	800762c <mktime+0x150>
 80077c0:	f04f 0b00 	mov.w	fp, #0
 80077c4:	e732      	b.n	800762c <mktime+0x150>
 80077c6:	1ac3      	subs	r3, r0, r3
 80077c8:	e73c      	b.n	8007644 <mktime+0x168>
 80077ca:	f04f 3aff 	mov.w	sl, #4294967295
 80077ce:	e74f      	b.n	8007670 <mktime+0x194>
 80077d0:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80077d4:	e76c      	b.n	80076b0 <mktime+0x1d4>
 80077d6:	f240 136d 	movw	r3, #365	@ 0x16d
 80077da:	e769      	b.n	80076b0 <mktime+0x1d4>
 80077dc:	07aa      	lsls	r2, r5, #30
 80077de:	d117      	bne.n	8007810 <mktime+0x334>
 80077e0:	2164      	movs	r1, #100	@ 0x64
 80077e2:	fb95 f2f1 	sdiv	r2, r5, r1
 80077e6:	fb01 5212 	mls	r2, r1, r2, r5
 80077ea:	b9da      	cbnz	r2, 8007824 <mktime+0x348>
 80077ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80077f0:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80077f4:	fb95 f1f2 	sdiv	r1, r5, r2
 80077f8:	fb02 5511 	mls	r5, r2, r1, r5
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	f240 126d 	movw	r2, #365	@ 0x16d
 8007802:	bf08      	it	eq
 8007804:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8007808:	4293      	cmp	r3, r2
 800780a:	bfa8      	it	ge
 800780c:	1a9b      	subge	r3, r3, r2
 800780e:	e74f      	b.n	80076b0 <mktime+0x1d4>
 8007810:	f240 126d 	movw	r2, #365	@ 0x16d
 8007814:	e7f8      	b.n	8007808 <mktime+0x32c>
 8007816:	bf00      	nop
 8007818:	0800b140 	.word	0x0800b140
 800781c:	00015180 	.word	0x00015180
 8007820:	20000e64 	.word	0x20000e64
 8007824:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8007828:	e7ee      	b.n	8007808 <mktime+0x32c>
 800782a:	3607      	adds	r6, #7
 800782c:	e7a6      	b.n	800777c <mktime+0x2a0>
 800782e:	f04f 34ff 	mov.w	r4, #4294967295
 8007832:	46a0      	mov	r8, r4
 8007834:	e7a5      	b.n	8007782 <mktime+0x2a6>
 8007836:	f1ba 0f00 	cmp.w	sl, #0
 800783a:	dac1      	bge.n	80077c0 <mktime+0x2e4>
 800783c:	f04f 0b00 	mov.w	fp, #0
 8007840:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8007844:	191c      	adds	r4, r3, r4
 8007846:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800784a:	e78d      	b.n	8007768 <mktime+0x28c>

0800784c <__tzcalc_limits>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	f002 fde1 	bl	800a418 <__gettzinfo>
 8007856:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800785a:	429c      	cmp	r4, r3
 800785c:	f340 80a3 	ble.w	80079a6 <__tzcalc_limits+0x15a>
 8007860:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8007864:	1865      	adds	r5, r4, r1
 8007866:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800786a:	f240 126d 	movw	r2, #365	@ 0x16d
 800786e:	10ad      	asrs	r5, r5, #2
 8007870:	fb02 5503 	mla	r5, r2, r3, r5
 8007874:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8007878:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800787c:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8007880:	fb93 f3f2 	sdiv	r3, r3, r2
 8007884:	441d      	add	r5, r3
 8007886:	19a3      	adds	r3, r4, r6
 8007888:	4e48      	ldr	r6, [pc, #288]	@ (80079ac <__tzcalc_limits+0x160>)
 800788a:	6044      	str	r4, [r0, #4]
 800788c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007890:	4601      	mov	r1, r0
 8007892:	fbb3 f3f2 	udiv	r3, r3, r2
 8007896:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800789a:	441d      	add	r5, r3
 800789c:	7a0b      	ldrb	r3, [r1, #8]
 800789e:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80078a2:	2b4a      	cmp	r3, #74	@ 0x4a
 80078a4:	d138      	bne.n	8007918 <__tzcalc_limits+0xcc>
 80078a6:	07a2      	lsls	r2, r4, #30
 80078a8:	eb05 030c 	add.w	r3, r5, ip
 80078ac:	d106      	bne.n	80078bc <__tzcalc_limits+0x70>
 80078ae:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80078b2:	fb94 f2fe 	sdiv	r2, r4, lr
 80078b6:	fb0e 4212 	mls	r2, lr, r2, r4
 80078ba:	b932      	cbnz	r2, 80078ca <__tzcalc_limits+0x7e>
 80078bc:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80078c0:	fb94 f2fe 	sdiv	r2, r4, lr
 80078c4:	fb0e 4212 	mls	r2, lr, r2, r4
 80078c8:	bb1a      	cbnz	r2, 8007912 <__tzcalc_limits+0xc6>
 80078ca:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 80078ce:	bfd4      	ite	le
 80078d0:	f04f 0c00 	movle.w	ip, #0
 80078d4:	f04f 0c01 	movgt.w	ip, #1
 80078d8:	4463      	add	r3, ip
 80078da:	3b01      	subs	r3, #1
 80078dc:	698a      	ldr	r2, [r1, #24]
 80078de:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80078e2:	fbc3 2c06 	smlal	r2, ip, r3, r6
 80078e6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80078e8:	18d2      	adds	r2, r2, r3
 80078ea:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 80078ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80078f2:	3128      	adds	r1, #40	@ 0x28
 80078f4:	428f      	cmp	r7, r1
 80078f6:	d1d1      	bne.n	800789c <__tzcalc_limits+0x50>
 80078f8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80078fc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8007900:	428c      	cmp	r4, r1
 8007902:	4193      	sbcs	r3, r2
 8007904:	bfb4      	ite	lt
 8007906:	2301      	movlt	r3, #1
 8007908:	2300      	movge	r3, #0
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	2001      	movs	r0, #1
 800790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007912:	f04f 0c00 	mov.w	ip, #0
 8007916:	e7df      	b.n	80078d8 <__tzcalc_limits+0x8c>
 8007918:	2b44      	cmp	r3, #68	@ 0x44
 800791a:	d102      	bne.n	8007922 <__tzcalc_limits+0xd6>
 800791c:	eb05 030c 	add.w	r3, r5, ip
 8007920:	e7dc      	b.n	80078dc <__tzcalc_limits+0x90>
 8007922:	07a3      	lsls	r3, r4, #30
 8007924:	d105      	bne.n	8007932 <__tzcalc_limits+0xe6>
 8007926:	2264      	movs	r2, #100	@ 0x64
 8007928:	fb94 f3f2 	sdiv	r3, r4, r2
 800792c:	fb02 4313 	mls	r3, r2, r3, r4
 8007930:	bb93      	cbnz	r3, 8007998 <__tzcalc_limits+0x14c>
 8007932:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007936:	fb94 f3f2 	sdiv	r3, r4, r2
 800793a:	fb02 4313 	mls	r3, r2, r3, r4
 800793e:	fab3 f383 	clz	r3, r3
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	f8df e068 	ldr.w	lr, [pc, #104]	@ 80079b0 <__tzcalc_limits+0x164>
 8007948:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800794c:	425b      	negs	r3, r3
 800794e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007952:	462a      	mov	r2, r5
 8007954:	f04f 0800 	mov.w	r8, #0
 8007958:	4473      	add	r3, lr
 800795a:	f108 0801 	add.w	r8, r8, #1
 800795e:	45c1      	cmp	r9, r8
 8007960:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8007964:	dc1a      	bgt.n	800799c <__tzcalc_limits+0x150>
 8007966:	f102 0804 	add.w	r8, r2, #4
 800796a:	2307      	movs	r3, #7
 800796c:	fb98 f3f3 	sdiv	r3, r8, r3
 8007970:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007974:	eba8 0303 	sub.w	r3, r8, r3
 8007978:	ebbc 0c03 	subs.w	ip, ip, r3
 800797c:	690b      	ldr	r3, [r1, #16]
 800797e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007982:	bf48      	it	mi
 8007984:	f10c 0c07 	addmi.w	ip, ip, #7
 8007988:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800798c:	449c      	add	ip, r3
 800798e:	45f4      	cmp	ip, lr
 8007990:	da06      	bge.n	80079a0 <__tzcalc_limits+0x154>
 8007992:	eb02 030c 	add.w	r3, r2, ip
 8007996:	e7a1      	b.n	80078dc <__tzcalc_limits+0x90>
 8007998:	2301      	movs	r3, #1
 800799a:	e7d3      	b.n	8007944 <__tzcalc_limits+0xf8>
 800799c:	4472      	add	r2, lr
 800799e:	e7dc      	b.n	800795a <__tzcalc_limits+0x10e>
 80079a0:	f1ac 0c07 	sub.w	ip, ip, #7
 80079a4:	e7f3      	b.n	800798e <__tzcalc_limits+0x142>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e7b1      	b.n	800790e <__tzcalc_limits+0xc2>
 80079aa:	bf00      	nop
 80079ac:	00015180 	.word	0x00015180
 80079b0:	0800b29c 	.word	0x0800b29c

080079b4 <__tz_lock>:
 80079b4:	4801      	ldr	r0, [pc, #4]	@ (80079bc <__tz_lock+0x8>)
 80079b6:	f000 bab6 	b.w	8007f26 <__retarget_lock_acquire>
 80079ba:	bf00      	nop
 80079bc:	20000e6c 	.word	0x20000e6c

080079c0 <__tz_unlock>:
 80079c0:	4801      	ldr	r0, [pc, #4]	@ (80079c8 <__tz_unlock+0x8>)
 80079c2:	f000 bab2 	b.w	8007f2a <__retarget_lock_release>
 80079c6:	bf00      	nop
 80079c8:	20000e6c 	.word	0x20000e6c

080079cc <_tzset_unlocked>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	@ (80079d4 <_tzset_unlocked+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	f000 b802 	b.w	80079d8 <_tzset_unlocked_r>
 80079d4:	200001cc 	.word	0x200001cc

080079d8 <_tzset_unlocked_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	b08d      	sub	sp, #52	@ 0x34
 80079de:	4607      	mov	r7, r0
 80079e0:	f002 fd1a 	bl	800a418 <__gettzinfo>
 80079e4:	49bc      	ldr	r1, [pc, #752]	@ (8007cd8 <_tzset_unlocked_r+0x300>)
 80079e6:	4dbd      	ldr	r5, [pc, #756]	@ (8007cdc <_tzset_unlocked_r+0x304>)
 80079e8:	4604      	mov	r4, r0
 80079ea:	4638      	mov	r0, r7
 80079ec:	f001 f99e 	bl	8008d2c <_getenv_r>
 80079f0:	4606      	mov	r6, r0
 80079f2:	bb10      	cbnz	r0, 8007a3a <_tzset_unlocked_r+0x62>
 80079f4:	4bba      	ldr	r3, [pc, #744]	@ (8007ce0 <_tzset_unlocked_r+0x308>)
 80079f6:	4abb      	ldr	r2, [pc, #748]	@ (8007ce4 <_tzset_unlocked_r+0x30c>)
 80079f8:	6018      	str	r0, [r3, #0]
 80079fa:	4bbb      	ldr	r3, [pc, #748]	@ (8007ce8 <_tzset_unlocked_r+0x310>)
 80079fc:	62a0      	str	r0, [r4, #40]	@ 0x28
 80079fe:	6018      	str	r0, [r3, #0]
 8007a00:	4bba      	ldr	r3, [pc, #744]	@ (8007cec <_tzset_unlocked_r+0x314>)
 8007a02:	6520      	str	r0, [r4, #80]	@ 0x50
 8007a04:	e9c3 2200 	strd	r2, r2, [r3]
 8007a08:	214a      	movs	r1, #74	@ 0x4a
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8007a12:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8007a16:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8007a1a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8007a1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007a22:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8007a26:	6828      	ldr	r0, [r5, #0]
 8007a28:	7221      	strb	r1, [r4, #8]
 8007a2a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8007a2e:	f7fe fc59 	bl	80062e4 <free>
 8007a32:	602e      	str	r6, [r5, #0]
 8007a34:	b00d      	add	sp, #52	@ 0x34
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3a:	6829      	ldr	r1, [r5, #0]
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	f040 808e 	bne.w	8007b5e <_tzset_unlocked_r+0x186>
 8007a42:	6828      	ldr	r0, [r5, #0]
 8007a44:	f7fe fc4e 	bl	80062e4 <free>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7f8 fc41 	bl	80002d0 <strlen>
 8007a4e:	1c41      	adds	r1, r0, #1
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7fe fc71 	bl	8006338 <_malloc_r>
 8007a56:	6028      	str	r0, [r5, #0]
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	f040 8086 	bne.w	8007b6a <_tzset_unlocked_r+0x192>
 8007a5e:	4aa2      	ldr	r2, [pc, #648]	@ (8007ce8 <_tzset_unlocked_r+0x310>)
 8007a60:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8007cec <_tzset_unlocked_r+0x314>
 8007a64:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8007ce0 <_tzset_unlocked_r+0x308>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4aa0      	ldr	r2, [pc, #640]	@ (8007cf0 <_tzset_unlocked_r+0x318>)
 8007a6e:	f8ca 3000 	str.w	r3, [sl]
 8007a72:	2000      	movs	r0, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	e9c8 2200 	strd	r2, r2, [r8]
 8007a7a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8007a7e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8007a82:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8007a86:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8007a8a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8007a8e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8007a92:	224a      	movs	r2, #74	@ 0x4a
 8007a94:	7222      	strb	r2, [r4, #8]
 8007a96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a98:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8007a9c:	6523      	str	r3, [r4, #80]	@ 0x50
 8007a9e:	7833      	ldrb	r3, [r6, #0]
 8007aa0:	2b3a      	cmp	r3, #58	@ 0x3a
 8007aa2:	bf08      	it	eq
 8007aa4:	3601      	addeq	r6, #1
 8007aa6:	7833      	ldrb	r3, [r6, #0]
 8007aa8:	2b3c      	cmp	r3, #60	@ 0x3c
 8007aaa:	d162      	bne.n	8007b72 <_tzset_unlocked_r+0x19a>
 8007aac:	1c75      	adds	r5, r6, #1
 8007aae:	4a91      	ldr	r2, [pc, #580]	@ (8007cf4 <_tzset_unlocked_r+0x31c>)
 8007ab0:	4991      	ldr	r1, [pc, #580]	@ (8007cf8 <_tzset_unlocked_r+0x320>)
 8007ab2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f7ff faf3 	bl	80070a0 <siscanf>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	ddba      	ble.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ac0:	1eda      	subs	r2, r3, #3
 8007ac2:	2a07      	cmp	r2, #7
 8007ac4:	d8b6      	bhi.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007ac6:	5ceb      	ldrb	r3, [r5, r3]
 8007ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aca:	d1b3      	bne.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007acc:	3602      	adds	r6, #2
 8007ace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad0:	18f5      	adds	r5, r6, r3
 8007ad2:	5cf3      	ldrb	r3, [r6, r3]
 8007ad4:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ad6:	d15a      	bne.n	8007b8e <_tzset_unlocked_r+0x1b6>
 8007ad8:	3501      	adds	r5, #1
 8007ada:	f04f 39ff 	mov.w	r9, #4294967295
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007ae4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007ae8:	af08      	add	r7, sp, #32
 8007aea:	ab0a      	add	r3, sp, #40	@ 0x28
 8007aec:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	f10d 031e 	add.w	r3, sp, #30
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4980      	ldr	r1, [pc, #512]	@ (8007cfc <_tzset_unlocked_r+0x324>)
 8007afa:	ab0a      	add	r3, sp, #40	@ 0x28
 8007afc:	aa07      	add	r2, sp, #28
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff face 	bl	80070a0 <siscanf>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dd95      	ble.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007b08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007b0c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8007b10:	223c      	movs	r2, #60	@ 0x3c
 8007b12:	fb02 6603 	mla	r6, r2, r3, r6
 8007b16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007b1a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007b1e:	fb02 6603 	mla	r6, r2, r3, r6
 8007b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b24:	fb09 f606 	mul.w	r6, r9, r6
 8007b28:	eb05 0903 	add.w	r9, r5, r3
 8007b2c:	5ceb      	ldrb	r3, [r5, r3]
 8007b2e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007b30:	f040 80ee 	bne.w	8007d10 <_tzset_unlocked_r+0x338>
 8007b34:	f109 0501 	add.w	r5, r9, #1
 8007b38:	4a71      	ldr	r2, [pc, #452]	@ (8007d00 <_tzset_unlocked_r+0x328>)
 8007b3a:	496f      	ldr	r1, [pc, #444]	@ (8007cf8 <_tzset_unlocked_r+0x320>)
 8007b3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff faae 	bl	80070a0 <siscanf>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dc28      	bgt.n	8007b9a <_tzset_unlocked_r+0x1c2>
 8007b48:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007b4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b4e:	d124      	bne.n	8007b9a <_tzset_unlocked_r+0x1c2>
 8007b50:	4b68      	ldr	r3, [pc, #416]	@ (8007cf4 <_tzset_unlocked_r+0x31c>)
 8007b52:	62a6      	str	r6, [r4, #40]	@ 0x28
 8007b54:	e9c8 3300 	strd	r3, r3, [r8]
 8007b58:	f8ca 6000 	str.w	r6, [sl]
 8007b5c:	e76a      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007b5e:	f7f8 fb57 	bl	8000210 <strcmp>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f47f af6d 	bne.w	8007a42 <_tzset_unlocked_r+0x6a>
 8007b68:	e764      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	f000 f9df 	bl	8007f2e <strcpy>
 8007b70:	e775      	b.n	8007a5e <_tzset_unlocked_r+0x86>
 8007b72:	4a60      	ldr	r2, [pc, #384]	@ (8007cf4 <_tzset_unlocked_r+0x31c>)
 8007b74:	4963      	ldr	r1, [pc, #396]	@ (8007d04 <_tzset_unlocked_r+0x32c>)
 8007b76:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff fa91 	bl	80070a0 <siscanf>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f77f af58 	ble.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b86:	3b03      	subs	r3, #3
 8007b88:	2b07      	cmp	r3, #7
 8007b8a:	d9a0      	bls.n	8007ace <_tzset_unlocked_r+0xf6>
 8007b8c:	e752      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007b8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007b90:	bf08      	it	eq
 8007b92:	3501      	addeq	r5, #1
 8007b94:	f04f 0901 	mov.w	r9, #1
 8007b98:	e7a1      	b.n	8007ade <_tzset_unlocked_r+0x106>
 8007b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b9c:	1eda      	subs	r2, r3, #3
 8007b9e:	2a07      	cmp	r2, #7
 8007ba0:	f63f af48 	bhi.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007ba4:	5ceb      	ldrb	r3, [r5, r3]
 8007ba6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ba8:	f47f af44 	bne.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007bac:	f109 0902 	add.w	r9, r9, #2
 8007bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb2:	eb09 0503 	add.w	r5, r9, r3
 8007bb6:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007bba:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bbc:	f040 80b7 	bne.w	8007d2e <_tzset_unlocked_r+0x356>
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	f04f 39ff 	mov.w	r9, #4294967295
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007bcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007bd0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007bd8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	f10d 031e 	add.w	r3, sp, #30
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4945      	ldr	r1, [pc, #276]	@ (8007cfc <_tzset_unlocked_r+0x324>)
 8007be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007be8:	aa07      	add	r2, sp, #28
 8007bea:	4628      	mov	r0, r5
 8007bec:	f7ff fa58 	bl	80070a0 <siscanf>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f300 80a2 	bgt.w	8007d3a <_tzset_unlocked_r+0x362>
 8007bf6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfe:	4627      	mov	r7, r4
 8007c00:	441d      	add	r5, r3
 8007c02:	f04f 0b00 	mov.w	fp, #0
 8007c06:	782b      	ldrb	r3, [r5, #0]
 8007c08:	2b2c      	cmp	r3, #44	@ 0x2c
 8007c0a:	bf08      	it	eq
 8007c0c:	3501      	addeq	r5, #1
 8007c0e:	f895 9000 	ldrb.w	r9, [r5]
 8007c12:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8007c16:	f040 80a3 	bne.w	8007d60 <_tzset_unlocked_r+0x388>
 8007c1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c1c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8007c20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c24:	aa09      	add	r2, sp, #36	@ 0x24
 8007c26:	9200      	str	r2, [sp, #0]
 8007c28:	4937      	ldr	r1, [pc, #220]	@ (8007d08 <_tzset_unlocked_r+0x330>)
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff fa35 	bl	80070a0 <siscanf>
 8007c36:	2803      	cmp	r0, #3
 8007c38:	f47f aefc 	bne.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007c3c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8007c40:	1e4b      	subs	r3, r1, #1
 8007c42:	2b0b      	cmp	r3, #11
 8007c44:	f63f aef6 	bhi.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007c48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8007c4c:	1e53      	subs	r3, r2, #1
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	f63f aef0 	bhi.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007c54:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	f63f aeeb 	bhi.w	8007a34 <_tzset_unlocked_r+0x5c>
 8007c5e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007c62:	f887 9008 	strb.w	r9, [r7, #8]
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6a:	eb05 0903 	add.w	r9, r5, r3
 8007c6e:	2500      	movs	r5, #0
 8007c70:	f04f 0302 	mov.w	r3, #2
 8007c74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007c78:	f8ad 501e 	strh.w	r5, [sp, #30]
 8007c7c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8007c80:	950a      	str	r5, [sp, #40]	@ 0x28
 8007c82:	f899 3000 	ldrb.w	r3, [r9]
 8007c86:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c88:	f040 8096 	bne.w	8007db8 <_tzset_unlocked_r+0x3e0>
 8007c8c:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c8e:	aa08      	add	r2, sp, #32
 8007c90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c94:	f10d 021e 	add.w	r2, sp, #30
 8007c98:	9200      	str	r2, [sp, #0]
 8007c9a:	491c      	ldr	r1, [pc, #112]	@ (8007d0c <_tzset_unlocked_r+0x334>)
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	aa07      	add	r2, sp, #28
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f7ff f9fd 	bl	80070a0 <siscanf>
 8007ca6:	42a8      	cmp	r0, r5
 8007ca8:	f300 8086 	bgt.w	8007db8 <_tzset_unlocked_r+0x3e0>
 8007cac:	214a      	movs	r1, #74	@ 0x4a
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8007cb6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007cba:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007cbe:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8007cc2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8007cc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8007cca:	7221      	strb	r1, [r4, #8]
 8007ccc:	62a5      	str	r5, [r4, #40]	@ 0x28
 8007cce:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8007cd2:	6525      	str	r5, [r4, #80]	@ 0x50
 8007cd4:	e6ae      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007cd6:	bf00      	nop
 8007cd8:	0800af97 	.word	0x0800af97
 8007cdc:	20000e44 	.word	0x20000e44
 8007ce0:	20000e60 	.word	0x20000e60
 8007ce4:	0800af9a 	.word	0x0800af9a
 8007ce8:	20000e64 	.word	0x20000e64
 8007cec:	20000058 	.word	0x20000058
 8007cf0:	0800b13c 	.word	0x0800b13c
 8007cf4:	20000e54 	.word	0x20000e54
 8007cf8:	0800af9e 	.word	0x0800af9e
 8007cfc:	0800afd3 	.word	0x0800afd3
 8007d00:	20000e48 	.word	0x20000e48
 8007d04:	0800afb1 	.word	0x0800afb1
 8007d08:	0800afbf 	.word	0x0800afbf
 8007d0c:	0800afd2 	.word	0x0800afd2
 8007d10:	4a3e      	ldr	r2, [pc, #248]	@ (8007e0c <_tzset_unlocked_r+0x434>)
 8007d12:	493f      	ldr	r1, [pc, #252]	@ (8007e10 <_tzset_unlocked_r+0x438>)
 8007d14:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d16:	4648      	mov	r0, r9
 8007d18:	f7ff f9c2 	bl	80070a0 <siscanf>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f77f af17 	ble.w	8007b50 <_tzset_unlocked_r+0x178>
 8007d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d24:	3b03      	subs	r3, #3
 8007d26:	2b07      	cmp	r3, #7
 8007d28:	f67f af42 	bls.w	8007bb0 <_tzset_unlocked_r+0x1d8>
 8007d2c:	e682      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007d2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d30:	bf08      	it	eq
 8007d32:	3501      	addeq	r5, #1
 8007d34:	f04f 0901 	mov.w	r9, #1
 8007d38:	e745      	b.n	8007bc6 <_tzset_unlocked_r+0x1ee>
 8007d3a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007d3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007d42:	213c      	movs	r1, #60	@ 0x3c
 8007d44:	fb01 3302 	mla	r3, r1, r2, r3
 8007d48:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007d4c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007d50:	fb01 3302 	mla	r3, r1, r2, r3
 8007d54:	fb09 f303 	mul.w	r3, r9, r3
 8007d58:	e74f      	b.n	8007bfa <_tzset_unlocked_r+0x222>
 8007d5a:	f04f 0b01 	mov.w	fp, #1
 8007d5e:	e752      	b.n	8007c06 <_tzset_unlocked_r+0x22e>
 8007d60:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8007d64:	bf06      	itte	eq
 8007d66:	3501      	addeq	r5, #1
 8007d68:	464b      	moveq	r3, r9
 8007d6a:	2344      	movne	r3, #68	@ 0x44
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	a90b      	add	r1, sp, #44	@ 0x2c
 8007d70:	4628      	mov	r0, r5
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	f001 fbe6 	bl	8009544 <strtoul>
 8007d78:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8007d82:	45a9      	cmp	r9, r5
 8007d84:	d114      	bne.n	8007db0 <_tzset_unlocked_r+0x3d8>
 8007d86:	234d      	movs	r3, #77	@ 0x4d
 8007d88:	f1bb 0f00 	cmp.w	fp, #0
 8007d8c:	d107      	bne.n	8007d9e <_tzset_unlocked_r+0x3c6>
 8007d8e:	7223      	strb	r3, [r4, #8]
 8007d90:	2103      	movs	r1, #3
 8007d92:	2302      	movs	r3, #2
 8007d94:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8007d98:	f8c4 b014 	str.w	fp, [r4, #20]
 8007d9c:	e767      	b.n	8007c6e <_tzset_unlocked_r+0x296>
 8007d9e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8007da2:	220b      	movs	r2, #11
 8007da4:	2301      	movs	r3, #1
 8007da6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8007daa:	2300      	movs	r3, #0
 8007dac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007dae:	e75e      	b.n	8007c6e <_tzset_unlocked_r+0x296>
 8007db0:	b280      	uxth	r0, r0
 8007db2:	723b      	strb	r3, [r7, #8]
 8007db4:	6178      	str	r0, [r7, #20]
 8007db6:	e75a      	b.n	8007c6e <_tzset_unlocked_r+0x296>
 8007db8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007dbc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007dc0:	213c      	movs	r1, #60	@ 0x3c
 8007dc2:	fb01 3302 	mla	r3, r1, r2, r3
 8007dc6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007dca:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8007dce:	fb01 3302 	mla	r3, r1, r2, r3
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007dd6:	3728      	adds	r7, #40	@ 0x28
 8007dd8:	444d      	add	r5, r9
 8007dda:	f1bb 0f00 	cmp.w	fp, #0
 8007dde:	d0bc      	beq.n	8007d5a <_tzset_unlocked_r+0x382>
 8007de0:	9b04      	ldr	r3, [sp, #16]
 8007de2:	6523      	str	r3, [r4, #80]	@ 0x50
 8007de4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <_tzset_unlocked_r+0x43c>)
 8007de6:	f8c8 3000 	str.w	r3, [r8]
 8007dea:	6860      	ldr	r0, [r4, #4]
 8007dec:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <_tzset_unlocked_r+0x434>)
 8007dee:	62a6      	str	r6, [r4, #40]	@ 0x28
 8007df0:	f8c8 3004 	str.w	r3, [r8, #4]
 8007df4:	f7ff fd2a 	bl	800784c <__tzcalc_limits>
 8007df8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007dfa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007dfc:	f8ca 2000 	str.w	r2, [sl]
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	4a05      	ldr	r2, [pc, #20]	@ (8007e18 <_tzset_unlocked_r+0x440>)
 8007e04:	bf18      	it	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e613      	b.n	8007a34 <_tzset_unlocked_r+0x5c>
 8007e0c:	20000e48 	.word	0x20000e48
 8007e10:	0800afb1 	.word	0x0800afb1
 8007e14:	20000e54 	.word	0x20000e54
 8007e18:	20000e64 	.word	0x20000e64

08007e1c <_localeconv_r>:
 8007e1c:	4800      	ldr	r0, [pc, #0]	@ (8007e20 <_localeconv_r+0x4>)
 8007e1e:	4770      	bx	lr
 8007e20:	20000150 	.word	0x20000150

08007e24 <_close_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d06      	ldr	r5, [pc, #24]	@ (8007e40 <_close_r+0x1c>)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f7fb faa2 	bl	8003378 <_close>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_close_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_close_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000e68 	.word	0x20000e68

08007e44 <_lseek_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	@ (8007e64 <_lseek_r+0x20>)
 8007e48:	4604      	mov	r4, r0
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	602a      	str	r2, [r5, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7fb fab7 	bl	80033c6 <_lseek>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_lseek_r+0x1e>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_lseek_r+0x1e>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	20000e68 	.word	0x20000e68

08007e68 <_read_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	@ (8007e88 <_read_r+0x20>)
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	4608      	mov	r0, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	602a      	str	r2, [r5, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f7fb fa45 	bl	8003306 <_read>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_read_r+0x1e>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_read_r+0x1e>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000e68 	.word	0x20000e68

08007e8c <_sbrk_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ea8 <_sbrk_r+0x1c>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	f7fb faa2 	bl	80033e0 <_sbrk>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_sbrk_r+0x1a>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_sbrk_r+0x1a>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000e68 	.word	0x20000e68

08007eac <_write_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d07      	ldr	r5, [pc, #28]	@ (8007ecc <_write_r+0x20>)
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f7fb fa40 	bl	8003340 <_write>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_write_r+0x1e>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_write_r+0x1e>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	20000e68 	.word	0x20000e68

08007ed0 <__errno>:
 8007ed0:	4b01      	ldr	r3, [pc, #4]	@ (8007ed8 <__errno+0x8>)
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200001cc 	.word	0x200001cc

08007edc <__libc_init_array>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4d0d      	ldr	r5, [pc, #52]	@ (8007f14 <__libc_init_array+0x38>)
 8007ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8007f18 <__libc_init_array+0x3c>)
 8007ee2:	1b64      	subs	r4, r4, r5
 8007ee4:	10a4      	asrs	r4, r4, #2
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	42a6      	cmp	r6, r4
 8007eea:	d109      	bne.n	8007f00 <__libc_init_array+0x24>
 8007eec:	4d0b      	ldr	r5, [pc, #44]	@ (8007f1c <__libc_init_array+0x40>)
 8007eee:	4c0c      	ldr	r4, [pc, #48]	@ (8007f20 <__libc_init_array+0x44>)
 8007ef0:	f002 fbbe 	bl	800a670 <_init>
 8007ef4:	1b64      	subs	r4, r4, r5
 8007ef6:	10a4      	asrs	r4, r4, #2
 8007ef8:	2600      	movs	r6, #0
 8007efa:	42a6      	cmp	r6, r4
 8007efc:	d105      	bne.n	8007f0a <__libc_init_array+0x2e>
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f04:	4798      	blx	r3
 8007f06:	3601      	adds	r6, #1
 8007f08:	e7ee      	b.n	8007ee8 <__libc_init_array+0xc>
 8007f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0e:	4798      	blx	r3
 8007f10:	3601      	adds	r6, #1
 8007f12:	e7f2      	b.n	8007efa <__libc_init_array+0x1e>
 8007f14:	0800b308 	.word	0x0800b308
 8007f18:	0800b308 	.word	0x0800b308
 8007f1c:	0800b308 	.word	0x0800b308
 8007f20:	0800b30c 	.word	0x0800b30c

08007f24 <__retarget_lock_init_recursive>:
 8007f24:	4770      	bx	lr

08007f26 <__retarget_lock_acquire>:
 8007f26:	4770      	bx	lr

08007f28 <__retarget_lock_acquire_recursive>:
 8007f28:	4770      	bx	lr

08007f2a <__retarget_lock_release>:
 8007f2a:	4770      	bx	lr

08007f2c <__retarget_lock_release_recursive>:
 8007f2c:	4770      	bx	lr

08007f2e <strcpy>:
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f34:	f803 2b01 	strb.w	r2, [r3], #1
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d1f9      	bne.n	8007f30 <strcpy+0x2>
 8007f3c:	4770      	bx	lr

08007f3e <memcpy>:
 8007f3e:	440a      	add	r2, r1
 8007f40:	4291      	cmp	r1, r2
 8007f42:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f46:	d100      	bne.n	8007f4a <memcpy+0xc>
 8007f48:	4770      	bx	lr
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f54:	4291      	cmp	r1, r2
 8007f56:	d1f9      	bne.n	8007f4c <memcpy+0xe>
 8007f58:	bd10      	pop	{r4, pc}

08007f5a <div>:
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	fb91 f4f2 	sdiv	r4, r1, r2
 8007f60:	fb02 1114 	mls	r1, r2, r4, r1
 8007f64:	6004      	str	r4, [r0, #0]
 8007f66:	6041      	str	r1, [r0, #4]
 8007f68:	bd10      	pop	{r4, pc}

08007f6a <quorem>:
 8007f6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6e:	6903      	ldr	r3, [r0, #16]
 8007f70:	690c      	ldr	r4, [r1, #16]
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	4607      	mov	r7, r0
 8007f76:	db7e      	blt.n	8008076 <quorem+0x10c>
 8007f78:	3c01      	subs	r4, #1
 8007f7a:	f101 0814 	add.w	r8, r1, #20
 8007f7e:	00a3      	lsls	r3, r4, #2
 8007f80:	f100 0514 	add.w	r5, r0, #20
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f94:	3301      	adds	r3, #1
 8007f96:	429a      	cmp	r2, r3
 8007f98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fa0:	d32e      	bcc.n	8008000 <quorem+0x96>
 8007fa2:	f04f 0a00 	mov.w	sl, #0
 8007fa6:	46c4      	mov	ip, r8
 8007fa8:	46ae      	mov	lr, r5
 8007faa:	46d3      	mov	fp, sl
 8007fac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fb0:	b298      	uxth	r0, r3
 8007fb2:	fb06 a000 	mla	r0, r6, r0, sl
 8007fb6:	0c02      	lsrs	r2, r0, #16
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	fb06 2303 	mla	r3, r6, r3, r2
 8007fbe:	f8de 2000 	ldr.w	r2, [lr]
 8007fc2:	b280      	uxth	r0, r0
 8007fc4:	b292      	uxth	r2, r2
 8007fc6:	1a12      	subs	r2, r2, r0
 8007fc8:	445a      	add	r2, fp
 8007fca:	f8de 0000 	ldr.w	r0, [lr]
 8007fce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fdc:	b292      	uxth	r2, r2
 8007fde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fe2:	45e1      	cmp	r9, ip
 8007fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8007fe8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fec:	d2de      	bcs.n	8007fac <quorem+0x42>
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	58eb      	ldr	r3, [r5, r3]
 8007ff2:	b92b      	cbnz	r3, 8008000 <quorem+0x96>
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	3b04      	subs	r3, #4
 8007ff8:	429d      	cmp	r5, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	d32f      	bcc.n	800805e <quorem+0xf4>
 8007ffe:	613c      	str	r4, [r7, #16]
 8008000:	4638      	mov	r0, r7
 8008002:	f001 f91f 	bl	8009244 <__mcmp>
 8008006:	2800      	cmp	r0, #0
 8008008:	db25      	blt.n	8008056 <quorem+0xec>
 800800a:	4629      	mov	r1, r5
 800800c:	2000      	movs	r0, #0
 800800e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008012:	f8d1 c000 	ldr.w	ip, [r1]
 8008016:	fa1f fe82 	uxth.w	lr, r2
 800801a:	fa1f f38c 	uxth.w	r3, ip
 800801e:	eba3 030e 	sub.w	r3, r3, lr
 8008022:	4403      	add	r3, r0
 8008024:	0c12      	lsrs	r2, r2, #16
 8008026:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800802a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800802e:	b29b      	uxth	r3, r3
 8008030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008034:	45c1      	cmp	r9, r8
 8008036:	f841 3b04 	str.w	r3, [r1], #4
 800803a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800803e:	d2e6      	bcs.n	800800e <quorem+0xa4>
 8008040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008048:	b922      	cbnz	r2, 8008054 <quorem+0xea>
 800804a:	3b04      	subs	r3, #4
 800804c:	429d      	cmp	r5, r3
 800804e:	461a      	mov	r2, r3
 8008050:	d30b      	bcc.n	800806a <quorem+0x100>
 8008052:	613c      	str	r4, [r7, #16]
 8008054:	3601      	adds	r6, #1
 8008056:	4630      	mov	r0, r6
 8008058:	b003      	add	sp, #12
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	3b04      	subs	r3, #4
 8008062:	2a00      	cmp	r2, #0
 8008064:	d1cb      	bne.n	8007ffe <quorem+0x94>
 8008066:	3c01      	subs	r4, #1
 8008068:	e7c6      	b.n	8007ff8 <quorem+0x8e>
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	3b04      	subs	r3, #4
 800806e:	2a00      	cmp	r2, #0
 8008070:	d1ef      	bne.n	8008052 <quorem+0xe8>
 8008072:	3c01      	subs	r4, #1
 8008074:	e7ea      	b.n	800804c <quorem+0xe2>
 8008076:	2000      	movs	r0, #0
 8008078:	e7ee      	b.n	8008058 <quorem+0xee>
 800807a:	0000      	movs	r0, r0
 800807c:	0000      	movs	r0, r0
	...

08008080 <_dtoa_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	69c7      	ldr	r7, [r0, #28]
 8008086:	b097      	sub	sp, #92	@ 0x5c
 8008088:	ed8d 0b04 	vstr	d0, [sp, #16]
 800808c:	ec55 4b10 	vmov	r4, r5, d0
 8008090:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008092:	9107      	str	r1, [sp, #28]
 8008094:	4681      	mov	r9, r0
 8008096:	920c      	str	r2, [sp, #48]	@ 0x30
 8008098:	9311      	str	r3, [sp, #68]	@ 0x44
 800809a:	b97f      	cbnz	r7, 80080bc <_dtoa_r+0x3c>
 800809c:	2010      	movs	r0, #16
 800809e:	f7fe f919 	bl	80062d4 <malloc>
 80080a2:	4602      	mov	r2, r0
 80080a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80080a8:	b920      	cbnz	r0, 80080b4 <_dtoa_r+0x34>
 80080aa:	4ba9      	ldr	r3, [pc, #676]	@ (8008350 <_dtoa_r+0x2d0>)
 80080ac:	21ef      	movs	r1, #239	@ 0xef
 80080ae:	48a9      	ldr	r0, [pc, #676]	@ (8008354 <_dtoa_r+0x2d4>)
 80080b0:	f002 f9d8 	bl	800a464 <__assert_func>
 80080b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080b8:	6007      	str	r7, [r0, #0]
 80080ba:	60c7      	str	r7, [r0, #12]
 80080bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080c0:	6819      	ldr	r1, [r3, #0]
 80080c2:	b159      	cbz	r1, 80080dc <_dtoa_r+0x5c>
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	604a      	str	r2, [r1, #4]
 80080c8:	2301      	movs	r3, #1
 80080ca:	4093      	lsls	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
 80080ce:	4648      	mov	r0, r9
 80080d0:	f000 fe86 	bl	8008de0 <_Bfree>
 80080d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	1e2b      	subs	r3, r5, #0
 80080de:	bfb9      	ittee	lt
 80080e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080e4:	9305      	strlt	r3, [sp, #20]
 80080e6:	2300      	movge	r3, #0
 80080e8:	6033      	strge	r3, [r6, #0]
 80080ea:	9f05      	ldr	r7, [sp, #20]
 80080ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008358 <_dtoa_r+0x2d8>)
 80080ee:	bfbc      	itt	lt
 80080f0:	2201      	movlt	r2, #1
 80080f2:	6032      	strlt	r2, [r6, #0]
 80080f4:	43bb      	bics	r3, r7
 80080f6:	d112      	bne.n	800811e <_dtoa_r+0x9e>
 80080f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008104:	4323      	orrs	r3, r4
 8008106:	f000 855a 	beq.w	8008bbe <_dtoa_r+0xb3e>
 800810a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800810c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800836c <_dtoa_r+0x2ec>
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 855c 	beq.w	8008bce <_dtoa_r+0xb4e>
 8008116:	f10a 0303 	add.w	r3, sl, #3
 800811a:	f000 bd56 	b.w	8008bca <_dtoa_r+0xb4a>
 800811e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	ec51 0b17 	vmov	r0, r1, d7
 8008128:	2300      	movs	r3, #0
 800812a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800812e:	f7f8 fcfb 	bl	8000b28 <__aeabi_dcmpeq>
 8008132:	4680      	mov	r8, r0
 8008134:	b158      	cbz	r0, 800814e <_dtoa_r+0xce>
 8008136:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008138:	2301      	movs	r3, #1
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800813e:	b113      	cbz	r3, 8008146 <_dtoa_r+0xc6>
 8008140:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008142:	4b86      	ldr	r3, [pc, #536]	@ (800835c <_dtoa_r+0x2dc>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008370 <_dtoa_r+0x2f0>
 800814a:	f000 bd40 	b.w	8008bce <_dtoa_r+0xb4e>
 800814e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008152:	aa14      	add	r2, sp, #80	@ 0x50
 8008154:	a915      	add	r1, sp, #84	@ 0x54
 8008156:	4648      	mov	r0, r9
 8008158:	f001 f924 	bl	80093a4 <__d2b>
 800815c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008160:	9002      	str	r0, [sp, #8]
 8008162:	2e00      	cmp	r6, #0
 8008164:	d078      	beq.n	8008258 <_dtoa_r+0x1d8>
 8008166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008168:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800816c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800817c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008180:	4619      	mov	r1, r3
 8008182:	2200      	movs	r2, #0
 8008184:	4b76      	ldr	r3, [pc, #472]	@ (8008360 <_dtoa_r+0x2e0>)
 8008186:	f7f8 f8af 	bl	80002e8 <__aeabi_dsub>
 800818a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008338 <_dtoa_r+0x2b8>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 fa62 	bl	8000658 <__aeabi_dmul>
 8008194:	a36a      	add	r3, pc, #424	@ (adr r3, 8008340 <_dtoa_r+0x2c0>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 f8a7 	bl	80002ec <__adddf3>
 800819e:	4604      	mov	r4, r0
 80081a0:	4630      	mov	r0, r6
 80081a2:	460d      	mov	r5, r1
 80081a4:	f7f8 f9ee 	bl	8000584 <__aeabi_i2d>
 80081a8:	a367      	add	r3, pc, #412	@ (adr r3, 8008348 <_dtoa_r+0x2c8>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 fa53 	bl	8000658 <__aeabi_dmul>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 f897 	bl	80002ec <__adddf3>
 80081be:	4604      	mov	r4, r0
 80081c0:	460d      	mov	r5, r1
 80081c2:	f7f8 fcf9 	bl	8000bb8 <__aeabi_d2iz>
 80081c6:	2200      	movs	r2, #0
 80081c8:	4607      	mov	r7, r0
 80081ca:	2300      	movs	r3, #0
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fcb4 	bl	8000b3c <__aeabi_dcmplt>
 80081d4:	b140      	cbz	r0, 80081e8 <_dtoa_r+0x168>
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7f8 f9d4 	bl	8000584 <__aeabi_i2d>
 80081dc:	4622      	mov	r2, r4
 80081de:	462b      	mov	r3, r5
 80081e0:	f7f8 fca2 	bl	8000b28 <__aeabi_dcmpeq>
 80081e4:	b900      	cbnz	r0, 80081e8 <_dtoa_r+0x168>
 80081e6:	3f01      	subs	r7, #1
 80081e8:	2f16      	cmp	r7, #22
 80081ea:	d852      	bhi.n	8008292 <_dtoa_r+0x212>
 80081ec:	4b5d      	ldr	r3, [pc, #372]	@ (8008364 <_dtoa_r+0x2e4>)
 80081ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081fa:	f7f8 fc9f 	bl	8000b3c <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d049      	beq.n	8008296 <_dtoa_r+0x216>
 8008202:	3f01      	subs	r7, #1
 8008204:	2300      	movs	r3, #0
 8008206:	9310      	str	r3, [sp, #64]	@ 0x40
 8008208:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800820a:	1b9b      	subs	r3, r3, r6
 800820c:	1e5a      	subs	r2, r3, #1
 800820e:	bf45      	ittet	mi
 8008210:	f1c3 0301 	rsbmi	r3, r3, #1
 8008214:	9300      	strmi	r3, [sp, #0]
 8008216:	2300      	movpl	r3, #0
 8008218:	2300      	movmi	r3, #0
 800821a:	9206      	str	r2, [sp, #24]
 800821c:	bf54      	ite	pl
 800821e:	9300      	strpl	r3, [sp, #0]
 8008220:	9306      	strmi	r3, [sp, #24]
 8008222:	2f00      	cmp	r7, #0
 8008224:	db39      	blt.n	800829a <_dtoa_r+0x21a>
 8008226:	9b06      	ldr	r3, [sp, #24]
 8008228:	970d      	str	r7, [sp, #52]	@ 0x34
 800822a:	443b      	add	r3, r7
 800822c:	9306      	str	r3, [sp, #24]
 800822e:	2300      	movs	r3, #0
 8008230:	9308      	str	r3, [sp, #32]
 8008232:	9b07      	ldr	r3, [sp, #28]
 8008234:	2b09      	cmp	r3, #9
 8008236:	d863      	bhi.n	8008300 <_dtoa_r+0x280>
 8008238:	2b05      	cmp	r3, #5
 800823a:	bfc4      	itt	gt
 800823c:	3b04      	subgt	r3, #4
 800823e:	9307      	strgt	r3, [sp, #28]
 8008240:	9b07      	ldr	r3, [sp, #28]
 8008242:	f1a3 0302 	sub.w	r3, r3, #2
 8008246:	bfcc      	ite	gt
 8008248:	2400      	movgt	r4, #0
 800824a:	2401      	movle	r4, #1
 800824c:	2b03      	cmp	r3, #3
 800824e:	d863      	bhi.n	8008318 <_dtoa_r+0x298>
 8008250:	e8df f003 	tbb	[pc, r3]
 8008254:	2b375452 	.word	0x2b375452
 8008258:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800825c:	441e      	add	r6, r3
 800825e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008262:	2b20      	cmp	r3, #32
 8008264:	bfc1      	itttt	gt
 8008266:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800826a:	409f      	lslgt	r7, r3
 800826c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008270:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008274:	bfd6      	itet	le
 8008276:	f1c3 0320 	rsble	r3, r3, #32
 800827a:	ea47 0003 	orrgt.w	r0, r7, r3
 800827e:	fa04 f003 	lslle.w	r0, r4, r3
 8008282:	f7f8 f96f 	bl	8000564 <__aeabi_ui2d>
 8008286:	2201      	movs	r2, #1
 8008288:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800828c:	3e01      	subs	r6, #1
 800828e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008290:	e776      	b.n	8008180 <_dtoa_r+0x100>
 8008292:	2301      	movs	r3, #1
 8008294:	e7b7      	b.n	8008206 <_dtoa_r+0x186>
 8008296:	9010      	str	r0, [sp, #64]	@ 0x40
 8008298:	e7b6      	b.n	8008208 <_dtoa_r+0x188>
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	1bdb      	subs	r3, r3, r7
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	427b      	negs	r3, r7
 80082a2:	9308      	str	r3, [sp, #32]
 80082a4:	2300      	movs	r3, #0
 80082a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80082a8:	e7c3      	b.n	8008232 <_dtoa_r+0x1b2>
 80082aa:	2301      	movs	r3, #1
 80082ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082b0:	eb07 0b03 	add.w	fp, r7, r3
 80082b4:	f10b 0301 	add.w	r3, fp, #1
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	bfb8      	it	lt
 80082be:	2301      	movlt	r3, #1
 80082c0:	e006      	b.n	80082d0 <_dtoa_r+0x250>
 80082c2:	2301      	movs	r3, #1
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dd28      	ble.n	800831e <_dtoa_r+0x29e>
 80082cc:	469b      	mov	fp, r3
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80082d4:	2100      	movs	r1, #0
 80082d6:	2204      	movs	r2, #4
 80082d8:	f102 0514 	add.w	r5, r2, #20
 80082dc:	429d      	cmp	r5, r3
 80082de:	d926      	bls.n	800832e <_dtoa_r+0x2ae>
 80082e0:	6041      	str	r1, [r0, #4]
 80082e2:	4648      	mov	r0, r9
 80082e4:	f000 fd3c 	bl	8008d60 <_Balloc>
 80082e8:	4682      	mov	sl, r0
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d142      	bne.n	8008374 <_dtoa_r+0x2f4>
 80082ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008368 <_dtoa_r+0x2e8>)
 80082f0:	4602      	mov	r2, r0
 80082f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80082f6:	e6da      	b.n	80080ae <_dtoa_r+0x2e>
 80082f8:	2300      	movs	r3, #0
 80082fa:	e7e3      	b.n	80082c4 <_dtoa_r+0x244>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e7d5      	b.n	80082ac <_dtoa_r+0x22c>
 8008300:	2401      	movs	r4, #1
 8008302:	2300      	movs	r3, #0
 8008304:	9307      	str	r3, [sp, #28]
 8008306:	9409      	str	r4, [sp, #36]	@ 0x24
 8008308:	f04f 3bff 	mov.w	fp, #4294967295
 800830c:	2200      	movs	r2, #0
 800830e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008312:	2312      	movs	r3, #18
 8008314:	920c      	str	r2, [sp, #48]	@ 0x30
 8008316:	e7db      	b.n	80082d0 <_dtoa_r+0x250>
 8008318:	2301      	movs	r3, #1
 800831a:	9309      	str	r3, [sp, #36]	@ 0x24
 800831c:	e7f4      	b.n	8008308 <_dtoa_r+0x288>
 800831e:	f04f 0b01 	mov.w	fp, #1
 8008322:	f8cd b00c 	str.w	fp, [sp, #12]
 8008326:	465b      	mov	r3, fp
 8008328:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800832c:	e7d0      	b.n	80082d0 <_dtoa_r+0x250>
 800832e:	3101      	adds	r1, #1
 8008330:	0052      	lsls	r2, r2, #1
 8008332:	e7d1      	b.n	80082d8 <_dtoa_r+0x258>
 8008334:	f3af 8000 	nop.w
 8008338:	636f4361 	.word	0x636f4361
 800833c:	3fd287a7 	.word	0x3fd287a7
 8008340:	8b60c8b3 	.word	0x8b60c8b3
 8008344:	3fc68a28 	.word	0x3fc68a28
 8008348:	509f79fb 	.word	0x509f79fb
 800834c:	3fd34413 	.word	0x3fd34413
 8008350:	0800affc 	.word	0x0800affc
 8008354:	0800b013 	.word	0x0800b013
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	0800b0fd 	.word	0x0800b0fd
 8008360:	3ff80000 	.word	0x3ff80000
 8008364:	0800b1d8 	.word	0x0800b1d8
 8008368:	0800b06b 	.word	0x0800b06b
 800836c:	0800aff8 	.word	0x0800aff8
 8008370:	0800b0fc 	.word	0x0800b0fc
 8008374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008378:	6018      	str	r0, [r3, #0]
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	2b0e      	cmp	r3, #14
 800837e:	f200 80a1 	bhi.w	80084c4 <_dtoa_r+0x444>
 8008382:	2c00      	cmp	r4, #0
 8008384:	f000 809e 	beq.w	80084c4 <_dtoa_r+0x444>
 8008388:	2f00      	cmp	r7, #0
 800838a:	dd33      	ble.n	80083f4 <_dtoa_r+0x374>
 800838c:	4b9c      	ldr	r3, [pc, #624]	@ (8008600 <_dtoa_r+0x580>)
 800838e:	f007 020f 	and.w	r2, r7, #15
 8008392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008396:	ed93 7b00 	vldr	d7, [r3]
 800839a:	05f8      	lsls	r0, r7, #23
 800839c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80083a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083a4:	d516      	bpl.n	80083d4 <_dtoa_r+0x354>
 80083a6:	4b97      	ldr	r3, [pc, #604]	@ (8008604 <_dtoa_r+0x584>)
 80083a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083b0:	f7f8 fa7c 	bl	80008ac <__aeabi_ddiv>
 80083b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b8:	f004 040f 	and.w	r4, r4, #15
 80083bc:	2603      	movs	r6, #3
 80083be:	4d91      	ldr	r5, [pc, #580]	@ (8008604 <_dtoa_r+0x584>)
 80083c0:	b954      	cbnz	r4, 80083d8 <_dtoa_r+0x358>
 80083c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ca:	f7f8 fa6f 	bl	80008ac <__aeabi_ddiv>
 80083ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d2:	e028      	b.n	8008426 <_dtoa_r+0x3a6>
 80083d4:	2602      	movs	r6, #2
 80083d6:	e7f2      	b.n	80083be <_dtoa_r+0x33e>
 80083d8:	07e1      	lsls	r1, r4, #31
 80083da:	d508      	bpl.n	80083ee <_dtoa_r+0x36e>
 80083dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083e4:	f7f8 f938 	bl	8000658 <__aeabi_dmul>
 80083e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80083ec:	3601      	adds	r6, #1
 80083ee:	1064      	asrs	r4, r4, #1
 80083f0:	3508      	adds	r5, #8
 80083f2:	e7e5      	b.n	80083c0 <_dtoa_r+0x340>
 80083f4:	f000 80af 	beq.w	8008556 <_dtoa_r+0x4d6>
 80083f8:	427c      	negs	r4, r7
 80083fa:	4b81      	ldr	r3, [pc, #516]	@ (8008600 <_dtoa_r+0x580>)
 80083fc:	4d81      	ldr	r5, [pc, #516]	@ (8008604 <_dtoa_r+0x584>)
 80083fe:	f004 020f 	and.w	r2, r4, #15
 8008402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800840e:	f7f8 f923 	bl	8000658 <__aeabi_dmul>
 8008412:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008416:	1124      	asrs	r4, r4, #4
 8008418:	2300      	movs	r3, #0
 800841a:	2602      	movs	r6, #2
 800841c:	2c00      	cmp	r4, #0
 800841e:	f040 808f 	bne.w	8008540 <_dtoa_r+0x4c0>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1d3      	bne.n	80083ce <_dtoa_r+0x34e>
 8008426:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008428:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8094 	beq.w	800855a <_dtoa_r+0x4da>
 8008432:	4b75      	ldr	r3, [pc, #468]	@ (8008608 <_dtoa_r+0x588>)
 8008434:	2200      	movs	r2, #0
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f8 fb7f 	bl	8000b3c <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	f000 808b 	beq.w	800855a <_dtoa_r+0x4da>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8087 	beq.w	800855a <_dtoa_r+0x4da>
 800844c:	f1bb 0f00 	cmp.w	fp, #0
 8008450:	dd34      	ble.n	80084bc <_dtoa_r+0x43c>
 8008452:	4620      	mov	r0, r4
 8008454:	4b6d      	ldr	r3, [pc, #436]	@ (800860c <_dtoa_r+0x58c>)
 8008456:	2200      	movs	r2, #0
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 f8fd 	bl	8000658 <__aeabi_dmul>
 800845e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008462:	f107 38ff 	add.w	r8, r7, #4294967295
 8008466:	3601      	adds	r6, #1
 8008468:	465c      	mov	r4, fp
 800846a:	4630      	mov	r0, r6
 800846c:	f7f8 f88a 	bl	8000584 <__aeabi_i2d>
 8008470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008474:	f7f8 f8f0 	bl	8000658 <__aeabi_dmul>
 8008478:	4b65      	ldr	r3, [pc, #404]	@ (8008610 <_dtoa_r+0x590>)
 800847a:	2200      	movs	r2, #0
 800847c:	f7f7 ff36 	bl	80002ec <__adddf3>
 8008480:	4605      	mov	r5, r0
 8008482:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008486:	2c00      	cmp	r4, #0
 8008488:	d16a      	bne.n	8008560 <_dtoa_r+0x4e0>
 800848a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800848e:	4b61      	ldr	r3, [pc, #388]	@ (8008614 <_dtoa_r+0x594>)
 8008490:	2200      	movs	r2, #0
 8008492:	f7f7 ff29 	bl	80002e8 <__aeabi_dsub>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800849e:	462a      	mov	r2, r5
 80084a0:	4633      	mov	r3, r6
 80084a2:	f7f8 fb69 	bl	8000b78 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f040 8298 	bne.w	80089dc <_dtoa_r+0x95c>
 80084ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b0:	462a      	mov	r2, r5
 80084b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084b6:	f7f8 fb41 	bl	8000b3c <__aeabi_dcmplt>
 80084ba:	bb38      	cbnz	r0, 800850c <_dtoa_r+0x48c>
 80084bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80084c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f2c0 8157 	blt.w	800877a <_dtoa_r+0x6fa>
 80084cc:	2f0e      	cmp	r7, #14
 80084ce:	f300 8154 	bgt.w	800877a <_dtoa_r+0x6fa>
 80084d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008600 <_dtoa_r+0x580>)
 80084d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084d8:	ed93 7b00 	vldr	d7, [r3]
 80084dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084de:	2b00      	cmp	r3, #0
 80084e0:	ed8d 7b00 	vstr	d7, [sp]
 80084e4:	f280 80e5 	bge.w	80086b2 <_dtoa_r+0x632>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f300 80e1 	bgt.w	80086b2 <_dtoa_r+0x632>
 80084f0:	d10c      	bne.n	800850c <_dtoa_r+0x48c>
 80084f2:	4b48      	ldr	r3, [pc, #288]	@ (8008614 <_dtoa_r+0x594>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	ec51 0b17 	vmov	r0, r1, d7
 80084fa:	f7f8 f8ad 	bl	8000658 <__aeabi_dmul>
 80084fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008502:	f7f8 fb2f 	bl	8000b64 <__aeabi_dcmpge>
 8008506:	2800      	cmp	r0, #0
 8008508:	f000 8266 	beq.w	80089d8 <_dtoa_r+0x958>
 800850c:	2400      	movs	r4, #0
 800850e:	4625      	mov	r5, r4
 8008510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008512:	4656      	mov	r6, sl
 8008514:	ea6f 0803 	mvn.w	r8, r3
 8008518:	2700      	movs	r7, #0
 800851a:	4621      	mov	r1, r4
 800851c:	4648      	mov	r0, r9
 800851e:	f000 fc5f 	bl	8008de0 <_Bfree>
 8008522:	2d00      	cmp	r5, #0
 8008524:	f000 80bd 	beq.w	80086a2 <_dtoa_r+0x622>
 8008528:	b12f      	cbz	r7, 8008536 <_dtoa_r+0x4b6>
 800852a:	42af      	cmp	r7, r5
 800852c:	d003      	beq.n	8008536 <_dtoa_r+0x4b6>
 800852e:	4639      	mov	r1, r7
 8008530:	4648      	mov	r0, r9
 8008532:	f000 fc55 	bl	8008de0 <_Bfree>
 8008536:	4629      	mov	r1, r5
 8008538:	4648      	mov	r0, r9
 800853a:	f000 fc51 	bl	8008de0 <_Bfree>
 800853e:	e0b0      	b.n	80086a2 <_dtoa_r+0x622>
 8008540:	07e2      	lsls	r2, r4, #31
 8008542:	d505      	bpl.n	8008550 <_dtoa_r+0x4d0>
 8008544:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008548:	f7f8 f886 	bl	8000658 <__aeabi_dmul>
 800854c:	3601      	adds	r6, #1
 800854e:	2301      	movs	r3, #1
 8008550:	1064      	asrs	r4, r4, #1
 8008552:	3508      	adds	r5, #8
 8008554:	e762      	b.n	800841c <_dtoa_r+0x39c>
 8008556:	2602      	movs	r6, #2
 8008558:	e765      	b.n	8008426 <_dtoa_r+0x3a6>
 800855a:	9c03      	ldr	r4, [sp, #12]
 800855c:	46b8      	mov	r8, r7
 800855e:	e784      	b.n	800846a <_dtoa_r+0x3ea>
 8008560:	4b27      	ldr	r3, [pc, #156]	@ (8008600 <_dtoa_r+0x580>)
 8008562:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008564:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008568:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800856c:	4454      	add	r4, sl
 800856e:	2900      	cmp	r1, #0
 8008570:	d054      	beq.n	800861c <_dtoa_r+0x59c>
 8008572:	4929      	ldr	r1, [pc, #164]	@ (8008618 <_dtoa_r+0x598>)
 8008574:	2000      	movs	r0, #0
 8008576:	f7f8 f999 	bl	80008ac <__aeabi_ddiv>
 800857a:	4633      	mov	r3, r6
 800857c:	462a      	mov	r2, r5
 800857e:	f7f7 feb3 	bl	80002e8 <__aeabi_dsub>
 8008582:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008586:	4656      	mov	r6, sl
 8008588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800858c:	f7f8 fb14 	bl	8000bb8 <__aeabi_d2iz>
 8008590:	4605      	mov	r5, r0
 8008592:	f7f7 fff7 	bl	8000584 <__aeabi_i2d>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800859e:	f7f7 fea3 	bl	80002e8 <__aeabi_dsub>
 80085a2:	3530      	adds	r5, #48	@ 0x30
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085ac:	f806 5b01 	strb.w	r5, [r6], #1
 80085b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085b4:	f7f8 fac2 	bl	8000b3c <__aeabi_dcmplt>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d172      	bne.n	80086a2 <_dtoa_r+0x622>
 80085bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c0:	4911      	ldr	r1, [pc, #68]	@ (8008608 <_dtoa_r+0x588>)
 80085c2:	2000      	movs	r0, #0
 80085c4:	f7f7 fe90 	bl	80002e8 <__aeabi_dsub>
 80085c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085cc:	f7f8 fab6 	bl	8000b3c <__aeabi_dcmplt>
 80085d0:	2800      	cmp	r0, #0
 80085d2:	f040 80b4 	bne.w	800873e <_dtoa_r+0x6be>
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	f43f af70 	beq.w	80084bc <_dtoa_r+0x43c>
 80085dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80085e0:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <_dtoa_r+0x58c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	f7f8 f838 	bl	8000658 <__aeabi_dmul>
 80085e8:	4b08      	ldr	r3, [pc, #32]	@ (800860c <_dtoa_r+0x58c>)
 80085ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085ee:	2200      	movs	r2, #0
 80085f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f4:	f7f8 f830 	bl	8000658 <__aeabi_dmul>
 80085f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085fc:	e7c4      	b.n	8008588 <_dtoa_r+0x508>
 80085fe:	bf00      	nop
 8008600:	0800b1d8 	.word	0x0800b1d8
 8008604:	0800b1b0 	.word	0x0800b1b0
 8008608:	3ff00000 	.word	0x3ff00000
 800860c:	40240000 	.word	0x40240000
 8008610:	401c0000 	.word	0x401c0000
 8008614:	40140000 	.word	0x40140000
 8008618:	3fe00000 	.word	0x3fe00000
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	f7f8 f81a 	bl	8000658 <__aeabi_dmul>
 8008624:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008628:	9413      	str	r4, [sp, #76]	@ 0x4c
 800862a:	4656      	mov	r6, sl
 800862c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008630:	f7f8 fac2 	bl	8000bb8 <__aeabi_d2iz>
 8008634:	4605      	mov	r5, r0
 8008636:	f7f7 ffa5 	bl	8000584 <__aeabi_i2d>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008642:	f7f7 fe51 	bl	80002e8 <__aeabi_dsub>
 8008646:	3530      	adds	r5, #48	@ 0x30
 8008648:	f806 5b01 	strb.w	r5, [r6], #1
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	42a6      	cmp	r6, r4
 8008652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	d124      	bne.n	80086a6 <_dtoa_r+0x626>
 800865c:	4baf      	ldr	r3, [pc, #700]	@ (800891c <_dtoa_r+0x89c>)
 800865e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008662:	f7f7 fe43 	bl	80002ec <__adddf3>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866e:	f7f8 fa83 	bl	8000b78 <__aeabi_dcmpgt>
 8008672:	2800      	cmp	r0, #0
 8008674:	d163      	bne.n	800873e <_dtoa_r+0x6be>
 8008676:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800867a:	49a8      	ldr	r1, [pc, #672]	@ (800891c <_dtoa_r+0x89c>)
 800867c:	2000      	movs	r0, #0
 800867e:	f7f7 fe33 	bl	80002e8 <__aeabi_dsub>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800868a:	f7f8 fa57 	bl	8000b3c <__aeabi_dcmplt>
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af14 	beq.w	80084bc <_dtoa_r+0x43c>
 8008694:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008696:	1e73      	subs	r3, r6, #1
 8008698:	9313      	str	r3, [sp, #76]	@ 0x4c
 800869a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800869e:	2b30      	cmp	r3, #48	@ 0x30
 80086a0:	d0f8      	beq.n	8008694 <_dtoa_r+0x614>
 80086a2:	4647      	mov	r7, r8
 80086a4:	e03b      	b.n	800871e <_dtoa_r+0x69e>
 80086a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008920 <_dtoa_r+0x8a0>)
 80086a8:	f7f7 ffd6 	bl	8000658 <__aeabi_dmul>
 80086ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b0:	e7bc      	b.n	800862c <_dtoa_r+0x5ac>
 80086b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80086b6:	4656      	mov	r6, sl
 80086b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f8 f8f4 	bl	80008ac <__aeabi_ddiv>
 80086c4:	f7f8 fa78 	bl	8000bb8 <__aeabi_d2iz>
 80086c8:	4680      	mov	r8, r0
 80086ca:	f7f7 ff5b 	bl	8000584 <__aeabi_i2d>
 80086ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086d2:	f7f7 ffc1 	bl	8000658 <__aeabi_dmul>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4620      	mov	r0, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086e2:	f7f7 fe01 	bl	80002e8 <__aeabi_dsub>
 80086e6:	f806 4b01 	strb.w	r4, [r6], #1
 80086ea:	9d03      	ldr	r5, [sp, #12]
 80086ec:	eba6 040a 	sub.w	r4, r6, sl
 80086f0:	42a5      	cmp	r5, r4
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	d133      	bne.n	8008760 <_dtoa_r+0x6e0>
 80086f8:	f7f7 fdf8 	bl	80002ec <__adddf3>
 80086fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	f7f8 fa38 	bl	8000b78 <__aeabi_dcmpgt>
 8008708:	b9c0      	cbnz	r0, 800873c <_dtoa_r+0x6bc>
 800870a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 fa09 	bl	8000b28 <__aeabi_dcmpeq>
 8008716:	b110      	cbz	r0, 800871e <_dtoa_r+0x69e>
 8008718:	f018 0f01 	tst.w	r8, #1
 800871c:	d10e      	bne.n	800873c <_dtoa_r+0x6bc>
 800871e:	9902      	ldr	r1, [sp, #8]
 8008720:	4648      	mov	r0, r9
 8008722:	f000 fb5d 	bl	8008de0 <_Bfree>
 8008726:	2300      	movs	r3, #0
 8008728:	7033      	strb	r3, [r6, #0]
 800872a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800872c:	3701      	adds	r7, #1
 800872e:	601f      	str	r7, [r3, #0]
 8008730:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 824b 	beq.w	8008bce <_dtoa_r+0xb4e>
 8008738:	601e      	str	r6, [r3, #0]
 800873a:	e248      	b.n	8008bce <_dtoa_r+0xb4e>
 800873c:	46b8      	mov	r8, r7
 800873e:	4633      	mov	r3, r6
 8008740:	461e      	mov	r6, r3
 8008742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008746:	2a39      	cmp	r2, #57	@ 0x39
 8008748:	d106      	bne.n	8008758 <_dtoa_r+0x6d8>
 800874a:	459a      	cmp	sl, r3
 800874c:	d1f8      	bne.n	8008740 <_dtoa_r+0x6c0>
 800874e:	2230      	movs	r2, #48	@ 0x30
 8008750:	f108 0801 	add.w	r8, r8, #1
 8008754:	f88a 2000 	strb.w	r2, [sl]
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	3201      	adds	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e7a0      	b.n	80086a2 <_dtoa_r+0x622>
 8008760:	4b6f      	ldr	r3, [pc, #444]	@ (8008920 <_dtoa_r+0x8a0>)
 8008762:	2200      	movs	r2, #0
 8008764:	f7f7 ff78 	bl	8000658 <__aeabi_dmul>
 8008768:	2200      	movs	r2, #0
 800876a:	2300      	movs	r3, #0
 800876c:	4604      	mov	r4, r0
 800876e:	460d      	mov	r5, r1
 8008770:	f7f8 f9da 	bl	8000b28 <__aeabi_dcmpeq>
 8008774:	2800      	cmp	r0, #0
 8008776:	d09f      	beq.n	80086b8 <_dtoa_r+0x638>
 8008778:	e7d1      	b.n	800871e <_dtoa_r+0x69e>
 800877a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800877c:	2a00      	cmp	r2, #0
 800877e:	f000 80ea 	beq.w	8008956 <_dtoa_r+0x8d6>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	2a01      	cmp	r2, #1
 8008786:	f300 80cd 	bgt.w	8008924 <_dtoa_r+0x8a4>
 800878a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800878c:	2a00      	cmp	r2, #0
 800878e:	f000 80c1 	beq.w	8008914 <_dtoa_r+0x894>
 8008792:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008796:	9c08      	ldr	r4, [sp, #32]
 8008798:	9e00      	ldr	r6, [sp, #0]
 800879a:	9a00      	ldr	r2, [sp, #0]
 800879c:	441a      	add	r2, r3
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	9a06      	ldr	r2, [sp, #24]
 80087a2:	2101      	movs	r1, #1
 80087a4:	441a      	add	r2, r3
 80087a6:	4648      	mov	r0, r9
 80087a8:	9206      	str	r2, [sp, #24]
 80087aa:	f000 fbcd 	bl	8008f48 <__i2b>
 80087ae:	4605      	mov	r5, r0
 80087b0:	b166      	cbz	r6, 80087cc <_dtoa_r+0x74c>
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd09      	ble.n	80087cc <_dtoa_r+0x74c>
 80087b8:	42b3      	cmp	r3, r6
 80087ba:	9a00      	ldr	r2, [sp, #0]
 80087bc:	bfa8      	it	ge
 80087be:	4633      	movge	r3, r6
 80087c0:	1ad2      	subs	r2, r2, r3
 80087c2:	9200      	str	r2, [sp, #0]
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	1af6      	subs	r6, r6, r3
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	9306      	str	r3, [sp, #24]
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	b30b      	cbz	r3, 8008814 <_dtoa_r+0x794>
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80c6 	beq.w	8008964 <_dtoa_r+0x8e4>
 80087d8:	2c00      	cmp	r4, #0
 80087da:	f000 80c0 	beq.w	800895e <_dtoa_r+0x8de>
 80087de:	4629      	mov	r1, r5
 80087e0:	4622      	mov	r2, r4
 80087e2:	4648      	mov	r0, r9
 80087e4:	f000 fc68 	bl	80090b8 <__pow5mult>
 80087e8:	9a02      	ldr	r2, [sp, #8]
 80087ea:	4601      	mov	r1, r0
 80087ec:	4605      	mov	r5, r0
 80087ee:	4648      	mov	r0, r9
 80087f0:	f000 fbc0 	bl	8008f74 <__multiply>
 80087f4:	9902      	ldr	r1, [sp, #8]
 80087f6:	4680      	mov	r8, r0
 80087f8:	4648      	mov	r0, r9
 80087fa:	f000 faf1 	bl	8008de0 <_Bfree>
 80087fe:	9b08      	ldr	r3, [sp, #32]
 8008800:	1b1b      	subs	r3, r3, r4
 8008802:	9308      	str	r3, [sp, #32]
 8008804:	f000 80b1 	beq.w	800896a <_dtoa_r+0x8ea>
 8008808:	9a08      	ldr	r2, [sp, #32]
 800880a:	4641      	mov	r1, r8
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fc53 	bl	80090b8 <__pow5mult>
 8008812:	9002      	str	r0, [sp, #8]
 8008814:	2101      	movs	r1, #1
 8008816:	4648      	mov	r0, r9
 8008818:	f000 fb96 	bl	8008f48 <__i2b>
 800881c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800881e:	4604      	mov	r4, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 81d8 	beq.w	8008bd6 <_dtoa_r+0xb56>
 8008826:	461a      	mov	r2, r3
 8008828:	4601      	mov	r1, r0
 800882a:	4648      	mov	r0, r9
 800882c:	f000 fc44 	bl	80090b8 <__pow5mult>
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	2b01      	cmp	r3, #1
 8008834:	4604      	mov	r4, r0
 8008836:	f300 809f 	bgt.w	8008978 <_dtoa_r+0x8f8>
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 8097 	bne.w	8008970 <_dtoa_r+0x8f0>
 8008842:	9b05      	ldr	r3, [sp, #20]
 8008844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008848:	2b00      	cmp	r3, #0
 800884a:	f040 8093 	bne.w	8008974 <_dtoa_r+0x8f4>
 800884e:	9b05      	ldr	r3, [sp, #20]
 8008850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008854:	0d1b      	lsrs	r3, r3, #20
 8008856:	051b      	lsls	r3, r3, #20
 8008858:	b133      	cbz	r3, 8008868 <_dtoa_r+0x7e8>
 800885a:	9b00      	ldr	r3, [sp, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	3301      	adds	r3, #1
 8008864:	9306      	str	r3, [sp, #24]
 8008866:	2301      	movs	r3, #1
 8008868:	9308      	str	r3, [sp, #32]
 800886a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 81b8 	beq.w	8008be2 <_dtoa_r+0xb62>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008878:	6918      	ldr	r0, [r3, #16]
 800887a:	f000 fb19 	bl	8008eb0 <__hi0bits>
 800887e:	f1c0 0020 	rsb	r0, r0, #32
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	4418      	add	r0, r3
 8008886:	f010 001f 	ands.w	r0, r0, #31
 800888a:	f000 8082 	beq.w	8008992 <_dtoa_r+0x912>
 800888e:	f1c0 0320 	rsb	r3, r0, #32
 8008892:	2b04      	cmp	r3, #4
 8008894:	dd73      	ble.n	800897e <_dtoa_r+0x8fe>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	f1c0 001c 	rsb	r0, r0, #28
 800889c:	4403      	add	r3, r0
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	9b06      	ldr	r3, [sp, #24]
 80088a2:	4403      	add	r3, r0
 80088a4:	4406      	add	r6, r0
 80088a6:	9306      	str	r3, [sp, #24]
 80088a8:	9b00      	ldr	r3, [sp, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd05      	ble.n	80088ba <_dtoa_r+0x83a>
 80088ae:	9902      	ldr	r1, [sp, #8]
 80088b0:	461a      	mov	r2, r3
 80088b2:	4648      	mov	r0, r9
 80088b4:	f000 fc5a 	bl	800916c <__lshift>
 80088b8:	9002      	str	r0, [sp, #8]
 80088ba:	9b06      	ldr	r3, [sp, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd05      	ble.n	80088cc <_dtoa_r+0x84c>
 80088c0:	4621      	mov	r1, r4
 80088c2:	461a      	mov	r2, r3
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fc51 	bl	800916c <__lshift>
 80088ca:	4604      	mov	r4, r0
 80088cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d061      	beq.n	8008996 <_dtoa_r+0x916>
 80088d2:	9802      	ldr	r0, [sp, #8]
 80088d4:	4621      	mov	r1, r4
 80088d6:	f000 fcb5 	bl	8009244 <__mcmp>
 80088da:	2800      	cmp	r0, #0
 80088dc:	da5b      	bge.n	8008996 <_dtoa_r+0x916>
 80088de:	2300      	movs	r3, #0
 80088e0:	9902      	ldr	r1, [sp, #8]
 80088e2:	220a      	movs	r2, #10
 80088e4:	4648      	mov	r0, r9
 80088e6:	f000 fa9d 	bl	8008e24 <__multadd>
 80088ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ec:	9002      	str	r0, [sp, #8]
 80088ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 8177 	beq.w	8008be6 <_dtoa_r+0xb66>
 80088f8:	4629      	mov	r1, r5
 80088fa:	2300      	movs	r3, #0
 80088fc:	220a      	movs	r2, #10
 80088fe:	4648      	mov	r0, r9
 8008900:	f000 fa90 	bl	8008e24 <__multadd>
 8008904:	f1bb 0f00 	cmp.w	fp, #0
 8008908:	4605      	mov	r5, r0
 800890a:	dc6f      	bgt.n	80089ec <_dtoa_r+0x96c>
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	2b02      	cmp	r3, #2
 8008910:	dc49      	bgt.n	80089a6 <_dtoa_r+0x926>
 8008912:	e06b      	b.n	80089ec <_dtoa_r+0x96c>
 8008914:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008916:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800891a:	e73c      	b.n	8008796 <_dtoa_r+0x716>
 800891c:	3fe00000 	.word	0x3fe00000
 8008920:	40240000 	.word	0x40240000
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	1e5c      	subs	r4, r3, #1
 8008928:	9b08      	ldr	r3, [sp, #32]
 800892a:	42a3      	cmp	r3, r4
 800892c:	db09      	blt.n	8008942 <_dtoa_r+0x8c2>
 800892e:	1b1c      	subs	r4, r3, r4
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f6bf af30 	bge.w	8008798 <_dtoa_r+0x718>
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	9a03      	ldr	r2, [sp, #12]
 800893c:	1a9e      	subs	r6, r3, r2
 800893e:	2300      	movs	r3, #0
 8008940:	e72b      	b.n	800879a <_dtoa_r+0x71a>
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008946:	9408      	str	r4, [sp, #32]
 8008948:	1ae3      	subs	r3, r4, r3
 800894a:	441a      	add	r2, r3
 800894c:	9e00      	ldr	r6, [sp, #0]
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	920d      	str	r2, [sp, #52]	@ 0x34
 8008952:	2400      	movs	r4, #0
 8008954:	e721      	b.n	800879a <_dtoa_r+0x71a>
 8008956:	9c08      	ldr	r4, [sp, #32]
 8008958:	9e00      	ldr	r6, [sp, #0]
 800895a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800895c:	e728      	b.n	80087b0 <_dtoa_r+0x730>
 800895e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008962:	e751      	b.n	8008808 <_dtoa_r+0x788>
 8008964:	9a08      	ldr	r2, [sp, #32]
 8008966:	9902      	ldr	r1, [sp, #8]
 8008968:	e750      	b.n	800880c <_dtoa_r+0x78c>
 800896a:	f8cd 8008 	str.w	r8, [sp, #8]
 800896e:	e751      	b.n	8008814 <_dtoa_r+0x794>
 8008970:	2300      	movs	r3, #0
 8008972:	e779      	b.n	8008868 <_dtoa_r+0x7e8>
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	e777      	b.n	8008868 <_dtoa_r+0x7e8>
 8008978:	2300      	movs	r3, #0
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	e779      	b.n	8008872 <_dtoa_r+0x7f2>
 800897e:	d093      	beq.n	80088a8 <_dtoa_r+0x828>
 8008980:	9a00      	ldr	r2, [sp, #0]
 8008982:	331c      	adds	r3, #28
 8008984:	441a      	add	r2, r3
 8008986:	9200      	str	r2, [sp, #0]
 8008988:	9a06      	ldr	r2, [sp, #24]
 800898a:	441a      	add	r2, r3
 800898c:	441e      	add	r6, r3
 800898e:	9206      	str	r2, [sp, #24]
 8008990:	e78a      	b.n	80088a8 <_dtoa_r+0x828>
 8008992:	4603      	mov	r3, r0
 8008994:	e7f4      	b.n	8008980 <_dtoa_r+0x900>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	46b8      	mov	r8, r7
 800899c:	dc20      	bgt.n	80089e0 <_dtoa_r+0x960>
 800899e:	469b      	mov	fp, r3
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	dd1e      	ble.n	80089e4 <_dtoa_r+0x964>
 80089a6:	f1bb 0f00 	cmp.w	fp, #0
 80089aa:	f47f adb1 	bne.w	8008510 <_dtoa_r+0x490>
 80089ae:	4621      	mov	r1, r4
 80089b0:	465b      	mov	r3, fp
 80089b2:	2205      	movs	r2, #5
 80089b4:	4648      	mov	r0, r9
 80089b6:	f000 fa35 	bl	8008e24 <__multadd>
 80089ba:	4601      	mov	r1, r0
 80089bc:	4604      	mov	r4, r0
 80089be:	9802      	ldr	r0, [sp, #8]
 80089c0:	f000 fc40 	bl	8009244 <__mcmp>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f77f ada3 	ble.w	8008510 <_dtoa_r+0x490>
 80089ca:	4656      	mov	r6, sl
 80089cc:	2331      	movs	r3, #49	@ 0x31
 80089ce:	f806 3b01 	strb.w	r3, [r6], #1
 80089d2:	f108 0801 	add.w	r8, r8, #1
 80089d6:	e59f      	b.n	8008518 <_dtoa_r+0x498>
 80089d8:	9c03      	ldr	r4, [sp, #12]
 80089da:	46b8      	mov	r8, r7
 80089dc:	4625      	mov	r5, r4
 80089de:	e7f4      	b.n	80089ca <_dtoa_r+0x94a>
 80089e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80089e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8101 	beq.w	8008bee <_dtoa_r+0xb6e>
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	dd05      	ble.n	80089fc <_dtoa_r+0x97c>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4632      	mov	r2, r6
 80089f4:	4648      	mov	r0, r9
 80089f6:	f000 fbb9 	bl	800916c <__lshift>
 80089fa:	4605      	mov	r5, r0
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d05c      	beq.n	8008abc <_dtoa_r+0xa3c>
 8008a02:	6869      	ldr	r1, [r5, #4]
 8008a04:	4648      	mov	r0, r9
 8008a06:	f000 f9ab 	bl	8008d60 <_Balloc>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	b928      	cbnz	r0, 8008a1a <_dtoa_r+0x99a>
 8008a0e:	4b82      	ldr	r3, [pc, #520]	@ (8008c18 <_dtoa_r+0xb98>)
 8008a10:	4602      	mov	r2, r0
 8008a12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a16:	f7ff bb4a 	b.w	80080ae <_dtoa_r+0x2e>
 8008a1a:	692a      	ldr	r2, [r5, #16]
 8008a1c:	3202      	adds	r2, #2
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	f105 010c 	add.w	r1, r5, #12
 8008a24:	300c      	adds	r0, #12
 8008a26:	f7ff fa8a 	bl	8007f3e <memcpy>
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4648      	mov	r0, r9
 8008a30:	f000 fb9c 	bl	800916c <__lshift>
 8008a34:	f10a 0301 	add.w	r3, sl, #1
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	eb0a 030b 	add.w	r3, sl, fp
 8008a3e:	9308      	str	r3, [sp, #32]
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	462f      	mov	r7, r5
 8008a48:	9306      	str	r3, [sp, #24]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	9b00      	ldr	r3, [sp, #0]
 8008a4e:	9802      	ldr	r0, [sp, #8]
 8008a50:	4621      	mov	r1, r4
 8008a52:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a56:	f7ff fa88 	bl	8007f6a <quorem>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	3330      	adds	r3, #48	@ 0x30
 8008a5e:	9003      	str	r0, [sp, #12]
 8008a60:	4639      	mov	r1, r7
 8008a62:	9802      	ldr	r0, [sp, #8]
 8008a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a66:	f000 fbed 	bl	8009244 <__mcmp>
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	9004      	str	r0, [sp, #16]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4648      	mov	r0, r9
 8008a72:	f000 fc03 	bl	800927c <__mdiff>
 8008a76:	68c2      	ldr	r2, [r0, #12]
 8008a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	bb02      	cbnz	r2, 8008ac0 <_dtoa_r+0xa40>
 8008a7e:	4601      	mov	r1, r0
 8008a80:	9802      	ldr	r0, [sp, #8]
 8008a82:	f000 fbdf 	bl	8009244 <__mcmp>
 8008a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a88:	4602      	mov	r2, r0
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4648      	mov	r0, r9
 8008a8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a92:	f000 f9a5 	bl	8008de0 <_Bfree>
 8008a96:	9b07      	ldr	r3, [sp, #28]
 8008a98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a9a:	9e00      	ldr	r6, [sp, #0]
 8008a9c:	ea42 0103 	orr.w	r1, r2, r3
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	4319      	orrs	r1, r3
 8008aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa6:	d10d      	bne.n	8008ac4 <_dtoa_r+0xa44>
 8008aa8:	2b39      	cmp	r3, #57	@ 0x39
 8008aaa:	d027      	beq.n	8008afc <_dtoa_r+0xa7c>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	dd01      	ble.n	8008ab6 <_dtoa_r+0xa36>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	3331      	adds	r3, #49	@ 0x31
 8008ab6:	f88b 3000 	strb.w	r3, [fp]
 8008aba:	e52e      	b.n	800851a <_dtoa_r+0x49a>
 8008abc:	4628      	mov	r0, r5
 8008abe:	e7b9      	b.n	8008a34 <_dtoa_r+0x9b4>
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	e7e2      	b.n	8008a8a <_dtoa_r+0xa0a>
 8008ac4:	9904      	ldr	r1, [sp, #16]
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	db04      	blt.n	8008ad4 <_dtoa_r+0xa54>
 8008aca:	9807      	ldr	r0, [sp, #28]
 8008acc:	4301      	orrs	r1, r0
 8008ace:	9806      	ldr	r0, [sp, #24]
 8008ad0:	4301      	orrs	r1, r0
 8008ad2:	d120      	bne.n	8008b16 <_dtoa_r+0xa96>
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	ddee      	ble.n	8008ab6 <_dtoa_r+0xa36>
 8008ad8:	9902      	ldr	r1, [sp, #8]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	2201      	movs	r2, #1
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 fb44 	bl	800916c <__lshift>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	9002      	str	r0, [sp, #8]
 8008ae8:	f000 fbac 	bl	8009244 <__mcmp>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	dc02      	bgt.n	8008af8 <_dtoa_r+0xa78>
 8008af2:	d1e0      	bne.n	8008ab6 <_dtoa_r+0xa36>
 8008af4:	07da      	lsls	r2, r3, #31
 8008af6:	d5de      	bpl.n	8008ab6 <_dtoa_r+0xa36>
 8008af8:	2b39      	cmp	r3, #57	@ 0x39
 8008afa:	d1da      	bne.n	8008ab2 <_dtoa_r+0xa32>
 8008afc:	2339      	movs	r3, #57	@ 0x39
 8008afe:	f88b 3000 	strb.w	r3, [fp]
 8008b02:	4633      	mov	r3, r6
 8008b04:	461e      	mov	r6, r3
 8008b06:	3b01      	subs	r3, #1
 8008b08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b0c:	2a39      	cmp	r2, #57	@ 0x39
 8008b0e:	d04e      	beq.n	8008bae <_dtoa_r+0xb2e>
 8008b10:	3201      	adds	r2, #1
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e501      	b.n	800851a <_dtoa_r+0x49a>
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	dd03      	ble.n	8008b22 <_dtoa_r+0xaa2>
 8008b1a:	2b39      	cmp	r3, #57	@ 0x39
 8008b1c:	d0ee      	beq.n	8008afc <_dtoa_r+0xa7c>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	e7c9      	b.n	8008ab6 <_dtoa_r+0xa36>
 8008b22:	9a00      	ldr	r2, [sp, #0]
 8008b24:	9908      	ldr	r1, [sp, #32]
 8008b26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b2a:	428a      	cmp	r2, r1
 8008b2c:	d028      	beq.n	8008b80 <_dtoa_r+0xb00>
 8008b2e:	9902      	ldr	r1, [sp, #8]
 8008b30:	2300      	movs	r3, #0
 8008b32:	220a      	movs	r2, #10
 8008b34:	4648      	mov	r0, r9
 8008b36:	f000 f975 	bl	8008e24 <__multadd>
 8008b3a:	42af      	cmp	r7, r5
 8008b3c:	9002      	str	r0, [sp, #8]
 8008b3e:	f04f 0300 	mov.w	r3, #0
 8008b42:	f04f 020a 	mov.w	r2, #10
 8008b46:	4639      	mov	r1, r7
 8008b48:	4648      	mov	r0, r9
 8008b4a:	d107      	bne.n	8008b5c <_dtoa_r+0xadc>
 8008b4c:	f000 f96a 	bl	8008e24 <__multadd>
 8008b50:	4607      	mov	r7, r0
 8008b52:	4605      	mov	r5, r0
 8008b54:	9b00      	ldr	r3, [sp, #0]
 8008b56:	3301      	adds	r3, #1
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	e777      	b.n	8008a4c <_dtoa_r+0x9cc>
 8008b5c:	f000 f962 	bl	8008e24 <__multadd>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4607      	mov	r7, r0
 8008b64:	2300      	movs	r3, #0
 8008b66:	220a      	movs	r2, #10
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f000 f95b 	bl	8008e24 <__multadd>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	e7f0      	b.n	8008b54 <_dtoa_r+0xad4>
 8008b72:	f1bb 0f00 	cmp.w	fp, #0
 8008b76:	bfcc      	ite	gt
 8008b78:	465e      	movgt	r6, fp
 8008b7a:	2601      	movle	r6, #1
 8008b7c:	4456      	add	r6, sl
 8008b7e:	2700      	movs	r7, #0
 8008b80:	9902      	ldr	r1, [sp, #8]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2201      	movs	r2, #1
 8008b86:	4648      	mov	r0, r9
 8008b88:	f000 faf0 	bl	800916c <__lshift>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	9002      	str	r0, [sp, #8]
 8008b90:	f000 fb58 	bl	8009244 <__mcmp>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dcb4      	bgt.n	8008b02 <_dtoa_r+0xa82>
 8008b98:	d102      	bne.n	8008ba0 <_dtoa_r+0xb20>
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	07db      	lsls	r3, r3, #31
 8008b9e:	d4b0      	bmi.n	8008b02 <_dtoa_r+0xa82>
 8008ba0:	4633      	mov	r3, r6
 8008ba2:	461e      	mov	r6, r3
 8008ba4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ba8:	2a30      	cmp	r2, #48	@ 0x30
 8008baa:	d0fa      	beq.n	8008ba2 <_dtoa_r+0xb22>
 8008bac:	e4b5      	b.n	800851a <_dtoa_r+0x49a>
 8008bae:	459a      	cmp	sl, r3
 8008bb0:	d1a8      	bne.n	8008b04 <_dtoa_r+0xa84>
 8008bb2:	2331      	movs	r3, #49	@ 0x31
 8008bb4:	f108 0801 	add.w	r8, r8, #1
 8008bb8:	f88a 3000 	strb.w	r3, [sl]
 8008bbc:	e4ad      	b.n	800851a <_dtoa_r+0x49a>
 8008bbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c1c <_dtoa_r+0xb9c>
 8008bc4:	b11b      	cbz	r3, 8008bce <_dtoa_r+0xb4e>
 8008bc6:	f10a 0308 	add.w	r3, sl, #8
 8008bca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	b017      	add	sp, #92	@ 0x5c
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	9b07      	ldr	r3, [sp, #28]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	f77f ae2e 	ble.w	800883a <_dtoa_r+0x7ba>
 8008bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008be0:	9308      	str	r3, [sp, #32]
 8008be2:	2001      	movs	r0, #1
 8008be4:	e64d      	b.n	8008882 <_dtoa_r+0x802>
 8008be6:	f1bb 0f00 	cmp.w	fp, #0
 8008bea:	f77f aed9 	ble.w	80089a0 <_dtoa_r+0x920>
 8008bee:	4656      	mov	r6, sl
 8008bf0:	9802      	ldr	r0, [sp, #8]
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	f7ff f9b9 	bl	8007f6a <quorem>
 8008bf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008bfc:	f806 3b01 	strb.w	r3, [r6], #1
 8008c00:	eba6 020a 	sub.w	r2, r6, sl
 8008c04:	4593      	cmp	fp, r2
 8008c06:	ddb4      	ble.n	8008b72 <_dtoa_r+0xaf2>
 8008c08:	9902      	ldr	r1, [sp, #8]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4648      	mov	r0, r9
 8008c10:	f000 f908 	bl	8008e24 <__multadd>
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	e7eb      	b.n	8008bf0 <_dtoa_r+0xb70>
 8008c18:	0800b06b 	.word	0x0800b06b
 8008c1c:	0800afef 	.word	0x0800afef

08008c20 <_free_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4605      	mov	r5, r0
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d041      	beq.n	8008cac <_free_r+0x8c>
 8008c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c2c:	1f0c      	subs	r4, r1, #4
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bfb8      	it	lt
 8008c32:	18e4      	addlt	r4, r4, r3
 8008c34:	f7fd fc00 	bl	8006438 <__malloc_lock>
 8008c38:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb0 <_free_r+0x90>)
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	b933      	cbnz	r3, 8008c4c <_free_r+0x2c>
 8008c3e:	6063      	str	r3, [r4, #4]
 8008c40:	6014      	str	r4, [r2, #0]
 8008c42:	4628      	mov	r0, r5
 8008c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c48:	f7fd bbfc 	b.w	8006444 <__malloc_unlock>
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	d908      	bls.n	8008c62 <_free_r+0x42>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	1821      	adds	r1, r4, r0
 8008c54:	428b      	cmp	r3, r1
 8008c56:	bf01      	itttt	eq
 8008c58:	6819      	ldreq	r1, [r3, #0]
 8008c5a:	685b      	ldreq	r3, [r3, #4]
 8008c5c:	1809      	addeq	r1, r1, r0
 8008c5e:	6021      	streq	r1, [r4, #0]
 8008c60:	e7ed      	b.n	8008c3e <_free_r+0x1e>
 8008c62:	461a      	mov	r2, r3
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	b10b      	cbz	r3, 8008c6c <_free_r+0x4c>
 8008c68:	42a3      	cmp	r3, r4
 8008c6a:	d9fa      	bls.n	8008c62 <_free_r+0x42>
 8008c6c:	6811      	ldr	r1, [r2, #0]
 8008c6e:	1850      	adds	r0, r2, r1
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d10b      	bne.n	8008c8c <_free_r+0x6c>
 8008c74:	6820      	ldr	r0, [r4, #0]
 8008c76:	4401      	add	r1, r0
 8008c78:	1850      	adds	r0, r2, r1
 8008c7a:	4283      	cmp	r3, r0
 8008c7c:	6011      	str	r1, [r2, #0]
 8008c7e:	d1e0      	bne.n	8008c42 <_free_r+0x22>
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	6053      	str	r3, [r2, #4]
 8008c86:	4408      	add	r0, r1
 8008c88:	6010      	str	r0, [r2, #0]
 8008c8a:	e7da      	b.n	8008c42 <_free_r+0x22>
 8008c8c:	d902      	bls.n	8008c94 <_free_r+0x74>
 8008c8e:	230c      	movs	r3, #12
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	e7d6      	b.n	8008c42 <_free_r+0x22>
 8008c94:	6820      	ldr	r0, [r4, #0]
 8008c96:	1821      	adds	r1, r4, r0
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	bf04      	itt	eq
 8008c9c:	6819      	ldreq	r1, [r3, #0]
 8008c9e:	685b      	ldreq	r3, [r3, #4]
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	bf04      	itt	eq
 8008ca4:	1809      	addeq	r1, r1, r0
 8008ca6:	6021      	streq	r1, [r4, #0]
 8008ca8:	6054      	str	r4, [r2, #4]
 8008caa:	e7ca      	b.n	8008c42 <_free_r+0x22>
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000d04 	.word	0x20000d04

08008cb4 <_findenv_r>:
 8008cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8008d28 <_findenv_r+0x74>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	4617      	mov	r7, r2
 8008cc2:	f001 fc01 	bl	800a4c8 <__env_lock>
 8008cc6:	f8da 4000 	ldr.w	r4, [sl]
 8008cca:	b134      	cbz	r4, 8008cda <_findenv_r+0x26>
 8008ccc:	464b      	mov	r3, r9
 8008cce:	4698      	mov	r8, r3
 8008cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd4:	b13a      	cbz	r2, 8008ce6 <_findenv_r+0x32>
 8008cd6:	2a3d      	cmp	r2, #61	@ 0x3d
 8008cd8:	d1f9      	bne.n	8008cce <_findenv_r+0x1a>
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f001 fbfa 	bl	800a4d4 <__env_unlock>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	eba8 0809 	sub.w	r8, r8, r9
 8008cea:	46a3      	mov	fp, r4
 8008cec:	f854 0b04 	ldr.w	r0, [r4], #4
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d0f2      	beq.n	8008cda <_findenv_r+0x26>
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7fe fae0 	bl	80072bc <strncmp>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1f4      	bne.n	8008cea <_findenv_r+0x36>
 8008d00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008d04:	eb03 0508 	add.w	r5, r3, r8
 8008d08:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008d0c:	2b3d      	cmp	r3, #61	@ 0x3d
 8008d0e:	d1ec      	bne.n	8008cea <_findenv_r+0x36>
 8008d10:	f8da 3000 	ldr.w	r3, [sl]
 8008d14:	ebab 0303 	sub.w	r3, fp, r3
 8008d18:	109b      	asrs	r3, r3, #2
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	603b      	str	r3, [r7, #0]
 8008d1e:	f001 fbd9 	bl	800a4d4 <__env_unlock>
 8008d22:	1c68      	adds	r0, r5, #1
 8008d24:	e7dd      	b.n	8008ce2 <_findenv_r+0x2e>
 8008d26:	bf00      	nop
 8008d28:	2000003c 	.word	0x2000003c

08008d2c <_getenv_r>:
 8008d2c:	b507      	push	{r0, r1, r2, lr}
 8008d2e:	aa01      	add	r2, sp, #4
 8008d30:	f7ff ffc0 	bl	8008cb4 <_findenv_r>
 8008d34:	b003      	add	sp, #12
 8008d36:	f85d fb04 	ldr.w	pc, [sp], #4

08008d3a <__ascii_mbtowc>:
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	b901      	cbnz	r1, 8008d40 <__ascii_mbtowc+0x6>
 8008d3e:	a901      	add	r1, sp, #4
 8008d40:	b142      	cbz	r2, 8008d54 <__ascii_mbtowc+0x1a>
 8008d42:	b14b      	cbz	r3, 8008d58 <__ascii_mbtowc+0x1e>
 8008d44:	7813      	ldrb	r3, [r2, #0]
 8008d46:	600b      	str	r3, [r1, #0]
 8008d48:	7812      	ldrb	r2, [r2, #0]
 8008d4a:	1e10      	subs	r0, r2, #0
 8008d4c:	bf18      	it	ne
 8008d4e:	2001      	movne	r0, #1
 8008d50:	b002      	add	sp, #8
 8008d52:	4770      	bx	lr
 8008d54:	4610      	mov	r0, r2
 8008d56:	e7fb      	b.n	8008d50 <__ascii_mbtowc+0x16>
 8008d58:	f06f 0001 	mvn.w	r0, #1
 8008d5c:	e7f8      	b.n	8008d50 <__ascii_mbtowc+0x16>
	...

08008d60 <_Balloc>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	69c6      	ldr	r6, [r0, #28]
 8008d64:	4604      	mov	r4, r0
 8008d66:	460d      	mov	r5, r1
 8008d68:	b976      	cbnz	r6, 8008d88 <_Balloc+0x28>
 8008d6a:	2010      	movs	r0, #16
 8008d6c:	f7fd fab2 	bl	80062d4 <malloc>
 8008d70:	4602      	mov	r2, r0
 8008d72:	61e0      	str	r0, [r4, #28]
 8008d74:	b920      	cbnz	r0, 8008d80 <_Balloc+0x20>
 8008d76:	4b18      	ldr	r3, [pc, #96]	@ (8008dd8 <_Balloc+0x78>)
 8008d78:	4818      	ldr	r0, [pc, #96]	@ (8008ddc <_Balloc+0x7c>)
 8008d7a:	216b      	movs	r1, #107	@ 0x6b
 8008d7c:	f001 fb72 	bl	800a464 <__assert_func>
 8008d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d84:	6006      	str	r6, [r0, #0]
 8008d86:	60c6      	str	r6, [r0, #12]
 8008d88:	69e6      	ldr	r6, [r4, #28]
 8008d8a:	68f3      	ldr	r3, [r6, #12]
 8008d8c:	b183      	cbz	r3, 8008db0 <_Balloc+0x50>
 8008d8e:	69e3      	ldr	r3, [r4, #28]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d96:	b9b8      	cbnz	r0, 8008dc8 <_Balloc+0x68>
 8008d98:	2101      	movs	r1, #1
 8008d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d9e:	1d72      	adds	r2, r6, #5
 8008da0:	0092      	lsls	r2, r2, #2
 8008da2:	4620      	mov	r0, r4
 8008da4:	f001 fb7c 	bl	800a4a0 <_calloc_r>
 8008da8:	b160      	cbz	r0, 8008dc4 <_Balloc+0x64>
 8008daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dae:	e00e      	b.n	8008dce <_Balloc+0x6e>
 8008db0:	2221      	movs	r2, #33	@ 0x21
 8008db2:	2104      	movs	r1, #4
 8008db4:	4620      	mov	r0, r4
 8008db6:	f001 fb73 	bl	800a4a0 <_calloc_r>
 8008dba:	69e3      	ldr	r3, [r4, #28]
 8008dbc:	60f0      	str	r0, [r6, #12]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e4      	bne.n	8008d8e <_Balloc+0x2e>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	6802      	ldr	r2, [r0, #0]
 8008dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dd4:	e7f7      	b.n	8008dc6 <_Balloc+0x66>
 8008dd6:	bf00      	nop
 8008dd8:	0800affc 	.word	0x0800affc
 8008ddc:	0800b07c 	.word	0x0800b07c

08008de0 <_Bfree>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	69c6      	ldr	r6, [r0, #28]
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	b976      	cbnz	r6, 8008e08 <_Bfree+0x28>
 8008dea:	2010      	movs	r0, #16
 8008dec:	f7fd fa72 	bl	80062d4 <malloc>
 8008df0:	4602      	mov	r2, r0
 8008df2:	61e8      	str	r0, [r5, #28]
 8008df4:	b920      	cbnz	r0, 8008e00 <_Bfree+0x20>
 8008df6:	4b09      	ldr	r3, [pc, #36]	@ (8008e1c <_Bfree+0x3c>)
 8008df8:	4809      	ldr	r0, [pc, #36]	@ (8008e20 <_Bfree+0x40>)
 8008dfa:	218f      	movs	r1, #143	@ 0x8f
 8008dfc:	f001 fb32 	bl	800a464 <__assert_func>
 8008e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e04:	6006      	str	r6, [r0, #0]
 8008e06:	60c6      	str	r6, [r0, #12]
 8008e08:	b13c      	cbz	r4, 8008e1a <_Bfree+0x3a>
 8008e0a:	69eb      	ldr	r3, [r5, #28]
 8008e0c:	6862      	ldr	r2, [r4, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e14:	6021      	str	r1, [r4, #0]
 8008e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	0800affc 	.word	0x0800affc
 8008e20:	0800b07c 	.word	0x0800b07c

08008e24 <__multadd>:
 8008e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e28:	690d      	ldr	r5, [r1, #16]
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	461e      	mov	r6, r3
 8008e30:	f101 0c14 	add.w	ip, r1, #20
 8008e34:	2000      	movs	r0, #0
 8008e36:	f8dc 3000 	ldr.w	r3, [ip]
 8008e3a:	b299      	uxth	r1, r3
 8008e3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e40:	0c1e      	lsrs	r6, r3, #16
 8008e42:	0c0b      	lsrs	r3, r1, #16
 8008e44:	fb02 3306 	mla	r3, r2, r6, r3
 8008e48:	b289      	uxth	r1, r1
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e50:	4285      	cmp	r5, r0
 8008e52:	f84c 1b04 	str.w	r1, [ip], #4
 8008e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e5a:	dcec      	bgt.n	8008e36 <__multadd+0x12>
 8008e5c:	b30e      	cbz	r6, 8008ea2 <__multadd+0x7e>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	42ab      	cmp	r3, r5
 8008e62:	dc19      	bgt.n	8008e98 <__multadd+0x74>
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	4638      	mov	r0, r7
 8008e68:	3101      	adds	r1, #1
 8008e6a:	f7ff ff79 	bl	8008d60 <_Balloc>
 8008e6e:	4680      	mov	r8, r0
 8008e70:	b928      	cbnz	r0, 8008e7e <__multadd+0x5a>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea8 <__multadd+0x84>)
 8008e76:	480d      	ldr	r0, [pc, #52]	@ (8008eac <__multadd+0x88>)
 8008e78:	21ba      	movs	r1, #186	@ 0xba
 8008e7a:	f001 faf3 	bl	800a464 <__assert_func>
 8008e7e:	6922      	ldr	r2, [r4, #16]
 8008e80:	3202      	adds	r2, #2
 8008e82:	f104 010c 	add.w	r1, r4, #12
 8008e86:	0092      	lsls	r2, r2, #2
 8008e88:	300c      	adds	r0, #12
 8008e8a:	f7ff f858 	bl	8007f3e <memcpy>
 8008e8e:	4621      	mov	r1, r4
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff ffa5 	bl	8008de0 <_Bfree>
 8008e96:	4644      	mov	r4, r8
 8008e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	615e      	str	r6, [r3, #20]
 8008ea0:	6125      	str	r5, [r4, #16]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea8:	0800b06b 	.word	0x0800b06b
 8008eac:	0800b07c 	.word	0x0800b07c

08008eb0 <__hi0bits>:
 8008eb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	bf36      	itet	cc
 8008eb8:	0403      	lslcc	r3, r0, #16
 8008eba:	2000      	movcs	r0, #0
 8008ebc:	2010      	movcc	r0, #16
 8008ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ec2:	bf3c      	itt	cc
 8008ec4:	021b      	lslcc	r3, r3, #8
 8008ec6:	3008      	addcc	r0, #8
 8008ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ecc:	bf3c      	itt	cc
 8008ece:	011b      	lslcc	r3, r3, #4
 8008ed0:	3004      	addcc	r0, #4
 8008ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed6:	bf3c      	itt	cc
 8008ed8:	009b      	lslcc	r3, r3, #2
 8008eda:	3002      	addcc	r0, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	db05      	blt.n	8008eec <__hi0bits+0x3c>
 8008ee0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ee4:	f100 0001 	add.w	r0, r0, #1
 8008ee8:	bf08      	it	eq
 8008eea:	2020      	moveq	r0, #32
 8008eec:	4770      	bx	lr

08008eee <__lo0bits>:
 8008eee:	6803      	ldr	r3, [r0, #0]
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	f013 0007 	ands.w	r0, r3, #7
 8008ef6:	d00b      	beq.n	8008f10 <__lo0bits+0x22>
 8008ef8:	07d9      	lsls	r1, r3, #31
 8008efa:	d421      	bmi.n	8008f40 <__lo0bits+0x52>
 8008efc:	0798      	lsls	r0, r3, #30
 8008efe:	bf49      	itett	mi
 8008f00:	085b      	lsrmi	r3, r3, #1
 8008f02:	089b      	lsrpl	r3, r3, #2
 8008f04:	2001      	movmi	r0, #1
 8008f06:	6013      	strmi	r3, [r2, #0]
 8008f08:	bf5c      	itt	pl
 8008f0a:	6013      	strpl	r3, [r2, #0]
 8008f0c:	2002      	movpl	r0, #2
 8008f0e:	4770      	bx	lr
 8008f10:	b299      	uxth	r1, r3
 8008f12:	b909      	cbnz	r1, 8008f18 <__lo0bits+0x2a>
 8008f14:	0c1b      	lsrs	r3, r3, #16
 8008f16:	2010      	movs	r0, #16
 8008f18:	b2d9      	uxtb	r1, r3
 8008f1a:	b909      	cbnz	r1, 8008f20 <__lo0bits+0x32>
 8008f1c:	3008      	adds	r0, #8
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	0719      	lsls	r1, r3, #28
 8008f22:	bf04      	itt	eq
 8008f24:	091b      	lsreq	r3, r3, #4
 8008f26:	3004      	addeq	r0, #4
 8008f28:	0799      	lsls	r1, r3, #30
 8008f2a:	bf04      	itt	eq
 8008f2c:	089b      	lsreq	r3, r3, #2
 8008f2e:	3002      	addeq	r0, #2
 8008f30:	07d9      	lsls	r1, r3, #31
 8008f32:	d403      	bmi.n	8008f3c <__lo0bits+0x4e>
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	f100 0001 	add.w	r0, r0, #1
 8008f3a:	d003      	beq.n	8008f44 <__lo0bits+0x56>
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	4770      	bx	lr
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr
 8008f44:	2020      	movs	r0, #32
 8008f46:	4770      	bx	lr

08008f48 <__i2b>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	f7ff ff07 	bl	8008d60 <_Balloc>
 8008f52:	4602      	mov	r2, r0
 8008f54:	b928      	cbnz	r0, 8008f62 <__i2b+0x1a>
 8008f56:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <__i2b+0x24>)
 8008f58:	4805      	ldr	r0, [pc, #20]	@ (8008f70 <__i2b+0x28>)
 8008f5a:	f240 1145 	movw	r1, #325	@ 0x145
 8008f5e:	f001 fa81 	bl	800a464 <__assert_func>
 8008f62:	2301      	movs	r3, #1
 8008f64:	6144      	str	r4, [r0, #20]
 8008f66:	6103      	str	r3, [r0, #16]
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	bf00      	nop
 8008f6c:	0800b06b 	.word	0x0800b06b
 8008f70:	0800b07c 	.word	0x0800b07c

08008f74 <__multiply>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	4617      	mov	r7, r2
 8008f7a:	690a      	ldr	r2, [r1, #16]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	bfa8      	it	ge
 8008f82:	463b      	movge	r3, r7
 8008f84:	4689      	mov	r9, r1
 8008f86:	bfa4      	itt	ge
 8008f88:	460f      	movge	r7, r1
 8008f8a:	4699      	movge	r9, r3
 8008f8c:	693d      	ldr	r5, [r7, #16]
 8008f8e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	eb05 060a 	add.w	r6, r5, sl
 8008f9a:	42b3      	cmp	r3, r6
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	bfb8      	it	lt
 8008fa0:	3101      	addlt	r1, #1
 8008fa2:	f7ff fedd 	bl	8008d60 <_Balloc>
 8008fa6:	b930      	cbnz	r0, 8008fb6 <__multiply+0x42>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4b41      	ldr	r3, [pc, #260]	@ (80090b0 <__multiply+0x13c>)
 8008fac:	4841      	ldr	r0, [pc, #260]	@ (80090b4 <__multiply+0x140>)
 8008fae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fb2:	f001 fa57 	bl	800a464 <__assert_func>
 8008fb6:	f100 0414 	add.w	r4, r0, #20
 8008fba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008fbe:	4623      	mov	r3, r4
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4573      	cmp	r3, lr
 8008fc4:	d320      	bcc.n	8009008 <__multiply+0x94>
 8008fc6:	f107 0814 	add.w	r8, r7, #20
 8008fca:	f109 0114 	add.w	r1, r9, #20
 8008fce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008fd2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008fd6:	9302      	str	r3, [sp, #8]
 8008fd8:	1beb      	subs	r3, r5, r7
 8008fda:	3b15      	subs	r3, #21
 8008fdc:	f023 0303 	bic.w	r3, r3, #3
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	3715      	adds	r7, #21
 8008fe4:	42bd      	cmp	r5, r7
 8008fe6:	bf38      	it	cc
 8008fe8:	2304      	movcc	r3, #4
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	9103      	str	r1, [sp, #12]
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	d80c      	bhi.n	800900e <__multiply+0x9a>
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	dd03      	ble.n	8009000 <__multiply+0x8c>
 8008ff8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d055      	beq.n	80090ac <__multiply+0x138>
 8009000:	6106      	str	r6, [r0, #16]
 8009002:	b005      	add	sp, #20
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	f843 2b04 	str.w	r2, [r3], #4
 800900c:	e7d9      	b.n	8008fc2 <__multiply+0x4e>
 800900e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009012:	f1ba 0f00 	cmp.w	sl, #0
 8009016:	d01f      	beq.n	8009058 <__multiply+0xe4>
 8009018:	46c4      	mov	ip, r8
 800901a:	46a1      	mov	r9, r4
 800901c:	2700      	movs	r7, #0
 800901e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009022:	f8d9 3000 	ldr.w	r3, [r9]
 8009026:	fa1f fb82 	uxth.w	fp, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009030:	443b      	add	r3, r7
 8009032:	f8d9 7000 	ldr.w	r7, [r9]
 8009036:	0c12      	lsrs	r2, r2, #16
 8009038:	0c3f      	lsrs	r7, r7, #16
 800903a:	fb0a 7202 	mla	r2, sl, r2, r7
 800903e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009042:	b29b      	uxth	r3, r3
 8009044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009048:	4565      	cmp	r5, ip
 800904a:	f849 3b04 	str.w	r3, [r9], #4
 800904e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009052:	d8e4      	bhi.n	800901e <__multiply+0xaa>
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	50e7      	str	r7, [r4, r3]
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800905e:	3104      	adds	r1, #4
 8009060:	f1b9 0f00 	cmp.w	r9, #0
 8009064:	d020      	beq.n	80090a8 <__multiply+0x134>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	4647      	mov	r7, r8
 800906a:	46a4      	mov	ip, r4
 800906c:	f04f 0a00 	mov.w	sl, #0
 8009070:	f8b7 b000 	ldrh.w	fp, [r7]
 8009074:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009078:	fb09 220b 	mla	r2, r9, fp, r2
 800907c:	4452      	add	r2, sl
 800907e:	b29b      	uxth	r3, r3
 8009080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009084:	f84c 3b04 	str.w	r3, [ip], #4
 8009088:	f857 3b04 	ldr.w	r3, [r7], #4
 800908c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009090:	f8bc 3000 	ldrh.w	r3, [ip]
 8009094:	fb09 330a 	mla	r3, r9, sl, r3
 8009098:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800909c:	42bd      	cmp	r5, r7
 800909e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090a2:	d8e5      	bhi.n	8009070 <__multiply+0xfc>
 80090a4:	9a01      	ldr	r2, [sp, #4]
 80090a6:	50a3      	str	r3, [r4, r2]
 80090a8:	3404      	adds	r4, #4
 80090aa:	e79f      	b.n	8008fec <__multiply+0x78>
 80090ac:	3e01      	subs	r6, #1
 80090ae:	e7a1      	b.n	8008ff4 <__multiply+0x80>
 80090b0:	0800b06b 	.word	0x0800b06b
 80090b4:	0800b07c 	.word	0x0800b07c

080090b8 <__pow5mult>:
 80090b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090bc:	4615      	mov	r5, r2
 80090be:	f012 0203 	ands.w	r2, r2, #3
 80090c2:	4607      	mov	r7, r0
 80090c4:	460e      	mov	r6, r1
 80090c6:	d007      	beq.n	80090d8 <__pow5mult+0x20>
 80090c8:	4c25      	ldr	r4, [pc, #148]	@ (8009160 <__pow5mult+0xa8>)
 80090ca:	3a01      	subs	r2, #1
 80090cc:	2300      	movs	r3, #0
 80090ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090d2:	f7ff fea7 	bl	8008e24 <__multadd>
 80090d6:	4606      	mov	r6, r0
 80090d8:	10ad      	asrs	r5, r5, #2
 80090da:	d03d      	beq.n	8009158 <__pow5mult+0xa0>
 80090dc:	69fc      	ldr	r4, [r7, #28]
 80090de:	b97c      	cbnz	r4, 8009100 <__pow5mult+0x48>
 80090e0:	2010      	movs	r0, #16
 80090e2:	f7fd f8f7 	bl	80062d4 <malloc>
 80090e6:	4602      	mov	r2, r0
 80090e8:	61f8      	str	r0, [r7, #28]
 80090ea:	b928      	cbnz	r0, 80090f8 <__pow5mult+0x40>
 80090ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009164 <__pow5mult+0xac>)
 80090ee:	481e      	ldr	r0, [pc, #120]	@ (8009168 <__pow5mult+0xb0>)
 80090f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090f4:	f001 f9b6 	bl	800a464 <__assert_func>
 80090f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090fc:	6004      	str	r4, [r0, #0]
 80090fe:	60c4      	str	r4, [r0, #12]
 8009100:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009108:	b94c      	cbnz	r4, 800911e <__pow5mult+0x66>
 800910a:	f240 2171 	movw	r1, #625	@ 0x271
 800910e:	4638      	mov	r0, r7
 8009110:	f7ff ff1a 	bl	8008f48 <__i2b>
 8009114:	2300      	movs	r3, #0
 8009116:	f8c8 0008 	str.w	r0, [r8, #8]
 800911a:	4604      	mov	r4, r0
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	f04f 0900 	mov.w	r9, #0
 8009122:	07eb      	lsls	r3, r5, #31
 8009124:	d50a      	bpl.n	800913c <__pow5mult+0x84>
 8009126:	4631      	mov	r1, r6
 8009128:	4622      	mov	r2, r4
 800912a:	4638      	mov	r0, r7
 800912c:	f7ff ff22 	bl	8008f74 <__multiply>
 8009130:	4631      	mov	r1, r6
 8009132:	4680      	mov	r8, r0
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff fe53 	bl	8008de0 <_Bfree>
 800913a:	4646      	mov	r6, r8
 800913c:	106d      	asrs	r5, r5, #1
 800913e:	d00b      	beq.n	8009158 <__pow5mult+0xa0>
 8009140:	6820      	ldr	r0, [r4, #0]
 8009142:	b938      	cbnz	r0, 8009154 <__pow5mult+0x9c>
 8009144:	4622      	mov	r2, r4
 8009146:	4621      	mov	r1, r4
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff ff13 	bl	8008f74 <__multiply>
 800914e:	6020      	str	r0, [r4, #0]
 8009150:	f8c0 9000 	str.w	r9, [r0]
 8009154:	4604      	mov	r4, r0
 8009156:	e7e4      	b.n	8009122 <__pow5mult+0x6a>
 8009158:	4630      	mov	r0, r6
 800915a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915e:	bf00      	nop
 8009160:	0800b1a0 	.word	0x0800b1a0
 8009164:	0800affc 	.word	0x0800affc
 8009168:	0800b07c 	.word	0x0800b07c

0800916c <__lshift>:
 800916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	460c      	mov	r4, r1
 8009172:	6849      	ldr	r1, [r1, #4]
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800917a:	68a3      	ldr	r3, [r4, #8]
 800917c:	4607      	mov	r7, r0
 800917e:	4691      	mov	r9, r2
 8009180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009184:	f108 0601 	add.w	r6, r8, #1
 8009188:	42b3      	cmp	r3, r6
 800918a:	db0b      	blt.n	80091a4 <__lshift+0x38>
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff fde7 	bl	8008d60 <_Balloc>
 8009192:	4605      	mov	r5, r0
 8009194:	b948      	cbnz	r0, 80091aa <__lshift+0x3e>
 8009196:	4602      	mov	r2, r0
 8009198:	4b28      	ldr	r3, [pc, #160]	@ (800923c <__lshift+0xd0>)
 800919a:	4829      	ldr	r0, [pc, #164]	@ (8009240 <__lshift+0xd4>)
 800919c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091a0:	f001 f960 	bl	800a464 <__assert_func>
 80091a4:	3101      	adds	r1, #1
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	e7ee      	b.n	8009188 <__lshift+0x1c>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f100 0114 	add.w	r1, r0, #20
 80091b0:	f100 0210 	add.w	r2, r0, #16
 80091b4:	4618      	mov	r0, r3
 80091b6:	4553      	cmp	r3, sl
 80091b8:	db33      	blt.n	8009222 <__lshift+0xb6>
 80091ba:	6920      	ldr	r0, [r4, #16]
 80091bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091c0:	f104 0314 	add.w	r3, r4, #20
 80091c4:	f019 091f 	ands.w	r9, r9, #31
 80091c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091d0:	d02b      	beq.n	800922a <__lshift+0xbe>
 80091d2:	f1c9 0e20 	rsb	lr, r9, #32
 80091d6:	468a      	mov	sl, r1
 80091d8:	2200      	movs	r2, #0
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	fa00 f009 	lsl.w	r0, r0, r9
 80091e0:	4310      	orrs	r0, r2
 80091e2:	f84a 0b04 	str.w	r0, [sl], #4
 80091e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ea:	459c      	cmp	ip, r3
 80091ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80091f0:	d8f3      	bhi.n	80091da <__lshift+0x6e>
 80091f2:	ebac 0304 	sub.w	r3, ip, r4
 80091f6:	3b15      	subs	r3, #21
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	3304      	adds	r3, #4
 80091fe:	f104 0015 	add.w	r0, r4, #21
 8009202:	4560      	cmp	r0, ip
 8009204:	bf88      	it	hi
 8009206:	2304      	movhi	r3, #4
 8009208:	50ca      	str	r2, [r1, r3]
 800920a:	b10a      	cbz	r2, 8009210 <__lshift+0xa4>
 800920c:	f108 0602 	add.w	r6, r8, #2
 8009210:	3e01      	subs	r6, #1
 8009212:	4638      	mov	r0, r7
 8009214:	612e      	str	r6, [r5, #16]
 8009216:	4621      	mov	r1, r4
 8009218:	f7ff fde2 	bl	8008de0 <_Bfree>
 800921c:	4628      	mov	r0, r5
 800921e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009222:	f842 0f04 	str.w	r0, [r2, #4]!
 8009226:	3301      	adds	r3, #1
 8009228:	e7c5      	b.n	80091b6 <__lshift+0x4a>
 800922a:	3904      	subs	r1, #4
 800922c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009230:	f841 2f04 	str.w	r2, [r1, #4]!
 8009234:	459c      	cmp	ip, r3
 8009236:	d8f9      	bhi.n	800922c <__lshift+0xc0>
 8009238:	e7ea      	b.n	8009210 <__lshift+0xa4>
 800923a:	bf00      	nop
 800923c:	0800b06b 	.word	0x0800b06b
 8009240:	0800b07c 	.word	0x0800b07c

08009244 <__mcmp>:
 8009244:	690a      	ldr	r2, [r1, #16]
 8009246:	4603      	mov	r3, r0
 8009248:	6900      	ldr	r0, [r0, #16]
 800924a:	1a80      	subs	r0, r0, r2
 800924c:	b530      	push	{r4, r5, lr}
 800924e:	d10e      	bne.n	800926e <__mcmp+0x2a>
 8009250:	3314      	adds	r3, #20
 8009252:	3114      	adds	r1, #20
 8009254:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009258:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800925c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009260:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009264:	4295      	cmp	r5, r2
 8009266:	d003      	beq.n	8009270 <__mcmp+0x2c>
 8009268:	d205      	bcs.n	8009276 <__mcmp+0x32>
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	bd30      	pop	{r4, r5, pc}
 8009270:	42a3      	cmp	r3, r4
 8009272:	d3f3      	bcc.n	800925c <__mcmp+0x18>
 8009274:	e7fb      	b.n	800926e <__mcmp+0x2a>
 8009276:	2001      	movs	r0, #1
 8009278:	e7f9      	b.n	800926e <__mcmp+0x2a>
	...

0800927c <__mdiff>:
 800927c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4689      	mov	r9, r1
 8009282:	4606      	mov	r6, r0
 8009284:	4611      	mov	r1, r2
 8009286:	4648      	mov	r0, r9
 8009288:	4614      	mov	r4, r2
 800928a:	f7ff ffdb 	bl	8009244 <__mcmp>
 800928e:	1e05      	subs	r5, r0, #0
 8009290:	d112      	bne.n	80092b8 <__mdiff+0x3c>
 8009292:	4629      	mov	r1, r5
 8009294:	4630      	mov	r0, r6
 8009296:	f7ff fd63 	bl	8008d60 <_Balloc>
 800929a:	4602      	mov	r2, r0
 800929c:	b928      	cbnz	r0, 80092aa <__mdiff+0x2e>
 800929e:	4b3f      	ldr	r3, [pc, #252]	@ (800939c <__mdiff+0x120>)
 80092a0:	f240 2137 	movw	r1, #567	@ 0x237
 80092a4:	483e      	ldr	r0, [pc, #248]	@ (80093a0 <__mdiff+0x124>)
 80092a6:	f001 f8dd 	bl	800a464 <__assert_func>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092b0:	4610      	mov	r0, r2
 80092b2:	b003      	add	sp, #12
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	bfbc      	itt	lt
 80092ba:	464b      	movlt	r3, r9
 80092bc:	46a1      	movlt	r9, r4
 80092be:	4630      	mov	r0, r6
 80092c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092c4:	bfba      	itte	lt
 80092c6:	461c      	movlt	r4, r3
 80092c8:	2501      	movlt	r5, #1
 80092ca:	2500      	movge	r5, #0
 80092cc:	f7ff fd48 	bl	8008d60 <_Balloc>
 80092d0:	4602      	mov	r2, r0
 80092d2:	b918      	cbnz	r0, 80092dc <__mdiff+0x60>
 80092d4:	4b31      	ldr	r3, [pc, #196]	@ (800939c <__mdiff+0x120>)
 80092d6:	f240 2145 	movw	r1, #581	@ 0x245
 80092da:	e7e3      	b.n	80092a4 <__mdiff+0x28>
 80092dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092e0:	6926      	ldr	r6, [r4, #16]
 80092e2:	60c5      	str	r5, [r0, #12]
 80092e4:	f109 0310 	add.w	r3, r9, #16
 80092e8:	f109 0514 	add.w	r5, r9, #20
 80092ec:	f104 0e14 	add.w	lr, r4, #20
 80092f0:	f100 0b14 	add.w	fp, r0, #20
 80092f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	46d9      	mov	r9, fp
 8009300:	f04f 0c00 	mov.w	ip, #0
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	f85e 0b04 	ldr.w	r0, [lr], #4
 800930a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	fa1f f38a 	uxth.w	r3, sl
 8009314:	4619      	mov	r1, r3
 8009316:	b283      	uxth	r3, r0
 8009318:	1acb      	subs	r3, r1, r3
 800931a:	0c00      	lsrs	r0, r0, #16
 800931c:	4463      	add	r3, ip
 800931e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009322:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009326:	b29b      	uxth	r3, r3
 8009328:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800932c:	4576      	cmp	r6, lr
 800932e:	f849 3b04 	str.w	r3, [r9], #4
 8009332:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009336:	d8e5      	bhi.n	8009304 <__mdiff+0x88>
 8009338:	1b33      	subs	r3, r6, r4
 800933a:	3b15      	subs	r3, #21
 800933c:	f023 0303 	bic.w	r3, r3, #3
 8009340:	3415      	adds	r4, #21
 8009342:	3304      	adds	r3, #4
 8009344:	42a6      	cmp	r6, r4
 8009346:	bf38      	it	cc
 8009348:	2304      	movcc	r3, #4
 800934a:	441d      	add	r5, r3
 800934c:	445b      	add	r3, fp
 800934e:	461e      	mov	r6, r3
 8009350:	462c      	mov	r4, r5
 8009352:	4544      	cmp	r4, r8
 8009354:	d30e      	bcc.n	8009374 <__mdiff+0xf8>
 8009356:	f108 0103 	add.w	r1, r8, #3
 800935a:	1b49      	subs	r1, r1, r5
 800935c:	f021 0103 	bic.w	r1, r1, #3
 8009360:	3d03      	subs	r5, #3
 8009362:	45a8      	cmp	r8, r5
 8009364:	bf38      	it	cc
 8009366:	2100      	movcc	r1, #0
 8009368:	440b      	add	r3, r1
 800936a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800936e:	b191      	cbz	r1, 8009396 <__mdiff+0x11a>
 8009370:	6117      	str	r7, [r2, #16]
 8009372:	e79d      	b.n	80092b0 <__mdiff+0x34>
 8009374:	f854 1b04 	ldr.w	r1, [r4], #4
 8009378:	46e6      	mov	lr, ip
 800937a:	0c08      	lsrs	r0, r1, #16
 800937c:	fa1c fc81 	uxtah	ip, ip, r1
 8009380:	4471      	add	r1, lr
 8009382:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009386:	b289      	uxth	r1, r1
 8009388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800938c:	f846 1b04 	str.w	r1, [r6], #4
 8009390:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009394:	e7dd      	b.n	8009352 <__mdiff+0xd6>
 8009396:	3f01      	subs	r7, #1
 8009398:	e7e7      	b.n	800936a <__mdiff+0xee>
 800939a:	bf00      	nop
 800939c:	0800b06b 	.word	0x0800b06b
 80093a0:	0800b07c 	.word	0x0800b07c

080093a4 <__d2b>:
 80093a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093a8:	460f      	mov	r7, r1
 80093aa:	2101      	movs	r1, #1
 80093ac:	ec59 8b10 	vmov	r8, r9, d0
 80093b0:	4616      	mov	r6, r2
 80093b2:	f7ff fcd5 	bl	8008d60 <_Balloc>
 80093b6:	4604      	mov	r4, r0
 80093b8:	b930      	cbnz	r0, 80093c8 <__d2b+0x24>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b23      	ldr	r3, [pc, #140]	@ (800944c <__d2b+0xa8>)
 80093be:	4824      	ldr	r0, [pc, #144]	@ (8009450 <__d2b+0xac>)
 80093c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80093c4:	f001 f84e 	bl	800a464 <__assert_func>
 80093c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093d0:	b10d      	cbz	r5, 80093d6 <__d2b+0x32>
 80093d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	f1b8 0300 	subs.w	r3, r8, #0
 80093dc:	d023      	beq.n	8009426 <__d2b+0x82>
 80093de:	4668      	mov	r0, sp
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	f7ff fd84 	bl	8008eee <__lo0bits>
 80093e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093ea:	b1d0      	cbz	r0, 8009422 <__d2b+0x7e>
 80093ec:	f1c0 0320 	rsb	r3, r0, #32
 80093f0:	fa02 f303 	lsl.w	r3, r2, r3
 80093f4:	430b      	orrs	r3, r1
 80093f6:	40c2      	lsrs	r2, r0
 80093f8:	6163      	str	r3, [r4, #20]
 80093fa:	9201      	str	r2, [sp, #4]
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	61a3      	str	r3, [r4, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bf0c      	ite	eq
 8009404:	2201      	moveq	r2, #1
 8009406:	2202      	movne	r2, #2
 8009408:	6122      	str	r2, [r4, #16]
 800940a:	b1a5      	cbz	r5, 8009436 <__d2b+0x92>
 800940c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009410:	4405      	add	r5, r0
 8009412:	603d      	str	r5, [r7, #0]
 8009414:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009418:	6030      	str	r0, [r6, #0]
 800941a:	4620      	mov	r0, r4
 800941c:	b003      	add	sp, #12
 800941e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009422:	6161      	str	r1, [r4, #20]
 8009424:	e7ea      	b.n	80093fc <__d2b+0x58>
 8009426:	a801      	add	r0, sp, #4
 8009428:	f7ff fd61 	bl	8008eee <__lo0bits>
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	6163      	str	r3, [r4, #20]
 8009430:	3020      	adds	r0, #32
 8009432:	2201      	movs	r2, #1
 8009434:	e7e8      	b.n	8009408 <__d2b+0x64>
 8009436:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800943a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800943e:	6038      	str	r0, [r7, #0]
 8009440:	6918      	ldr	r0, [r3, #16]
 8009442:	f7ff fd35 	bl	8008eb0 <__hi0bits>
 8009446:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800944a:	e7e5      	b.n	8009418 <__d2b+0x74>
 800944c:	0800b06b 	.word	0x0800b06b
 8009450:	0800b07c 	.word	0x0800b07c

08009454 <_malloc_usable_size_r>:
 8009454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009458:	1f18      	subs	r0, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfbc      	itt	lt
 800945e:	580b      	ldrlt	r3, [r1, r0]
 8009460:	18c0      	addlt	r0, r0, r3
 8009462:	4770      	bx	lr

08009464 <_strtoul_l.isra.0>:
 8009464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009468:	4e34      	ldr	r6, [pc, #208]	@ (800953c <_strtoul_l.isra.0+0xd8>)
 800946a:	4686      	mov	lr, r0
 800946c:	460d      	mov	r5, r1
 800946e:	4628      	mov	r0, r5
 8009470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009474:	5d37      	ldrb	r7, [r6, r4]
 8009476:	f017 0708 	ands.w	r7, r7, #8
 800947a:	d1f8      	bne.n	800946e <_strtoul_l.isra.0+0xa>
 800947c:	2c2d      	cmp	r4, #45	@ 0x2d
 800947e:	d110      	bne.n	80094a2 <_strtoul_l.isra.0+0x3e>
 8009480:	782c      	ldrb	r4, [r5, #0]
 8009482:	2701      	movs	r7, #1
 8009484:	1c85      	adds	r5, r0, #2
 8009486:	f033 0010 	bics.w	r0, r3, #16
 800948a:	d115      	bne.n	80094b8 <_strtoul_l.isra.0+0x54>
 800948c:	2c30      	cmp	r4, #48	@ 0x30
 800948e:	d10d      	bne.n	80094ac <_strtoul_l.isra.0+0x48>
 8009490:	7828      	ldrb	r0, [r5, #0]
 8009492:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009496:	2858      	cmp	r0, #88	@ 0x58
 8009498:	d108      	bne.n	80094ac <_strtoul_l.isra.0+0x48>
 800949a:	786c      	ldrb	r4, [r5, #1]
 800949c:	3502      	adds	r5, #2
 800949e:	2310      	movs	r3, #16
 80094a0:	e00a      	b.n	80094b8 <_strtoul_l.isra.0+0x54>
 80094a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80094a4:	bf04      	itt	eq
 80094a6:	782c      	ldrbeq	r4, [r5, #0]
 80094a8:	1c85      	addeq	r5, r0, #2
 80094aa:	e7ec      	b.n	8009486 <_strtoul_l.isra.0+0x22>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1f6      	bne.n	800949e <_strtoul_l.isra.0+0x3a>
 80094b0:	2c30      	cmp	r4, #48	@ 0x30
 80094b2:	bf14      	ite	ne
 80094b4:	230a      	movne	r3, #10
 80094b6:	2308      	moveq	r3, #8
 80094b8:	f04f 38ff 	mov.w	r8, #4294967295
 80094bc:	2600      	movs	r6, #0
 80094be:	fbb8 f8f3 	udiv	r8, r8, r3
 80094c2:	fb03 f908 	mul.w	r9, r3, r8
 80094c6:	ea6f 0909 	mvn.w	r9, r9
 80094ca:	4630      	mov	r0, r6
 80094cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80094d0:	f1bc 0f09 	cmp.w	ip, #9
 80094d4:	d810      	bhi.n	80094f8 <_strtoul_l.isra.0+0x94>
 80094d6:	4664      	mov	r4, ip
 80094d8:	42a3      	cmp	r3, r4
 80094da:	dd1e      	ble.n	800951a <_strtoul_l.isra.0+0xb6>
 80094dc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80094e0:	d007      	beq.n	80094f2 <_strtoul_l.isra.0+0x8e>
 80094e2:	4580      	cmp	r8, r0
 80094e4:	d316      	bcc.n	8009514 <_strtoul_l.isra.0+0xb0>
 80094e6:	d101      	bne.n	80094ec <_strtoul_l.isra.0+0x88>
 80094e8:	45a1      	cmp	r9, r4
 80094ea:	db13      	blt.n	8009514 <_strtoul_l.isra.0+0xb0>
 80094ec:	fb00 4003 	mla	r0, r0, r3, r4
 80094f0:	2601      	movs	r6, #1
 80094f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f6:	e7e9      	b.n	80094cc <_strtoul_l.isra.0+0x68>
 80094f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80094fc:	f1bc 0f19 	cmp.w	ip, #25
 8009500:	d801      	bhi.n	8009506 <_strtoul_l.isra.0+0xa2>
 8009502:	3c37      	subs	r4, #55	@ 0x37
 8009504:	e7e8      	b.n	80094d8 <_strtoul_l.isra.0+0x74>
 8009506:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800950a:	f1bc 0f19 	cmp.w	ip, #25
 800950e:	d804      	bhi.n	800951a <_strtoul_l.isra.0+0xb6>
 8009510:	3c57      	subs	r4, #87	@ 0x57
 8009512:	e7e1      	b.n	80094d8 <_strtoul_l.isra.0+0x74>
 8009514:	f04f 36ff 	mov.w	r6, #4294967295
 8009518:	e7eb      	b.n	80094f2 <_strtoul_l.isra.0+0x8e>
 800951a:	1c73      	adds	r3, r6, #1
 800951c:	d106      	bne.n	800952c <_strtoul_l.isra.0+0xc8>
 800951e:	2322      	movs	r3, #34	@ 0x22
 8009520:	f8ce 3000 	str.w	r3, [lr]
 8009524:	4630      	mov	r0, r6
 8009526:	b932      	cbnz	r2, 8009536 <_strtoul_l.isra.0+0xd2>
 8009528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952c:	b107      	cbz	r7, 8009530 <_strtoul_l.isra.0+0xcc>
 800952e:	4240      	negs	r0, r0
 8009530:	2a00      	cmp	r2, #0
 8009532:	d0f9      	beq.n	8009528 <_strtoul_l.isra.0+0xc4>
 8009534:	b106      	cbz	r6, 8009538 <_strtoul_l.isra.0+0xd4>
 8009536:	1e69      	subs	r1, r5, #1
 8009538:	6011      	str	r1, [r2, #0]
 800953a:	e7f5      	b.n	8009528 <_strtoul_l.isra.0+0xc4>
 800953c:	0800ae65 	.word	0x0800ae65

08009540 <_strtoul_r>:
 8009540:	f7ff bf90 	b.w	8009464 <_strtoul_l.isra.0>

08009544 <strtoul>:
 8009544:	4613      	mov	r3, r2
 8009546:	460a      	mov	r2, r1
 8009548:	4601      	mov	r1, r0
 800954a:	4802      	ldr	r0, [pc, #8]	@ (8009554 <strtoul+0x10>)
 800954c:	6800      	ldr	r0, [r0, #0]
 800954e:	f7ff bf89 	b.w	8009464 <_strtoul_l.isra.0>
 8009552:	bf00      	nop
 8009554:	200001cc 	.word	0x200001cc

08009558 <__ascii_wctomb>:
 8009558:	4603      	mov	r3, r0
 800955a:	4608      	mov	r0, r1
 800955c:	b141      	cbz	r1, 8009570 <__ascii_wctomb+0x18>
 800955e:	2aff      	cmp	r2, #255	@ 0xff
 8009560:	d904      	bls.n	800956c <__ascii_wctomb+0x14>
 8009562:	228a      	movs	r2, #138	@ 0x8a
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	4770      	bx	lr
 800956c:	700a      	strb	r2, [r1, #0]
 800956e:	2001      	movs	r0, #1
 8009570:	4770      	bx	lr

08009572 <__ssputs_r>:
 8009572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009576:	688e      	ldr	r6, [r1, #8]
 8009578:	461f      	mov	r7, r3
 800957a:	42be      	cmp	r6, r7
 800957c:	680b      	ldr	r3, [r1, #0]
 800957e:	4682      	mov	sl, r0
 8009580:	460c      	mov	r4, r1
 8009582:	4690      	mov	r8, r2
 8009584:	d82d      	bhi.n	80095e2 <__ssputs_r+0x70>
 8009586:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800958a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800958e:	d026      	beq.n	80095de <__ssputs_r+0x6c>
 8009590:	6965      	ldr	r5, [r4, #20]
 8009592:	6909      	ldr	r1, [r1, #16]
 8009594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009598:	eba3 0901 	sub.w	r9, r3, r1
 800959c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a0:	1c7b      	adds	r3, r7, #1
 80095a2:	444b      	add	r3, r9
 80095a4:	106d      	asrs	r5, r5, #1
 80095a6:	429d      	cmp	r5, r3
 80095a8:	bf38      	it	cc
 80095aa:	461d      	movcc	r5, r3
 80095ac:	0553      	lsls	r3, r2, #21
 80095ae:	d527      	bpl.n	8009600 <__ssputs_r+0x8e>
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7fc fec1 	bl	8006338 <_malloc_r>
 80095b6:	4606      	mov	r6, r0
 80095b8:	b360      	cbz	r0, 8009614 <__ssputs_r+0xa2>
 80095ba:	6921      	ldr	r1, [r4, #16]
 80095bc:	464a      	mov	r2, r9
 80095be:	f7fe fcbe 	bl	8007f3e <memcpy>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	6126      	str	r6, [r4, #16]
 80095d0:	6165      	str	r5, [r4, #20]
 80095d2:	444e      	add	r6, r9
 80095d4:	eba5 0509 	sub.w	r5, r5, r9
 80095d8:	6026      	str	r6, [r4, #0]
 80095da:	60a5      	str	r5, [r4, #8]
 80095dc:	463e      	mov	r6, r7
 80095de:	42be      	cmp	r6, r7
 80095e0:	d900      	bls.n	80095e4 <__ssputs_r+0x72>
 80095e2:	463e      	mov	r6, r7
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	4632      	mov	r2, r6
 80095e8:	4641      	mov	r1, r8
 80095ea:	f000 fefa 	bl	800a3e2 <memmove>
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	1b9b      	subs	r3, r3, r6
 80095f2:	60a3      	str	r3, [r4, #8]
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	4433      	add	r3, r6
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	462a      	mov	r2, r5
 8009602:	f7fc ff2d 	bl	8006460 <_realloc_r>
 8009606:	4606      	mov	r6, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	d1e0      	bne.n	80095ce <__ssputs_r+0x5c>
 800960c:	6921      	ldr	r1, [r4, #16]
 800960e:	4650      	mov	r0, sl
 8009610:	f7ff fb06 	bl	8008c20 <_free_r>
 8009614:	230c      	movs	r3, #12
 8009616:	f8ca 3000 	str.w	r3, [sl]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009620:	81a3      	strh	r3, [r4, #12]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	e7e9      	b.n	80095fc <__ssputs_r+0x8a>

08009628 <_svfiprintf_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4698      	mov	r8, r3
 800962e:	898b      	ldrh	r3, [r1, #12]
 8009630:	061b      	lsls	r3, r3, #24
 8009632:	b09d      	sub	sp, #116	@ 0x74
 8009634:	4607      	mov	r7, r0
 8009636:	460d      	mov	r5, r1
 8009638:	4614      	mov	r4, r2
 800963a:	d510      	bpl.n	800965e <_svfiprintf_r+0x36>
 800963c:	690b      	ldr	r3, [r1, #16]
 800963e:	b973      	cbnz	r3, 800965e <_svfiprintf_r+0x36>
 8009640:	2140      	movs	r1, #64	@ 0x40
 8009642:	f7fc fe79 	bl	8006338 <_malloc_r>
 8009646:	6028      	str	r0, [r5, #0]
 8009648:	6128      	str	r0, [r5, #16]
 800964a:	b930      	cbnz	r0, 800965a <_svfiprintf_r+0x32>
 800964c:	230c      	movs	r3, #12
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	b01d      	add	sp, #116	@ 0x74
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	2340      	movs	r3, #64	@ 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	@ 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009668:	f8cd 800c 	str.w	r8, [sp, #12]
 800966c:	2330      	movs	r3, #48	@ 0x30
 800966e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800980c <_svfiprintf_r+0x1e4>
 8009672:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009676:	f04f 0901 	mov.w	r9, #1
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x60>
 8009684:	2a25      	cmp	r2, #37	@ 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x54>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7e>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6c 	bl	8009572 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80a7 	beq.w	80097ee <_svfiprintf_r+0x1c6>
 80096a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 809f 	beq.w	80097ee <_svfiprintf_r+0x1c6>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	484e      	ldr	r0, [pc, #312]	@ (800980c <_svfiprintf_r+0x1e4>)
 80096d2:	f7f6 fdad 	bl	8000230 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xea>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	@ 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xfa>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	4654      	mov	r4, sl
 80096fa:	2000      	movs	r0, #0
 80096fc:	f04f 0c0a 	mov.w	ip, #10
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	@ 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94b      	bls.n	80097a4 <_svfiprintf_r+0x17c>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x114>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x114>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	46a2      	mov	sl, r4
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0xa0>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009740:	d10a      	bne.n	8009758 <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	@ 0x2a
 8009746:	d132      	bne.n	80097ae <_svfiprintf_r+0x186>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009754:	3402      	adds	r4, #2
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800981c <_svfiprintf_r+0x1f4>
 800975c:	7821      	ldrb	r1, [r4, #0]
 800975e:	2203      	movs	r2, #3
 8009760:	4650      	mov	r0, sl
 8009762:	f7f6 fd65 	bl	8000230 <memchr>
 8009766:	b138      	cbz	r0, 8009778 <_svfiprintf_r+0x150>
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	eba0 000a 	sub.w	r0, r0, sl
 800976e:	2240      	movs	r2, #64	@ 0x40
 8009770:	4082      	lsls	r2, r0
 8009772:	4313      	orrs	r3, r2
 8009774:	3401      	adds	r4, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4824      	ldr	r0, [pc, #144]	@ (8009810 <_svfiprintf_r+0x1e8>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009782:	2206      	movs	r2, #6
 8009784:	f7f6 fd54 	bl	8000230 <memchr>
 8009788:	2800      	cmp	r0, #0
 800978a:	d036      	beq.n	80097fa <_svfiprintf_r+0x1d2>
 800978c:	4b21      	ldr	r3, [pc, #132]	@ (8009814 <_svfiprintf_r+0x1ec>)
 800978e:	bb1b      	cbnz	r3, 80097d8 <_svfiprintf_r+0x1b0>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	3307      	adds	r3, #7
 8009794:	f023 0307 	bic.w	r3, r3, #7
 8009798:	3308      	adds	r3, #8
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979e:	4433      	add	r3, r6
 80097a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a2:	e76a      	b.n	800967a <_svfiprintf_r+0x52>
 80097a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a8:	460c      	mov	r4, r1
 80097aa:	2001      	movs	r0, #1
 80097ac:	e7a8      	b.n	8009700 <_svfiprintf_r+0xd8>
 80097ae:	2300      	movs	r3, #0
 80097b0:	3401      	adds	r4, #1
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c0:	3a30      	subs	r2, #48	@ 0x30
 80097c2:	2a09      	cmp	r2, #9
 80097c4:	d903      	bls.n	80097ce <_svfiprintf_r+0x1a6>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0c6      	beq.n	8009758 <_svfiprintf_r+0x130>
 80097ca:	9105      	str	r1, [sp, #20]
 80097cc:	e7c4      	b.n	8009758 <_svfiprintf_r+0x130>
 80097ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d2:	4604      	mov	r4, r0
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7f0      	b.n	80097ba <_svfiprintf_r+0x192>
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b0e      	ldr	r3, [pc, #56]	@ (8009818 <_svfiprintf_r+0x1f0>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4638      	mov	r0, r7
 80097e4:	f7fc ff0a 	bl	80065fc <_printf_float>
 80097e8:	1c42      	adds	r2, r0, #1
 80097ea:	4606      	mov	r6, r0
 80097ec:	d1d6      	bne.n	800979c <_svfiprintf_r+0x174>
 80097ee:	89ab      	ldrh	r3, [r5, #12]
 80097f0:	065b      	lsls	r3, r3, #25
 80097f2:	f53f af2d 	bmi.w	8009650 <_svfiprintf_r+0x28>
 80097f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097f8:	e72c      	b.n	8009654 <_svfiprintf_r+0x2c>
 80097fa:	ab03      	add	r3, sp, #12
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	462a      	mov	r2, r5
 8009800:	4b05      	ldr	r3, [pc, #20]	@ (8009818 <_svfiprintf_r+0x1f0>)
 8009802:	a904      	add	r1, sp, #16
 8009804:	4638      	mov	r0, r7
 8009806:	f7fd f991 	bl	8006b2c <_printf_i>
 800980a:	e7ed      	b.n	80097e8 <_svfiprintf_r+0x1c0>
 800980c:	0800b0d5 	.word	0x0800b0d5
 8009810:	0800b0df 	.word	0x0800b0df
 8009814:	080065fd 	.word	0x080065fd
 8009818:	08009573 	.word	0x08009573
 800981c:	0800b0db 	.word	0x0800b0db

08009820 <_sungetc_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	1c4b      	adds	r3, r1, #1
 8009824:	4614      	mov	r4, r2
 8009826:	d103      	bne.n	8009830 <_sungetc_r+0x10>
 8009828:	f04f 35ff 	mov.w	r5, #4294967295
 800982c:	4628      	mov	r0, r5
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	8993      	ldrh	r3, [r2, #12]
 8009832:	f023 0320 	bic.w	r3, r3, #32
 8009836:	8193      	strh	r3, [r2, #12]
 8009838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	b2cd      	uxtb	r5, r1
 800983e:	b18b      	cbz	r3, 8009864 <_sungetc_r+0x44>
 8009840:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009842:	4293      	cmp	r3, r2
 8009844:	dd08      	ble.n	8009858 <_sungetc_r+0x38>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	1e5a      	subs	r2, r3, #1
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009850:	6863      	ldr	r3, [r4, #4]
 8009852:	3301      	adds	r3, #1
 8009854:	6063      	str	r3, [r4, #4]
 8009856:	e7e9      	b.n	800982c <_sungetc_r+0xc>
 8009858:	4621      	mov	r1, r4
 800985a:	f000 fd88 	bl	800a36e <__submore>
 800985e:	2800      	cmp	r0, #0
 8009860:	d0f1      	beq.n	8009846 <_sungetc_r+0x26>
 8009862:	e7e1      	b.n	8009828 <_sungetc_r+0x8>
 8009864:	6921      	ldr	r1, [r4, #16]
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	b151      	cbz	r1, 8009880 <_sungetc_r+0x60>
 800986a:	4299      	cmp	r1, r3
 800986c:	d208      	bcs.n	8009880 <_sungetc_r+0x60>
 800986e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009872:	42a9      	cmp	r1, r5
 8009874:	d104      	bne.n	8009880 <_sungetc_r+0x60>
 8009876:	3b01      	subs	r3, #1
 8009878:	3201      	adds	r2, #1
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	6062      	str	r2, [r4, #4]
 800987e:	e7d5      	b.n	800982c <_sungetc_r+0xc>
 8009880:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009888:	6363      	str	r3, [r4, #52]	@ 0x34
 800988a:	2303      	movs	r3, #3
 800988c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800988e:	4623      	mov	r3, r4
 8009890:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	2301      	movs	r3, #1
 8009898:	e7dc      	b.n	8009854 <_sungetc_r+0x34>

0800989a <__ssrefill_r>:
 800989a:	b510      	push	{r4, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80098a0:	b169      	cbz	r1, 80098be <__ssrefill_r+0x24>
 80098a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098a6:	4299      	cmp	r1, r3
 80098a8:	d001      	beq.n	80098ae <__ssrefill_r+0x14>
 80098aa:	f7ff f9b9 	bl	8008c20 <_free_r>
 80098ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098b0:	6063      	str	r3, [r4, #4]
 80098b2:	2000      	movs	r0, #0
 80098b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80098b6:	b113      	cbz	r3, 80098be <__ssrefill_r+0x24>
 80098b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	2300      	movs	r3, #0
 80098c4:	6063      	str	r3, [r4, #4]
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	f043 0320 	orr.w	r3, r3, #32
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	f04f 30ff 	mov.w	r0, #4294967295
 80098d2:	e7f3      	b.n	80098bc <__ssrefill_r+0x22>

080098d4 <__ssvfiscanf_r>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80098de:	2100      	movs	r1, #0
 80098e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80098e4:	49a6      	ldr	r1, [pc, #664]	@ (8009b80 <__ssvfiscanf_r+0x2ac>)
 80098e6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80098e8:	f10d 0804 	add.w	r8, sp, #4
 80098ec:	49a5      	ldr	r1, [pc, #660]	@ (8009b84 <__ssvfiscanf_r+0x2b0>)
 80098ee:	4fa6      	ldr	r7, [pc, #664]	@ (8009b88 <__ssvfiscanf_r+0x2b4>)
 80098f0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80098f4:	4606      	mov	r6, r0
 80098f6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	f892 9000 	ldrb.w	r9, [r2]
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	f000 8158 	beq.w	8009bb6 <__ssvfiscanf_r+0x2e2>
 8009906:	f817 3009 	ldrb.w	r3, [r7, r9]
 800990a:	f013 0308 	ands.w	r3, r3, #8
 800990e:	f102 0501 	add.w	r5, r2, #1
 8009912:	d019      	beq.n	8009948 <__ssvfiscanf_r+0x74>
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dd0f      	ble.n	800993a <__ssvfiscanf_r+0x66>
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	5cba      	ldrb	r2, [r7, r2]
 8009920:	0712      	lsls	r2, r2, #28
 8009922:	d401      	bmi.n	8009928 <__ssvfiscanf_r+0x54>
 8009924:	462a      	mov	r2, r5
 8009926:	e7e8      	b.n	80098fa <__ssvfiscanf_r+0x26>
 8009928:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800992a:	3201      	adds	r2, #1
 800992c:	9245      	str	r2, [sp, #276]	@ 0x114
 800992e:	6862      	ldr	r2, [r4, #4]
 8009930:	3301      	adds	r3, #1
 8009932:	3a01      	subs	r2, #1
 8009934:	6062      	str	r2, [r4, #4]
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	e7ec      	b.n	8009914 <__ssvfiscanf_r+0x40>
 800993a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800993c:	4621      	mov	r1, r4
 800993e:	4630      	mov	r0, r6
 8009940:	4798      	blx	r3
 8009942:	2800      	cmp	r0, #0
 8009944:	d0e9      	beq.n	800991a <__ssvfiscanf_r+0x46>
 8009946:	e7ed      	b.n	8009924 <__ssvfiscanf_r+0x50>
 8009948:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800994c:	f040 8085 	bne.w	8009a5a <__ssvfiscanf_r+0x186>
 8009950:	9341      	str	r3, [sp, #260]	@ 0x104
 8009952:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009954:	7853      	ldrb	r3, [r2, #1]
 8009956:	2b2a      	cmp	r3, #42	@ 0x2a
 8009958:	bf02      	ittt	eq
 800995a:	2310      	moveq	r3, #16
 800995c:	1c95      	addeq	r5, r2, #2
 800995e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009960:	220a      	movs	r2, #10
 8009962:	46aa      	mov	sl, r5
 8009964:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009968:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800996c:	2b09      	cmp	r3, #9
 800996e:	d91e      	bls.n	80099ae <__ssvfiscanf_r+0xda>
 8009970:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009b8c <__ssvfiscanf_r+0x2b8>
 8009974:	2203      	movs	r2, #3
 8009976:	4658      	mov	r0, fp
 8009978:	f7f6 fc5a 	bl	8000230 <memchr>
 800997c:	b138      	cbz	r0, 800998e <__ssvfiscanf_r+0xba>
 800997e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009980:	eba0 000b 	sub.w	r0, r0, fp
 8009984:	2301      	movs	r3, #1
 8009986:	4083      	lsls	r3, r0
 8009988:	4313      	orrs	r3, r2
 800998a:	9341      	str	r3, [sp, #260]	@ 0x104
 800998c:	4655      	mov	r5, sl
 800998e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009992:	2b78      	cmp	r3, #120	@ 0x78
 8009994:	d806      	bhi.n	80099a4 <__ssvfiscanf_r+0xd0>
 8009996:	2b57      	cmp	r3, #87	@ 0x57
 8009998:	d810      	bhi.n	80099bc <__ssvfiscanf_r+0xe8>
 800999a:	2b25      	cmp	r3, #37	@ 0x25
 800999c:	d05d      	beq.n	8009a5a <__ssvfiscanf_r+0x186>
 800999e:	d857      	bhi.n	8009a50 <__ssvfiscanf_r+0x17c>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d075      	beq.n	8009a90 <__ssvfiscanf_r+0x1bc>
 80099a4:	2303      	movs	r3, #3
 80099a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80099a8:	230a      	movs	r3, #10
 80099aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80099ac:	e088      	b.n	8009ac0 <__ssvfiscanf_r+0x1ec>
 80099ae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80099b0:	fb02 1103 	mla	r1, r2, r3, r1
 80099b4:	3930      	subs	r1, #48	@ 0x30
 80099b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80099b8:	4655      	mov	r5, sl
 80099ba:	e7d2      	b.n	8009962 <__ssvfiscanf_r+0x8e>
 80099bc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80099c0:	2a20      	cmp	r2, #32
 80099c2:	d8ef      	bhi.n	80099a4 <__ssvfiscanf_r+0xd0>
 80099c4:	a101      	add	r1, pc, #4	@ (adr r1, 80099cc <__ssvfiscanf_r+0xf8>)
 80099c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009a9f 	.word	0x08009a9f
 80099d0:	080099a5 	.word	0x080099a5
 80099d4:	080099a5 	.word	0x080099a5
 80099d8:	08009af9 	.word	0x08009af9
 80099dc:	080099a5 	.word	0x080099a5
 80099e0:	080099a5 	.word	0x080099a5
 80099e4:	080099a5 	.word	0x080099a5
 80099e8:	080099a5 	.word	0x080099a5
 80099ec:	080099a5 	.word	0x080099a5
 80099f0:	080099a5 	.word	0x080099a5
 80099f4:	080099a5 	.word	0x080099a5
 80099f8:	08009b0f 	.word	0x08009b0f
 80099fc:	08009af5 	.word	0x08009af5
 8009a00:	08009a57 	.word	0x08009a57
 8009a04:	08009a57 	.word	0x08009a57
 8009a08:	08009a57 	.word	0x08009a57
 8009a0c:	080099a5 	.word	0x080099a5
 8009a10:	08009ab1 	.word	0x08009ab1
 8009a14:	080099a5 	.word	0x080099a5
 8009a18:	080099a5 	.word	0x080099a5
 8009a1c:	080099a5 	.word	0x080099a5
 8009a20:	080099a5 	.word	0x080099a5
 8009a24:	08009b1f 	.word	0x08009b1f
 8009a28:	08009ab9 	.word	0x08009ab9
 8009a2c:	08009a97 	.word	0x08009a97
 8009a30:	080099a5 	.word	0x080099a5
 8009a34:	080099a5 	.word	0x080099a5
 8009a38:	08009b1b 	.word	0x08009b1b
 8009a3c:	080099a5 	.word	0x080099a5
 8009a40:	08009af5 	.word	0x08009af5
 8009a44:	080099a5 	.word	0x080099a5
 8009a48:	080099a5 	.word	0x080099a5
 8009a4c:	08009a9f 	.word	0x08009a9f
 8009a50:	3b45      	subs	r3, #69	@ 0x45
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d8a6      	bhi.n	80099a4 <__ssvfiscanf_r+0xd0>
 8009a56:	2305      	movs	r3, #5
 8009a58:	e031      	b.n	8009abe <__ssvfiscanf_r+0x1ea>
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dd0d      	ble.n	8009a7c <__ssvfiscanf_r+0x1a8>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	454a      	cmp	r2, r9
 8009a66:	f040 80a6 	bne.w	8009bb6 <__ssvfiscanf_r+0x2e2>
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	6862      	ldr	r2, [r4, #4]
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009a72:	3a01      	subs	r2, #1
 8009a74:	3301      	adds	r3, #1
 8009a76:	6062      	str	r2, [r4, #4]
 8009a78:	9345      	str	r3, [sp, #276]	@ 0x114
 8009a7a:	e753      	b.n	8009924 <__ssvfiscanf_r+0x50>
 8009a7c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4630      	mov	r0, r6
 8009a82:	4798      	blx	r3
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d0eb      	beq.n	8009a60 <__ssvfiscanf_r+0x18c>
 8009a88:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	f040 808b 	bne.w	8009ba6 <__ssvfiscanf_r+0x2d2>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e08b      	b.n	8009bae <__ssvfiscanf_r+0x2da>
 8009a96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a98:	f042 0220 	orr.w	r2, r2, #32
 8009a9c:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aa4:	9241      	str	r2, [sp, #260]	@ 0x104
 8009aa6:	2210      	movs	r2, #16
 8009aa8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009aaa:	9242      	str	r2, [sp, #264]	@ 0x108
 8009aac:	d902      	bls.n	8009ab4 <__ssvfiscanf_r+0x1e0>
 8009aae:	e005      	b.n	8009abc <__ssvfiscanf_r+0x1e8>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9342      	str	r3, [sp, #264]	@ 0x108
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e002      	b.n	8009abe <__ssvfiscanf_r+0x1ea>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	9342      	str	r3, [sp, #264]	@ 0x108
 8009abc:	2304      	movs	r3, #4
 8009abe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dd39      	ble.n	8009b3a <__ssvfiscanf_r+0x266>
 8009ac6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009ac8:	0659      	lsls	r1, r3, #25
 8009aca:	d404      	bmi.n	8009ad6 <__ssvfiscanf_r+0x202>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	781a      	ldrb	r2, [r3, #0]
 8009ad0:	5cba      	ldrb	r2, [r7, r2]
 8009ad2:	0712      	lsls	r2, r2, #28
 8009ad4:	d438      	bmi.n	8009b48 <__ssvfiscanf_r+0x274>
 8009ad6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	dc47      	bgt.n	8009b6c <__ssvfiscanf_r+0x298>
 8009adc:	466b      	mov	r3, sp
 8009ade:	4622      	mov	r2, r4
 8009ae0:	a941      	add	r1, sp, #260	@ 0x104
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f000 f9ae 	bl	8009e44 <_scanf_chars>
 8009ae8:	2801      	cmp	r0, #1
 8009aea:	d064      	beq.n	8009bb6 <__ssvfiscanf_r+0x2e2>
 8009aec:	2802      	cmp	r0, #2
 8009aee:	f47f af19 	bne.w	8009924 <__ssvfiscanf_r+0x50>
 8009af2:	e7c9      	b.n	8009a88 <__ssvfiscanf_r+0x1b4>
 8009af4:	220a      	movs	r2, #10
 8009af6:	e7d7      	b.n	8009aa8 <__ssvfiscanf_r+0x1d4>
 8009af8:	4629      	mov	r1, r5
 8009afa:	4640      	mov	r0, r8
 8009afc:	f000 fbfe 	bl	800a2fc <__sccl>
 8009b00:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b06:	9341      	str	r3, [sp, #260]	@ 0x104
 8009b08:	4605      	mov	r5, r0
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e7d7      	b.n	8009abe <__ssvfiscanf_r+0x1ea>
 8009b0e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b14:	9341      	str	r3, [sp, #260]	@ 0x104
 8009b16:	2300      	movs	r3, #0
 8009b18:	e7d1      	b.n	8009abe <__ssvfiscanf_r+0x1ea>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e7cf      	b.n	8009abe <__ssvfiscanf_r+0x1ea>
 8009b1e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009b20:	06c3      	lsls	r3, r0, #27
 8009b22:	f53f aeff 	bmi.w	8009924 <__ssvfiscanf_r+0x50>
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b2a:	1d19      	adds	r1, r3, #4
 8009b2c:	9100      	str	r1, [sp, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	07c0      	lsls	r0, r0, #31
 8009b32:	bf4c      	ite	mi
 8009b34:	801a      	strhmi	r2, [r3, #0]
 8009b36:	601a      	strpl	r2, [r3, #0]
 8009b38:	e6f4      	b.n	8009924 <__ssvfiscanf_r+0x50>
 8009b3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4798      	blx	r3
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d0bf      	beq.n	8009ac6 <__ssvfiscanf_r+0x1f2>
 8009b46:	e79f      	b.n	8009a88 <__ssvfiscanf_r+0x1b4>
 8009b48:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	9245      	str	r2, [sp, #276]	@ 0x114
 8009b4e:	6862      	ldr	r2, [r4, #4]
 8009b50:	3a01      	subs	r2, #1
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	6062      	str	r2, [r4, #4]
 8009b56:	dd02      	ble.n	8009b5e <__ssvfiscanf_r+0x28a>
 8009b58:	3301      	adds	r3, #1
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	e7b6      	b.n	8009acc <__ssvfiscanf_r+0x1f8>
 8009b5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b60:	4621      	mov	r1, r4
 8009b62:	4630      	mov	r0, r6
 8009b64:	4798      	blx	r3
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0b0      	beq.n	8009acc <__ssvfiscanf_r+0x1f8>
 8009b6a:	e78d      	b.n	8009a88 <__ssvfiscanf_r+0x1b4>
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	dc0f      	bgt.n	8009b90 <__ssvfiscanf_r+0x2bc>
 8009b70:	466b      	mov	r3, sp
 8009b72:	4622      	mov	r2, r4
 8009b74:	a941      	add	r1, sp, #260	@ 0x104
 8009b76:	4630      	mov	r0, r6
 8009b78:	f000 f9be 	bl	8009ef8 <_scanf_i>
 8009b7c:	e7b4      	b.n	8009ae8 <__ssvfiscanf_r+0x214>
 8009b7e:	bf00      	nop
 8009b80:	08009821 	.word	0x08009821
 8009b84:	0800989b 	.word	0x0800989b
 8009b88:	0800ae65 	.word	0x0800ae65
 8009b8c:	0800b0db 	.word	0x0800b0db
 8009b90:	4b0a      	ldr	r3, [pc, #40]	@ (8009bbc <__ssvfiscanf_r+0x2e8>)
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f43f aec6 	beq.w	8009924 <__ssvfiscanf_r+0x50>
 8009b98:	466b      	mov	r3, sp
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	a941      	add	r1, sp, #260	@ 0x104
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f3af 8000 	nop.w
 8009ba4:	e7a0      	b.n	8009ae8 <__ssvfiscanf_r+0x214>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	065b      	lsls	r3, r3, #25
 8009baa:	f53f af71 	bmi.w	8009a90 <__ssvfiscanf_r+0x1bc>
 8009bae:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8009bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009bb8:	e7f9      	b.n	8009bae <__ssvfiscanf_r+0x2da>
 8009bba:	bf00      	nop
 8009bbc:	00000000 	.word	0x00000000

08009bc0 <__sfputc_r>:
 8009bc0:	6893      	ldr	r3, [r2, #8]
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	b410      	push	{r4}
 8009bc8:	6093      	str	r3, [r2, #8]
 8009bca:	da08      	bge.n	8009bde <__sfputc_r+0x1e>
 8009bcc:	6994      	ldr	r4, [r2, #24]
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	db01      	blt.n	8009bd6 <__sfputc_r+0x16>
 8009bd2:	290a      	cmp	r1, #10
 8009bd4:	d103      	bne.n	8009bde <__sfputc_r+0x1e>
 8009bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bda:	f7fd bad2 	b.w	8007182 <__swbuf_r>
 8009bde:	6813      	ldr	r3, [r2, #0]
 8009be0:	1c58      	adds	r0, r3, #1
 8009be2:	6010      	str	r0, [r2, #0]
 8009be4:	7019      	strb	r1, [r3, #0]
 8009be6:	4608      	mov	r0, r1
 8009be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <__sfputs_r>:
 8009bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	460f      	mov	r7, r1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	18d5      	adds	r5, r2, r3
 8009bf8:	42ac      	cmp	r4, r5
 8009bfa:	d101      	bne.n	8009c00 <__sfputs_r+0x12>
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	e007      	b.n	8009c10 <__sfputs_r+0x22>
 8009c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c04:	463a      	mov	r2, r7
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7ff ffda 	bl	8009bc0 <__sfputc_r>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d1f3      	bne.n	8009bf8 <__sfputs_r+0xa>
 8009c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c14 <_vfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	460d      	mov	r5, r1
 8009c1a:	b09d      	sub	sp, #116	@ 0x74
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	4698      	mov	r8, r3
 8009c20:	4606      	mov	r6, r0
 8009c22:	b118      	cbz	r0, 8009c2c <_vfiprintf_r+0x18>
 8009c24:	6a03      	ldr	r3, [r0, #32]
 8009c26:	b90b      	cbnz	r3, 8009c2c <_vfiprintf_r+0x18>
 8009c28:	f7fd f92a 	bl	8006e80 <__sinit>
 8009c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c2e:	07d9      	lsls	r1, r3, #31
 8009c30:	d405      	bmi.n	8009c3e <_vfiprintf_r+0x2a>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	059a      	lsls	r2, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_vfiprintf_r+0x2a>
 8009c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c3a:	f7fe f975 	bl	8007f28 <__retarget_lock_acquire_recursive>
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	071b      	lsls	r3, r3, #28
 8009c42:	d501      	bpl.n	8009c48 <_vfiprintf_r+0x34>
 8009c44:	692b      	ldr	r3, [r5, #16]
 8009c46:	b99b      	cbnz	r3, 8009c70 <_vfiprintf_r+0x5c>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7fd fad8 	bl	8007200 <__swsetup_r>
 8009c50:	b170      	cbz	r0, 8009c70 <_vfiprintf_r+0x5c>
 8009c52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c54:	07dc      	lsls	r4, r3, #31
 8009c56:	d504      	bpl.n	8009c62 <_vfiprintf_r+0x4e>
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	b01d      	add	sp, #116	@ 0x74
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	0598      	lsls	r0, r3, #22
 8009c66:	d4f7      	bmi.n	8009c58 <_vfiprintf_r+0x44>
 8009c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c6a:	f7fe f95f 	bl	8007f2c <__retarget_lock_release_recursive>
 8009c6e:	e7f3      	b.n	8009c58 <_vfiprintf_r+0x44>
 8009c70:	2300      	movs	r3, #0
 8009c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c74:	2320      	movs	r3, #32
 8009c76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c7e:	2330      	movs	r3, #48	@ 0x30
 8009c80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e30 <_vfiprintf_r+0x21c>
 8009c84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c88:	f04f 0901 	mov.w	r9, #1
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	469a      	mov	sl, r3
 8009c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c94:	b10a      	cbz	r2, 8009c9a <_vfiprintf_r+0x86>
 8009c96:	2a25      	cmp	r2, #37	@ 0x25
 8009c98:	d1f9      	bne.n	8009c8e <_vfiprintf_r+0x7a>
 8009c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c9e:	d00b      	beq.n	8009cb8 <_vfiprintf_r+0xa4>
 8009ca0:	465b      	mov	r3, fp
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7ff ffa1 	bl	8009bee <__sfputs_r>
 8009cac:	3001      	adds	r0, #1
 8009cae:	f000 80a7 	beq.w	8009e00 <_vfiprintf_r+0x1ec>
 8009cb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cb4:	445a      	add	r2, fp
 8009cb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 809f 	beq.w	8009e00 <_vfiprintf_r+0x1ec>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ccc:	f10a 0a01 	add.w	sl, sl, #1
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	9307      	str	r3, [sp, #28]
 8009cd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cda:	4654      	mov	r4, sl
 8009cdc:	2205      	movs	r2, #5
 8009cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce2:	4853      	ldr	r0, [pc, #332]	@ (8009e30 <_vfiprintf_r+0x21c>)
 8009ce4:	f7f6 faa4 	bl	8000230 <memchr>
 8009ce8:	9a04      	ldr	r2, [sp, #16]
 8009cea:	b9d8      	cbnz	r0, 8009d24 <_vfiprintf_r+0x110>
 8009cec:	06d1      	lsls	r1, r2, #27
 8009cee:	bf44      	itt	mi
 8009cf0:	2320      	movmi	r3, #32
 8009cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cf6:	0713      	lsls	r3, r2, #28
 8009cf8:	bf44      	itt	mi
 8009cfa:	232b      	movmi	r3, #43	@ 0x2b
 8009cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d00:	f89a 3000 	ldrb.w	r3, [sl]
 8009d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d06:	d015      	beq.n	8009d34 <_vfiprintf_r+0x120>
 8009d08:	9a07      	ldr	r2, [sp, #28]
 8009d0a:	4654      	mov	r4, sl
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4621      	mov	r1, r4
 8009d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d18:	3b30      	subs	r3, #48	@ 0x30
 8009d1a:	2b09      	cmp	r3, #9
 8009d1c:	d94b      	bls.n	8009db6 <_vfiprintf_r+0x1a2>
 8009d1e:	b1b0      	cbz	r0, 8009d4e <_vfiprintf_r+0x13a>
 8009d20:	9207      	str	r2, [sp, #28]
 8009d22:	e014      	b.n	8009d4e <_vfiprintf_r+0x13a>
 8009d24:	eba0 0308 	sub.w	r3, r0, r8
 8009d28:	fa09 f303 	lsl.w	r3, r9, r3
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	46a2      	mov	sl, r4
 8009d32:	e7d2      	b.n	8009cda <_vfiprintf_r+0xc6>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	1d19      	adds	r1, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	9103      	str	r1, [sp, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfbb      	ittet	lt
 8009d40:	425b      	neglt	r3, r3
 8009d42:	f042 0202 	orrlt.w	r2, r2, #2
 8009d46:	9307      	strge	r3, [sp, #28]
 8009d48:	9307      	strlt	r3, [sp, #28]
 8009d4a:	bfb8      	it	lt
 8009d4c:	9204      	strlt	r2, [sp, #16]
 8009d4e:	7823      	ldrb	r3, [r4, #0]
 8009d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d52:	d10a      	bne.n	8009d6a <_vfiprintf_r+0x156>
 8009d54:	7863      	ldrb	r3, [r4, #1]
 8009d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d58:	d132      	bne.n	8009dc0 <_vfiprintf_r+0x1ac>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	9203      	str	r2, [sp, #12]
 8009d62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d66:	3402      	adds	r4, #2
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e40 <_vfiprintf_r+0x22c>
 8009d6e:	7821      	ldrb	r1, [r4, #0]
 8009d70:	2203      	movs	r2, #3
 8009d72:	4650      	mov	r0, sl
 8009d74:	f7f6 fa5c 	bl	8000230 <memchr>
 8009d78:	b138      	cbz	r0, 8009d8a <_vfiprintf_r+0x176>
 8009d7a:	9b04      	ldr	r3, [sp, #16]
 8009d7c:	eba0 000a 	sub.w	r0, r0, sl
 8009d80:	2240      	movs	r2, #64	@ 0x40
 8009d82:	4082      	lsls	r2, r0
 8009d84:	4313      	orrs	r3, r2
 8009d86:	3401      	adds	r4, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4829      	ldr	r0, [pc, #164]	@ (8009e34 <_vfiprintf_r+0x220>)
 8009d90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d94:	2206      	movs	r2, #6
 8009d96:	f7f6 fa4b 	bl	8000230 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d03f      	beq.n	8009e1e <_vfiprintf_r+0x20a>
 8009d9e:	4b26      	ldr	r3, [pc, #152]	@ (8009e38 <_vfiprintf_r+0x224>)
 8009da0:	bb1b      	cbnz	r3, 8009dea <_vfiprintf_r+0x1d6>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	3307      	adds	r3, #7
 8009da6:	f023 0307 	bic.w	r3, r3, #7
 8009daa:	3308      	adds	r3, #8
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	443b      	add	r3, r7
 8009db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db4:	e76a      	b.n	8009c8c <_vfiprintf_r+0x78>
 8009db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dba:	460c      	mov	r4, r1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7a8      	b.n	8009d12 <_vfiprintf_r+0xfe>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd2:	3a30      	subs	r2, #48	@ 0x30
 8009dd4:	2a09      	cmp	r2, #9
 8009dd6:	d903      	bls.n	8009de0 <_vfiprintf_r+0x1cc>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c6      	beq.n	8009d6a <_vfiprintf_r+0x156>
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	e7c4      	b.n	8009d6a <_vfiprintf_r+0x156>
 8009de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de4:	4604      	mov	r4, r0
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7f0      	b.n	8009dcc <_vfiprintf_r+0x1b8>
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462a      	mov	r2, r5
 8009df0:	4b12      	ldr	r3, [pc, #72]	@ (8009e3c <_vfiprintf_r+0x228>)
 8009df2:	a904      	add	r1, sp, #16
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7fc fc01 	bl	80065fc <_printf_float>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	1c78      	adds	r0, r7, #1
 8009dfe:	d1d6      	bne.n	8009dae <_vfiprintf_r+0x19a>
 8009e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e02:	07d9      	lsls	r1, r3, #31
 8009e04:	d405      	bmi.n	8009e12 <_vfiprintf_r+0x1fe>
 8009e06:	89ab      	ldrh	r3, [r5, #12]
 8009e08:	059a      	lsls	r2, r3, #22
 8009e0a:	d402      	bmi.n	8009e12 <_vfiprintf_r+0x1fe>
 8009e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e0e:	f7fe f88d 	bl	8007f2c <__retarget_lock_release_recursive>
 8009e12:	89ab      	ldrh	r3, [r5, #12]
 8009e14:	065b      	lsls	r3, r3, #25
 8009e16:	f53f af1f 	bmi.w	8009c58 <_vfiprintf_r+0x44>
 8009e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e1c:	e71e      	b.n	8009c5c <_vfiprintf_r+0x48>
 8009e1e:	ab03      	add	r3, sp, #12
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	462a      	mov	r2, r5
 8009e24:	4b05      	ldr	r3, [pc, #20]	@ (8009e3c <_vfiprintf_r+0x228>)
 8009e26:	a904      	add	r1, sp, #16
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7fc fe7f 	bl	8006b2c <_printf_i>
 8009e2e:	e7e4      	b.n	8009dfa <_vfiprintf_r+0x1e6>
 8009e30:	0800b0d5 	.word	0x0800b0d5
 8009e34:	0800b0df 	.word	0x0800b0df
 8009e38:	080065fd 	.word	0x080065fd
 8009e3c:	08009bef 	.word	0x08009bef
 8009e40:	0800b0db 	.word	0x0800b0db

08009e44 <_scanf_chars>:
 8009e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e48:	4615      	mov	r5, r2
 8009e4a:	688a      	ldr	r2, [r1, #8]
 8009e4c:	4680      	mov	r8, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b932      	cbnz	r2, 8009e60 <_scanf_chars+0x1c>
 8009e52:	698a      	ldr	r2, [r1, #24]
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	bf14      	ite	ne
 8009e58:	f04f 32ff 	movne.w	r2, #4294967295
 8009e5c:	2201      	moveq	r2, #1
 8009e5e:	608a      	str	r2, [r1, #8]
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009ef4 <_scanf_chars+0xb0>
 8009e66:	06d1      	lsls	r1, r2, #27
 8009e68:	bf5f      	itttt	pl
 8009e6a:	681a      	ldrpl	r2, [r3, #0]
 8009e6c:	1d11      	addpl	r1, r2, #4
 8009e6e:	6019      	strpl	r1, [r3, #0]
 8009e70:	6816      	ldrpl	r6, [r2, #0]
 8009e72:	2700      	movs	r7, #0
 8009e74:	69a0      	ldr	r0, [r4, #24]
 8009e76:	b188      	cbz	r0, 8009e9c <_scanf_chars+0x58>
 8009e78:	2801      	cmp	r0, #1
 8009e7a:	d107      	bne.n	8009e8c <_scanf_chars+0x48>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	6963      	ldr	r3, [r4, #20]
 8009e82:	5c9b      	ldrb	r3, [r3, r2]
 8009e84:	b953      	cbnz	r3, 8009e9c <_scanf_chars+0x58>
 8009e86:	2f00      	cmp	r7, #0
 8009e88:	d031      	beq.n	8009eee <_scanf_chars+0xaa>
 8009e8a:	e022      	b.n	8009ed2 <_scanf_chars+0x8e>
 8009e8c:	2802      	cmp	r0, #2
 8009e8e:	d120      	bne.n	8009ed2 <_scanf_chars+0x8e>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009e98:	071b      	lsls	r3, r3, #28
 8009e9a:	d41a      	bmi.n	8009ed2 <_scanf_chars+0x8e>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	06da      	lsls	r2, r3, #27
 8009ea0:	bf5e      	ittt	pl
 8009ea2:	682b      	ldrpl	r3, [r5, #0]
 8009ea4:	781b      	ldrbpl	r3, [r3, #0]
 8009ea6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009eaa:	682a      	ldr	r2, [r5, #0]
 8009eac:	686b      	ldr	r3, [r5, #4]
 8009eae:	3201      	adds	r2, #1
 8009eb0:	602a      	str	r2, [r5, #0]
 8009eb2:	68a2      	ldr	r2, [r4, #8]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	3a01      	subs	r2, #1
 8009eb8:	606b      	str	r3, [r5, #4]
 8009eba:	3701      	adds	r7, #1
 8009ebc:	60a2      	str	r2, [r4, #8]
 8009ebe:	b142      	cbz	r2, 8009ed2 <_scanf_chars+0x8e>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dcd7      	bgt.n	8009e74 <_scanf_chars+0x30>
 8009ec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4798      	blx	r3
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d0d0      	beq.n	8009e74 <_scanf_chars+0x30>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	f013 0310 	ands.w	r3, r3, #16
 8009ed8:	d105      	bne.n	8009ee6 <_scanf_chars+0xa2>
 8009eda:	68e2      	ldr	r2, [r4, #12]
 8009edc:	3201      	adds	r2, #1
 8009ede:	60e2      	str	r2, [r4, #12]
 8009ee0:	69a2      	ldr	r2, [r4, #24]
 8009ee2:	b102      	cbz	r2, 8009ee6 <_scanf_chars+0xa2>
 8009ee4:	7033      	strb	r3, [r6, #0]
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	443b      	add	r3, r7
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	2000      	movs	r0, #0
 8009eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800ae65 	.word	0x0800ae65

08009ef8 <_scanf_i>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	4698      	mov	r8, r3
 8009efe:	4b74      	ldr	r3, [pc, #464]	@ (800a0d0 <_scanf_i+0x1d8>)
 8009f00:	460c      	mov	r4, r1
 8009f02:	4682      	mov	sl, r0
 8009f04:	4616      	mov	r6, r2
 8009f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	ab03      	add	r3, sp, #12
 8009f0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f12:	4b70      	ldr	r3, [pc, #448]	@ (800a0d4 <_scanf_i+0x1dc>)
 8009f14:	69a1      	ldr	r1, [r4, #24]
 8009f16:	4a70      	ldr	r2, [pc, #448]	@ (800a0d8 <_scanf_i+0x1e0>)
 8009f18:	2903      	cmp	r1, #3
 8009f1a:	bf08      	it	eq
 8009f1c:	461a      	moveq	r2, r3
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	1e5a      	subs	r2, r3, #1
 8009f24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009f28:	bf88      	it	hi
 8009f2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009f2e:	4627      	mov	r7, r4
 8009f30:	bf82      	ittt	hi
 8009f32:	eb03 0905 	addhi.w	r9, r3, r5
 8009f36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009f3a:	60a3      	strhi	r3, [r4, #8]
 8009f3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009f40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009f44:	bf98      	it	ls
 8009f46:	f04f 0900 	movls.w	r9, #0
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	463d      	mov	r5, r7
 8009f4e:	f04f 0b00 	mov.w	fp, #0
 8009f52:	6831      	ldr	r1, [r6, #0]
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	7809      	ldrb	r1, [r1, #0]
 8009f58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	f7f6 f967 	bl	8000230 <memchr>
 8009f62:	b328      	cbz	r0, 8009fb0 <_scanf_i+0xb8>
 8009f64:	f1bb 0f01 	cmp.w	fp, #1
 8009f68:	d159      	bne.n	800a01e <_scanf_i+0x126>
 8009f6a:	6862      	ldr	r2, [r4, #4]
 8009f6c:	b92a      	cbnz	r2, 8009f7a <_scanf_i+0x82>
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	2108      	movs	r1, #8
 8009f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f76:	6061      	str	r1, [r4, #4]
 8009f78:	6022      	str	r2, [r4, #0]
 8009f7a:	6822      	ldr	r2, [r4, #0]
 8009f7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009f80:	6022      	str	r2, [r4, #0]
 8009f82:	68a2      	ldr	r2, [r4, #8]
 8009f84:	1e51      	subs	r1, r2, #1
 8009f86:	60a1      	str	r1, [r4, #8]
 8009f88:	b192      	cbz	r2, 8009fb0 <_scanf_i+0xb8>
 8009f8a:	6832      	ldr	r2, [r6, #0]
 8009f8c:	1c51      	adds	r1, r2, #1
 8009f8e:	6031      	str	r1, [r6, #0]
 8009f90:	7812      	ldrb	r2, [r2, #0]
 8009f92:	f805 2b01 	strb.w	r2, [r5], #1
 8009f96:	6872      	ldr	r2, [r6, #4]
 8009f98:	3a01      	subs	r2, #1
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	6072      	str	r2, [r6, #4]
 8009f9e:	dc07      	bgt.n	8009fb0 <_scanf_i+0xb8>
 8009fa0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	4790      	blx	r2
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f040 8085 	bne.w	800a0ba <_scanf_i+0x1c2>
 8009fb0:	f10b 0b01 	add.w	fp, fp, #1
 8009fb4:	f1bb 0f03 	cmp.w	fp, #3
 8009fb8:	d1cb      	bne.n	8009f52 <_scanf_i+0x5a>
 8009fba:	6863      	ldr	r3, [r4, #4]
 8009fbc:	b90b      	cbnz	r3, 8009fc2 <_scanf_i+0xca>
 8009fbe:	230a      	movs	r3, #10
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	4945      	ldr	r1, [pc, #276]	@ (800a0dc <_scanf_i+0x1e4>)
 8009fc6:	6960      	ldr	r0, [r4, #20]
 8009fc8:	1ac9      	subs	r1, r1, r3
 8009fca:	f000 f997 	bl	800a2fc <__sccl>
 8009fce:	f04f 0b00 	mov.w	fp, #0
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	6822      	ldr	r2, [r4, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d03d      	beq.n	800a056 <_scanf_i+0x15e>
 8009fda:	6831      	ldr	r1, [r6, #0]
 8009fdc:	6960      	ldr	r0, [r4, #20]
 8009fde:	f891 c000 	ldrb.w	ip, [r1]
 8009fe2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d035      	beq.n	800a056 <_scanf_i+0x15e>
 8009fea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009fee:	d124      	bne.n	800a03a <_scanf_i+0x142>
 8009ff0:	0510      	lsls	r0, r2, #20
 8009ff2:	d522      	bpl.n	800a03a <_scanf_i+0x142>
 8009ff4:	f10b 0b01 	add.w	fp, fp, #1
 8009ff8:	f1b9 0f00 	cmp.w	r9, #0
 8009ffc:	d003      	beq.n	800a006 <_scanf_i+0x10e>
 8009ffe:	3301      	adds	r3, #1
 800a000:	f109 39ff 	add.w	r9, r9, #4294967295
 800a004:	60a3      	str	r3, [r4, #8]
 800a006:	6873      	ldr	r3, [r6, #4]
 800a008:	3b01      	subs	r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	6073      	str	r3, [r6, #4]
 800a00e:	dd1b      	ble.n	800a048 <_scanf_i+0x150>
 800a010:	6833      	ldr	r3, [r6, #0]
 800a012:	3301      	adds	r3, #1
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	3b01      	subs	r3, #1
 800a01a:	60a3      	str	r3, [r4, #8]
 800a01c:	e7d9      	b.n	8009fd2 <_scanf_i+0xda>
 800a01e:	f1bb 0f02 	cmp.w	fp, #2
 800a022:	d1ae      	bne.n	8009f82 <_scanf_i+0x8a>
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a02a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a02e:	d1c4      	bne.n	8009fba <_scanf_i+0xc2>
 800a030:	2110      	movs	r1, #16
 800a032:	6061      	str	r1, [r4, #4]
 800a034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a038:	e7a2      	b.n	8009f80 <_scanf_i+0x88>
 800a03a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	780b      	ldrb	r3, [r1, #0]
 800a042:	f805 3b01 	strb.w	r3, [r5], #1
 800a046:	e7de      	b.n	800a006 <_scanf_i+0x10e>
 800a048:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a04c:	4631      	mov	r1, r6
 800a04e:	4650      	mov	r0, sl
 800a050:	4798      	blx	r3
 800a052:	2800      	cmp	r0, #0
 800a054:	d0df      	beq.n	800a016 <_scanf_i+0x11e>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	05d9      	lsls	r1, r3, #23
 800a05a:	d50d      	bpl.n	800a078 <_scanf_i+0x180>
 800a05c:	42bd      	cmp	r5, r7
 800a05e:	d909      	bls.n	800a074 <_scanf_i+0x17c>
 800a060:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a064:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a068:	4632      	mov	r2, r6
 800a06a:	4650      	mov	r0, sl
 800a06c:	4798      	blx	r3
 800a06e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a072:	464d      	mov	r5, r9
 800a074:	42bd      	cmp	r5, r7
 800a076:	d028      	beq.n	800a0ca <_scanf_i+0x1d2>
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	f012 0210 	ands.w	r2, r2, #16
 800a07e:	d113      	bne.n	800a0a8 <_scanf_i+0x1b0>
 800a080:	702a      	strb	r2, [r5, #0]
 800a082:	6863      	ldr	r3, [r4, #4]
 800a084:	9e01      	ldr	r6, [sp, #4]
 800a086:	4639      	mov	r1, r7
 800a088:	4650      	mov	r0, sl
 800a08a:	47b0      	blx	r6
 800a08c:	f8d8 3000 	ldr.w	r3, [r8]
 800a090:	6821      	ldr	r1, [r4, #0]
 800a092:	1d1a      	adds	r2, r3, #4
 800a094:	f8c8 2000 	str.w	r2, [r8]
 800a098:	f011 0f20 	tst.w	r1, #32
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	d00f      	beq.n	800a0c0 <_scanf_i+0x1c8>
 800a0a0:	6018      	str	r0, [r3, #0]
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	60e3      	str	r3, [r4, #12]
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	1bed      	subs	r5, r5, r7
 800a0ac:	445d      	add	r5, fp
 800a0ae:	442b      	add	r3, r5
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	b007      	add	sp, #28
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ba:	f04f 0b00 	mov.w	fp, #0
 800a0be:	e7ca      	b.n	800a056 <_scanf_i+0x15e>
 800a0c0:	07ca      	lsls	r2, r1, #31
 800a0c2:	bf4c      	ite	mi
 800a0c4:	8018      	strhmi	r0, [r3, #0]
 800a0c6:	6018      	strpl	r0, [r3, #0]
 800a0c8:	e7eb      	b.n	800a0a2 <_scanf_i+0x1aa>
 800a0ca:	2001      	movs	r0, #1
 800a0cc:	e7f2      	b.n	800a0b4 <_scanf_i+0x1bc>
 800a0ce:	bf00      	nop
 800a0d0:	0800ac3c 	.word	0x0800ac3c
 800a0d4:	0800a5d5 	.word	0x0800a5d5
 800a0d8:	08009541 	.word	0x08009541
 800a0dc:	0800b0f6 	.word	0x0800b0f6

0800a0e0 <__sflush_r>:
 800a0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	0716      	lsls	r6, r2, #28
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	d454      	bmi.n	800a19a <__sflush_r+0xba>
 800a0f0:	684b      	ldr	r3, [r1, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dc02      	bgt.n	800a0fc <__sflush_r+0x1c>
 800a0f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dd48      	ble.n	800a18e <__sflush_r+0xae>
 800a0fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	d045      	beq.n	800a18e <__sflush_r+0xae>
 800a102:	2300      	movs	r3, #0
 800a104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a108:	682f      	ldr	r7, [r5, #0]
 800a10a:	6a21      	ldr	r1, [r4, #32]
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	d030      	beq.n	800a172 <__sflush_r+0x92>
 800a110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	0759      	lsls	r1, r3, #29
 800a116:	d505      	bpl.n	800a124 <__sflush_r+0x44>
 800a118:	6863      	ldr	r3, [r4, #4]
 800a11a:	1ad2      	subs	r2, r2, r3
 800a11c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a11e:	b10b      	cbz	r3, 800a124 <__sflush_r+0x44>
 800a120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a122:	1ad2      	subs	r2, r2, r3
 800a124:	2300      	movs	r3, #0
 800a126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a128:	6a21      	ldr	r1, [r4, #32]
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b0      	blx	r6
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	d106      	bne.n	800a142 <__sflush_r+0x62>
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	291d      	cmp	r1, #29
 800a138:	d82b      	bhi.n	800a192 <__sflush_r+0xb2>
 800a13a:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e4 <__sflush_r+0x104>)
 800a13c:	40ca      	lsrs	r2, r1
 800a13e:	07d6      	lsls	r6, r2, #31
 800a140:	d527      	bpl.n	800a192 <__sflush_r+0xb2>
 800a142:	2200      	movs	r2, #0
 800a144:	6062      	str	r2, [r4, #4]
 800a146:	04d9      	lsls	r1, r3, #19
 800a148:	6922      	ldr	r2, [r4, #16]
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	d504      	bpl.n	800a158 <__sflush_r+0x78>
 800a14e:	1c42      	adds	r2, r0, #1
 800a150:	d101      	bne.n	800a156 <__sflush_r+0x76>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b903      	cbnz	r3, 800a158 <__sflush_r+0x78>
 800a156:	6560      	str	r0, [r4, #84]	@ 0x54
 800a158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a15a:	602f      	str	r7, [r5, #0]
 800a15c:	b1b9      	cbz	r1, 800a18e <__sflush_r+0xae>
 800a15e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a162:	4299      	cmp	r1, r3
 800a164:	d002      	beq.n	800a16c <__sflush_r+0x8c>
 800a166:	4628      	mov	r0, r5
 800a168:	f7fe fd5a 	bl	8008c20 <_free_r>
 800a16c:	2300      	movs	r3, #0
 800a16e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a170:	e00d      	b.n	800a18e <__sflush_r+0xae>
 800a172:	2301      	movs	r3, #1
 800a174:	4628      	mov	r0, r5
 800a176:	47b0      	blx	r6
 800a178:	4602      	mov	r2, r0
 800a17a:	1c50      	adds	r0, r2, #1
 800a17c:	d1c9      	bne.n	800a112 <__sflush_r+0x32>
 800a17e:	682b      	ldr	r3, [r5, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0c6      	beq.n	800a112 <__sflush_r+0x32>
 800a184:	2b1d      	cmp	r3, #29
 800a186:	d001      	beq.n	800a18c <__sflush_r+0xac>
 800a188:	2b16      	cmp	r3, #22
 800a18a:	d11e      	bne.n	800a1ca <__sflush_r+0xea>
 800a18c:	602f      	str	r7, [r5, #0]
 800a18e:	2000      	movs	r0, #0
 800a190:	e022      	b.n	800a1d8 <__sflush_r+0xf8>
 800a192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a196:	b21b      	sxth	r3, r3
 800a198:	e01b      	b.n	800a1d2 <__sflush_r+0xf2>
 800a19a:	690f      	ldr	r7, [r1, #16]
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	d0f6      	beq.n	800a18e <__sflush_r+0xae>
 800a1a0:	0793      	lsls	r3, r2, #30
 800a1a2:	680e      	ldr	r6, [r1, #0]
 800a1a4:	bf08      	it	eq
 800a1a6:	694b      	ldreq	r3, [r1, #20]
 800a1a8:	600f      	str	r7, [r1, #0]
 800a1aa:	bf18      	it	ne
 800a1ac:	2300      	movne	r3, #0
 800a1ae:	eba6 0807 	sub.w	r8, r6, r7
 800a1b2:	608b      	str	r3, [r1, #8]
 800a1b4:	f1b8 0f00 	cmp.w	r8, #0
 800a1b8:	dde9      	ble.n	800a18e <__sflush_r+0xae>
 800a1ba:	6a21      	ldr	r1, [r4, #32]
 800a1bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1be:	4643      	mov	r3, r8
 800a1c0:	463a      	mov	r2, r7
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47b0      	blx	r6
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	dc08      	bgt.n	800a1dc <__sflush_r+0xfc>
 800a1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1dc:	4407      	add	r7, r0
 800a1de:	eba8 0800 	sub.w	r8, r8, r0
 800a1e2:	e7e7      	b.n	800a1b4 <__sflush_r+0xd4>
 800a1e4:	20400001 	.word	0x20400001

0800a1e8 <_fflush_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_fflush_r+0x10>
 800a1f2:	2500      	movs	r5, #0
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	b118      	cbz	r0, 800a202 <_fflush_r+0x1a>
 800a1fa:	6a03      	ldr	r3, [r0, #32]
 800a1fc:	b90b      	cbnz	r3, 800a202 <_fflush_r+0x1a>
 800a1fe:	f7fc fe3f 	bl	8006e80 <__sinit>
 800a202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0f3      	beq.n	800a1f2 <_fflush_r+0xa>
 800a20a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a20c:	07d0      	lsls	r0, r2, #31
 800a20e:	d404      	bmi.n	800a21a <_fflush_r+0x32>
 800a210:	0599      	lsls	r1, r3, #22
 800a212:	d402      	bmi.n	800a21a <_fflush_r+0x32>
 800a214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a216:	f7fd fe87 	bl	8007f28 <__retarget_lock_acquire_recursive>
 800a21a:	4628      	mov	r0, r5
 800a21c:	4621      	mov	r1, r4
 800a21e:	f7ff ff5f 	bl	800a0e0 <__sflush_r>
 800a222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a224:	07da      	lsls	r2, r3, #31
 800a226:	4605      	mov	r5, r0
 800a228:	d4e4      	bmi.n	800a1f4 <_fflush_r+0xc>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	059b      	lsls	r3, r3, #22
 800a22e:	d4e1      	bmi.n	800a1f4 <_fflush_r+0xc>
 800a230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a232:	f7fd fe7b 	bl	8007f2c <__retarget_lock_release_recursive>
 800a236:	e7dd      	b.n	800a1f4 <_fflush_r+0xc>

0800a238 <__swhatbuf_r>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	460c      	mov	r4, r1
 800a23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a240:	2900      	cmp	r1, #0
 800a242:	b096      	sub	sp, #88	@ 0x58
 800a244:	4615      	mov	r5, r2
 800a246:	461e      	mov	r6, r3
 800a248:	da0d      	bge.n	800a266 <__swhatbuf_r+0x2e>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a250:	f04f 0100 	mov.w	r1, #0
 800a254:	bf14      	ite	ne
 800a256:	2340      	movne	r3, #64	@ 0x40
 800a258:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a25c:	2000      	movs	r0, #0
 800a25e:	6031      	str	r1, [r6, #0]
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	b016      	add	sp, #88	@ 0x58
 800a264:	bd70      	pop	{r4, r5, r6, pc}
 800a266:	466a      	mov	r2, sp
 800a268:	f000 f8da 	bl	800a420 <_fstat_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dbec      	blt.n	800a24a <__swhatbuf_r+0x12>
 800a270:	9901      	ldr	r1, [sp, #4]
 800a272:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a276:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a27a:	4259      	negs	r1, r3
 800a27c:	4159      	adcs	r1, r3
 800a27e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a282:	e7eb      	b.n	800a25c <__swhatbuf_r+0x24>

0800a284 <__smakebuf_r>:
 800a284:	898b      	ldrh	r3, [r1, #12]
 800a286:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a288:	079d      	lsls	r5, r3, #30
 800a28a:	4606      	mov	r6, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	d507      	bpl.n	800a2a0 <__smakebuf_r+0x1c>
 800a290:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	2301      	movs	r3, #1
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	b003      	add	sp, #12
 800a29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a0:	ab01      	add	r3, sp, #4
 800a2a2:	466a      	mov	r2, sp
 800a2a4:	f7ff ffc8 	bl	800a238 <__swhatbuf_r>
 800a2a8:	9f00      	ldr	r7, [sp, #0]
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7fc f842 	bl	8006338 <_malloc_r>
 800a2b4:	b948      	cbnz	r0, 800a2ca <__smakebuf_r+0x46>
 800a2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ba:	059a      	lsls	r2, r3, #22
 800a2bc:	d4ee      	bmi.n	800a29c <__smakebuf_r+0x18>
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	f043 0302 	orr.w	r3, r3, #2
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	e7e2      	b.n	800a290 <__smakebuf_r+0xc>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	6020      	str	r0, [r4, #0]
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2da:	b15b      	cbz	r3, 800a2f4 <__smakebuf_r+0x70>
 800a2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f000 f8af 	bl	800a444 <_isatty_r>
 800a2e6:	b128      	cbz	r0, 800a2f4 <__smakebuf_r+0x70>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	f043 0301 	orr.w	r3, r3, #1
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	431d      	orrs	r5, r3
 800a2f8:	81a5      	strh	r5, [r4, #12]
 800a2fa:	e7cf      	b.n	800a29c <__smakebuf_r+0x18>

0800a2fc <__sccl>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	780b      	ldrb	r3, [r1, #0]
 800a300:	4604      	mov	r4, r0
 800a302:	2b5e      	cmp	r3, #94	@ 0x5e
 800a304:	bf0b      	itete	eq
 800a306:	784b      	ldrbeq	r3, [r1, #1]
 800a308:	1c4a      	addne	r2, r1, #1
 800a30a:	1c8a      	addeq	r2, r1, #2
 800a30c:	2100      	movne	r1, #0
 800a30e:	bf08      	it	eq
 800a310:	2101      	moveq	r1, #1
 800a312:	3801      	subs	r0, #1
 800a314:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a318:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a31c:	42a8      	cmp	r0, r5
 800a31e:	d1fb      	bne.n	800a318 <__sccl+0x1c>
 800a320:	b90b      	cbnz	r3, 800a326 <__sccl+0x2a>
 800a322:	1e50      	subs	r0, r2, #1
 800a324:	bd70      	pop	{r4, r5, r6, pc}
 800a326:	f081 0101 	eor.w	r1, r1, #1
 800a32a:	54e1      	strb	r1, [r4, r3]
 800a32c:	4610      	mov	r0, r2
 800a32e:	4602      	mov	r2, r0
 800a330:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a334:	2d2d      	cmp	r5, #45	@ 0x2d
 800a336:	d005      	beq.n	800a344 <__sccl+0x48>
 800a338:	2d5d      	cmp	r5, #93	@ 0x5d
 800a33a:	d016      	beq.n	800a36a <__sccl+0x6e>
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	d0f1      	beq.n	800a324 <__sccl+0x28>
 800a340:	462b      	mov	r3, r5
 800a342:	e7f2      	b.n	800a32a <__sccl+0x2e>
 800a344:	7846      	ldrb	r6, [r0, #1]
 800a346:	2e5d      	cmp	r6, #93	@ 0x5d
 800a348:	d0fa      	beq.n	800a340 <__sccl+0x44>
 800a34a:	42b3      	cmp	r3, r6
 800a34c:	dcf8      	bgt.n	800a340 <__sccl+0x44>
 800a34e:	3002      	adds	r0, #2
 800a350:	461a      	mov	r2, r3
 800a352:	3201      	adds	r2, #1
 800a354:	4296      	cmp	r6, r2
 800a356:	54a1      	strb	r1, [r4, r2]
 800a358:	dcfb      	bgt.n	800a352 <__sccl+0x56>
 800a35a:	1af2      	subs	r2, r6, r3
 800a35c:	3a01      	subs	r2, #1
 800a35e:	1c5d      	adds	r5, r3, #1
 800a360:	42b3      	cmp	r3, r6
 800a362:	bfa8      	it	ge
 800a364:	2200      	movge	r2, #0
 800a366:	18ab      	adds	r3, r5, r2
 800a368:	e7e1      	b.n	800a32e <__sccl+0x32>
 800a36a:	4610      	mov	r0, r2
 800a36c:	e7da      	b.n	800a324 <__sccl+0x28>

0800a36e <__submore>:
 800a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a372:	460c      	mov	r4, r1
 800a374:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a37a:	4299      	cmp	r1, r3
 800a37c:	d11d      	bne.n	800a3ba <__submore+0x4c>
 800a37e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a382:	f7fb ffd9 	bl	8006338 <_malloc_r>
 800a386:	b918      	cbnz	r0, 800a390 <__submore+0x22>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a394:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a396:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a39a:	6360      	str	r0, [r4, #52]	@ 0x34
 800a39c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a3a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a3a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a3a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a3ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a3b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a3b4:	6020      	str	r0, [r4, #0]
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	e7e8      	b.n	800a38c <__submore+0x1e>
 800a3ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a3bc:	0077      	lsls	r7, r6, #1
 800a3be:	463a      	mov	r2, r7
 800a3c0:	f7fc f84e 	bl	8006460 <_realloc_r>
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0de      	beq.n	800a388 <__submore+0x1a>
 800a3ca:	eb00 0806 	add.w	r8, r0, r6
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	f7fd fdb3 	bl	8007f3e <memcpy>
 800a3d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a3dc:	f8c4 8000 	str.w	r8, [r4]
 800a3e0:	e7e9      	b.n	800a3b6 <__submore+0x48>

0800a3e2 <memmove>:
 800a3e2:	4288      	cmp	r0, r1
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	eb01 0402 	add.w	r4, r1, r2
 800a3ea:	d902      	bls.n	800a3f2 <memmove+0x10>
 800a3ec:	4284      	cmp	r4, r0
 800a3ee:	4623      	mov	r3, r4
 800a3f0:	d807      	bhi.n	800a402 <memmove+0x20>
 800a3f2:	1e43      	subs	r3, r0, #1
 800a3f4:	42a1      	cmp	r1, r4
 800a3f6:	d008      	beq.n	800a40a <memmove+0x28>
 800a3f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a400:	e7f8      	b.n	800a3f4 <memmove+0x12>
 800a402:	4402      	add	r2, r0
 800a404:	4601      	mov	r1, r0
 800a406:	428a      	cmp	r2, r1
 800a408:	d100      	bne.n	800a40c <memmove+0x2a>
 800a40a:	bd10      	pop	{r4, pc}
 800a40c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a410:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a414:	e7f7      	b.n	800a406 <memmove+0x24>
	...

0800a418 <__gettzinfo>:
 800a418:	4800      	ldr	r0, [pc, #0]	@ (800a41c <__gettzinfo+0x4>)
 800a41a:	4770      	bx	lr
 800a41c:	20000220 	.word	0x20000220

0800a420 <_fstat_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	@ (800a440 <_fstat_r+0x20>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	4611      	mov	r1, r2
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	f7f8 ffaf 	bl	8003390 <_fstat>
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	d102      	bne.n	800a43c <_fstat_r+0x1c>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	b103      	cbz	r3, 800a43c <_fstat_r+0x1c>
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	bd38      	pop	{r3, r4, r5, pc}
 800a43e:	bf00      	nop
 800a440:	20000e68 	.word	0x20000e68

0800a444 <_isatty_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d06      	ldr	r5, [pc, #24]	@ (800a460 <_isatty_r+0x1c>)
 800a448:	2300      	movs	r3, #0
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	f7f8 ffae 	bl	80033b0 <_isatty>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_isatty_r+0x1a>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_isatty_r+0x1a>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	20000e68 	.word	0x20000e68

0800a464 <__assert_func>:
 800a464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a466:	4614      	mov	r4, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	4b09      	ldr	r3, [pc, #36]	@ (800a490 <__assert_func+0x2c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4605      	mov	r5, r0
 800a470:	68d8      	ldr	r0, [r3, #12]
 800a472:	b14c      	cbz	r4, 800a488 <__assert_func+0x24>
 800a474:	4b07      	ldr	r3, [pc, #28]	@ (800a494 <__assert_func+0x30>)
 800a476:	9100      	str	r1, [sp, #0]
 800a478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a47c:	4906      	ldr	r1, [pc, #24]	@ (800a498 <__assert_func+0x34>)
 800a47e:	462b      	mov	r3, r5
 800a480:	f7fc fd16 	bl	8006eb0 <fiprintf>
 800a484:	f000 f8a8 	bl	800a5d8 <abort>
 800a488:	4b04      	ldr	r3, [pc, #16]	@ (800a49c <__assert_func+0x38>)
 800a48a:	461c      	mov	r4, r3
 800a48c:	e7f3      	b.n	800a476 <__assert_func+0x12>
 800a48e:	bf00      	nop
 800a490:	200001cc 	.word	0x200001cc
 800a494:	0800b101 	.word	0x0800b101
 800a498:	0800b10e 	.word	0x0800b10e
 800a49c:	0800b13c 	.word	0x0800b13c

0800a4a0 <_calloc_r>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a4a6:	b934      	cbnz	r4, 800a4b6 <_calloc_r+0x16>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7fb ff45 	bl	8006338 <_malloc_r>
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	b928      	cbnz	r0, 800a4be <_calloc_r+0x1e>
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	220c      	movs	r2, #12
 800a4b8:	6002      	str	r2, [r0, #0]
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	e7f9      	b.n	800a4b2 <_calloc_r+0x12>
 800a4be:	462a      	mov	r2, r5
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	f7fc fef3 	bl	80072ac <memset>
 800a4c6:	e7f4      	b.n	800a4b2 <_calloc_r+0x12>

0800a4c8 <__env_lock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	@ (800a4d0 <__env_lock+0x8>)
 800a4ca:	f7fd bd2d 	b.w	8007f28 <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20000e6d 	.word	0x20000e6d

0800a4d4 <__env_unlock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	@ (800a4dc <__env_unlock+0x8>)
 800a4d6:	f7fd bd29 	b.w	8007f2c <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000e6d 	.word	0x20000e6d

0800a4e0 <_strtol_l.isra.0>:
 800a4e0:	2b24      	cmp	r3, #36	@ 0x24
 800a4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e6:	4686      	mov	lr, r0
 800a4e8:	4690      	mov	r8, r2
 800a4ea:	d801      	bhi.n	800a4f0 <_strtol_l.isra.0+0x10>
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d106      	bne.n	800a4fe <_strtol_l.isra.0+0x1e>
 800a4f0:	f7fd fcee 	bl	8007ed0 <__errno>
 800a4f4:	2316      	movs	r3, #22
 800a4f6:	6003      	str	r3, [r0, #0]
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fe:	4834      	ldr	r0, [pc, #208]	@ (800a5d0 <_strtol_l.isra.0+0xf0>)
 800a500:	460d      	mov	r5, r1
 800a502:	462a      	mov	r2, r5
 800a504:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a508:	5d06      	ldrb	r6, [r0, r4]
 800a50a:	f016 0608 	ands.w	r6, r6, #8
 800a50e:	d1f8      	bne.n	800a502 <_strtol_l.isra.0+0x22>
 800a510:	2c2d      	cmp	r4, #45	@ 0x2d
 800a512:	d110      	bne.n	800a536 <_strtol_l.isra.0+0x56>
 800a514:	782c      	ldrb	r4, [r5, #0]
 800a516:	2601      	movs	r6, #1
 800a518:	1c95      	adds	r5, r2, #2
 800a51a:	f033 0210 	bics.w	r2, r3, #16
 800a51e:	d115      	bne.n	800a54c <_strtol_l.isra.0+0x6c>
 800a520:	2c30      	cmp	r4, #48	@ 0x30
 800a522:	d10d      	bne.n	800a540 <_strtol_l.isra.0+0x60>
 800a524:	782a      	ldrb	r2, [r5, #0]
 800a526:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a52a:	2a58      	cmp	r2, #88	@ 0x58
 800a52c:	d108      	bne.n	800a540 <_strtol_l.isra.0+0x60>
 800a52e:	786c      	ldrb	r4, [r5, #1]
 800a530:	3502      	adds	r5, #2
 800a532:	2310      	movs	r3, #16
 800a534:	e00a      	b.n	800a54c <_strtol_l.isra.0+0x6c>
 800a536:	2c2b      	cmp	r4, #43	@ 0x2b
 800a538:	bf04      	itt	eq
 800a53a:	782c      	ldrbeq	r4, [r5, #0]
 800a53c:	1c95      	addeq	r5, r2, #2
 800a53e:	e7ec      	b.n	800a51a <_strtol_l.isra.0+0x3a>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1f6      	bne.n	800a532 <_strtol_l.isra.0+0x52>
 800a544:	2c30      	cmp	r4, #48	@ 0x30
 800a546:	bf14      	ite	ne
 800a548:	230a      	movne	r3, #10
 800a54a:	2308      	moveq	r3, #8
 800a54c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a550:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a554:	2200      	movs	r2, #0
 800a556:	fbbc f9f3 	udiv	r9, ip, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a560:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a564:	2f09      	cmp	r7, #9
 800a566:	d80f      	bhi.n	800a588 <_strtol_l.isra.0+0xa8>
 800a568:	463c      	mov	r4, r7
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	dd1b      	ble.n	800a5a6 <_strtol_l.isra.0+0xc6>
 800a56e:	1c57      	adds	r7, r2, #1
 800a570:	d007      	beq.n	800a582 <_strtol_l.isra.0+0xa2>
 800a572:	4581      	cmp	r9, r0
 800a574:	d314      	bcc.n	800a5a0 <_strtol_l.isra.0+0xc0>
 800a576:	d101      	bne.n	800a57c <_strtol_l.isra.0+0x9c>
 800a578:	45a2      	cmp	sl, r4
 800a57a:	db11      	blt.n	800a5a0 <_strtol_l.isra.0+0xc0>
 800a57c:	fb00 4003 	mla	r0, r0, r3, r4
 800a580:	2201      	movs	r2, #1
 800a582:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a586:	e7eb      	b.n	800a560 <_strtol_l.isra.0+0x80>
 800a588:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a58c:	2f19      	cmp	r7, #25
 800a58e:	d801      	bhi.n	800a594 <_strtol_l.isra.0+0xb4>
 800a590:	3c37      	subs	r4, #55	@ 0x37
 800a592:	e7ea      	b.n	800a56a <_strtol_l.isra.0+0x8a>
 800a594:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a598:	2f19      	cmp	r7, #25
 800a59a:	d804      	bhi.n	800a5a6 <_strtol_l.isra.0+0xc6>
 800a59c:	3c57      	subs	r4, #87	@ 0x57
 800a59e:	e7e4      	b.n	800a56a <_strtol_l.isra.0+0x8a>
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a4:	e7ed      	b.n	800a582 <_strtol_l.isra.0+0xa2>
 800a5a6:	1c53      	adds	r3, r2, #1
 800a5a8:	d108      	bne.n	800a5bc <_strtol_l.isra.0+0xdc>
 800a5aa:	2322      	movs	r3, #34	@ 0x22
 800a5ac:	f8ce 3000 	str.w	r3, [lr]
 800a5b0:	4660      	mov	r0, ip
 800a5b2:	f1b8 0f00 	cmp.w	r8, #0
 800a5b6:	d0a0      	beq.n	800a4fa <_strtol_l.isra.0+0x1a>
 800a5b8:	1e69      	subs	r1, r5, #1
 800a5ba:	e006      	b.n	800a5ca <_strtol_l.isra.0+0xea>
 800a5bc:	b106      	cbz	r6, 800a5c0 <_strtol_l.isra.0+0xe0>
 800a5be:	4240      	negs	r0, r0
 800a5c0:	f1b8 0f00 	cmp.w	r8, #0
 800a5c4:	d099      	beq.n	800a4fa <_strtol_l.isra.0+0x1a>
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d1f6      	bne.n	800a5b8 <_strtol_l.isra.0+0xd8>
 800a5ca:	f8c8 1000 	str.w	r1, [r8]
 800a5ce:	e794      	b.n	800a4fa <_strtol_l.isra.0+0x1a>
 800a5d0:	0800ae65 	.word	0x0800ae65

0800a5d4 <_strtol_r>:
 800a5d4:	f7ff bf84 	b.w	800a4e0 <_strtol_l.isra.0>

0800a5d8 <abort>:
 800a5d8:	b508      	push	{r3, lr}
 800a5da:	2006      	movs	r0, #6
 800a5dc:	f000 f82c 	bl	800a638 <raise>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7f8 fe85 	bl	80032f0 <_exit>

0800a5e6 <_raise_r>:
 800a5e6:	291f      	cmp	r1, #31
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	d904      	bls.n	800a5fa <_raise_r+0x14>
 800a5f0:	2316      	movs	r3, #22
 800a5f2:	6003      	str	r3, [r0, #0]
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	bd38      	pop	{r3, r4, r5, pc}
 800a5fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5fc:	b112      	cbz	r2, 800a604 <_raise_r+0x1e>
 800a5fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a602:	b94b      	cbnz	r3, 800a618 <_raise_r+0x32>
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f831 	bl	800a66c <_getpid_r>
 800a60a:	4622      	mov	r2, r4
 800a60c:	4601      	mov	r1, r0
 800a60e:	4628      	mov	r0, r5
 800a610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a614:	f000 b818 	b.w	800a648 <_kill_r>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d00a      	beq.n	800a632 <_raise_r+0x4c>
 800a61c:	1c59      	adds	r1, r3, #1
 800a61e:	d103      	bne.n	800a628 <_raise_r+0x42>
 800a620:	2316      	movs	r3, #22
 800a622:	6003      	str	r3, [r0, #0]
 800a624:	2001      	movs	r0, #1
 800a626:	e7e7      	b.n	800a5f8 <_raise_r+0x12>
 800a628:	2100      	movs	r1, #0
 800a62a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a62e:	4620      	mov	r0, r4
 800a630:	4798      	blx	r3
 800a632:	2000      	movs	r0, #0
 800a634:	e7e0      	b.n	800a5f8 <_raise_r+0x12>
	...

0800a638 <raise>:
 800a638:	4b02      	ldr	r3, [pc, #8]	@ (800a644 <raise+0xc>)
 800a63a:	4601      	mov	r1, r0
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	f7ff bfd2 	b.w	800a5e6 <_raise_r>
 800a642:	bf00      	nop
 800a644:	200001cc 	.word	0x200001cc

0800a648 <_kill_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d07      	ldr	r5, [pc, #28]	@ (800a668 <_kill_r+0x20>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	4608      	mov	r0, r1
 800a652:	4611      	mov	r1, r2
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	f7f8 fe3b 	bl	80032d0 <_kill>
 800a65a:	1c43      	adds	r3, r0, #1
 800a65c:	d102      	bne.n	800a664 <_kill_r+0x1c>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	b103      	cbz	r3, 800a664 <_kill_r+0x1c>
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	bf00      	nop
 800a668:	20000e68 	.word	0x20000e68

0800a66c <_getpid_r>:
 800a66c:	f7f8 be28 	b.w	80032c0 <_getpid>

0800a670 <_init>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr

0800a67c <_fini>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	bf00      	nop
 800a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a682:	bc08      	pop	{r3}
 800a684:	469e      	mov	lr, r3
 800a686:	4770      	bx	lr
