
SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  0800af18  0800af18  0000bf18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b978  0800b978  0000d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b978  0800b978  0000c978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b980  0800b980  0000d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b980  0800b980  0000c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b984  0800b984  0000c984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800b988  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  20000210  0800bb98  0000d210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce0  0800bb98  0000dce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c86  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cac  00000000  00000000  0001dec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00020b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00025506  00000000  00000000  00021938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013305  00000000  00000000  00046e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d4694  00000000  00000000  0005a143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012e7d7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000aba  00000000  00000000  0012e81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f84  00000000  00000000  0012f2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00134258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af00 	.word	0x0800af00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800af00 	.word	0x0800af00

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9be 	b.w	8000fdc <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff5b 	bl	8000b3c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fcd1 	bl	8000658 <__aeabi_dmul>
 8000cb6:	f7ff ffa7 	bl	8000c08 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc52 	bl	8000564 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fcc8 	bl	8000658 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fb0a 	bl	80002e8 <__aeabi_dsub>
 8000cd4:	f7ff ff98 	bl	8000c08 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	468e      	mov	lr, r1
 8000cec:	4604      	mov	r4, r0
 8000cee:	4688      	mov	r8, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <__udivmoddi4+0xa6>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	d962      	bls.n	8000dc0 <__udivmoddi4+0xdc>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	b14e      	cbz	r6, 8000d14 <__udivmoddi4+0x30>
 8000d00:	f1c6 0320 	rsb	r3, r6, #32
 8000d04:	fa01 f806 	lsl.w	r8, r1, r6
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	40b7      	lsls	r7, r6
 8000d0e:	ea43 0808 	orr.w	r8, r3, r8
 8000d12:	40b4      	lsls	r4, r6
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d20:	0c23      	lsrs	r3, r4, #16
 8000d22:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x62>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d38:	f080 80ea 	bcs.w	8000f10 <__udivmoddi4+0x22c>
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f240 80e7 	bls.w	8000f10 <__udivmoddi4+0x22c>
 8000d42:	3902      	subs	r1, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	1a9a      	subs	r2, r3, r2
 8000d48:	b2a3      	uxth	r3, r4
 8000d4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d56:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5a:	459c      	cmp	ip, r3
 8000d5c:	d909      	bls.n	8000d72 <__udivmoddi4+0x8e>
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d64:	f080 80d6 	bcs.w	8000f14 <__udivmoddi4+0x230>
 8000d68:	459c      	cmp	ip, r3
 8000d6a:	f240 80d3 	bls.w	8000f14 <__udivmoddi4+0x230>
 8000d6e:	443b      	add	r3, r7
 8000d70:	3802      	subs	r0, #2
 8000d72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d76:	eba3 030c 	sub.w	r3, r3, ip
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	b11d      	cbz	r5, 8000d86 <__udivmoddi4+0xa2>
 8000d7e:	40f3      	lsrs	r3, r6
 8000d80:	2200      	movs	r2, #0
 8000d82:	e9c5 3200 	strd	r3, r2, [r5]
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d905      	bls.n	8000d9a <__udivmoddi4+0xb6>
 8000d8e:	b10d      	cbz	r5, 8000d94 <__udivmoddi4+0xb0>
 8000d90:	e9c5 0100 	strd	r0, r1, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	4608      	mov	r0, r1
 8000d98:	e7f5      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000d9a:	fab3 f183 	clz	r1, r3
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d146      	bne.n	8000e30 <__udivmoddi4+0x14c>
 8000da2:	4573      	cmp	r3, lr
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xc8>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 8105 	bhi.w	8000fb6 <__udivmoddi4+0x2d2>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb6e 0203 	sbc.w	r2, lr, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	4690      	mov	r8, r2
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e5      	beq.n	8000d86 <__udivmoddi4+0xa2>
 8000dba:	e9c5 4800 	strd	r4, r8, [r5]
 8000dbe:	e7e2      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f000 8090 	beq.w	8000ee6 <__udivmoddi4+0x202>
 8000dc6:	fab2 f682 	clz	r6, r2
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	f040 80a4 	bne.w	8000f18 <__udivmoddi4+0x234>
 8000dd0:	1a8a      	subs	r2, r1, r2
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd8:	b280      	uxth	r0, r0
 8000dda:	b2bc      	uxth	r4, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb2 fcfe 	udiv	ip, r2, lr
 8000de2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb04 f20c 	mul.w	r2, r4, ip
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x11e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x11c>
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	f200 80e0 	bhi.w	8000fc0 <__udivmoddi4+0x2dc>
 8000e00:	46c4      	mov	ip, r8
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e08:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e0c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e10:	fb02 f404 	mul.w	r4, r2, r4
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0x144>
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x142>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f200 80ca 	bhi.w	8000fba <__udivmoddi4+0x2d6>
 8000e26:	4602      	mov	r2, r0
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e2e:	e7a5      	b.n	8000d7c <__udivmoddi4+0x98>
 8000e30:	f1c1 0620 	rsb	r6, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3a:	431f      	orrs	r7, r3
 8000e3c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e40:	fa20 f306 	lsr.w	r3, r0, r6
 8000e44:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	fa1f fc87 	uxth.w	ip, r7
 8000e56:	fbbe f0f9 	udiv	r0, lr, r9
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e60:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e64:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6e:	d909      	bls.n	8000e84 <__udivmoddi4+0x1a0>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e76:	f080 809c 	bcs.w	8000fb2 <__udivmoddi4+0x2ce>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f240 8099 	bls.w	8000fb2 <__udivmoddi4+0x2ce>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	eba4 040e 	sub.w	r4, r4, lr
 8000e88:	fa1f fe83 	uxth.w	lr, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e98:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e9c:	45a4      	cmp	ip, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1ce>
 8000ea0:	193c      	adds	r4, r7, r4
 8000ea2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ea6:	f080 8082 	bcs.w	8000fae <__udivmoddi4+0x2ca>
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d97f      	bls.n	8000fae <__udivmoddi4+0x2ca>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	443c      	add	r4, r7
 8000eb2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eb6:	eba4 040c 	sub.w	r4, r4, ip
 8000eba:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ebe:	4564      	cmp	r4, ip
 8000ec0:	4673      	mov	r3, lr
 8000ec2:	46e1      	mov	r9, ip
 8000ec4:	d362      	bcc.n	8000f8c <__udivmoddi4+0x2a8>
 8000ec6:	d05f      	beq.n	8000f88 <__udivmoddi4+0x2a4>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x1fe>
 8000eca:	ebb8 0203 	subs.w	r2, r8, r3
 8000ece:	eb64 0409 	sbc.w	r4, r4, r9
 8000ed2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eda:	431e      	orrs	r6, r3
 8000edc:	40cc      	lsrs	r4, r1
 8000ede:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e74f      	b.n	8000d86 <__udivmoddi4+0xa2>
 8000ee6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eea:	0c01      	lsrs	r1, r0, #16
 8000eec:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef0:	b280      	uxth	r0, r0
 8000ef2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4638      	mov	r0, r7
 8000efa:	463c      	mov	r4, r7
 8000efc:	46b8      	mov	r8, r7
 8000efe:	46be      	mov	lr, r7
 8000f00:	2620      	movs	r6, #32
 8000f02:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f06:	eba2 0208 	sub.w	r2, r2, r8
 8000f0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f0e:	e766      	b.n	8000dde <__udivmoddi4+0xfa>
 8000f10:	4601      	mov	r1, r0
 8000f12:	e718      	b.n	8000d46 <__udivmoddi4+0x62>
 8000f14:	4610      	mov	r0, r2
 8000f16:	e72c      	b.n	8000d72 <__udivmoddi4+0x8e>
 8000f18:	f1c6 0220 	rsb	r2, r6, #32
 8000f1c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f20:	40b7      	lsls	r7, r6
 8000f22:	40b1      	lsls	r1, r6
 8000f24:	fa20 f202 	lsr.w	r2, r0, r2
 8000f28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f32:	b2bc      	uxth	r4, r7
 8000f34:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f38:	0c11      	lsrs	r1, r2, #16
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb08 f904 	mul.w	r9, r8, r4
 8000f42:	40b0      	lsls	r0, r6
 8000f44:	4589      	cmp	r9, r1
 8000f46:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f4a:	b280      	uxth	r0, r0
 8000f4c:	d93e      	bls.n	8000fcc <__udivmoddi4+0x2e8>
 8000f4e:	1879      	adds	r1, r7, r1
 8000f50:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f54:	d201      	bcs.n	8000f5a <__udivmoddi4+0x276>
 8000f56:	4589      	cmp	r9, r1
 8000f58:	d81f      	bhi.n	8000f9a <__udivmoddi4+0x2b6>
 8000f5a:	eba1 0109 	sub.w	r1, r1, r9
 8000f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f62:	fb09 f804 	mul.w	r8, r9, r4
 8000f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d229      	bcs.n	8000fc8 <__udivmoddi4+0x2e4>
 8000f74:	18ba      	adds	r2, r7, r2
 8000f76:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f7a:	d2c4      	bcs.n	8000f06 <__udivmoddi4+0x222>
 8000f7c:	4542      	cmp	r2, r8
 8000f7e:	d2c2      	bcs.n	8000f06 <__udivmoddi4+0x222>
 8000f80:	f1a9 0102 	sub.w	r1, r9, #2
 8000f84:	443a      	add	r2, r7
 8000f86:	e7be      	b.n	8000f06 <__udivmoddi4+0x222>
 8000f88:	45f0      	cmp	r8, lr
 8000f8a:	d29d      	bcs.n	8000ec8 <__udivmoddi4+0x1e4>
 8000f8c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f90:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f94:	3801      	subs	r0, #1
 8000f96:	46e1      	mov	r9, ip
 8000f98:	e796      	b.n	8000ec8 <__udivmoddi4+0x1e4>
 8000f9a:	eba7 0909 	sub.w	r9, r7, r9
 8000f9e:	4449      	add	r1, r9
 8000fa0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fa4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa8:	fb09 f804 	mul.w	r8, r9, r4
 8000fac:	e7db      	b.n	8000f66 <__udivmoddi4+0x282>
 8000fae:	4673      	mov	r3, lr
 8000fb0:	e77f      	b.n	8000eb2 <__udivmoddi4+0x1ce>
 8000fb2:	4650      	mov	r0, sl
 8000fb4:	e766      	b.n	8000e84 <__udivmoddi4+0x1a0>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e6fd      	b.n	8000db6 <__udivmoddi4+0xd2>
 8000fba:	443b      	add	r3, r7
 8000fbc:	3a02      	subs	r2, #2
 8000fbe:	e733      	b.n	8000e28 <__udivmoddi4+0x144>
 8000fc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc4:	443b      	add	r3, r7
 8000fc6:	e71c      	b.n	8000e02 <__udivmoddi4+0x11e>
 8000fc8:	4649      	mov	r1, r9
 8000fca:	e79c      	b.n	8000f06 <__udivmoddi4+0x222>
 8000fcc:	eba1 0109 	sub.w	r1, r1, r9
 8000fd0:	46c4      	mov	ip, r8
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fb09 f804 	mul.w	r8, r9, r4
 8000fda:	e7c4      	b.n	8000f66 <__udivmoddi4+0x282>

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <cJSON_GetErrorPtr>:
    size_t position;
} error;
static error global_error = { NULL, 0 };

CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    return (const char*) (global_error.json + global_error.position);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <cJSON_GetErrorPtr+0x18>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <cJSON_GetErrorPtr+0x18>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4413      	add	r3, r2
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	2000022c 	.word	0x2000022c

08000ffc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <case_insensitive_strcmp+0x16>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001012:	2301      	movs	r3, #1
 8001014:	e056      	b.n	80010c4 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d10d      	bne.n	800103a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e050      	b.n	80010c4 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800102a:	2300      	movs	r3, #0
 800102c:	e04a      	b.n	80010c4 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3301      	adds	r3, #1
 8001044:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <case_insensitive_strcmp+0xd4>)
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d103      	bne.n	800105a <case_insensitive_strcmp+0x5e>
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f103 0220 	add.w	r2, r3, #32
 8001058:	e000      	b.n	800105c <case_insensitive_strcmp+0x60>
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	73bb      	strb	r3, [r7, #14]
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	3301      	adds	r3, #1
 8001066:	491a      	ldr	r1, [pc, #104]	@ (80010d0 <case_insensitive_strcmp+0xd4>)
 8001068:	440b      	add	r3, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d102      	bne.n	800107a <case_insensitive_strcmp+0x7e>
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	3320      	adds	r3, #32
 8001078:	e000      	b.n	800107c <case_insensitive_strcmp+0x80>
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	429a      	cmp	r2, r3
 800107e:	d0d0      	beq.n	8001022 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	737b      	strb	r3, [r7, #13]
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	3301      	adds	r3, #1
 800108a:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <case_insensitive_strcmp+0xd4>)
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <case_insensitive_strcmp+0xa4>
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	f103 0220 	add.w	r2, r3, #32
 800109e:	e000      	b.n	80010a2 <case_insensitive_strcmp+0xa6>
 80010a0:	7b7a      	ldrb	r2, [r7, #13]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	733b      	strb	r3, [r7, #12]
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <case_insensitive_strcmp+0xd4>)
 80010ae:	440b      	add	r3, r1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d102      	bne.n	80010c0 <case_insensitive_strcmp+0xc4>
 80010ba:	7b3b      	ldrb	r3, [r7, #12]
 80010bc:	3320      	adds	r3, #32
 80010be:	e000      	b.n	80010c2 <case_insensitive_strcmp+0xc6>
 80010c0:	7b3b      	ldrb	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	0800b778 	.word	0x0800b778

080010d4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2028      	movs	r0, #40	@ 0x28
 80010e2:	4798      	blx	r3
 80010e4:	60f8      	str	r0, [r7, #12]
    if (node)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010ec:	2228      	movs	r2, #40	@ 0x28
 80010ee:	2100      	movs	r1, #0
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f006 fe95 	bl	8007e20 <memset>
    }

    return node;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800110c:	e037      	b.n	800117e <cJSON_Delete+0x7e>
    {
        next = item->next;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <cJSON_Delete+0x32>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffe7 	bl	8001100 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <cJSON_Delete+0x52>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <cJSON_Delete+0x90>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6912      	ldr	r2, [r2, #16]
 800114e:	4610      	mov	r0, r2
 8001150:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <cJSON_Delete+0x72>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <cJSON_Delete+0x90>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6a12      	ldr	r2, [r2, #32]
 800116e:	4610      	mov	r0, r2
 8001170:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <cJSON_Delete+0x90>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	4798      	blx	r3
        item = next;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1c4      	bne.n	800110e <cJSON_Delete+0xe>
    }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000030 	.word	0x20000030

08001194 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001198:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	0000      	movs	r0, r0
	...

080011a8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	@ 0x60
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80011c2:	f7ff ffe7 	bl	8001194 <get_decimal_point>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <parse_number+0x36>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <parse_number+0x3a>
    {
        return false;
 80011de:	2300      	movs	r3, #0
 80011e0:	e0a0      	b.n	8001324 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011e6:	e03d      	b.n	8001264 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6899      	ldr	r1, [r3, #8]
 80011f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011f2:	440b      	add	r3, r1
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b45      	cmp	r3, #69	@ 0x45
 80011fa:	dc17      	bgt.n	800122c <parse_number+0x84>
 80011fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80011fe:	db40      	blt.n	8001282 <parse_number+0xda>
 8001200:	3b2b      	subs	r3, #43	@ 0x2b
 8001202:	2201      	movs	r2, #1
 8001204:	409a      	lsls	r2, r3
 8001206:	4b4c      	ldr	r3, [pc, #304]	@ (8001338 <parse_number+0x190>)
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10b      	bne.n	8001230 <parse_number+0x88>
 8001218:	f002 0308 	and.w	r3, r2, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d111      	bne.n	800124e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800122a:	e02a      	b.n	8001282 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800122c:	2b65      	cmp	r3, #101	@ 0x65
 800122e:	d128      	bne.n	8001282 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6899      	ldr	r1, [r3, #8]
 8001238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800123a:	440b      	add	r3, r1
 800123c:	4413      	add	r3, r2
 800123e:	7819      	ldrb	r1, [r3, #0]
 8001240:	f107 0208 	add.w	r2, r7, #8
 8001244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
                break;
 800124c:	e007      	b.n	800125e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800124e:	f107 0208 	add.w	r2, r7, #8
 8001252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001254:	4413      	add	r3, r2
 8001256:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800125a:	701a      	strb	r2, [r3, #0]
                break;
 800125c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001260:	3301      	adds	r3, #1
 8001262:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001266:	2b3e      	cmp	r3, #62	@ 0x3e
 8001268:	d80d      	bhi.n	8001286 <parse_number+0xde>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00a      	beq.n	8001286 <parse_number+0xde>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001276:	441a      	add	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3b3      	bcc.n	80011e8 <parse_number+0x40>
        }
    }
loop_end:
 8001280:	e001      	b.n	8001286 <parse_number+0xde>
                goto loop_end;
 8001282:	bf00      	nop
 8001284:	e000      	b.n	8001288 <parse_number+0xe0>
loop_end:
 8001286:	bf00      	nop
    number_c_string[i] = '\0';
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001294:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 feba 	bl	8007018 <strtod>
 80012a4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80012a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d101      	bne.n	80012b6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80012b2:	2300      	movs	r3, #0
 80012b4:	e036      	b.n	8001324 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012bc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80012c0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001330 <parse_number+0x188>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012ca:	f7ff fc4b 	bl	8000b64 <__aeabi_dcmpge>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	e015      	b.n	800130a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <parse_number+0x194>)
 80012e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012e8:	f7ff fc32 	bl	8000b50 <__aeabi_dcmple>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	e006      	b.n	800130a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80012fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001300:	f7ff fc5a 	bl	8000bb8 <__aeabi_d2iz>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2208      	movs	r2, #8
 800130e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	1a8a      	subs	r2, r1, r2
 800131c:	441a      	add	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	609a      	str	r2, [r3, #8]
    return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3760      	adds	r7, #96	@ 0x60
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	ffc00000 	.word	0xffc00000
 8001334:	41dfffff 	.word	0x41dfffff
 8001338:	04007fe5 	.word	0x04007fe5
 800133c:	c1e00000 	.word	0xc1e00000

08001340 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	e04c      	b.n	80013f0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001360:	d90f      	bls.n	8001382 <parse_hex4+0x42>
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b39      	cmp	r3, #57	@ 0x39
 800136c:	d809      	bhi.n	8001382 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	3b30      	subs	r3, #48	@ 0x30
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e02d      	b.n	80013de <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b40      	cmp	r3, #64	@ 0x40
 800138c:	d90f      	bls.n	80013ae <parse_hex4+0x6e>
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b46      	cmp	r3, #70	@ 0x46
 8001398:	d809      	bhi.n	80013ae <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	3b37      	subs	r3, #55	@ 0x37
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e017      	b.n	80013de <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b60      	cmp	r3, #96	@ 0x60
 80013b8:	d90f      	bls.n	80013da <parse_hex4+0x9a>
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b66      	cmp	r3, #102	@ 0x66
 80013c4:	d809      	bhi.n	80013da <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	3b57      	subs	r3, #87	@ 0x57
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e001      	b.n	80013de <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	e00c      	b.n	80013f8 <parse_hex4+0xb8>
        }

        if (i < 3)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d802      	bhi.n	80013ea <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d9af      	bls.n	8001356 <parse_hex4+0x16>
        }
    }

    return h;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b05      	cmp	r3, #5
 800143c:	f340 80b7 	ble.w	80015ae <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	3302      	adds	r3, #2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff7b 	bl	8001340 <parse_hex4>
 800144a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001452:	d304      	bcc.n	800145e <utf16_literal_to_utf8+0x5a>
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800145a:	f0c0 80aa 	bcc.w	80015b2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001464:	d337      	bcc.n	80014d6 <utf16_literal_to_utf8+0xd2>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800146c:	d233      	bcs.n	80014d6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3306      	adds	r3, #6
 8001472:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001478:	230c      	movs	r3, #12
 800147a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b05      	cmp	r3, #5
 8001486:	f340 8096 	ble.w	80015b6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001490:	f040 8093 	bne.w	80015ba <utf16_literal_to_utf8+0x1b6>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b75      	cmp	r3, #117	@ 0x75
 800149c:	f040 808d 	bne.w	80015ba <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3302      	adds	r3, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff4b 	bl	8001340 <parse_hex4>
 80014aa:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80014b2:	f0c0 8084 	bcc.w	80015be <utf16_literal_to_utf8+0x1ba>
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80014bc:	d27f      	bcs.n	80015be <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	029a      	lsls	r2, r3, #10
 80014c2:	4b43      	ldr	r3, [pc, #268]	@ (80015d0 <utf16_literal_to_utf8+0x1cc>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80014d4:	e004      	b.n	80014e0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80014d6:	2306      	movs	r3, #6
 80014d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e4:	d803      	bhi.n	80014ee <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014ec:	e01f      	b.n	800152e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014f4:	d206      	bcs.n	8001504 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80014fc:	23c0      	movs	r3, #192	@ 0xc0
 80014fe:	f887 3020 	strb.w	r3, [r7, #32]
 8001502:	e014      	b.n	800152e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150a:	d206      	bcs.n	800151a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800150c:	2303      	movs	r3, #3
 800150e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001512:	23e0      	movs	r3, #224	@ 0xe0
 8001514:	f887 3020 	strb.w	r3, [r7, #32]
 8001518:	e009      	b.n	800152e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001520:	d24f      	bcs.n	80015c2 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001522:	2304      	movs	r3, #4
 8001524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001528:	23f0      	movs	r3, #240	@ 0xf0
 800152a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800152e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001532:	3b01      	subs	r3, #1
 8001534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001538:	e015      	b.n	8001566 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001542:	b2da      	uxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800154c:	440b      	add	r3, r1
 800154e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800155c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001560:	3b01      	subs	r3, #1
 8001562:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001566:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1e5      	bne.n	800153a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800156e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001572:	2b01      	cmp	r3, #1
 8001574:	d909      	bls.n	800158a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001582:	430a      	orrs	r2, r1
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e007      	b.n	800159a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	b2da      	uxtb	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015a2:	441a      	add	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80015a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015ac:	e00b      	b.n	80015c6 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80015ae:	bf00      	nop
 80015b0:	e008      	b.n	80015c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015b2:	bf00      	nop
 80015b4:	e006      	b.n	80015c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015b6:	bf00      	nop
 80015b8:	e004      	b.n	80015c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015ba:	bf00      	nop
 80015bc:	e002      	b.n	80015c4 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80015be:	bf00      	nop
 80015c0:	e000      	b.n	80015c4 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80015c2:	bf00      	nop

fail:
    return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	000ffc00 	.word	0x000ffc00

080015d4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b22      	cmp	r3, #34	@ 0x22
 8001610:	f040 8103 	bne.w	800181a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800161c:	e017      	b.n	800164e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b5c      	cmp	r3, #92	@ 0x5c
 8001624:	d110      	bne.n	8001648 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	461a      	mov	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	f080 80f1 	bcs.w	800181e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	3301      	adds	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	3301      	adds	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	3301      	adds	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a3a      	ldr	r2, [r7, #32]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	461a      	mov	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d203      	bcs.n	8001668 <parse_string+0x94>
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b22      	cmp	r3, #34	@ 0x22
 8001666:	d1da      	bne.n	800161e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	461a      	mov	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	f080 80d3 	bcs.w	8001822 <parse_string+0x24e>
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b22      	cmp	r3, #34	@ 0x22
 8001682:	f040 80ce 	bne.w	8001822 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4413      	add	r3, r2
 8001690:	6a3a      	ldr	r2, [r7, #32]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	461a      	mov	r2, r3
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	3201      	adds	r2, #1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4798      	blx	r3
 80016a8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80ba 	beq.w	8001826 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80016b6:	e094      	b.n	80017e2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80016be:	d008      	beq.n	80016d2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80016c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c2:	1c53      	adds	r3, r2, #1
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1c59      	adds	r1, r3, #1
 80016ca:	60f9      	str	r1, [r7, #12]
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e087      	b.n	80017e2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80016d2:	2302      	movs	r3, #2
 80016d4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f340 80a4 	ble.w	800182a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b75      	cmp	r3, #117	@ 0x75
 80016ea:	f300 80a0 	bgt.w	800182e <parse_string+0x25a>
 80016ee:	2b5c      	cmp	r3, #92	@ 0x5c
 80016f0:	da04      	bge.n	80016fc <parse_string+0x128>
 80016f2:	2b22      	cmp	r3, #34	@ 0x22
 80016f4:	d05c      	beq.n	80017b0 <parse_string+0x1dc>
 80016f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80016f8:	d05a      	beq.n	80017b0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80016fa:	e098      	b.n	800182e <parse_string+0x25a>
            switch (input_pointer[1])
 80016fc:	3b5c      	subs	r3, #92	@ 0x5c
 80016fe:	2b19      	cmp	r3, #25
 8001700:	f200 8095 	bhi.w	800182e <parse_string+0x25a>
 8001704:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <parse_string+0x138>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	080017b1 	.word	0x080017b1
 8001710:	0800182f 	.word	0x0800182f
 8001714:	0800182f 	.word	0x0800182f
 8001718:	0800182f 	.word	0x0800182f
 800171c:	0800182f 	.word	0x0800182f
 8001720:	0800182f 	.word	0x0800182f
 8001724:	08001775 	.word	0x08001775
 8001728:	0800182f 	.word	0x0800182f
 800172c:	0800182f 	.word	0x0800182f
 8001730:	0800182f 	.word	0x0800182f
 8001734:	08001781 	.word	0x08001781
 8001738:	0800182f 	.word	0x0800182f
 800173c:	0800182f 	.word	0x0800182f
 8001740:	0800182f 	.word	0x0800182f
 8001744:	0800182f 	.word	0x0800182f
 8001748:	0800182f 	.word	0x0800182f
 800174c:	0800182f 	.word	0x0800182f
 8001750:	0800182f 	.word	0x0800182f
 8001754:	0800178d 	.word	0x0800178d
 8001758:	0800182f 	.word	0x0800182f
 800175c:	0800182f 	.word	0x0800182f
 8001760:	0800182f 	.word	0x0800182f
 8001764:	08001799 	.word	0x08001799
 8001768:	0800182f 	.word	0x0800182f
 800176c:	080017a5 	.word	0x080017a5
 8001770:	080017c1 	.word	0x080017c1
                    *output_pointer++ = '\b';
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60fa      	str	r2, [r7, #12]
 800177a:	2208      	movs	r2, #8
 800177c:	701a      	strb	r2, [r3, #0]
                    break;
 800177e:	e02c      	b.n	80017da <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60fa      	str	r2, [r7, #12]
 8001786:	220c      	movs	r2, #12
 8001788:	701a      	strb	r2, [r3, #0]
                    break;
 800178a:	e026      	b.n	80017da <parse_string+0x206>
                    *output_pointer++ = '\n';
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60fa      	str	r2, [r7, #12]
 8001792:	220a      	movs	r2, #10
 8001794:	701a      	strb	r2, [r3, #0]
                    break;
 8001796:	e020      	b.n	80017da <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60fa      	str	r2, [r7, #12]
 800179e:	220d      	movs	r2, #13
 80017a0:	701a      	strb	r2, [r3, #0]
                    break;
 80017a2:	e01a      	b.n	80017da <parse_string+0x206>
                    *output_pointer++ = '\t';
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60fa      	str	r2, [r7, #12]
 80017aa:	2209      	movs	r2, #9
 80017ac:	701a      	strb	r2, [r3, #0]
                    break;
 80017ae:	e014      	b.n	80017da <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	60f9      	str	r1, [r7, #12]
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	701a      	strb	r2, [r3, #0]
                    break;
 80017be:	e00c      	b.n	80017da <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	461a      	mov	r2, r3
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017ca:	f7ff fe1b 	bl	8001404 <utf16_literal_to_utf8>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02c      	beq.n	8001832 <parse_string+0x25e>
                    break;
 80017d8:	bf00      	nop
            }
            input_pointer += sequence_length;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017de:	4413      	add	r3, r2
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 80017e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	f4ff af66 	bcc.w	80016b8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2210      	movs	r2, #16
 80017f6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a3a      	ldr	r2, [r7, #32]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	461a      	mov	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	609a      	str	r2, [r3, #8]

    return true;
 8001816:	2301      	movs	r3, #1
 8001818:	e01e      	b.n	8001858 <parse_string+0x284>
        goto fail;
 800181a:	bf00      	nop
 800181c:	e00a      	b.n	8001834 <parse_string+0x260>
                    goto fail;
 800181e:	bf00      	nop
 8001820:	e008      	b.n	8001834 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001822:	bf00      	nop
 8001824:	e006      	b.n	8001834 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001826:	bf00      	nop
 8001828:	e004      	b.n	8001834 <parse_string+0x260>
                goto fail;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <parse_string+0x260>
                    goto fail;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <parse_string+0x260>
                        goto fail;
 8001832:	bf00      	nop

fail:
    if (output != NULL)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	69f8      	ldr	r0, [r7, #28]
 8001840:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3728      	adds	r7, #40	@ 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <buffer_skip_whitespace+0x16>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001876:	2300      	movs	r3, #0
 8001878:	e02c      	b.n	80018d4 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <buffer_skip_whitespace+0x2c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d306      	bcc.n	800189a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	e021      	b.n	80018d4 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <buffer_skip_whitespace+0x5c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <buffer_skip_whitespace+0x5c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4413      	add	r3, r2
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d9e9      	bls.n	8001890 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d104      	bne.n	80018d2 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018d2:	687b      	ldr	r3, [r7, #4]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <skip_utf8_bom+0x1e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <skip_utf8_bom+0x1e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <skip_utf8_bom+0x22>
    {
        return NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	e01c      	b.n	800193c <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d018      	beq.n	800193a <skip_utf8_bom+0x5a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	1d1a      	adds	r2, r3, #4
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d211      	bcs.n	800193a <skip_utf8_bom+0x5a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4413      	add	r3, r2
 8001920:	2203      	movs	r2, #3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <skip_utf8_bom+0x64>)
 8001924:	4618      	mov	r0, r3
 8001926:	f006 fa83 	bl	8007e30 <strncmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d104      	bne.n	800193a <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	1cda      	adds	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800193a:	687b      	ldr	r3, [r7, #4]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800af78 	.word	0x0800af78

08001948 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	e00c      	b.n	8001978 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7fe fcb6 	bl	80002d0 <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f805 	bl	8001980 <cJSON_ParseWithLengthOpts>
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	@ 0x38
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <cJSON_ParseWithLengthOpts+0x12c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80019ac:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <cJSON_ParseWithLengthOpts+0x12c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d042      	beq.n	8001a3e <cJSON_ParseWithLengthOpts+0xbe>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03f      	beq.n	8001a3e <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80019ca:	4a39      	ldr	r2, [pc, #228]	@ (8001ab0 <cJSON_ParseWithLengthOpts+0x130>)
 80019cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80019d6:	4836      	ldr	r0, [pc, #216]	@ (8001ab0 <cJSON_ParseWithLengthOpts+0x130>)
 80019d8:	f7ff fb7c 	bl	80010d4 <cJSON_New_Item>
 80019dc:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d02e      	beq.n	8001a42 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff79 	bl	80018e0 <skip_utf8_bom>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff35 	bl	8001860 <buffer_skip_whitespace>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019fc:	f000 f868 	bl	8001ad0 <parse_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01f      	beq.n	8001a46 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff25 	bl	8001860 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001a16:	6a3a      	ldr	r2, [r7, #32]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d215      	bcs.n	8001a4a <cJSON_ParseWithLengthOpts+0xca>
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3c:	e031      	b.n	8001aa2 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001a3e:	bf00      	nop
 8001a40:	e004      	b.n	8001a4c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a42:	bf00      	nop
 8001a44:	e002      	b.n	8001a4c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001a46:	bf00      	nop
 8001a48:	e000      	b.n	8001a4c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001a4a:	bf00      	nop

fail:
    if (item != NULL)
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a54:	f7ff fb54 	bl	8001100 <cJSON_Delete>
    }

    if (value != NULL)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d020      	beq.n	8001aa0 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d202      	bcs.n	8001a74 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e005      	b.n	8001a80 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <cJSON_ParseWithLengthOpts+0x12c>)
 8001a92:	461a      	mov	r2, r3
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a9c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3738      	adds	r7, #56	@ 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000022c 	.word	0x2000022c
 8001ab0:	20000030 	.word	0x20000030

08001ab4 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff41 	bl	8001948 <cJSON_ParseWithOpts>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <parse_value+0x18>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <parse_value+0x1c>
    {
        return false; /* no input */
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e0d2      	b.n	8001c92 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01d      	beq.n	8001b2e <parse_value+0x5e>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	1d1a      	adds	r2, r3, #4
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d816      	bhi.n	8001b2e <parse_value+0x5e>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4963      	ldr	r1, [pc, #396]	@ (8001c9c <parse_value+0x1cc>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f006 f98e 	bl	8007e30 <strncmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	1d1a      	adds	r2, r3, #4
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	609a      	str	r2, [r3, #8]
        return true;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0b1      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01d      	beq.n	8001b70 <parse_value+0xa0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	1d5a      	adds	r2, r3, #5
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d816      	bhi.n	8001b70 <parse_value+0xa0>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	4954      	ldr	r1, [pc, #336]	@ (8001ca0 <parse_value+0x1d0>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 f96d 	bl	8007e30 <strncmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	1d5a      	adds	r2, r3, #5
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	609a      	str	r2, [r3, #8]
        return true;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e090      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d020      	beq.n	8001bb8 <parse_value+0xe8>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	1d1a      	adds	r2, r3, #4
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d819      	bhi.n	8001bb8 <parse_value+0xe8>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4944      	ldr	r1, [pc, #272]	@ (8001ca4 <parse_value+0x1d4>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f006 f94c 	bl	8007e30 <strncmp>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	609a      	str	r2, [r3, #8]
        return true;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e06c      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d013      	beq.n	8001be6 <parse_value+0x116>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d20d      	bcs.n	8001be6 <parse_value+0x116>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b22      	cmp	r3, #34	@ 0x22
 8001bd8:	d105      	bne.n	8001be6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fcf9 	bl	80015d4 <parse_string>
 8001be2:	4603      	mov	r3, r0
 8001be4:	e055      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <parse_value+0x164>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d21d      	bcs.n	8001c34 <parse_value+0x164>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c06:	d00f      	beq.n	8001c28 <parse_value+0x158>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c16:	d90d      	bls.n	8001c34 <parse_value+0x164>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b39      	cmp	r3, #57	@ 0x39
 8001c26:	d805      	bhi.n	8001c34 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fabc 	bl	80011a8 <parse_number>
 8001c30:	4603      	mov	r3, r0
 8001c32:	e02e      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d013      	beq.n	8001c62 <parse_value+0x192>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20d      	bcs.n	8001c62 <parse_value+0x192>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c54:	d105      	bne.n	8001c62 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f825 	bl	8001ca8 <parse_array>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	e017      	b.n	8001c92 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <parse_value+0x1c0>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d20d      	bcs.n	8001c90 <parse_value+0x1c0>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c82:	d105      	bne.n	8001c90 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8d2 	bl	8001e30 <parse_object>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	e000      	b.n	8001c92 <parse_value+0x1c2>
    }

    return false;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800af50 	.word	0x0800af50
 8001ca0:	0800af7c 	.word	0x0800af7c
 8001ca4:	0800af84 	.word	0x0800af84

08001ca8 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cc2:	d301      	bcc.n	8001cc8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e0af      	b.n	8001e28 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b5b      	cmp	r3, #91	@ 0x5b
 8001ce0:	f040 8094 	bne.w	8001e0c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7ff fdb6 	bl	8001860 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <parse_array+0x6e>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d207      	bcs.n	8001d16 <parse_array+0x6e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d14:	d061      	beq.n	8001dda <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <parse_array+0x80>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d305      	bcc.n	8001d34 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	609a      	str	r2, [r3, #8]
        goto fail;
 8001d32:	e072      	b.n	8001e1a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3310      	adds	r3, #16
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f9c6 	bl	80010d4 <cJSON_New_Item>
 8001d48:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05f      	beq.n	8001e10 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d104      	bne.n	8001d60 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e007      	b.n	8001d70 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	f7ff fd70 	bl	8001860 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	f7ff fea4 	bl	8001ad0 <parse_value>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d042      	beq.n	8001e14 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d8e:	6838      	ldr	r0, [r7, #0]
 8001d90:	f7ff fd66 	bl	8001860 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00d      	beq.n	8001db6 <parse_array+0x10e>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d207      	bcs.n	8001db6 <parse_array+0x10e>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b2c      	cmp	r3, #44	@ 0x2c
 8001db4:	d0c3      	beq.n	8001d3e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02d      	beq.n	8001e18 <parse_array+0x170>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d227      	bcs.n	8001e18 <parse_array+0x170>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b5d      	cmp	r3, #93	@ 0x5d
 8001dd6:	d11f      	bne.n	8001e18 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001dd8:	e000      	b.n	8001ddc <parse_array+0x134>
        goto success;
 8001dda:	bf00      	nop
    input_buffer->depth--;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <parse_array+0x14a>
        head->prev = current_item;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	609a      	str	r2, [r3, #8]

    return true;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00d      	b.n	8001e28 <parse_array+0x180>
        goto fail;
 8001e0c:	bf00      	nop
 8001e0e:	e004      	b.n	8001e1a <parse_array+0x172>
            goto fail; /* allocation failure */
 8001e10:	bf00      	nop
 8001e12:	e002      	b.n	8001e1a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001e14:	bf00      	nop
 8001e16:	e000      	b.n	8001e1a <parse_array+0x172>
        goto fail; /* expected end of array */
 8001e18:	bf00      	nop

fail:
    if (head != NULL)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff f96d 	bl	8001100 <cJSON_Delete>
    }

    return false;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e4a:	d301      	bcc.n	8001e50 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e0ea      	b.n	8002026 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80d0 	beq.w	8002002 <parse_object+0x1d2>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	f080 80c9 	bcs.w	8002002 <parse_object+0x1d2>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e7e:	f040 80c0 	bne.w	8002002 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f7ff fce7 	bl	8001860 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <parse_object+0x86>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <parse_object+0x86>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b7d      	cmp	r3, #125	@ 0x7d
 8001eb2:	f000 808d 	beq.w	8001fd0 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <parse_object+0x98>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d305      	bcc.n	8001ed4 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	609a      	str	r2, [r3, #8]
        goto fail;
 8001ed2:	e0a1      	b.n	8002018 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f8f6 	bl	80010d4 <cJSON_New_Item>
 8001ee8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 808a 	beq.w	8002006 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e007      	b.n	8001f12 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f7ff fc9f 	bl	8001860 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	6938      	ldr	r0, [r7, #16]
 8001f26:	f7ff fb55 	bl	80015d4 <parse_string>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d06c      	beq.n	800200a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001f30:	6838      	ldr	r0, [r7, #0]
 8001f32:	f7ff fc95 	bl	8001860 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d061      	beq.n	800200e <parse_object+0x1de>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d25b      	bcs.n	800200e <parse_object+0x1de>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f64:	d153      	bne.n	800200e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f7ff fc75 	bl	8001860 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	6938      	ldr	r0, [r7, #16]
 8001f7a:	f7ff fda9 	bl	8001ad0 <parse_value>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d046      	beq.n	8002012 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f7ff fc6b 	bl	8001860 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <parse_object+0x17c>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <parse_object+0x17c>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001faa:	d098      	beq.n	8001ede <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d031      	beq.n	8002016 <parse_object+0x1e6>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d22b      	bcs.n	8002016 <parse_object+0x1e6>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b7d      	cmp	r3, #125	@ 0x7d
 8001fcc:	d123      	bne.n	8002016 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001fce:	e000      	b.n	8001fd2 <parse_object+0x1a2>
        goto success; /* empty object */
 8001fd0:	bf00      	nop
    input_buffer->depth--;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <parse_object+0x1b8>
        head->prev = current_item;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2240      	movs	r2, #64	@ 0x40
 8001fec:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	609a      	str	r2, [r3, #8]
    return true;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e011      	b.n	8002026 <parse_object+0x1f6>
        goto fail; /* not an object */
 8002002:	bf00      	nop
 8002004:	e008      	b.n	8002018 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002006:	bf00      	nop
 8002008:	e006      	b.n	8002018 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800200a:	bf00      	nop
 800200c:	e004      	b.n	8002018 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800200e:	bf00      	nop
 8002010:	e002      	b.n	8002018 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002012:	bf00      	nop
 8002014:	e000      	b.n	8002018 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002016:	bf00      	nop

fail:
    if (head != NULL)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff f86e 	bl	8001100 <cJSON_Delete>
    }

    return false;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <get_object_item+0x1c>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <get_object_item+0x20>
    {
        return NULL;
 800204a:	2300      	movs	r3, #0
 800204c:	e033      	b.n	80020b6 <get_object_item+0x88>
    }

    current_element = object->child;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d017      	beq.n	800208a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800205a:	e002      	b.n	8002062 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <get_object_item+0x74>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <get_object_item+0x74>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4619      	mov	r1, r3
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f7fe f8ca 	bl	8000210 <strcmp>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ec      	bne.n	800205c <get_object_item+0x2e>
 8002082:	e00e      	b.n	80020a2 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <get_object_item+0x74>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4619      	mov	r1, r3
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f7fe ffb0 	bl	8000ffc <case_insensitive_strcmp>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <get_object_item+0x82>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <get_object_item+0x86>
        return NULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <get_object_item+0x88>
    }

    return current_element;
 80020b4:	697b      	ldr	r3, [r7, #20]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80020c8:	2201      	movs	r2, #1
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffae 	bl	800202e <get_object_item>
 80020d2:	4603      	mov	r3, r0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <cJSON_IsNumber+0x12>
    {
        return false;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e007      	b.n	80020fe <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <cJSON_IsObject+0x12>
    {
        return false;
 8002118:	2300      	movs	r3, #0
 800211a:	e007      	b.n	800212c <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b40      	cmp	r3, #64	@ 0x40
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <process_sensor_data>:
    }

    cJSON_Delete(root);
}

void process_sensor_data(const char *json_string) {
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    // Parse the JSON string
    cJSON *root = cJSON_Parse(json_string);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fcb7 	bl	8001ab4 <cJSON_Parse>
 8002146:	6178      	str	r0, [r7, #20]
    if (root == NULL) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <process_sensor_data+0x36>
        const char *error_ptr = cJSON_GetErrorPtr();
 800214e:	f7fe ff47 	bl	8000fe0 <cJSON_GetErrorPtr>
 8002152:	60b8      	str	r0, [r7, #8]
        if (error_ptr != NULL) {
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 809b 	beq.w	8002292 <process_sensor_data+0x15a>
            fprintf(stderr, "Error before: %s\n", error_ptr);
 800215c:	4b4f      	ldr	r3, [pc, #316]	@ (800229c <process_sensor_data+0x164>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	494e      	ldr	r1, [pc, #312]	@ (80022a0 <process_sensor_data+0x168>)
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fc5c 	bl	8007a24 <fiprintf>
        }
        return;
 800216c:	e091      	b.n	8002292 <process_sensor_data+0x15a>
    }

    // Extract timestamp
    cJSON *timestamp = cJSON_GetObjectItemCaseSensitive(root, "ts");
 800216e:	494d      	ldr	r1, [pc, #308]	@ (80022a4 <process_sensor_data+0x16c>)
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7ff ffa4 	bl	80020be <cJSON_GetObjectItemCaseSensitive>
 8002176:	6138      	str	r0, [r7, #16]
    if (cJSON_IsNumber(timestamp)) {
 8002178:	6938      	ldr	r0, [r7, #16]
 800217a:	f7ff ffaf 	bl	80020dc <cJSON_IsNumber>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <process_sensor_data+0x60>
        printf("Timestamp: %lld\n", (long long)timestamp->valueint);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	17da      	asrs	r2, r3, #31
 800218a:	461c      	mov	r4, r3
 800218c:	4615      	mov	r5, r2
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	4845      	ldr	r0, [pc, #276]	@ (80022a8 <process_sensor_data+0x170>)
 8002194:	f005 fc76 	bl	8007a84 <iprintf>
    }

    // Extract values object
        cJSON *values = cJSON_GetObjectItemCaseSensitive(root, "values");
 8002198:	4944      	ldr	r1, [pc, #272]	@ (80022ac <process_sensor_data+0x174>)
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8f 	bl	80020be <cJSON_GetObjectItemCaseSensitive>
 80021a0:	60f8      	str	r0, [r7, #12]
        if (cJSON_IsObject(values)) {
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffb1 	bl	800210a <cJSON_IsObject>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06d      	beq.n	800228a <process_sensor_data+0x152>
            // Get first child of values object
            cJSON *child = values->child;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61fb      	str	r3, [r7, #28]

            while (child != NULL) {
 80021b4:	e066      	b.n	8002284 <process_sensor_data+0x14c>
                // Search for this key in our Modbus register structure
                for (size_t i = 0; i < 4; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	e05b      	b.n	8002274 <process_sensor_data+0x13c>
                    if (strcmp(child->string, registers[i].key) == 0) {
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	6a18      	ldr	r0, [r3, #32]
 80021c0:	493b      	ldr	r1, [pc, #236]	@ (80022b0 <process_sensor_data+0x178>)
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe f81d 	bl	8000210 <strcmp>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d148      	bne.n	800226e <process_sensor_data+0x136>
                        if (cJSON_IsNumber(child)) {
 80021dc:	69f8      	ldr	r0, [r7, #28]
 80021de:	f7ff ff7d 	bl	80020dc <cJSON_IsNumber>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d049      	beq.n	800227c <process_sensor_data+0x144>
                            printf("Found register match:\r\n");
 80021e8:	4832      	ldr	r0, [pc, #200]	@ (80022b4 <process_sensor_data+0x17c>)
 80021ea:	f005 fcb3 	bl	8007b54 <puts>
                            printf("  Function Code: %d\r\n", registers[i].Functioncode);
 80021ee:	4930      	ldr	r1, [pc, #192]	@ (80022b0 <process_sensor_data+0x178>)
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3305      	adds	r3, #5
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	482d      	ldr	r0, [pc, #180]	@ (80022b8 <process_sensor_data+0x180>)
 8002204:	f005 fc3e 	bl	8007a84 <iprintf>
                            printf("  Address: %d\r\n", registers[i].address);
 8002208:	4929      	ldr	r1, [pc, #164]	@ (80022b0 <process_sensor_data+0x178>)
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3306      	adds	r3, #6
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4827      	ldr	r0, [pc, #156]	@ (80022bc <process_sensor_data+0x184>)
 800221e:	f005 fc31 	bl	8007a84 <iprintf>
                            printf("  Value: %.2f\n", child->valuedouble);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002228:	4825      	ldr	r0, [pc, #148]	@ (80022c0 <process_sensor_data+0x188>)
 800222a:	f005 fc2b 	bl	8007a84 <iprintf>
                            printf("  Value: %d\n", child->valueint);
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4619      	mov	r1, r3
 8002234:	4823      	ldr	r0, [pc, #140]	@ (80022c4 <process_sensor_data+0x18c>)
 8002236:	f005 fc25 	bl	8007a84 <iprintf>
//                            	write_Single_Reg(registers[i].SlaveID, 6, registers[i].address, registers[i].length,child->valueint);
//                            }
//                            if (registers[i].Functioncode==1){
//                            	write_Single_coil(registers[i].SlaveID, 5, registers[i].address, registers[i].length,child->valueint);
//                            }
                            sprintf(command,"Subscribe :%d\r\n",registers[i].address);
 800223a:	491d      	ldr	r1, [pc, #116]	@ (80022b0 <process_sensor_data+0x178>)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3306      	adds	r3, #6
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	491e      	ldr	r1, [pc, #120]	@ (80022c8 <process_sensor_data+0x190>)
 8002250:	481e      	ldr	r0, [pc, #120]	@ (80022cc <process_sensor_data+0x194>)
 8002252:	f005 fcbd 	bl	8007bd0 <siprintf>
                            HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 8002256:	481d      	ldr	r0, [pc, #116]	@ (80022cc <process_sensor_data+0x194>)
 8002258:	f7fe f83a 	bl	80002d0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	4919      	ldr	r1, [pc, #100]	@ (80022cc <process_sensor_data+0x194>)
 8002266:	481a      	ldr	r0, [pc, #104]	@ (80022d0 <process_sensor_data+0x198>)
 8002268:	f002 ff80 	bl	800516c <HAL_UART_Transmit>

                        }
                        break; // Found match, move to next JSON child
 800226c:	e006      	b.n	800227c <process_sensor_data+0x144>
                for (size_t i = 0; i < 4; i++) {
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3301      	adds	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d9a0      	bls.n	80021bc <process_sensor_data+0x84>
 800227a:	e000      	b.n	800227e <process_sensor_data+0x146>
                        break; // Found match, move to next JSON child
 800227c:	bf00      	nop
                    }
                }
                child = child->next;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61fb      	str	r3, [r7, #28]
            while (child != NULL) {
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d195      	bne.n	80021b6 <process_sensor_data+0x7e>
            }
        }


    // Clean up
    cJSON_Delete(root);
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7fe ff38 	bl	8001100 <cJSON_Delete>
 8002290:	e000      	b.n	8002294 <process_sensor_data+0x15c>
        return;
 8002292:	bf00      	nop
}
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bdb0      	pop	{r4, r5, r7, pc}
 800229a:	bf00      	nop
 800229c:	200001c0 	.word	0x200001c0
 80022a0:	0800afbc 	.word	0x0800afbc
 80022a4:	0800af8c 	.word	0x0800af8c
 80022a8:	0800afd0 	.word	0x0800afd0
 80022ac:	0800af90 	.word	0x0800af90
 80022b0:	20000000 	.word	0x20000000
 80022b4:	0800afe4 	.word	0x0800afe4
 80022b8:	0800affc 	.word	0x0800affc
 80022bc:	0800b014 	.word	0x0800b014
 80022c0:	0800b024 	.word	0x0800b024
 80022c4:	0800b034 	.word	0x0800b034
 80022c8:	0800b044 	.word	0x0800b044
 80022cc:	20000234 	.word	0x20000234
 80022d0:	20000a94 	.word	0x20000a94

080022d4 <Error_Handler>:
 */
#include "error_handler.h"
#include "sys_init.h"

void Error_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b094      	sub	sp, #80	@ 0x50
 80022d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022da:	b672      	cpsid	i
}
 80022dc:	bf00      	nop
	__disable_irq();
	char Error[80];
    sprintf(Error,"ERROR\r\n");
 80022de:	463b      	mov	r3, r7
 80022e0:	4908      	ldr	r1, [pc, #32]	@ (8002304 <Error_Handler+0x30>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 fc74 	bl	8007bd0 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)Error,strlen(Error),1000);
 80022e8:	463b      	mov	r3, r7
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fd fff0 	bl	80002d0 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4639      	mov	r1, r7
 80022f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fa:	4803      	ldr	r0, [pc, #12]	@ (8002308 <Error_Handler+0x34>)
 80022fc:	f002 ff36 	bl	800516c <HAL_UART_Transmit>
//  HAL_NVIC_SystemReset();
  while(1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <Error_Handler+0x2c>
 8002304:	0800b054 	.word	0x0800b054
 8002308:	20000a94 	.word	0x20000a94

0800230c <send_at_command>:
"-----END CERTIFICATE-----\r\n";

const uint16_t certificate_size = strlen(certificate);


void send_at_command(const char *cmd, char *response, int timeout_ms) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
    memset(buffer, 0, sizeof(buffer));  // Clear receive buffer
 8002318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231c:	2100      	movs	r1, #0
 800231e:	4830      	ldr	r0, [pc, #192]	@ (80023e0 <send_at_command+0xd4>)
 8002320:	f005 fd7e 	bl	8007e20 <memset>
    memset(response, 0, 512);           // Clear response buffer
 8002324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002328:	2100      	movs	r1, #0
 800232a:	68b8      	ldr	r0, [r7, #8]
 800232c:	f005 fd78 	bl	8007e20 <memset>
    memset(ATcommand, 0, sizeof(ATcommand)); // Clear AT command buffer
 8002330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002334:	2100      	movs	r1, #0
 8002336:	482b      	ldr	r0, [pc, #172]	@ (80023e4 <send_at_command+0xd8>)
 8002338:	f005 fd72 	bl	8007e20 <memset>

    sprintf(ATcommand, "%s", cmd); // Safely copy the command
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	492a      	ldr	r1, [pc, #168]	@ (80023e8 <send_at_command+0xdc>)
 8002340:	4828      	ldr	r0, [pc, #160]	@ (80023e4 <send_at_command+0xd8>)
 8002342:	f005 fc45 	bl	8007bd0 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), timeout_ms);
 8002346:	4827      	ldr	r0, [pc, #156]	@ (80023e4 <send_at_command+0xd8>)
 8002348:	f7fd ffc2 	bl	80002d0 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4924      	ldr	r1, [pc, #144]	@ (80023e4 <send_at_command+0xd8>)
 8002354:	4825      	ldr	r0, [pc, #148]	@ (80023ec <send_at_command+0xe0>)
 8002356:	f002 ff09 	bl	800516c <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, buffer, 512, timeout_ms);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002360:	491f      	ldr	r1, [pc, #124]	@ (80023e0 <send_at_command+0xd4>)
 8002362:	4822      	ldr	r0, [pc, #136]	@ (80023ec <send_at_command+0xe0>)
 8002364:	f002 ff8d 	bl	8005282 <HAL_UART_Receive>

    if (strstr((char *)buffer, "OK")) {
 8002368:	4921      	ldr	r1, [pc, #132]	@ (80023f0 <send_at_command+0xe4>)
 800236a:	481d      	ldr	r0, [pc, #116]	@ (80023e0 <send_at_command+0xd4>)
 800236c:	f005 fd85 	bl	8007e7a <strstr>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01c      	beq.n	80023b0 <send_at_command+0xa4>
        strncpy(response, (char *)buffer, 512);
 8002376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800237a:	4919      	ldr	r1, [pc, #100]	@ (80023e0 <send_at_command+0xd4>)
 800237c:	68b8      	ldr	r0, [r7, #8]
 800237e:	f005 fd69 	bl	8007e54 <strncpy>
        response[255] = '\0';
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	33ff      	adds	r3, #255	@ 0xff
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

        snprintf(command, sizeof(command), "Response: %s", response);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <send_at_command+0xe8>)
 800238e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002392:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <send_at_command+0xec>)
 8002394:	f005 fbe6 	bl	8007b64 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
 8002398:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <send_at_command+0xec>)
 800239a:	f7fd ff99 	bl	80002d0 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	4914      	ldr	r1, [pc, #80]	@ (80023f8 <send_at_command+0xec>)
 80023a8:	4814      	ldr	r0, [pc, #80]	@ (80023fc <send_at_command+0xf0>)
 80023aa:	f002 fedf 	bl	800516c <HAL_UART_Transmit>
        snprintf(command, sizeof(command), "Response: NO\r\n");
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
    }

//    HAL_Delay(1000);
}
 80023ae:	e013      	b.n	80023d8 <send_at_command+0xcc>
        response[0] = '\0';  // Clear response if "OK" not found
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
        snprintf(command, sizeof(command), "Response: NO\r\n");
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <send_at_command+0xf4>)
 80023b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023bc:	480e      	ldr	r0, [pc, #56]	@ (80023f8 <send_at_command+0xec>)
 80023be:	f005 fbd1 	bl	8007b64 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), 1000);
 80023c2:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <send_at_command+0xec>)
 80023c4:	f7fd ff84 	bl	80002d0 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d0:	4909      	ldr	r1, [pc, #36]	@ (80023f8 <send_at_command+0xec>)
 80023d2:	480a      	ldr	r0, [pc, #40]	@ (80023fc <send_at_command+0xf0>)
 80023d4:	f002 feca 	bl	800516c <HAL_UART_Transmit>
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000634 	.word	0x20000634
 80023e4:	20000434 	.word	0x20000434
 80023e8:	0800b05c 	.word	0x0800b05c
 80023ec:	20000a4c 	.word	0x20000a4c
 80023f0:	0800b060 	.word	0x0800b060
 80023f4:	0800b064 	.word	0x0800b064
 80023f8:	20000234 	.word	0x20000234
 80023fc:	20000a94 	.word	0x20000a94
 8002400:	0800b074 	.word	0x0800b074

08002404 <mqtt_init>:



void mqtt_init(const char *broker, const char *accesstoken, const char *clientid) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b0e6      	sub	sp, #408	@ 0x198
 8002408:	af02      	add	r7, sp, #8
 800240a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800240e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002412:	6018      	str	r0, [r3, #0]
 8002414:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002418:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800241c:	6019      	str	r1, [r3, #0]
 800241e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002422:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002426:	601a      	str	r2, [r3, #0]


    send_at_command("AT\r\n",response,500);
 8002428:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800242c:	4968      	ldr	r1, [pc, #416]	@ (80025d0 <mqtt_init+0x1cc>)
 800242e:	4869      	ldr	r0, [pc, #420]	@ (80025d4 <mqtt_init+0x1d0>)
 8002430:	f7ff ff6c 	bl	800230c <send_at_command>
//    HAL_Delay(2500);// New
    send_at_command("AT+CFUN=1\r\n",response,500);
 8002434:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002438:	4965      	ldr	r1, [pc, #404]	@ (80025d0 <mqtt_init+0x1cc>)
 800243a:	4867      	ldr	r0, [pc, #412]	@ (80025d8 <mqtt_init+0x1d4>)
 800243c:	f7ff ff66 	bl	800230c <send_at_command>
//    send_at_command("AT+CPIN?\r\n",response,500);
//    send_at_command("AT+CSQ\r\n",response,500);
    send_at_command("AT+CREG=2\r\n",response,500);
 8002440:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002444:	4962      	ldr	r1, [pc, #392]	@ (80025d0 <mqtt_init+0x1cc>)
 8002446:	4865      	ldr	r0, [pc, #404]	@ (80025dc <mqtt_init+0x1d8>)
 8002448:	f7ff ff60 	bl	800230c <send_at_command>
    send_at_command("AT+CEREG=2\r\n",response,500);
 800244c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002450:	495f      	ldr	r1, [pc, #380]	@ (80025d0 <mqtt_init+0x1cc>)
 8002452:	4863      	ldr	r0, [pc, #396]	@ (80025e0 <mqtt_init+0x1dc>)
 8002454:	f7ff ff5a 	bl	800230c <send_at_command>
//     send_at_command("AT+COPS?\r\n",response,1000);
    send_at_command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r\n",response,500);
 8002458:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800245c:	495c      	ldr	r1, [pc, #368]	@ (80025d0 <mqtt_init+0x1cc>)
 800245e:	4861      	ldr	r0, [pc, #388]	@ (80025e4 <mqtt_init+0x1e0>)
 8002460:	f7ff ff54 	bl	800230c <send_at_command>

    send_at_command("AT+CGACT=1,1\r\n",response,500);
 8002464:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002468:	4959      	ldr	r1, [pc, #356]	@ (80025d0 <mqtt_init+0x1cc>)
 800246a:	485f      	ldr	r0, [pc, #380]	@ (80025e8 <mqtt_init+0x1e4>)
 800246c:	f7ff ff4e 	bl	800230c <send_at_command>
//    send_at_command("AT+CGATT=1\r\n",response,500);
    send_at_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n",response,500);
 8002470:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002474:	4956      	ldr	r1, [pc, #344]	@ (80025d0 <mqtt_init+0x1cc>)
 8002476:	485d      	ldr	r0, [pc, #372]	@ (80025ec <mqtt_init+0x1e8>)
 8002478:	f7ff ff48 	bl	800230c <send_at_command>
    send_at_command("AT+CNTP\r\n",response,500);
 800247c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002480:	4953      	ldr	r1, [pc, #332]	@ (80025d0 <mqtt_init+0x1cc>)
 8002482:	485b      	ldr	r0, [pc, #364]	@ (80025f0 <mqtt_init+0x1ec>)
 8002484:	f7ff ff42 	bl	800230c <send_at_command>
    send_at_command("AT+CCLK?\r\n",response,500);
 8002488:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800248c:	4950      	ldr	r1, [pc, #320]	@ (80025d0 <mqtt_init+0x1cc>)
 800248e:	4859      	ldr	r0, [pc, #356]	@ (80025f4 <mqtt_init+0x1f0>)
 8002490:	f7ff ff3c 	bl	800230c <send_at_command>
     send_at_command("AT+IPADDR\r\n",response,1000);
 8002494:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002498:	494d      	ldr	r1, [pc, #308]	@ (80025d0 <mqtt_init+0x1cc>)
 800249a:	4857      	ldr	r0, [pc, #348]	@ (80025f8 <mqtt_init+0x1f4>)
 800249c:	f7ff ff36 	bl	800230c <send_at_command>
    send_at_command("AT+CGATT=1\r\n",response,500);
 80024a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024a4:	494a      	ldr	r1, [pc, #296]	@ (80025d0 <mqtt_init+0x1cc>)
 80024a6:	4855      	ldr	r0, [pc, #340]	@ (80025fc <mqtt_init+0x1f8>)
 80024a8:	f7ff ff30 	bl	800230c <send_at_command>
//    send_at_command("AT+CGPADDR=1\r\n",response,500);
//     send_at_command("AT+CGACT?\r\n",response,1000);
//     send_at_command("AT+CEREG?\r\n",response,1000);
    send_at_command("AT+NETOPEN\r\n",response,500);
 80024ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024b0:	4947      	ldr	r1, [pc, #284]	@ (80025d0 <mqtt_init+0x1cc>)
 80024b2:	4853      	ldr	r0, [pc, #332]	@ (8002600 <mqtt_init+0x1fc>)
 80024b4:	f7ff ff2a 	bl	800230c <send_at_command>





     send_at_command("AT+CSSLCFG=\"sslversion\",0,4\r\n",response,1000);
 80024b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024bc:	4944      	ldr	r1, [pc, #272]	@ (80025d0 <mqtt_init+0x1cc>)
 80024be:	4851      	ldr	r0, [pc, #324]	@ (8002604 <mqtt_init+0x200>)
 80024c0:	f7ff ff24 	bl	800230c <send_at_command>
    send_at_command("AT+CSSLCFG=\"authmode\",0,1\r\n",response,500);
 80024c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024c8:	4941      	ldr	r1, [pc, #260]	@ (80025d0 <mqtt_init+0x1cc>)
 80024ca:	484f      	ldr	r0, [pc, #316]	@ (8002608 <mqtt_init+0x204>)
 80024cc:	f7ff ff1e 	bl	800230c <send_at_command>
    send_at_command("AT+CSSLCFG=\"cacert\",0,\"ca_cert.pem\"\r\n",response,500);
 80024d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024d4:	493e      	ldr	r1, [pc, #248]	@ (80025d0 <mqtt_init+0x1cc>)
 80024d6:	484d      	ldr	r0, [pc, #308]	@ (800260c <mqtt_init+0x208>)
 80024d8:	f7ff ff18 	bl	800230c <send_at_command>
//     send_at_command("AT+CSSLCFG=\"clientcert\",0,\"client_cert.pem\"\r\n",response,1000);
//     send_at_command("AT+CSSLCFG=\"clientkey\",0,\"client_key.pem\"\r\n",response,1000);
//     send_at_command("AT+CSSLCFG=\"password\",0,\"password.pem\"\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"enableSNI\",0,1\r\n",response,500);
 80024dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024e0:	493b      	ldr	r1, [pc, #236]	@ (80025d0 <mqtt_init+0x1cc>)
 80024e2:	484b      	ldr	r0, [pc, #300]	@ (8002610 <mqtt_init+0x20c>)
 80024e4:	f7ff ff12 	bl	800230c <send_at_command>

    send_at_command("AT+CMQTTSTART\r\n", response, 500);
 80024e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024ec:	4938      	ldr	r1, [pc, #224]	@ (80025d0 <mqtt_init+0x1cc>)
 80024ee:	4849      	ldr	r0, [pc, #292]	@ (8002614 <mqtt_init+0x210>)
 80024f0:	f7ff ff0c 	bl	800230c <send_at_command>
    send_at_command("AT+CCHSET=1,1\r\n", response, 500);
 80024f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024f8:	4935      	ldr	r1, [pc, #212]	@ (80025d0 <mqtt_init+0x1cc>)
 80024fa:	4847      	ldr	r0, [pc, #284]	@ (8002618 <mqtt_init+0x214>)
 80024fc:	f7ff ff06 	bl	800230c <send_at_command>
    send_at_command("AT+CCHMODE=1\r\n", response, 500);
 8002500:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002504:	4932      	ldr	r1, [pc, #200]	@ (80025d0 <mqtt_init+0x1cc>)
 8002506:	4845      	ldr	r0, [pc, #276]	@ (800261c <mqtt_init+0x218>)
 8002508:	f7ff ff00 	bl	800230c <send_at_command>
    send_at_command("AT+CCHSTART\r\n", response, 500);
 800250c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002510:	492f      	ldr	r1, [pc, #188]	@ (80025d0 <mqtt_init+0x1cc>)
 8002512:	4843      	ldr	r0, [pc, #268]	@ (8002620 <mqtt_init+0x21c>)
 8002514:	f7ff fefa 	bl	800230c <send_at_command>
    send_at_command("AT+CCHADDR\r\n", response, 500);
 8002518:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800251c:	492c      	ldr	r1, [pc, #176]	@ (80025d0 <mqtt_init+0x1cc>)
 800251e:	4841      	ldr	r0, [pc, #260]	@ (8002624 <mqtt_init+0x220>)
 8002520:	f7ff fef4 	bl	800230c <send_at_command>

//     send_at_command("AT+CCHOPEN\r\n", response, 500);
    send_at_command("AT+CCHCFG=\"sendtimeout\",0,60\r\n", response, 500);
 8002524:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002528:	4929      	ldr	r1, [pc, #164]	@ (80025d0 <mqtt_init+0x1cc>)
 800252a:	483f      	ldr	r0, [pc, #252]	@ (8002628 <mqtt_init+0x224>)
 800252c:	f7ff feee 	bl	800230c <send_at_command>
    send_at_command("AT+CCHCFG=\"sslctx\",0,1\r\n", response, 500);
 8002530:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002534:	4926      	ldr	r1, [pc, #152]	@ (80025d0 <mqtt_init+0x1cc>)
 8002536:	483d      	ldr	r0, [pc, #244]	@ (800262c <mqtt_init+0x228>)
 8002538:	f7ff fee8 	bl	800230c <send_at_command>
//     send_at_command("AT+CCERTMOVE=\"ca_cert.pem\"\r\n", response, 500);
    send_at_command("AT+CMQTTSSLCFG=0,1\r\n", response, 500);
 800253c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002540:	4923      	ldr	r1, [pc, #140]	@ (80025d0 <mqtt_init+0x1cc>)
 8002542:	483b      	ldr	r0, [pc, #236]	@ (8002630 <mqtt_init+0x22c>)
 8002544:	f7ff fee2 	bl	800230c <send_at_command>
    send_at_command("AT+CSSLCFG=0\r\n",response,500);
 8002548:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800254c:	4920      	ldr	r1, [pc, #128]	@ (80025d0 <mqtt_init+0x1cc>)
 800254e:	4839      	ldr	r0, [pc, #228]	@ (8002634 <mqtt_init+0x230>)
 8002550:	f7ff fedc 	bl	800230c <send_at_command>

    //Set ID
    char mqtt_id[128];
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMQTTACCQ=0,\"%s\",1\r\n",accesstoken);
 8002554:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002558:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800255c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <mqtt_init+0x234>)
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	f005 fafd 	bl	8007b64 <sniprintf>
    send_at_command(mqtt_id, response, 500);
 800256a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800256e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002572:	4917      	ldr	r1, [pc, #92]	@ (80025d0 <mqtt_init+0x1cc>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fec9 	bl	800230c <send_at_command>

    send_at_command("AT+CMQTTCFG=\"checkUTF8\",0,1\r\n",response,1000);
 800257a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800257e:	4914      	ldr	r1, [pc, #80]	@ (80025d0 <mqtt_init+0x1cc>)
 8002580:	482e      	ldr	r0, [pc, #184]	@ (800263c <mqtt_init+0x238>)
 8002582:	f7ff fec3 	bl	800230c <send_at_command>
    send_at_command("AT+CMQTTCFG=\"optimeout\",0,60\r\n",response,1000);
 8002586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800258a:	4911      	ldr	r1, [pc, #68]	@ (80025d0 <mqtt_init+0x1cc>)
 800258c:	482c      	ldr	r0, [pc, #176]	@ (8002640 <mqtt_init+0x23c>)
 800258e:	f7ff febd 	bl	800230c <send_at_command>
//     send_at_command("AT+CCERTLIST", response, 1000);
    // send_at_command("AT+CCERTDELE=\"ca_cert.pem\"", response, 1000);

//    for(int i=0;i<3;i++){
    char mqtt_conn[256];
    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",300,1,\"%s\"\r\n",broker, accesstoken);
 8002592:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8002596:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800259a:	f107 0010 	add.w	r0, r7, #16
 800259e:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 80025a2:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	9200      	str	r2, [sp, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	@ (8002644 <mqtt_init+0x240>)
 80025ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b2:	f005 fad7 	bl	8007b64 <sniprintf>
//    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",300,1,\"%s,\"%s\"\r\n",broker, accesstoken, clientid);
    send_at_command(mqtt_conn, response, 2500);
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80025be:	4904      	ldr	r1, [pc, #16]	@ (80025d0 <mqtt_init+0x1cc>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fea3 	bl	800230c <send_at_command>
//    }
//    HAL_Delay(1500);
    // ESP_LOGI("MQTT", "MQTT connection response: %s", response);

}
 80025c6:	bf00      	nop
 80025c8:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000834 	.word	0x20000834
 80025d4:	0800b084 	.word	0x0800b084
 80025d8:	0800b08c 	.word	0x0800b08c
 80025dc:	0800b098 	.word	0x0800b098
 80025e0:	0800b0a4 	.word	0x0800b0a4
 80025e4:	0800b0b4 	.word	0x0800b0b4
 80025e8:	0800b0dc 	.word	0x0800b0dc
 80025ec:	0800b0ec 	.word	0x0800b0ec
 80025f0:	0800b10c 	.word	0x0800b10c
 80025f4:	0800b118 	.word	0x0800b118
 80025f8:	0800b124 	.word	0x0800b124
 80025fc:	0800b130 	.word	0x0800b130
 8002600:	0800b140 	.word	0x0800b140
 8002604:	0800b150 	.word	0x0800b150
 8002608:	0800b170 	.word	0x0800b170
 800260c:	0800b18c 	.word	0x0800b18c
 8002610:	0800b1b4 	.word	0x0800b1b4
 8002614:	0800b1d4 	.word	0x0800b1d4
 8002618:	0800b1e4 	.word	0x0800b1e4
 800261c:	0800b1f4 	.word	0x0800b1f4
 8002620:	0800b204 	.word	0x0800b204
 8002624:	0800b214 	.word	0x0800b214
 8002628:	0800b224 	.word	0x0800b224
 800262c:	0800b244 	.word	0x0800b244
 8002630:	0800b260 	.word	0x0800b260
 8002634:	0800b278 	.word	0x0800b278
 8002638:	0800b288 	.word	0x0800b288
 800263c:	0800b2a0 	.word	0x0800b2a0
 8002640:	0800b2c0 	.word	0x0800b2c0
 8002644:	0800b2e0 	.word	0x0800b2e0

08002648 <mqtt_subscribe>:
    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);

}

void mqtt_subscribe(const char *topic) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b0a4      	sub	sp, #144	@ 0x90
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    //Set topic
    char mqtt_topic[128];
    int len;
    len=strlen(topic);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fd fe3d 	bl	80002d0 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    snprintf(mqtt_topic, sizeof(mqtt_topic), "AT+CMQTTSUBTOPIC=0,%d,0\r\n", len);
 800265c:	f107 000c 	add.w	r0, r7, #12
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002664:	4a1e      	ldr	r2, [pc, #120]	@ (80026e0 <mqtt_subscribe+0x98>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	f005 fa7c 	bl	8007b64 <sniprintf>
    send_at_command(mqtt_topic, response, 1000);
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002674:	491b      	ldr	r1, [pc, #108]	@ (80026e4 <mqtt_subscribe+0x9c>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe48 	bl	800230c <send_at_command>
    // send_at_command("AT+CMQTTSUBTOPIC=0,9,0\r\n",response,1000);
    send_at_command(topic,response,1000);
 800267c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002680:	4918      	ldr	r1, [pc, #96]	@ (80026e4 <mqtt_subscribe+0x9c>)
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fe42 	bl	800230c <send_at_command>

    //Subscribe
    snprintf(mqtt_topic, sizeof(mqtt_topic), "AT+CMQTTSUB=0,%d,0\r\n", len);
 8002688:	f107 000c 	add.w	r0, r7, #12
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <mqtt_subscribe+0xa0>)
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	f005 fa66 	bl	8007b64 <sniprintf>
//     send_at_command(mqtt_topic, response, 5000);
    send_at_command("AT+CMQTTSUB=0\r\n",response,1000);
 8002698:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800269c:	4911      	ldr	r1, [pc, #68]	@ (80026e4 <mqtt_subscribe+0x9c>)
 800269e:	4813      	ldr	r0, [pc, #76]	@ (80026ec <mqtt_subscribe+0xa4>)
 80026a0:	f7ff fe34 	bl	800230c <send_at_command>
     send_at_command(topic,response,1000);
 80026a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <mqtt_subscribe+0x9c>)
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fe2e 	bl	800230c <send_at_command>

    if (strstr((char *)buffer, "OK")) {
 80026b0:	490f      	ldr	r1, [pc, #60]	@ (80026f0 <mqtt_subscribe+0xa8>)
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <mqtt_subscribe+0xac>)
 80026b4:	f005 fbe1 	bl	8007e7a <strstr>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <mqtt_subscribe+0x90>
        strncpy(response, (char *)buffer, 512);
 80026be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c2:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <mqtt_subscribe+0xac>)
 80026c4:	4807      	ldr	r0, [pc, #28]	@ (80026e4 <mqtt_subscribe+0x9c>)
 80026c6:	f005 fbc5 	bl	8007e54 <strncpy>
        response[255] = '\0';
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <mqtt_subscribe+0x9c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
        process_sensor_data(response);
 80026d2:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <mqtt_subscribe+0x9c>)
 80026d4:	f7ff fd30 	bl	8002138 <process_sensor_data>

    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);


}
 80026d8:	bf00      	nop
 80026da:	3790      	adds	r7, #144	@ 0x90
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	0800b354 	.word	0x0800b354
 80026e4:	20000834 	.word	0x20000834
 80026e8:	0800b370 	.word	0x0800b370
 80026ec:	0800b388 	.word	0x0800b388
 80026f0:	0800b060 	.word	0x0800b060
 80026f4:	20000634 	.word	0x20000634

080026f8 <gsm_init>:
void gsm_init(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0

    // Initialize MQTT
    const char *broker = "thingsboard.cloud:8883";
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <gsm_init+0x24>)
 8002700:	60fb      	str	r3, [r7, #12]
    const char *accesstoken = "aCWxFWJedGshl1DowCT8";
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <gsm_init+0x28>)
 8002704:	60bb      	str	r3, [r7, #8]
    const char *clientid = "KP";
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <gsm_init+0x2c>)
 8002708:	607b      	str	r3, [r7, #4]
//    const char *broker = "61f18205d9d64ad1b29f6e99d0679efc.s1.eu.hivemq.cloud:8883";
//    const char *accesstoken = "demo1";
//    const char *clientid = "Demo1234";

    mqtt_init(broker, accesstoken, clientid);
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fe78 	bl	8002404 <mqtt_init>
//	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
//  mqtt_publish("v1/devices/me/telemetry", "{\"temperature\": 51, \"humidity\": 03, \"flowRate\": 4, \"energy\": 91, \"volume\": 563, \"totalVolume\": 64}");
//    mqtt_publish("v1/devices/me/telemetry", msg);

    // mqtt_subscribe("v1/devices/me/telemetry");
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	0800b398 	.word	0x0800b398
 8002720:	0800b3b0 	.word	0x0800b3b0
 8002724:	0800b3c8 	.word	0x0800b3c8

08002728 <gsm_set_clock>:

void gsm_set_clock(){
 8002728:	b580      	push	{r7, lr}
 800272a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800272e:	af00      	add	r7, sp, #0

    send_at_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n",response,500);
 8002730:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002734:	4915      	ldr	r1, [pc, #84]	@ (800278c <gsm_set_clock+0x64>)
 8002736:	4816      	ldr	r0, [pc, #88]	@ (8002790 <gsm_set_clock+0x68>)
 8002738:	f7ff fde8 	bl	800230c <send_at_command>
    send_at_command("AT+CNTP\r\n",response,500);
 800273c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002740:	4912      	ldr	r1, [pc, #72]	@ (800278c <gsm_set_clock+0x64>)
 8002742:	4814      	ldr	r0, [pc, #80]	@ (8002794 <gsm_set_clock+0x6c>)
 8002744:	f7ff fde2 	bl	800230c <send_at_command>
    send_at_command("AT+CCLK?\r\n",response,500);
 8002748:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800274c:	490f      	ldr	r1, [pc, #60]	@ (800278c <gsm_set_clock+0x64>)
 800274e:	4812      	ldr	r0, [pc, #72]	@ (8002798 <gsm_set_clock+0x70>)
 8002750:	f7ff fddc 	bl	800230c <send_at_command>
    char AT[600];
    snprintf(AT, sizeof(AT), "Response: %s", response);
 8002754:	4638      	mov	r0, r7
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <gsm_set_clock+0x64>)
 8002758:	4a10      	ldr	r2, [pc, #64]	@ (800279c <gsm_set_clock+0x74>)
 800275a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800275e:	f005 fa01 	bl	8007b64 <sniprintf>

    HAL_UART_Transmit(&huart2,(uint8_t *)AT,strlen(AT),1000);
 8002762:	463b      	mov	r3, r7
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fdb3 	bl	80002d0 <strlen>
 800276a:	4603      	mov	r3, r0
 800276c:	b29a      	uxth	r2, r3
 800276e:	4639      	mov	r1, r7
 8002770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002774:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <gsm_set_clock+0x78>)
 8002776:	f002 fcf9 	bl	800516c <HAL_UART_Transmit>
	SetRTCFromCCLK(response);
 800277a:	4804      	ldr	r0, [pc, #16]	@ (800278c <gsm_set_clock+0x64>)
 800277c:	f000 f8cc 	bl	8002918 <SetRTCFromCCLK>

}
 8002780:	bf00      	nop
 8002782:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000834 	.word	0x20000834
 8002790:	0800b0ec 	.word	0x0800b0ec
 8002794:	0800b10c 	.word	0x0800b10c
 8002798:	0800b118 	.word	0x0800b118
 800279c:	0800b064 	.word	0x0800b064
 80027a0:	20000a94 	.word	0x20000a94

080027a4 <main>:
char response[512];



int main(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  HAL_Init();
 80027a8:	f000 fd36 	bl	8003218 <HAL_Init>
  SystemClock_Config();
 80027ac:	f000 fa8e 	bl	8002ccc <SystemClock_Config>
  MX_GPIO_Init();
 80027b0:	f000 fba2 	bl	8002ef8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027b4:	f000 fb22 	bl	8002dfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80027b8:	f000 fb4a 	bl	8002e50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80027bc:	f000 fb72 	bl	8002ea4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80027c0:	f000 faf6 	bl	8002db0 <MX_RTC_Init>

  uart_init();
 80027c4:	f000 fcc2 	bl	800314c <uart_init>
  sprintf(command,"Start\r\n");
 80027c8:	4923      	ldr	r1, [pc, #140]	@ (8002858 <main+0xb4>)
 80027ca:	4824      	ldr	r0, [pc, #144]	@ (800285c <main+0xb8>)
 80027cc:	f005 fa00 	bl	8007bd0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80027d0:	4822      	ldr	r0, [pc, #136]	@ (800285c <main+0xb8>)
 80027d2:	f7fd fd7d 	bl	80002d0 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	491f      	ldr	r1, [pc, #124]	@ (800285c <main+0xb8>)
 80027e0:	481f      	ldr	r0, [pc, #124]	@ (8002860 <main+0xbc>)
 80027e2:	f002 fcc3 	bl	800516c <HAL_UART_Transmit>
  rtc_int();
 80027e6:	f000 f845 	bl	8002874 <rtc_int>
  sprintf(command,"RTC OK\r\n");
 80027ea:	491e      	ldr	r1, [pc, #120]	@ (8002864 <main+0xc0>)
 80027ec:	481b      	ldr	r0, [pc, #108]	@ (800285c <main+0xb8>)
 80027ee:	f005 f9ef 	bl	8007bd0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80027f2:	481a      	ldr	r0, [pc, #104]	@ (800285c <main+0xb8>)
 80027f4:	f7fd fd6c 	bl	80002d0 <strlen>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002800:	4916      	ldr	r1, [pc, #88]	@ (800285c <main+0xb8>)
 8002802:	4817      	ldr	r0, [pc, #92]	@ (8002860 <main+0xbc>)
 8002804:	f002 fcb2 	bl	800516c <HAL_UART_Transmit>

  gsm_init();
 8002808:	f7ff ff76 	bl	80026f8 <gsm_init>
  gsm_set_clock();
 800280c:	f7ff ff8c 	bl	8002728 <gsm_set_clock>
  sprintf(command,"GSM OK\r\n");
 8002810:	4915      	ldr	r1, [pc, #84]	@ (8002868 <main+0xc4>)
 8002812:	4812      	ldr	r0, [pc, #72]	@ (800285c <main+0xb8>)
 8002814:	f005 f9dc 	bl	8007bd0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 8002818:	4810      	ldr	r0, [pc, #64]	@ (800285c <main+0xb8>)
 800281a:	f7fd fd59 	bl	80002d0 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002826:	490d      	ldr	r1, [pc, #52]	@ (800285c <main+0xb8>)
 8002828:	480d      	ldr	r0, [pc, #52]	@ (8002860 <main+0xbc>)
 800282a:	f002 fc9f 	bl	800516c <HAL_UART_Transmit>
//while(1){
//  data();
//  sprintf(command,"JSON OK\r\n");
//  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
//  HAL_Delay(1000);
  mqtt_subscribe("v1/devices/me/telemetry");
 800282e:	480f      	ldr	r0, [pc, #60]	@ (800286c <main+0xc8>)
 8002830:	f7ff ff0a 	bl	8002648 <mqtt_subscribe>
  sprintf(command,"Subscribe OK\r\n");
 8002834:	490e      	ldr	r1, [pc, #56]	@ (8002870 <main+0xcc>)
 8002836:	4809      	ldr	r0, [pc, #36]	@ (800285c <main+0xb8>)
 8002838:	f005 f9ca 	bl	8007bd0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 800283c:	4807      	ldr	r0, [pc, #28]	@ (800285c <main+0xb8>)
 800283e:	f7fd fd47 	bl	80002d0 <strlen>
 8002842:	4603      	mov	r3, r0
 8002844:	b29a      	uxth	r2, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	4904      	ldr	r1, [pc, #16]	@ (800285c <main+0xb8>)
 800284c:	4804      	ldr	r0, [pc, #16]	@ (8002860 <main+0xbc>)
 800284e:	f002 fc8d 	bl	800516c <HAL_UART_Transmit>
 8002852:	2300      	movs	r3, #0
//  send_sms(phone, msg);
//  sprintf(command,"sms ok\r\n");
//  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);


}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	0800b3cc 	.word	0x0800b3cc
 800285c:	20000234 	.word	0x20000234
 8002860:	20000a94 	.word	0x20000a94
 8002864:	0800b3d4 	.word	0x0800b3d4
 8002868:	0800b3e0 	.word	0x0800b3e0
 800286c:	0800b3ec 	.word	0x0800b3ec
 8002870:	0800b404 	.word	0x0800b404

08002874 <rtc_int>:

RTC_DateTypeDef Date;
RTC_TimeTypeDef Time;

void rtc_int(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af02      	add	r7, sp, #8

	  HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800287a:	2200      	movs	r2, #0
 800287c:	491f      	ldr	r1, [pc, #124]	@ (80028fc <rtc_int+0x88>)
 800287e:	4820      	ldr	r0, [pc, #128]	@ (8002900 <rtc_int+0x8c>)
 8002880:	f002 fa35 	bl	8004cee <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8002884:	2200      	movs	r2, #0
 8002886:	491f      	ldr	r1, [pc, #124]	@ (8002904 <rtc_int+0x90>)
 8002888:	481d      	ldr	r0, [pc, #116]	@ (8002900 <rtc_int+0x8c>)
 800288a:	f002 fb12 	bl	8004eb2 <HAL_RTC_GetDate>


	  sprintf(command,"%02d-%02d-%2d, ", Date.Date, Date.Month, 2000+ Date.Year);
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <rtc_int+0x90>)
 8002890:	789b      	ldrb	r3, [r3, #2]
 8002892:	461a      	mov	r2, r3
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <rtc_int+0x90>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	4619      	mov	r1, r3
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <rtc_int+0x90>)
 800289c:	78db      	ldrb	r3, [r3, #3]
 800289e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	4918      	ldr	r1, [pc, #96]	@ (8002908 <rtc_int+0x94>)
 80028a8:	4818      	ldr	r0, [pc, #96]	@ (800290c <rtc_int+0x98>)
 80028aa:	f005 f991 	bl	8007bd0 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80028ae:	4817      	ldr	r0, [pc, #92]	@ (800290c <rtc_int+0x98>)
 80028b0:	f7fd fd0e 	bl	80002d0 <strlen>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028bc:	4913      	ldr	r1, [pc, #76]	@ (800290c <rtc_int+0x98>)
 80028be:	4814      	ldr	r0, [pc, #80]	@ (8002910 <rtc_int+0x9c>)
 80028c0:	f002 fc54 	bl	800516c <HAL_UART_Transmit>

	  sprintf(command,"%02d:%02d:%02d\r\n", Time.Hours, Time.Minutes, Time.Seconds);
 80028c4:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <rtc_int+0x88>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <rtc_int+0x88>)
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <rtc_int+0x88>)
 80028d2:	789b      	ldrb	r3, [r3, #2]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	460b      	mov	r3, r1
 80028d8:	490e      	ldr	r1, [pc, #56]	@ (8002914 <rtc_int+0xa0>)
 80028da:	480c      	ldr	r0, [pc, #48]	@ (800290c <rtc_int+0x98>)
 80028dc:	f005 f978 	bl	8007bd0 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)command,strlen(command),1000);
 80028e0:	480a      	ldr	r0, [pc, #40]	@ (800290c <rtc_int+0x98>)
 80028e2:	f7fd fcf5 	bl	80002d0 <strlen>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ee:	4907      	ldr	r1, [pc, #28]	@ (800290c <rtc_int+0x98>)
 80028f0:	4807      	ldr	r0, [pc, #28]	@ (8002910 <rtc_int+0x9c>)
 80028f2:	f002 fc3b 	bl	800516c <HAL_UART_Transmit>
//	  sprintf(rtc,"Epoch: %lu\r\n", Rtc);
//	  HAL_UART_Transmit(&huart2,(uint8_t *)rtc,strlen(rtc),1000);
//	  HAL_Delay(500);


}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000a38 	.word	0x20000a38
 8002900:	20000b24 	.word	0x20000b24
 8002904:	20000a34 	.word	0x20000a34
 8002908:	0800b414 	.word	0x0800b414
 800290c:	20000234 	.word	0x20000234
 8002910:	20000a94 	.word	0x20000a94
 8002914:	0800b424 	.word	0x0800b424

08002918 <SetRTCFromCCLK>:
//    return (days * 86400) + (t.tm_hour * 3600) + (t.tm_min * 60) + t.tm_sec;
    time_t epoch_sec = mktime(&t);  // Converts struct tm to epoch seconds
    return ((uint64_t)epoch_sec * 1000UL);  // Convert to milliseconds
}

void SetRTCFromCCLK(char *response) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b094      	sub	sp, #80	@ 0x50
 800291c:	af04      	add	r7, sp, #16
 800291e:	6078      	str	r0, [r7, #4]
    int yy, MM, dd, hh, mm, ss;

    // Example: +CCLK: "25/05/15,11:27:40+00"
    char *start = strstr(response, "+CCLK: ");
 8002920:	4930      	ldr	r1, [pc, #192]	@ (80029e4 <SetRTCFromCCLK+0xcc>)
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f005 faa9 	bl	8007e7a <strstr>
 8002928:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (start) {
 800292a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04f      	beq.n	80029d0 <SetRTCFromCCLK+0xb8>
        if (sscanf(start, "+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d",
 8002930:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002934:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293c:	9303      	str	r3, [sp, #12]
 800293e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	4925      	ldr	r1, [pc, #148]	@ (80029e8 <SetRTCFromCCLK+0xd0>)
 8002954:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002956:	f005 f95d 	bl	8007c14 <siscanf>
 800295a:	4603      	mov	r3, r0
 800295c:	2b06      	cmp	r3, #6
 800295e:	d130      	bne.n	80029c2 <SetRTCFromCCLK+0xaa>
                   &yy, &MM, &dd, &hh, &mm, &ss) == 6) {
            RTC_DateTypeDef sDate = {0};
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
            RTC_TimeTypeDef sTime = {0};
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
//                hh -= 24;
//                dd += 1;
//                // You can optionally handle month/year rollover here if needed
//            }

            sDate.Year = yy;
 8002974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sDate.Month = MM;
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            sDate.Date = dd;
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            sDate.WeekDay = RTC_WEEKDAY_MONDAY; // Optional: calculate real weekday if needed
 800298c:	2301      	movs	r3, #1
 800298e:	f887 3020 	strb.w	r3, [r7, #32]

            sTime.Hours = hh;
 8002992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002994:	b2db      	uxtb	r3, r3
 8002996:	733b      	strb	r3, [r7, #12]
            sTime.Minutes = mm;
 8002998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299a:	b2db      	uxtb	r3, r3
 800299c:	737b      	strb	r3, [r7, #13]
            sTime.Seconds = ss;
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	73bb      	strb	r3, [r7, #14]


            HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2200      	movs	r2, #0
 80029aa:	4619      	mov	r1, r3
 80029ac:	480f      	ldr	r0, [pc, #60]	@ (80029ec <SetRTCFromCCLK+0xd4>)
 80029ae:	f002 f904 	bl	8004bba <HAL_RTC_SetTime>
            HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	2200      	movs	r2, #0
 80029b8:	4619      	mov	r1, r3
 80029ba:	480c      	ldr	r0, [pc, #48]	@ (80029ec <SetRTCFromCCLK+0xd4>)
 80029bc:	f002 f9f5 	bl	8004daa <HAL_RTC_SetDate>
            HAL_UART_Transmit(&huart2, (uint8_t *)"Failed to parse time\r\n", 23, 100);
        }
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CCLK not found in response\r\n", 29, 100);
    }
}
 80029c0:	e00c      	b.n	80029dc <SetRTCFromCCLK+0xc4>
            HAL_UART_Transmit(&huart2, (uint8_t *)"Failed to parse time\r\n", 23, 100);
 80029c2:	2364      	movs	r3, #100	@ 0x64
 80029c4:	2217      	movs	r2, #23
 80029c6:	490a      	ldr	r1, [pc, #40]	@ (80029f0 <SetRTCFromCCLK+0xd8>)
 80029c8:	480a      	ldr	r0, [pc, #40]	@ (80029f4 <SetRTCFromCCLK+0xdc>)
 80029ca:	f002 fbcf 	bl	800516c <HAL_UART_Transmit>
}
 80029ce:	e005      	b.n	80029dc <SetRTCFromCCLK+0xc4>
        HAL_UART_Transmit(&huart2, (uint8_t *)"CCLK not found in response\r\n", 29, 100);
 80029d0:	2364      	movs	r3, #100	@ 0x64
 80029d2:	221d      	movs	r2, #29
 80029d4:	4908      	ldr	r1, [pc, #32]	@ (80029f8 <SetRTCFromCCLK+0xe0>)
 80029d6:	4807      	ldr	r0, [pc, #28]	@ (80029f4 <SetRTCFromCCLK+0xdc>)
 80029d8:	f002 fbc8 	bl	800516c <HAL_UART_Transmit>
}
 80029dc:	bf00      	nop
 80029de:	3740      	adds	r7, #64	@ 0x40
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	0800b468 	.word	0x0800b468
 80029e8:	0800b470 	.word	0x0800b470
 80029ec:	20000b24 	.word	0x20000b24
 80029f0:	0800b490 	.word	0x0800b490
 80029f4:	20000a94 	.word	0x20000a94
 80029f8:	0800b4a8 	.word	0x0800b4a8

080029fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a12:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_MspInit+0x4c>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09a      	sub	sp, #104	@ 0x68
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	225c      	movs	r2, #92	@ 0x5c
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 f9df 	bl	8007e20 <memset>
  if(hrtc->Instance==RTC)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	@ (8002a98 <HAL_RTC_MspInit+0x4c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d111      	bne.n	8002a90 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f8aa 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a86:	f7ff fc25 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a8a:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <HAL_RTC_MspInit+0x50>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002a90:	bf00      	nop
 8002a92:	3768      	adds	r7, #104	@ 0x68
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40002800 	.word	0x40002800
 8002a9c:	42470e3c 	.word	0x42470e3c

08002aa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08e      	sub	sp, #56	@ 0x38
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5f      	ldr	r2, [pc, #380]	@ (8002c3c <HAL_UART_MspInit+0x19c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12d      	bne.n	8002b1e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	4a5d      	ldr	r2, [pc, #372]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a56      	ldr	r2, [pc, #344]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002afa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b14:	4619      	mov	r1, r3
 8002b16:	484b      	ldr	r0, [pc, #300]	@ (8002c44 <HAL_UART_MspInit+0x1a4>)
 8002b18:	f000 fd94 	bl	8003644 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b1c:	e089      	b.n	8002c32 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_UART_MspInit+0x1a8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12c      	bne.n	8002b82 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	4b44      	ldr	r3, [pc, #272]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b38:	4b41      	ldr	r3, [pc, #260]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b54:	4b3a      	ldr	r3, [pc, #232]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b60:	230c      	movs	r3, #12
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b70:	2307      	movs	r3, #7
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4832      	ldr	r0, [pc, #200]	@ (8002c44 <HAL_UART_MspInit+0x1a4>)
 8002b7c:	f000 fd62 	bl	8003644 <HAL_GPIO_Init>
}
 8002b80:	e057      	b.n	8002c32 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a31      	ldr	r2, [pc, #196]	@ (8002c4c <HAL_UART_MspInit+0x1ac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d152      	bne.n	8002c32 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9c:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb8:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_UART_MspInit+0x1a0>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002be0:	2320      	movs	r3, #32
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4815      	ldr	r0, [pc, #84]	@ (8002c50 <HAL_UART_MspInit+0x1b0>)
 8002bfc:	f000 fd22 	bl	8003644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c12:	2307      	movs	r3, #7
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480d      	ldr	r0, [pc, #52]	@ (8002c54 <HAL_UART_MspInit+0x1b4>)
 8002c1e:	f000 fd11 	bl	8003644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2027      	movs	r0, #39	@ 0x27
 8002c28:	f000 fc43 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c2c:	2027      	movs	r0, #39	@ 0x27
 8002c2e:	f000 fc5c 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3738      	adds	r7, #56	@ 0x38
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40011000 	.word	0x40011000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020400 	.word	0x40020400

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <NMI_Handler+0x4>

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <MemManage_Handler+0x4>

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cae:	f000 fb05 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <USART3_IRQHandler+0x10>)
 8002cbe:	f002 fb77 	bl	80053b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000adc 	.word	0x20000adc

08002ccc <SystemClock_Config>:
RTC_HandleTypeDef hrtc;



extern void SystemClock_Config(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b094      	sub	sp, #80	@ 0x50
 8002cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	2234      	movs	r2, #52	@ 0x34
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f005 f8a0 	bl	8007e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <SystemClock_Config+0xdc>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <SystemClock_Config+0xdc>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d00:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <SystemClock_Config+0xdc>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <SystemClock_Config+0xe0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d18:	4a24      	ldr	r2, [pc, #144]	@ (8002dac <SystemClock_Config+0xe0>)
 8002d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <SystemClock_Config+0xe0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8002d2c:	230a      	movs	r3, #10
 8002d2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d34:	2301      	movs	r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d38:	2310      	movs	r3, #16
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d40:	2302      	movs	r3, #2
 8002d42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d44:	2300      	movs	r3, #0
 8002d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002d4c:	2348      	movs	r3, #72	@ 0x48
 8002d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d54:	2302      	movs	r3, #2
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fc0b 	bl	800457c <HAL_RCC_OscConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d6c:	f7ff fab2 	bl	80022d4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002d70:	230f      	movs	r3, #15
 8002d72:	60bb      	str	r3, [r7, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d74:	2302      	movs	r3, #2
 8002d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fe06 	bl	80039a0 <HAL_RCC_ClockConfig>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002d9a:	f7ff fa9b 	bl	80022d4 <Error_Handler>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3750      	adds	r7, #80	@ 0x50
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40007000 	.word	0x40007000

08002db0 <MX_RTC_Init>:

extern void MX_RTC_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
//  RTC_TimeTypeDef sTime = {0};
//  RTC_DateTypeDef sDate = {0};

  hrtc.Instance = RTC;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002db6:	4a10      	ldr	r2, [pc, #64]	@ (8002df8 <MX_RTC_Init+0x48>)
 8002db8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dc2:	227f      	movs	r2, #127	@ 0x7f
 8002dc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <MX_RTC_Init+0x44>)
 8002de0:	f001 fe6a 	bl	8004ab8 <HAL_RTC_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002dea:	f7ff fa73 	bl	80022d4 <Error_Handler>
//
//  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000b24 	.word	0x20000b24
 8002df8:	40002800 	.word	0x40002800

08002dfc <MX_USART1_UART_Init>:

extern void MX_USART1_UART_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <MX_USART1_UART_Init+0x50>)
 8002e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e22:	220c      	movs	r2, #12
 8002e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e32:	4805      	ldr	r0, [pc, #20]	@ (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e34:	f002 f94a 	bl	80050cc <HAL_UART_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e3e:	f7ff fa49 	bl	80022d4 <Error_Handler>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000a4c 	.word	0x20000a4c
 8002e4c:	40011000 	.word	0x40011000

08002e50 <MX_USART2_UART_Init>:

extern void MX_USART2_UART_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <MX_USART2_UART_Init+0x50>)
 8002e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e86:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e88:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e8a:	f002 f91f 	bl	80050cc <HAL_UART_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002e94:	f7ff fa1e 	bl	80022d4 <Error_Handler>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000a94 	.word	0x20000a94
 8002ea0:	40004400 	.word	0x40004400

08002ea4 <MX_USART3_UART_Init>:

extern void MX_USART3_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <MX_USART3_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002eb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002eb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <MX_USART3_UART_Init+0x4c>)
 8002edc:	f002 f8f6 	bl	80050cc <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ee6:	f7ff f9f5 	bl	80022d4 <Error_Handler>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000adc 	.word	0x20000adc
 8002ef4:	40004800 	.word	0x40004800

08002ef8 <MX_GPIO_Init>:

extern void MX_GPIO_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b16      	ldr	r3, [pc, #88]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <MX_GPIO_Init+0x9c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f68:	480b      	ldr	r0, [pc, #44]	@ (8002f98 <MX_GPIO_Init+0xa0>)
 8002f6a:	f000 fcff 	bl	800396c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	4619      	mov	r1, r3
 8002f86:	4804      	ldr	r0, [pc, #16]	@ (8002f98 <MX_GPIO_Init+0xa0>)
 8002f88:	f000 fb5c 	bl	8003644 <HAL_GPIO_Init>
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return 1;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_kill>:

int _kill(int pid, int sig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb6:	f004 ffd1 	bl	8007f5c <__errno>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2216      	movs	r2, #22
 8002fbe:	601a      	str	r2, [r3, #0]
  return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_exit>:

void _exit (int status)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ffe7 	bl	8002fac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <_exit+0x12>

08002fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e00a      	b.n	800300a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	b2ca      	uxtb	r2, r1
 8003002:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf0      	blt.n	8002ff4 <_read+0x12>
  }

  return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e009      	b.n	8003042 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f8b2 	bl	80031a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbf1      	blt.n	800302e <_write+0x12>
  }
  return len;
 800304a:	687b      	ldr	r3, [r7, #4]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_close>:

int _close(int file)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800307c:	605a      	str	r2, [r3, #4]
  return 0;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_isatty>:

int _isatty(int file)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f004 ff36 	bl	8007f5c <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <_sbrk+0x64>)
 800310c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20020000 	.word	0x20020000
 800311c:	00000400 	.word	0x00000400
 8003120:	20000b44 	.word	0x20000b44
 8003124:	20000ce0 	.word	0x20000ce0

08003128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <SystemInit+0x20>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <SystemInit+0x20>)
 8003134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <uart_init>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void uart_init(void){
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	   *  RTS: The sender (transmitter) asserts this signal to indicate that it is ready to send data.
	   *  CTS: The receiver (or the device at the receiving end) asserts this signal to indicate that it is ready to receive data.
	   *  When hardware flow control is enabled, the sender waits for a CTS signal from the receiver before transmitting data.
	   *  Similarly, the receiver checks the RTS signal to determine when it is ready to accept new data.*/

	  UartHandle.Instance          = USART2;
 8003150:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <uart_init+0x48>)
 8003152:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <uart_init+0x4c>)
 8003154:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate     = 115200;
 8003156:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <uart_init+0x48>)
 8003158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800315c:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800315e:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <uart_init+0x48>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <uart_init+0x48>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <uart_init+0x48>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <uart_init+0x48>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003176:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <uart_init+0x48>)
 8003178:	220c      	movs	r2, #12
 800317a:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <uart_init+0x48>)
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]

	  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003182:	4804      	ldr	r0, [pc, #16]	@ (8003194 <uart_init+0x48>)
 8003184:	f001 ffa2 	bl	80050cc <HAL_UART_Init>
	    /* Initialization Error */
//	    Error_Handler();
	  }

	  /* Output a message on Hyperterminal using printf function */
	  printf("\n\r UART Printf Example: retarget the C library printf function to the UART \r\n");
 8003188:	4804      	ldr	r0, [pc, #16]	@ (800319c <uart_init+0x50>)
 800318a:	f004 fce3 	bl	8007b54 <puts>

}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000b48 	.word	0x20000b48
 8003198:	40004400 	.word	0x40004400
 800319c:	0800b4c8 	.word	0x0800b4c8

080031a0 <__io_putchar>:



PUTCHAR_PROTOTYPE
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80031a8:	1d39      	adds	r1, r7, #4
 80031aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ae:	2201      	movs	r2, #1
 80031b0:	4803      	ldr	r0, [pc, #12]	@ (80031c0 <__io_putchar+0x20>)
 80031b2:	f001 ffdb 	bl	800516c <HAL_UART_Transmit>

  return ch;
 80031b6:	687b      	ldr	r3, [r7, #4]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000b48 	.word	0x20000b48

080031c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031c8:	f7ff ffae 	bl	8003128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031cc:	480c      	ldr	r0, [pc, #48]	@ (8003200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ce:	490d      	ldr	r1, [pc, #52]	@ (8003204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d4:	e002      	b.n	80031dc <LoopCopyDataInit>

080031d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031da:	3304      	adds	r3, #4

080031dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e0:	d3f9      	bcc.n	80031d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e2:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e8:	e001      	b.n	80031ee <LoopFillZerobss>

080031ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ec:	3204      	adds	r2, #4

080031ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f0:	d3fb      	bcc.n	80031ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f004 feb9 	bl	8007f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f6:	f7ff fad5 	bl	80027a4 <main>
  bx  lr    
 80031fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003204:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003208:	0800b988 	.word	0x0800b988
  ldr r2, =_sbss
 800320c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003210:	20000ce0 	.word	0x20000ce0

08003214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC_IRQHandler>
	...

08003218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <HAL_Init+0x40>)
 8003222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <HAL_Init+0x40>)
 800322e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <HAL_Init+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a07      	ldr	r2, [pc, #28]	@ (8003258 <HAL_Init+0x40>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003240:	2003      	movs	r0, #3
 8003242:	f000 f92b 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003246:	200f      	movs	r0, #15
 8003248:	f000 f808 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800324c:	f7ff fbd6 	bl	80029fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_InitTick+0x54>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <HAL_InitTick+0x58>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f943 	bl	8003506 <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f000 f90b 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	@ (80032b8 <HAL_InitTick+0x5c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000003c 	.word	0x2000003c
 80032b4:	20000044 	.word	0x20000044
 80032b8:	20000040 	.word	0x20000040

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000044 	.word	0x20000044
 80032e0:	20000b90 	.word	0x20000b90

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000b90 	.word	0x20000b90

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	@ (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	@ (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	@ (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff feda 	bl	80032e4 <HAL_GetTick>
 8003530:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d008      	beq.n	8003550 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2280      	movs	r2, #128	@ 0x80
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e052      	b.n	80035f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0216 	bic.w	r2, r2, #22
 800355e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800356e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_DMA_Abort+0x62>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0208 	bic.w	r2, r2, #8
 800358e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a0:	e013      	b.n	80035ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a2:	f7ff fe9f 	bl	80032e4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	d90c      	bls.n	80035ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e015      	b.n	80035f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e4      	bne.n	80035a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	223f      	movs	r2, #63	@ 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d004      	beq.n	800361c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2280      	movs	r2, #128	@ 0x80
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e00c      	b.n	8003636 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2205      	movs	r2, #5
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e165      	b.n	800392c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003660:	2201      	movs	r2, #1
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	429a      	cmp	r2, r3
 800367a:	f040 8154 	bne.w	8003926 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d005      	beq.n	8003696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003692:	2b02      	cmp	r3, #2
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b03      	cmp	r3, #3
 8003702:	d017      	beq.n	8003734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d123      	bne.n	8003788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	08da      	lsrs	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3208      	adds	r2, #8
 8003782:	69b9      	ldr	r1, [r7, #24]
 8003784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80ae 	beq.w	8003926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003944 <HAL_GPIO_Init+0x300>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003944 <HAL_GPIO_Init+0x300>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_GPIO_Init+0x300>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e6:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <HAL_GPIO_Init+0x304>)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	3302      	adds	r3, #2
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4f      	ldr	r2, [pc, #316]	@ (800394c <HAL_GPIO_Init+0x308>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d025      	beq.n	800385e <HAL_GPIO_Init+0x21a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4e      	ldr	r2, [pc, #312]	@ (8003950 <HAL_GPIO_Init+0x30c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <HAL_GPIO_Init+0x216>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4d      	ldr	r2, [pc, #308]	@ (8003954 <HAL_GPIO_Init+0x310>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d019      	beq.n	8003856 <HAL_GPIO_Init+0x212>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4c      	ldr	r2, [pc, #304]	@ (8003958 <HAL_GPIO_Init+0x314>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_GPIO_Init+0x20e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a4b      	ldr	r2, [pc, #300]	@ (800395c <HAL_GPIO_Init+0x318>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00d      	beq.n	800384e <HAL_GPIO_Init+0x20a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4a      	ldr	r2, [pc, #296]	@ (8003960 <HAL_GPIO_Init+0x31c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <HAL_GPIO_Init+0x206>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a49      	ldr	r2, [pc, #292]	@ (8003964 <HAL_GPIO_Init+0x320>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_GPIO_Init+0x202>
 8003842:	2306      	movs	r3, #6
 8003844:	e00c      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 8003846:	2307      	movs	r3, #7
 8003848:	e00a      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 800384a:	2305      	movs	r3, #5
 800384c:	e008      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 800384e:	2304      	movs	r3, #4
 8003850:	e006      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 8003852:	2303      	movs	r3, #3
 8003854:	e004      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 8003856:	2302      	movs	r3, #2
 8003858:	e002      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <HAL_GPIO_Init+0x21c>
 800385e:	2300      	movs	r3, #0
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f002 0203 	and.w	r2, r2, #3
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	4093      	lsls	r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003870:	4935      	ldr	r1, [pc, #212]	@ (8003948 <HAL_GPIO_Init+0x304>)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387e:	4b3a      	ldr	r3, [pc, #232]	@ (8003968 <HAL_GPIO_Init+0x324>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	43db      	mvns	r3, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4013      	ands	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a2:	4a31      	ldr	r2, [pc, #196]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038cc:	4a26      	ldr	r2, [pc, #152]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d2:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003920:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_GPIO_Init+0x324>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3301      	adds	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	f67f ae96 	bls.w	8003660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3724      	adds	r7, #36	@ 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40013800 	.word	0x40013800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020400 	.word	0x40020400
 8003954:	40020800 	.word	0x40020800
 8003958:	40020c00 	.word	0x40020c00
 800395c:	40021000 	.word	0x40021000
 8003960:	40021400 	.word	0x40021400
 8003964:	40021800 	.word	0x40021800
 8003968:	40013c00 	.word	0x40013c00

0800396c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
 8003978:	4613      	mov	r3, r2
 800397a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003988:	e003      	b.n	8003992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	041a      	lsls	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0cc      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b68      	ldr	r3, [pc, #416]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d90c      	bls.n	80039dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b65      	ldr	r3, [pc, #404]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a52      	ldr	r2, [pc, #328]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d044      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d119      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e067      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b37      	ldr	r3, [pc, #220]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4934      	ldr	r1, [pc, #208]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a90:	f7ff fc28 	bl	80032e4 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7ff fc24 	bl	80032e4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e04f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d20c      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 fb7f 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fb88 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800b524 	.word	0x0800b524
 8003b64:	2000003c 	.word	0x2000003c
 8003b68:	20000040 	.word	0x20000040

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000003c 	.word	0x2000003c

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	0800b534 	.word	0x0800b534

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffdc 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0b5b      	lsrs	r3, r3, #13
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	0800b534 	.word	0x0800b534

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	@ 0x30
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c12:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	496c      	ldr	r1, [pc, #432]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c3a:	4b64      	ldr	r3, [pc, #400]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c40:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	4960      	ldr	r1, [pc, #384]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c68:	4b58      	ldr	r3, [pc, #352]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4955      	ldr	r1, [pc, #340]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c86:	d101      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca4:	4b49      	ldr	r3, [pc, #292]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb2:	4946      	ldr	r1, [pc, #280]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 808a 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	4a38      	ldr	r2, [pc, #224]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf2:	4b36      	ldr	r3, [pc, #216]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cfe:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d0a:	f7ff faeb 	bl	80032e4 <HAL_GetTick>
 8003d0e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7ff fae7 	bl	80032e4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e278      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d30:	4b26      	ldr	r3, [pc, #152]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d38:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02f      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d56:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d58:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d64:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d6a:	4b18      	ldr	r3, [pc, #96]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d114      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d76:	f7ff fab5 	bl	80032e4 <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7ff fab1 	bl	80032e4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e240      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ee      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dac:	d114      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	4902      	ldr	r1, [pc, #8]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470e40 	.word	0x42470e40
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a49      	ldr	r2, [pc, #292]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003de2:	6093      	str	r3, [r2, #8]
 8003de4:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	4944      	ldr	r1, [pc, #272]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003e08:	4b3f      	ldr	r3, [pc, #252]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e0a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e18:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	4937      	ldr	r1, [pc, #220]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3a:	4b32      	ldr	r3, [pc, #200]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e40:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e48:	492e      	ldr	r1, [pc, #184]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e5c:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e62:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	4926      	ldr	r1, [pc, #152]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	491a      	ldr	r1, [pc, #104]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebc:	4911      	ldr	r1, [pc, #68]	@ (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee0:	f040 80ff 	bne.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eea:	f7ff f9fb 	bl	80032e4 <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef2:	f7ff f9f7 	bl	80032e4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d907      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e188      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	424711e0 	.word	0x424711e0
 8003f0c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f10:	4b7e      	ldr	r3, [pc, #504]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ea      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d028      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d124      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f44:	4b71      	ldr	r3, [pc, #452]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4a:	0c1b      	lsrs	r3, r3, #16
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	3301      	adds	r3, #1
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f56:	4b6d      	ldr	r3, [pc, #436]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5c:	0e1b      	lsrs	r3, r3, #24
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	019b      	lsls	r3, r3, #6
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	3b01      	subs	r3, #1
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	4961      	ldr	r1, [pc, #388]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d035      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb8:	d130      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fba:	4b54      	ldr	r3, [pc, #336]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd2:	0f1b      	lsrs	r3, r3, #28
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	071b      	lsls	r3, r3, #28
 8003ffc:	4943      	ldr	r1, [pc, #268]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004004:	4b41      	ldr	r3, [pc, #260]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800400a:	f023 021f 	bic.w	r2, r3, #31
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	3b01      	subs	r3, #1
 8004014:	493d      	ldr	r1, [pc, #244]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d029      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004030:	d124      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004032:	4b36      	ldr	r3, [pc, #216]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004044:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404a:	0f1b      	lsrs	r3, r3, #28
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	3b01      	subs	r3, #1
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	431a      	orrs	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	431a      	orrs	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	071b      	lsls	r3, r3, #28
 8004074:	4925      	ldr	r1, [pc, #148]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004084:	2b00      	cmp	r3, #0
 8004086:	d016      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	4917      	ldr	r1, [pc, #92]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040b6:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040bc:	f7ff f912 	bl	80032e4 <HAL_GetTick>
 80040c0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040c4:	f7ff f90e 	bl	80032e4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e09f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 8095 	bne.w	8004214 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040f0:	f7ff f8f8 	bl	80032e4 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040f6:	e00f      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040f8:	f7ff f8f4 	bl	80032e4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d908      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e085      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	42470068 	.word	0x42470068
 8004114:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004118:	4b41      	ldr	r3, [pc, #260]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004124:	d0e8      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d02b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414a:	2b00      	cmp	r3, #0
 800414c:	d127      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800414e:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	4928      	ldr	r1, [pc, #160]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004184:	4b26      	ldr	r3, [pc, #152]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800418a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	3b01      	subs	r3, #1
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	4922      	ldr	r1, [pc, #136]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01d      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041b2:	d118      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	0e1b      	lsrs	r3, r3, #24
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	019b      	lsls	r3, r3, #6
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	3b01      	subs	r3, #1
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	4910      	ldr	r1, [pc, #64]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ec:	f7ff f87a 	bl	80032e4 <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041f4:	f7ff f876 	bl	80032e4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e007      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004212:	d1ef      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3730      	adds	r7, #48	@ 0x30
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	42470070 	.word	0x42470070

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b0a6      	sub	sp, #152	@ 0x98
 800422e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424e:	4bc8      	ldr	r3, [pc, #800]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b0c      	cmp	r3, #12
 8004258:	f200 817e 	bhi.w	8004558 <HAL_RCC_GetSysClockFreq+0x330>
 800425c:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <HAL_RCC_GetSysClockFreq+0x3c>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004299 	.word	0x08004299
 8004268:	08004559 	.word	0x08004559
 800426c:	08004559 	.word	0x08004559
 8004270:	08004559 	.word	0x08004559
 8004274:	080042a1 	.word	0x080042a1
 8004278:	08004559 	.word	0x08004559
 800427c:	08004559 	.word	0x08004559
 8004280:	08004559 	.word	0x08004559
 8004284:	080042a9 	.word	0x080042a9
 8004288:	08004559 	.word	0x08004559
 800428c:	08004559 	.word	0x08004559
 8004290:	08004559 	.word	0x08004559
 8004294:	08004413 	.word	0x08004413
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004298:	4bb6      	ldr	r3, [pc, #728]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x34c>)
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800429e:	e15f      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a0:	4bb5      	ldr	r3, [pc, #724]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x350>)
 80042a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80042a6:	e15b      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a8:	4bb1      	ldr	r3, [pc, #708]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b4:	4bae      	ldr	r3, [pc, #696]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d031      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c0:	4bab      	ldr	r3, [pc, #684]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	2200      	movs	r2, #0
 80042c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d4:	2300      	movs	r3, #0
 80042d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d8:	4ba7      	ldr	r3, [pc, #668]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x350>)
 80042da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80042de:	462a      	mov	r2, r5
 80042e0:	fb03 f202 	mul.w	r2, r3, r2
 80042e4:	2300      	movs	r3, #0
 80042e6:	4621      	mov	r1, r4
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	4aa2      	ldr	r2, [pc, #648]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x350>)
 80042f0:	4621      	mov	r1, r4
 80042f2:	fba1 1202 	umull	r1, r2, r1, r2
 80042f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042f8:	460a      	mov	r2, r1
 80042fa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80042fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80042fe:	4413      	add	r3, r2
 8004300:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004306:	2200      	movs	r2, #0
 8004308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800430a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800430c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004310:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004314:	f7fc fc98 	bl	8000c48 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004322:	e064      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b92      	ldr	r3, [pc, #584]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	2200      	movs	r2, #0
 800432c:	653b      	str	r3, [r7, #80]	@ 0x50
 800432e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004338:	2300      	movs	r3, #0
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0159      	lsls	r1, r3, #5
 800434e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004352:	0150      	lsls	r0, r2, #5
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4621      	mov	r1, r4
 800435a:	1a51      	subs	r1, r2, r1
 800435c:	6139      	str	r1, [r7, #16]
 800435e:	4629      	mov	r1, r5
 8004360:	eb63 0301 	sbc.w	r3, r3, r1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004372:	4659      	mov	r1, fp
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	4651      	mov	r1, sl
 8004378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437c:	4651      	mov	r1, sl
 800437e:	018a      	lsls	r2, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ebb2 0801 	subs.w	r8, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0901 	sbc.w	r9, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a0:	4690      	mov	r8, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	eb18 0303 	adds.w	r3, r8, r3
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb49 0303 	adc.w	r3, r9, r3
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043c0:	4629      	mov	r1, r5
 80043c2:	028b      	lsls	r3, r1, #10
 80043c4:	4621      	mov	r1, r4
 80043c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ca:	4621      	mov	r1, r4
 80043cc:	028a      	lsls	r2, r1, #10
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d6:	2200      	movs	r2, #0
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043da:	647a      	str	r2, [r7, #68]	@ 0x44
 80043dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043e0:	f7fc fc32 	bl	8000c48 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043ee:	4b60      	ldr	r3, [pc, #384]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	3301      	adds	r3, #1
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004400:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004410:	e0a6      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004412:	4b57      	ldr	r3, [pc, #348]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800441a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b54      	ldr	r3, [pc, #336]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02a      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b51      	ldr	r3, [pc, #324]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004434:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800443c:	2100      	movs	r1, #0
 800443e:	4b4e      	ldr	r3, [pc, #312]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x350>)
 8004440:	fb03 f201 	mul.w	r2, r3, r1
 8004444:	2300      	movs	r3, #0
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	4413      	add	r3, r2
 800444c:	4a4a      	ldr	r2, [pc, #296]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x350>)
 800444e:	fba0 1202 	umull	r1, r2, r0, r2
 8004452:	677a      	str	r2, [r7, #116]	@ 0x74
 8004454:	460a      	mov	r2, r1
 8004456:	673a      	str	r2, [r7, #112]	@ 0x70
 8004458:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800445a:	4413      	add	r3, r2
 800445c:	677b      	str	r3, [r7, #116]	@ 0x74
 800445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004462:	2200      	movs	r2, #0
 8004464:	633b      	str	r3, [r7, #48]	@ 0x30
 8004466:	637a      	str	r2, [r7, #52]	@ 0x34
 8004468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800446c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004470:	f7fc fbea 	bl	8000c48 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4613      	mov	r3, r2
 800447a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800447e:	e05b      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4b3b      	ldr	r3, [pc, #236]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	2200      	movs	r2, #0
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800448a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
 8004498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4641      	mov	r1, r8
 80044b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d4:	ebb2 040a 	subs.w	r4, r2, sl
 80044d8:	eb63 050b 	sbc.w	r5, r3, fp
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	464b      	mov	r3, r9
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004520:	2200      	movs	r2, #0
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	61fa      	str	r2, [r7, #28]
 8004526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452a:	f7fc fb8d 	bl	8000c48 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4613      	mov	r3, r2
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004538:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x348>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0f1b      	lsrs	r3, r3, #28
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004546:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800454a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004556:	e003      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004558:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x34c>)
 800455a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800455e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004564:	4618      	mov	r0, r3
 8004566:	3798      	adds	r7, #152	@ 0x98
 8004568:	46bd      	mov	sp, r7
 800456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400
 8004578:	017d7840 	.word	0x017d7840

0800457c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e28d      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8083 	beq.w	80046a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800459c:	4b94      	ldr	r3, [pc, #592]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d019      	beq.n	80045dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045a8:	4b91      	ldr	r3, [pc, #580]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045b4:	4b8e      	ldr	r3, [pc, #568]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c0:	d00c      	beq.n	80045dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b8b      	ldr	r3, [pc, #556]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d112      	bne.n	80045f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045da:	d10b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	4b84      	ldr	r3, [pc, #528]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x124>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d157      	bne.n	80046a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e25a      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x90>
 80045fe:	4b7c      	ldr	r3, [pc, #496]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a7b      	ldr	r2, [pc, #492]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xcc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0xb4>
 8004616:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a75      	ldr	r2, [pc, #468]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b73      	ldr	r3, [pc, #460]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a72      	ldr	r2, [pc, #456]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xcc>
 8004630:	4b6f      	ldr	r3, [pc, #444]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6e      	ldr	r2, [pc, #440]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b6c      	ldr	r3, [pc, #432]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6b      	ldr	r2, [pc, #428]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe fe48 	bl	80032e4 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe fe44 	bl	80032e4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e21f      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xdc>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe fe34 	bl	80032e4 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fe30 	bl	80032e4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e20b      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x104>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d06f      	beq.n	800478e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ae:	4b50      	ldr	r3, [pc, #320]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046ba:	4b4d      	ldr	r3, [pc, #308]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
        || \
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x186>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1d3      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4937      	ldr	r1, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_OscConfig+0x278>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fe fddd 	bl	80032e4 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fe fdd9 	bl	80032e4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1b4      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4925      	ldr	r1, [pc, #148]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_OscConfig+0x278>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fe fdbc 	bl	80032e4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7fe fdb8 	bl	80032e4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e193      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d036      	beq.n	8004808 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_OscConfig+0x27c>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fe fd9c 	bl	80032e4 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fe fd98 	bl	80032e4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e173      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x274>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x234>
 80047ce:	e01b      	b.n	8004808 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x27c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fe fd85 	bl	80032e4 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	e00e      	b.n	80047fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7fe fd81 	bl	80032e4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d907      	bls.n	80047fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e15c      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	42470000 	.word	0x42470000
 80047f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80047fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ea      	bne.n	80047de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8097 	beq.w	8004944 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b83      	ldr	r3, [pc, #524]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b7c      	ldr	r3, [pc, #496]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b79      	ldr	r3, [pc, #484]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b76      	ldr	r3, [pc, #472]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a75      	ldr	r2, [pc, #468]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fe fd41 	bl	80032e4 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fe fd3d 	bl	80032e4 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e118      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b6c      	ldr	r3, [pc, #432]	@ (8004a2c <HAL_RCC_OscConfig+0x4b0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x31e>
 800488c:	4b66      	ldr	r3, [pc, #408]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a65      	ldr	r2, [pc, #404]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x358>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x340>
 80048a2:	4b61      	ldr	r3, [pc, #388]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a60      	ldr	r2, [pc, #384]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x358>
 80048bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a59      	ldr	r2, [pc, #356]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	4b57      	ldr	r3, [pc, #348]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a56      	ldr	r2, [pc, #344]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fe fd02 	bl	80032e4 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fe fcfe 	bl	80032e4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0d7      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RCC_OscConfig+0x368>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fe fcec 	bl	80032e4 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	e00a      	b.n	8004926 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fe fce8 	bl	80032e4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0c1      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	4b40      	ldr	r3, [pc, #256]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ee      	bne.n	8004910 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b3b      	ldr	r3, [pc, #236]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80ad 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800494e:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d060      	beq.n	8004a1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d145      	bne.n	80049ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b33      	ldr	r3, [pc, #204]	@ (8004a30 <HAL_RCC_OscConfig+0x4b4>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fcbc 	bl	80032e4 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fe fcb8 	bl	80032e4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e093      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b29      	ldr	r3, [pc, #164]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	071b      	lsls	r3, r3, #28
 80049ba:	491b      	ldr	r1, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_RCC_OscConfig+0x4b4>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fe fc8d 	bl	80032e4 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fe fc89 	bl	80032e4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e064      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e0:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x452>
 80049ec:	e05c      	b.n	8004aa8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <HAL_RCC_OscConfig+0x4b4>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fe fc76 	bl	80032e4 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fe fc72 	bl	80032e4 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e04d      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0e:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x480>
 8004a1a:	e045      	b.n	8004aa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e040      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000
 8004a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a34:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <HAL_RCC_OscConfig+0x538>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d030      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d129      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d122      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d119      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d10f      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800

08004ab8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e073      	b.n	8004bb2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7f5b      	ldrb	r3, [r3, #29]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fd ffb6 	bl	8002a4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d055      	beq.n	8004ba0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	22ca      	movs	r2, #202	@ 0xca
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2253      	movs	r2, #83	@ 0x53
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa49 	bl	8004f9c <RTC_EnterInitMode>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d12c      	bne.n	8004b6e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b26:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa50 	bl	800500a <RTC_ExitInitMode>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d110      	bne.n	8004b96 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ff      	movs	r2, #255	@ 0xff
 8004b9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b9e:	e001      	b.n	8004ba4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bba:	b590      	push	{r4, r7, lr}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	7f1b      	ldrb	r3, [r3, #28]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RTC_SetTime+0x1c>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e087      	b.n	8004ce6 <HAL_RTC_SetTime+0x12c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2202      	movs	r2, #2
 8004be0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d126      	bne.n	8004c36 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fa27 	bl	8005054 <RTC_ByteToBcd2>
 8004c06:	4603      	mov	r3, r0
 8004c08:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fa20 	bl	8005054 <RTC_ByteToBcd2>
 8004c14:	4603      	mov	r3, r0
 8004c16:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c18:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	789b      	ldrb	r3, [r3, #2]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fa18 	bl	8005054 <RTC_ByteToBcd2>
 8004c24:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c26:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e018      	b.n	8004c68 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004c56:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004c5c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	78db      	ldrb	r3, [r3, #3]
 8004c62:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	22ca      	movs	r2, #202	@ 0xca
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2253      	movs	r2, #83	@ 0x53
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f98f 	bl	8004f9c <RTC_EnterInitMode>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d120      	bne.n	8004cca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004c92:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ca6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6899      	ldr	r1, [r3, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f9a2 	bl	800500a <RTC_ExitInitMode>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	22ff      	movs	r2, #255	@ 0xff
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]

  return status;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}

08004cee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004d20:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d24:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0d9b      	lsrs	r3, r3, #22
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11a      	bne.n	8004da0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f98e 	bl	8005090 <RTC_Bcd2ToByte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f985 	bl	8005090 <RTC_Bcd2ToByte>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f97c 	bl	8005090 <RTC_Bcd2ToByte>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004daa:	b590      	push	{r4, r7, lr}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	7f1b      	ldrb	r3, [r3, #28]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RTC_SetDate+0x1c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e071      	b.n	8004eaa <HAL_RTC_SetDate+0x100>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10e      	bne.n	8004df6 <HAL_RTC_SetDate+0x4c>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	f023 0310 	bic.w	r3, r3, #16
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	330a      	adds	r3, #10
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11c      	bne.n	8004e36 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f927 	bl	8005054 <RTC_ByteToBcd2>
 8004e06:	4603      	mov	r3, r0
 8004e08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f920 	bl	8005054 <RTC_ByteToBcd2>
 8004e14:	4603      	mov	r3, r0
 8004e16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	789b      	ldrb	r3, [r3, #2]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f918 	bl	8005054 <RTC_ByteToBcd2>
 8004e24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e00e      	b.n	8004e54 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	78db      	ldrb	r3, [r3, #3]
 8004e3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e42:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004e48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	22ca      	movs	r2, #202	@ 0xca
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2253      	movs	r2, #83	@ 0x53
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f899 	bl	8004f9c <RTC_EnterInitMode>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10c      	bne.n	8004e8e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f8c0 	bl	800500a <RTC_ExitInitMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ff      	movs	r2, #255	@ 0xff
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]

  return status;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ecc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	0b5b      	lsrs	r3, r3, #13
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d11a      	bne.n	8004f46 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	78db      	ldrb	r3, [r3, #3]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f8bb 	bl	8005090 <RTC_Bcd2ToByte>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f8b2 	bl	8005090 <RTC_Bcd2ToByte>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	789b      	ldrb	r3, [r3, #2]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f8a9 	bl	8005090 <RTC_Bcd2ToByte>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0d      	ldr	r2, [pc, #52]	@ (8004f98 <HAL_RTC_WaitForSynchro+0x48>)
 8004f62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f64:	f7fe f9be 	bl	80032e4 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f6a:	e009      	b.n	8004f80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f6c:	f7fe f9ba 	bl	80032e4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f7a:	d901      	bls.n	8004f80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e007      	b.n	8004f90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ee      	beq.n	8004f6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00017f5f 	.word	0x00017f5f

08004f9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d122      	bne.n	8005000 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fca:	f7fe f98b 	bl	80032e4 <HAL_GetTick>
 8004fce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fd0:	e00c      	b.n	8004fec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fd2:	f7fe f987 	bl	80032e4 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fe0:	d904      	bls.n	8004fec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <RTC_EnterInitMode+0x64>
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d1e8      	bne.n	8004fd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005024:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ff8b 	bl	8004f50 <HAL_RTC_WaitForSynchro>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2204      	movs	r2, #4
 8005044:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005062:	e005      	b.n	8005070 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	3b0a      	subs	r3, #10
 800506e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b09      	cmp	r3, #9
 8005074:	d8f6      	bhi.n	8005064 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	b2da      	uxtb	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	4313      	orrs	r3, r2
 8005082:	b2db      	uxtb	r3, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4413      	add	r3, r2
 80050be:	b2db      	uxtb	r3, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e042      	b.n	8005164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fcd4 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fe15 	bl	8005d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d175      	bne.n	8005278 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Transmit+0x2c>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e06e      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2221      	movs	r2, #33	@ 0x21
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051aa:	f7fe f89b 	bl	80032e4 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c4:	d108      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e0:	e02e      	b.n	8005240 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	@ 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fbb3 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e03a      	b.n	800527a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3302      	adds	r3, #2
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e007      	b.n	8005232 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1cb      	bne.n	80051e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2140      	movs	r1, #64	@ 0x40
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fb7f 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	@ 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	f040 8081 	bne.w	80053a6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Receive+0x2e>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e079      	b.n	80053a8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2222      	movs	r2, #34	@ 0x22
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c8:	f7fe f80c 	bl	80032e4 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e2:	d108      	bne.n	80052f6 <HAL_UART_Receive+0x74>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e003      	b.n	80052fe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80052fe:	e047      	b.n	8005390 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	2120      	movs	r1, #32
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb24 	bl	8005958 <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e042      	b.n	80053a8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005334:	b29a      	uxth	r2, r3
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	3302      	adds	r3, #2
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	e01f      	b.n	8005382 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534a:	d007      	beq.n	800535c <HAL_UART_Receive+0xda>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <HAL_UART_Receive+0xe8>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e008      	b.n	800537c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005376:	b2da      	uxtb	r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1b2      	bne.n	8005300 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b0ba      	sub	sp, #232	@ 0xe8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10f      	bne.n	8005416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_UART_IRQHandler+0x66>
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fbd7 	bl	8005bc2 <UART_Receive_IT>
      return;
 8005414:	e273      	b.n	80058fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80de 	beq.w	80055dc <HAL_UART_IRQHandler+0x22c>
 8005420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800542c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005430:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80d1 	beq.w	80055dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_UART_IRQHandler+0xae>
 8005446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_UART_IRQHandler+0xd2>
 800546a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	f043 0202 	orr.w	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_UART_IRQHandler+0xf6>
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	f043 0204 	orr.w	r2, r3, #4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d011      	beq.n	80054d6 <HAL_UART_IRQHandler+0x126>
 80054b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	f043 0208 	orr.w	r2, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 820a 	beq.w	80058f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_UART_IRQHandler+0x14e>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fb62 	bl	8005bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <HAL_UART_IRQHandler+0x17a>
 8005522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04f      	beq.n	80055ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa6d 	bl	8005a0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d141      	bne.n	80055c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800555c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800556a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800556e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d9      	bne.n	800553e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d013      	beq.n	80055ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	4a8a      	ldr	r2, [pc, #552]	@ (80057c0 <HAL_UART_IRQHandler+0x410>)
 8005598:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe f82d 	bl	80035fe <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00e      	b.n	80055d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9b6 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e00a      	b.n	80055d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9b2 	bl	800592c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	e006      	b.n	80055d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9ae 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055d6:	e18d      	b.n	80058f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	bf00      	nop
    return;
 80055da:	e18b      	b.n	80058f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 8167 	bne.w	80058b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8160 	beq.w	80058b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8159 	beq.w	80058b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	f040 80ce 	bne.w	80057c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a9 	beq.w	8005790 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005646:	429a      	cmp	r2, r3
 8005648:	f080 80a2 	bcs.w	8005790 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005652:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565e:	f000 8088 	beq.w	8005772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800567c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800568e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800569a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1d9      	bne.n	8005662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e1      	bne.n	80056ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800570e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800571c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e3      	bne.n	80056ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005754:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005756:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800575a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e3      	bne.n	8005730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576c:	4618      	mov	r0, r3
 800576e:	f7fd fed6 	bl	800351e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005780:	b29b      	uxth	r3, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8d9 	bl	8005940 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800578e:	e0b3      	b.n	80058f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 80ad 	bne.w	80058f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a8:	f040 80a6 	bne.w	80058f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8c1 	bl	8005940 <HAL_UARTEx_RxEventCallback>
      return;
 80057be:	e09b      	b.n	80058f8 <HAL_UART_IRQHandler+0x548>
 80057c0:	08005ad1 	.word	0x08005ad1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 808e 	beq.w	80058fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80057e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8089 	beq.w	80058fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800580e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005810:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800581c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e3      	bne.n	80057ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	623b      	str	r3, [r7, #32]
   return(result);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005846:	633a      	str	r2, [r7, #48]	@ 0x30
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800584c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800588c:	61fa      	str	r2, [r7, #28]
 800588e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e3      	bne.n	8005868 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f847 	bl	8005940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b2:	e023      	b.n	80058fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_UART_IRQHandler+0x524>
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f910 	bl	8005af2 <UART_Transmit_IT>
    return;
 80058d2:	e014      	b.n	80058fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00e      	beq.n	80058fe <HAL_UART_IRQHandler+0x54e>
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f950 	bl	8005b92 <UART_EndTransmit_IT>
    return;
 80058f2:	e004      	b.n	80058fe <HAL_UART_IRQHandler+0x54e>
    return;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <HAL_UART_IRQHandler+0x54e>
      return;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_UART_IRQHandler+0x54e>
      return;
 80058fc:	bf00      	nop
  }
}
 80058fe:	37e8      	adds	r7, #232	@ 0xe8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005968:	e03b      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d037      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fd fcb7 	bl	80032e4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <UART_WaitOnFlagUntilTimeout+0x30>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e03a      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d023      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b80      	cmp	r3, #128	@ 0x80
 800599e:	d020      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d01d      	beq.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d116      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f81d 	bl	8005a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2208      	movs	r2, #8
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e00f      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d0b4      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b095      	sub	sp, #84	@ 0x54
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d119      	bne.n	8005ab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 0310 	bic.w	r3, r3, #16
 8005a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aa2:	61ba      	str	r2, [r7, #24]
 8005aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	6979      	ldr	r1, [r7, #20]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e5      	bne.n	8005a82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ac4:	bf00      	nop
 8005ac6:	3754      	adds	r7, #84	@ 0x54
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff ff21 	bl	800592c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b21      	cmp	r3, #33	@ 0x21
 8005b04:	d13e      	bne.n	8005b84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0e:	d114      	bne.n	8005b3a <UART_Transmit_IT+0x48>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d110      	bne.n	8005b3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	1c9a      	adds	r2, r3, #2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]
 8005b38:	e008      	b.n	8005b4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6211      	str	r1, [r2, #32]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10f      	bne.n	8005b80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fea6 	bl	8005904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08c      	sub	sp, #48	@ 0x30
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b22      	cmp	r3, #34	@ 0x22
 8005bdc:	f040 80aa 	bne.w	8005d34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d115      	bne.n	8005c16 <UART_Receive_IT+0x54>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d111      	bne.n	8005c16 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c14:	e024      	b.n	8005c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c24:	d007      	beq.n	8005c36 <UART_Receive_IT+0x74>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <UART_Receive_IT+0x82>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e008      	b.n	8005c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d15d      	bne.n	8005d30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0220 	bic.w	r2, r2, #32
 8005c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d135      	bne.n	8005d26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	623a      	str	r2, [r7, #32]
 8005ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d10a      	bne.n	8005d18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fe0e 	bl	8005940 <HAL_UARTEx_RxEventCallback>
 8005d24:	e002      	b.n	8005d2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fdf6 	bl	8005918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e002      	b.n	8005d36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3730      	adds	r7, #48	@ 0x30
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d44:	b0c0      	sub	sp, #256	@ 0x100
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	ea40 0301 	orr.w	r3, r0, r1
 8005d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d98:	f021 010c 	bic.w	r1, r1, #12
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005da6:	430b      	orrs	r3, r1
 8005da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	6999      	ldr	r1, [r3, #24]
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	ea40 0301 	orr.w	r3, r0, r1
 8005dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8f      	ldr	r3, [pc, #572]	@ (800600c <UART_SetConfig+0x2cc>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d005      	beq.n	8005de0 <UART_SetConfig+0xa0>
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b8d      	ldr	r3, [pc, #564]	@ (8006010 <UART_SetConfig+0x2d0>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fd fee4 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8005de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de8:	e003      	b.n	8005df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dea:	f7fd fecb 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfc:	f040 810c 	bne.w	8006018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e12:	4622      	mov	r2, r4
 8005e14:	462b      	mov	r3, r5
 8005e16:	1891      	adds	r1, r2, r2
 8005e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e1a:	415b      	adcs	r3, r3
 8005e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e22:	4621      	mov	r1, r4
 8005e24:	eb12 0801 	adds.w	r8, r2, r1
 8005e28:	4629      	mov	r1, r5
 8005e2a:	eb43 0901 	adc.w	r9, r3, r1
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e42:	4690      	mov	r8, r2
 8005e44:	4699      	mov	r9, r3
 8005e46:	4623      	mov	r3, r4
 8005e48:	eb18 0303 	adds.w	r3, r8, r3
 8005e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e50:	462b      	mov	r3, r5
 8005e52:	eb49 0303 	adc.w	r3, r9, r3
 8005e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e6e:	460b      	mov	r3, r1
 8005e70:	18db      	adds	r3, r3, r3
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e74:	4613      	mov	r3, r2
 8005e76:	eb42 0303 	adc.w	r3, r2, r3
 8005e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e84:	f7fa fee0 	bl	8000c48 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b61      	ldr	r3, [pc, #388]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	011c      	lsls	r4, r3, #4
 8005e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	1891      	adds	r1, r2, r2
 8005eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eb0:	415b      	adcs	r3, r3
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb8:	4641      	mov	r1, r8
 8005eba:	eb12 0a01 	adds.w	sl, r2, r1
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed8:	4692      	mov	sl, r2
 8005eda:	469b      	mov	fp, r3
 8005edc:	4643      	mov	r3, r8
 8005ede:	eb1a 0303 	adds.w	r3, sl, r3
 8005ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8005eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f04:	460b      	mov	r3, r1
 8005f06:	18db      	adds	r3, r3, r3
 8005f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	eb42 0303 	adc.w	r3, r2, r3
 8005f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f1a:	f7fa fe95 	bl	8000c48 <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	4b3b      	ldr	r3, [pc, #236]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005f26:	fba3 2301 	umull	r2, r3, r3, r1
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	2264      	movs	r2, #100	@ 0x64
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	1acb      	subs	r3, r1, r3
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f3a:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f48:	441c      	add	r4, r3
 8005f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	1891      	adds	r1, r2, r2
 8005f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f64:	415b      	adcs	r3, r3
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	1851      	adds	r1, r2, r1
 8005f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f72:	4649      	mov	r1, r9
 8005f74:	414b      	adcs	r3, r1
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f84:	4659      	mov	r1, fp
 8005f86:	00cb      	lsls	r3, r1, #3
 8005f88:	4651      	mov	r1, sl
 8005f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8e:	4651      	mov	r1, sl
 8005f90:	00ca      	lsls	r2, r1, #3
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	4642      	mov	r2, r8
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	eb42 0303 	adc.w	r3, r2, r3
 8005fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	18db      	adds	r3, r3, r3
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fd6:	f7fa fe37 	bl	8000c48 <__aeabi_uldivmod>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	2164      	movs	r1, #100	@ 0x64
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	3332      	adds	r3, #50	@ 0x32
 8005ff2:	4a08      	ldr	r2, [pc, #32]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	f003 0207 	and.w	r2, r3, #7
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4422      	add	r2, r4
 8006006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006008:	e106      	b.n	8006218 <UART_SetConfig+0x4d8>
 800600a:	bf00      	nop
 800600c:	40011000 	.word	0x40011000
 8006010:	40011400 	.word	0x40011400
 8006014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800602a:	4642      	mov	r2, r8
 800602c:	464b      	mov	r3, r9
 800602e:	1891      	adds	r1, r2, r2
 8006030:	6239      	str	r1, [r7, #32]
 8006032:	415b      	adcs	r3, r3
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
 8006036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800603a:	4641      	mov	r1, r8
 800603c:	1854      	adds	r4, r2, r1
 800603e:	4649      	mov	r1, r9
 8006040:	eb43 0501 	adc.w	r5, r3, r1
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	00eb      	lsls	r3, r5, #3
 800604e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006052:	00e2      	lsls	r2, r4, #3
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	4643      	mov	r3, r8
 800605a:	18e3      	adds	r3, r4, r3
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006060:	464b      	mov	r3, r9
 8006062:	eb45 0303 	adc.w	r3, r5, r3
 8006066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006086:	4629      	mov	r1, r5
 8006088:	008b      	lsls	r3, r1, #2
 800608a:	4621      	mov	r1, r4
 800608c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006090:	4621      	mov	r1, r4
 8006092:	008a      	lsls	r2, r1, #2
 8006094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006098:	f7fa fdd6 	bl	8000c48 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4b60      	ldr	r3, [pc, #384]	@ (8006224 <UART_SetConfig+0x4e4>)
 80060a2:	fba3 2302 	umull	r2, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	011c      	lsls	r4, r3, #4
 80060aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	1891      	adds	r1, r2, r2
 80060c2:	61b9      	str	r1, [r7, #24]
 80060c4:	415b      	adcs	r3, r3
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060cc:	4641      	mov	r1, r8
 80060ce:	1851      	adds	r1, r2, r1
 80060d0:	6139      	str	r1, [r7, #16]
 80060d2:	4649      	mov	r1, r9
 80060d4:	414b      	adcs	r3, r1
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e4:	4659      	mov	r1, fp
 80060e6:	00cb      	lsls	r3, r1, #3
 80060e8:	4651      	mov	r1, sl
 80060ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ee:	4651      	mov	r1, sl
 80060f0:	00ca      	lsls	r2, r1, #3
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	4642      	mov	r2, r8
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006100:	464b      	mov	r3, r9
 8006102:	460a      	mov	r2, r1
 8006104:	eb42 0303 	adc.w	r3, r2, r3
 8006108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006124:	4649      	mov	r1, r9
 8006126:	008b      	lsls	r3, r1, #2
 8006128:	4641      	mov	r1, r8
 800612a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612e:	4641      	mov	r1, r8
 8006130:	008a      	lsls	r2, r1, #2
 8006132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006136:	f7fa fd87 	bl	8000c48 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4611      	mov	r1, r2
 8006140:	4b38      	ldr	r3, [pc, #224]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006142:	fba3 2301 	umull	r2, r3, r3, r1
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2264      	movs	r2, #100	@ 0x64
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	1acb      	subs	r3, r1, r3
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3332      	adds	r3, #50	@ 0x32
 8006154:	4a33      	ldr	r2, [pc, #204]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006160:	441c      	add	r4, r3
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006166:	2200      	movs	r2, #0
 8006168:	673b      	str	r3, [r7, #112]	@ 0x70
 800616a:	677a      	str	r2, [r7, #116]	@ 0x74
 800616c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	415b      	adcs	r3, r3
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006180:	4641      	mov	r1, r8
 8006182:	1851      	adds	r1, r2, r1
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	4649      	mov	r1, r9
 8006188:	414b      	adcs	r3, r1
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006198:	4659      	mov	r1, fp
 800619a:	00cb      	lsls	r3, r1, #3
 800619c:	4651      	mov	r1, sl
 800619e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a2:	4651      	mov	r1, sl
 80061a4:	00ca      	lsls	r2, r1, #3
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	4642      	mov	r2, r8
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b2:	464b      	mov	r3, r9
 80061b4:	460a      	mov	r2, r1
 80061b6:	eb42 0303 	adc.w	r3, r2, r3
 80061ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d4:	4649      	mov	r1, r9
 80061d6:	008b      	lsls	r3, r1, #2
 80061d8:	4641      	mov	r1, r8
 80061da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061de:	4641      	mov	r1, r8
 80061e0:	008a      	lsls	r2, r1, #2
 80061e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061e6:	f7fa fd2f 	bl	8000c48 <__aeabi_uldivmod>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <UART_SetConfig+0x4e4>)
 80061f0:	fba3 1302 	umull	r1, r3, r3, r2
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	2164      	movs	r1, #100	@ 0x64
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	3332      	adds	r3, #50	@ 0x32
 8006202:	4a08      	ldr	r2, [pc, #32]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	f003 020f 	and.w	r2, r3, #15
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4422      	add	r2, r4
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006224:	51eb851f 	.word	0x51eb851f

08006228 <malloc>:
 8006228:	4b02      	ldr	r3, [pc, #8]	@ (8006234 <malloc+0xc>)
 800622a:	4601      	mov	r1, r0
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	f000 b82d 	b.w	800628c <_malloc_r>
 8006232:	bf00      	nop
 8006234:	200001c0 	.word	0x200001c0

08006238 <free>:
 8006238:	4b02      	ldr	r3, [pc, #8]	@ (8006244 <free+0xc>)
 800623a:	4601      	mov	r1, r0
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f002 bd2b 	b.w	8008c98 <_free_r>
 8006242:	bf00      	nop
 8006244:	200001c0 	.word	0x200001c0

08006248 <sbrk_aligned>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4e0f      	ldr	r6, [pc, #60]	@ (8006288 <sbrk_aligned+0x40>)
 800624c:	460c      	mov	r4, r1
 800624e:	6831      	ldr	r1, [r6, #0]
 8006250:	4605      	mov	r5, r0
 8006252:	b911      	cbnz	r1, 800625a <sbrk_aligned+0x12>
 8006254:	f001 fe60 	bl	8007f18 <_sbrk_r>
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f001 fe5b 	bl	8007f18 <_sbrk_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	d103      	bne.n	800626e <sbrk_aligned+0x26>
 8006266:	f04f 34ff 	mov.w	r4, #4294967295
 800626a:	4620      	mov	r0, r4
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	1cc4      	adds	r4, r0, #3
 8006270:	f024 0403 	bic.w	r4, r4, #3
 8006274:	42a0      	cmp	r0, r4
 8006276:	d0f8      	beq.n	800626a <sbrk_aligned+0x22>
 8006278:	1a21      	subs	r1, r4, r0
 800627a:	4628      	mov	r0, r5
 800627c:	f001 fe4c 	bl	8007f18 <_sbrk_r>
 8006280:	3001      	adds	r0, #1
 8006282:	d1f2      	bne.n	800626a <sbrk_aligned+0x22>
 8006284:	e7ef      	b.n	8006266 <sbrk_aligned+0x1e>
 8006286:	bf00      	nop
 8006288:	20000b94 	.word	0x20000b94

0800628c <_malloc_r>:
 800628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006290:	1ccd      	adds	r5, r1, #3
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	2d00      	cmp	r5, #0
 80062a0:	4606      	mov	r6, r0
 80062a2:	db01      	blt.n	80062a8 <_malloc_r+0x1c>
 80062a4:	42a9      	cmp	r1, r5
 80062a6:	d904      	bls.n	80062b2 <_malloc_r+0x26>
 80062a8:	230c      	movs	r3, #12
 80062aa:	6033      	str	r3, [r6, #0]
 80062ac:	2000      	movs	r0, #0
 80062ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006388 <_malloc_r+0xfc>
 80062b6:	f000 f869 	bl	800638c <__malloc_lock>
 80062ba:	f8d8 3000 	ldr.w	r3, [r8]
 80062be:	461c      	mov	r4, r3
 80062c0:	bb44      	cbnz	r4, 8006314 <_malloc_r+0x88>
 80062c2:	4629      	mov	r1, r5
 80062c4:	4630      	mov	r0, r6
 80062c6:	f7ff ffbf 	bl	8006248 <sbrk_aligned>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	4604      	mov	r4, r0
 80062ce:	d158      	bne.n	8006382 <_malloc_r+0xf6>
 80062d0:	f8d8 4000 	ldr.w	r4, [r8]
 80062d4:	4627      	mov	r7, r4
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	d143      	bne.n	8006362 <_malloc_r+0xd6>
 80062da:	2c00      	cmp	r4, #0
 80062dc:	d04b      	beq.n	8006376 <_malloc_r+0xea>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	4639      	mov	r1, r7
 80062e2:	4630      	mov	r0, r6
 80062e4:	eb04 0903 	add.w	r9, r4, r3
 80062e8:	f001 fe16 	bl	8007f18 <_sbrk_r>
 80062ec:	4581      	cmp	r9, r0
 80062ee:	d142      	bne.n	8006376 <_malloc_r+0xea>
 80062f0:	6821      	ldr	r1, [r4, #0]
 80062f2:	1a6d      	subs	r5, r5, r1
 80062f4:	4629      	mov	r1, r5
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ffa6 	bl	8006248 <sbrk_aligned>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d03a      	beq.n	8006376 <_malloc_r+0xea>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	442b      	add	r3, r5
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	f8d8 3000 	ldr.w	r3, [r8]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	bb62      	cbnz	r2, 8006368 <_malloc_r+0xdc>
 800630e:	f8c8 7000 	str.w	r7, [r8]
 8006312:	e00f      	b.n	8006334 <_malloc_r+0xa8>
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	1b52      	subs	r2, r2, r5
 8006318:	d420      	bmi.n	800635c <_malloc_r+0xd0>
 800631a:	2a0b      	cmp	r2, #11
 800631c:	d917      	bls.n	800634e <_malloc_r+0xc2>
 800631e:	1961      	adds	r1, r4, r5
 8006320:	42a3      	cmp	r3, r4
 8006322:	6025      	str	r5, [r4, #0]
 8006324:	bf18      	it	ne
 8006326:	6059      	strne	r1, [r3, #4]
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	bf08      	it	eq
 800632c:	f8c8 1000 	streq.w	r1, [r8]
 8006330:	5162      	str	r2, [r4, r5]
 8006332:	604b      	str	r3, [r1, #4]
 8006334:	4630      	mov	r0, r6
 8006336:	f000 f82f 	bl	8006398 <__malloc_unlock>
 800633a:	f104 000b 	add.w	r0, r4, #11
 800633e:	1d23      	adds	r3, r4, #4
 8006340:	f020 0007 	bic.w	r0, r0, #7
 8006344:	1ac2      	subs	r2, r0, r3
 8006346:	bf1c      	itt	ne
 8006348:	1a1b      	subne	r3, r3, r0
 800634a:	50a3      	strne	r3, [r4, r2]
 800634c:	e7af      	b.n	80062ae <_malloc_r+0x22>
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	42a3      	cmp	r3, r4
 8006352:	bf0c      	ite	eq
 8006354:	f8c8 2000 	streq.w	r2, [r8]
 8006358:	605a      	strne	r2, [r3, #4]
 800635a:	e7eb      	b.n	8006334 <_malloc_r+0xa8>
 800635c:	4623      	mov	r3, r4
 800635e:	6864      	ldr	r4, [r4, #4]
 8006360:	e7ae      	b.n	80062c0 <_malloc_r+0x34>
 8006362:	463c      	mov	r4, r7
 8006364:	687f      	ldr	r7, [r7, #4]
 8006366:	e7b6      	b.n	80062d6 <_malloc_r+0x4a>
 8006368:	461a      	mov	r2, r3
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	42a3      	cmp	r3, r4
 800636e:	d1fb      	bne.n	8006368 <_malloc_r+0xdc>
 8006370:	2300      	movs	r3, #0
 8006372:	6053      	str	r3, [r2, #4]
 8006374:	e7de      	b.n	8006334 <_malloc_r+0xa8>
 8006376:	230c      	movs	r3, #12
 8006378:	6033      	str	r3, [r6, #0]
 800637a:	4630      	mov	r0, r6
 800637c:	f000 f80c 	bl	8006398 <__malloc_unlock>
 8006380:	e794      	b.n	80062ac <_malloc_r+0x20>
 8006382:	6005      	str	r5, [r0, #0]
 8006384:	e7d6      	b.n	8006334 <_malloc_r+0xa8>
 8006386:	bf00      	nop
 8006388:	20000b98 	.word	0x20000b98

0800638c <__malloc_lock>:
 800638c:	4801      	ldr	r0, [pc, #4]	@ (8006394 <__malloc_lock+0x8>)
 800638e:	f001 be10 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 8006392:	bf00      	nop
 8006394:	20000cdc 	.word	0x20000cdc

08006398 <__malloc_unlock>:
 8006398:	4801      	ldr	r0, [pc, #4]	@ (80063a0 <__malloc_unlock+0x8>)
 800639a:	f001 be0b 	b.w	8007fb4 <__retarget_lock_release_recursive>
 800639e:	bf00      	nop
 80063a0:	20000cdc 	.word	0x20000cdc

080063a4 <realloc>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	@ (80063b0 <realloc+0xc>)
 80063a6:	460a      	mov	r2, r1
 80063a8:	4601      	mov	r1, r0
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	f000 b802 	b.w	80063b4 <_realloc_r>
 80063b0:	200001c0 	.word	0x200001c0

080063b4 <_realloc_r>:
 80063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b8:	4607      	mov	r7, r0
 80063ba:	4614      	mov	r4, r2
 80063bc:	460d      	mov	r5, r1
 80063be:	b921      	cbnz	r1, 80063ca <_realloc_r+0x16>
 80063c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	4611      	mov	r1, r2
 80063c6:	f7ff bf61 	b.w	800628c <_malloc_r>
 80063ca:	b92a      	cbnz	r2, 80063d8 <_realloc_r+0x24>
 80063cc:	f002 fc64 	bl	8008c98 <_free_r>
 80063d0:	4625      	mov	r5, r4
 80063d2:	4628      	mov	r0, r5
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d8:	f003 fc9e 	bl	8009d18 <_malloc_usable_size_r>
 80063dc:	4284      	cmp	r4, r0
 80063de:	4606      	mov	r6, r0
 80063e0:	d802      	bhi.n	80063e8 <_realloc_r+0x34>
 80063e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063e6:	d8f4      	bhi.n	80063d2 <_realloc_r+0x1e>
 80063e8:	4621      	mov	r1, r4
 80063ea:	4638      	mov	r0, r7
 80063ec:	f7ff ff4e 	bl	800628c <_malloc_r>
 80063f0:	4680      	mov	r8, r0
 80063f2:	b908      	cbnz	r0, 80063f8 <_realloc_r+0x44>
 80063f4:	4645      	mov	r5, r8
 80063f6:	e7ec      	b.n	80063d2 <_realloc_r+0x1e>
 80063f8:	42b4      	cmp	r4, r6
 80063fa:	4622      	mov	r2, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	bf28      	it	cs
 8006400:	4632      	movcs	r2, r6
 8006402:	f001 fdd8 	bl	8007fb6 <memcpy>
 8006406:	4629      	mov	r1, r5
 8006408:	4638      	mov	r0, r7
 800640a:	f002 fc45 	bl	8008c98 <_free_r>
 800640e:	e7f1      	b.n	80063f4 <_realloc_r+0x40>

08006410 <sulp>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4604      	mov	r4, r0
 8006414:	460d      	mov	r5, r1
 8006416:	ec45 4b10 	vmov	d0, r4, r5
 800641a:	4616      	mov	r6, r2
 800641c:	f003 fb3e 	bl	8009a9c <__ulp>
 8006420:	ec51 0b10 	vmov	r0, r1, d0
 8006424:	b17e      	cbz	r6, 8006446 <sulp+0x36>
 8006426:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800642a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800642e:	2b00      	cmp	r3, #0
 8006430:	dd09      	ble.n	8006446 <sulp+0x36>
 8006432:	051b      	lsls	r3, r3, #20
 8006434:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006438:	2400      	movs	r4, #0
 800643a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800643e:	4622      	mov	r2, r4
 8006440:	462b      	mov	r3, r5
 8006442:	f7fa f909 	bl	8000658 <__aeabi_dmul>
 8006446:	ec41 0b10 	vmov	d0, r0, r1
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	0000      	movs	r0, r0
	...

08006450 <_strtod_l>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	b09f      	sub	sp, #124	@ 0x7c
 8006456:	460c      	mov	r4, r1
 8006458:	9217      	str	r2, [sp, #92]	@ 0x5c
 800645a:	2200      	movs	r2, #0
 800645c:	921a      	str	r2, [sp, #104]	@ 0x68
 800645e:	9005      	str	r0, [sp, #20]
 8006460:	f04f 0a00 	mov.w	sl, #0
 8006464:	f04f 0b00 	mov.w	fp, #0
 8006468:	460a      	mov	r2, r1
 800646a:	9219      	str	r2, [sp, #100]	@ 0x64
 800646c:	7811      	ldrb	r1, [r2, #0]
 800646e:	292b      	cmp	r1, #43	@ 0x2b
 8006470:	d04a      	beq.n	8006508 <_strtod_l+0xb8>
 8006472:	d838      	bhi.n	80064e6 <_strtod_l+0x96>
 8006474:	290d      	cmp	r1, #13
 8006476:	d832      	bhi.n	80064de <_strtod_l+0x8e>
 8006478:	2908      	cmp	r1, #8
 800647a:	d832      	bhi.n	80064e2 <_strtod_l+0x92>
 800647c:	2900      	cmp	r1, #0
 800647e:	d03b      	beq.n	80064f8 <_strtod_l+0xa8>
 8006480:	2200      	movs	r2, #0
 8006482:	920e      	str	r2, [sp, #56]	@ 0x38
 8006484:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006486:	782a      	ldrb	r2, [r5, #0]
 8006488:	2a30      	cmp	r2, #48	@ 0x30
 800648a:	f040 80b2 	bne.w	80065f2 <_strtod_l+0x1a2>
 800648e:	786a      	ldrb	r2, [r5, #1]
 8006490:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006494:	2a58      	cmp	r2, #88	@ 0x58
 8006496:	d16e      	bne.n	8006576 <_strtod_l+0x126>
 8006498:	9302      	str	r3, [sp, #8]
 800649a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	ab1a      	add	r3, sp, #104	@ 0x68
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4a8f      	ldr	r2, [pc, #572]	@ (80066e0 <_strtod_l+0x290>)
 80064a4:	9805      	ldr	r0, [sp, #20]
 80064a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80064a8:	a919      	add	r1, sp, #100	@ 0x64
 80064aa:	f002 fca7 	bl	8008dfc <__gethex>
 80064ae:	f010 060f 	ands.w	r6, r0, #15
 80064b2:	4604      	mov	r4, r0
 80064b4:	d005      	beq.n	80064c2 <_strtod_l+0x72>
 80064b6:	2e06      	cmp	r6, #6
 80064b8:	d128      	bne.n	800650c <_strtod_l+0xbc>
 80064ba:	3501      	adds	r5, #1
 80064bc:	2300      	movs	r3, #0
 80064be:	9519      	str	r5, [sp, #100]	@ 0x64
 80064c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80064c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 858e 	bne.w	8006fe6 <_strtod_l+0xb96>
 80064ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064cc:	b1cb      	cbz	r3, 8006502 <_strtod_l+0xb2>
 80064ce:	4652      	mov	r2, sl
 80064d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80064d4:	ec43 2b10 	vmov	d0, r2, r3
 80064d8:	b01f      	add	sp, #124	@ 0x7c
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	2920      	cmp	r1, #32
 80064e0:	d1ce      	bne.n	8006480 <_strtod_l+0x30>
 80064e2:	3201      	adds	r2, #1
 80064e4:	e7c1      	b.n	800646a <_strtod_l+0x1a>
 80064e6:	292d      	cmp	r1, #45	@ 0x2d
 80064e8:	d1ca      	bne.n	8006480 <_strtod_l+0x30>
 80064ea:	2101      	movs	r1, #1
 80064ec:	910e      	str	r1, [sp, #56]	@ 0x38
 80064ee:	1c51      	adds	r1, r2, #1
 80064f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80064f2:	7852      	ldrb	r2, [r2, #1]
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	d1c5      	bne.n	8006484 <_strtod_l+0x34>
 80064f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80064fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8570 	bne.w	8006fe2 <_strtod_l+0xb92>
 8006502:	4652      	mov	r2, sl
 8006504:	465b      	mov	r3, fp
 8006506:	e7e5      	b.n	80064d4 <_strtod_l+0x84>
 8006508:	2100      	movs	r1, #0
 800650a:	e7ef      	b.n	80064ec <_strtod_l+0x9c>
 800650c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800650e:	b13a      	cbz	r2, 8006520 <_strtod_l+0xd0>
 8006510:	2135      	movs	r1, #53	@ 0x35
 8006512:	a81c      	add	r0, sp, #112	@ 0x70
 8006514:	f003 fbbc 	bl	8009c90 <__copybits>
 8006518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800651a:	9805      	ldr	r0, [sp, #20]
 800651c:	f002 ff92 	bl	8009444 <_Bfree>
 8006520:	3e01      	subs	r6, #1
 8006522:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006524:	2e04      	cmp	r6, #4
 8006526:	d806      	bhi.n	8006536 <_strtod_l+0xe6>
 8006528:	e8df f006 	tbb	[pc, r6]
 800652c:	201d0314 	.word	0x201d0314
 8006530:	14          	.byte	0x14
 8006531:	00          	.byte	0x00
 8006532:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006536:	05e1      	lsls	r1, r4, #23
 8006538:	bf48      	it	mi
 800653a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800653e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006542:	0d1b      	lsrs	r3, r3, #20
 8006544:	051b      	lsls	r3, r3, #20
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1bb      	bne.n	80064c2 <_strtod_l+0x72>
 800654a:	f001 fd07 	bl	8007f5c <__errno>
 800654e:	2322      	movs	r3, #34	@ 0x22
 8006550:	6003      	str	r3, [r0, #0]
 8006552:	e7b6      	b.n	80064c2 <_strtod_l+0x72>
 8006554:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006558:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800655c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006560:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006564:	e7e7      	b.n	8006536 <_strtod_l+0xe6>
 8006566:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80066e8 <_strtod_l+0x298>
 800656a:	e7e4      	b.n	8006536 <_strtod_l+0xe6>
 800656c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006570:	f04f 3aff 	mov.w	sl, #4294967295
 8006574:	e7df      	b.n	8006536 <_strtod_l+0xe6>
 8006576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	9219      	str	r2, [sp, #100]	@ 0x64
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b30      	cmp	r3, #48	@ 0x30
 8006580:	d0f9      	beq.n	8006576 <_strtod_l+0x126>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d09d      	beq.n	80064c2 <_strtod_l+0x72>
 8006586:	2301      	movs	r3, #1
 8006588:	2700      	movs	r7, #0
 800658a:	9308      	str	r3, [sp, #32]
 800658c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800658e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006590:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006592:	46b9      	mov	r9, r7
 8006594:	220a      	movs	r2, #10
 8006596:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006598:	7805      	ldrb	r5, [r0, #0]
 800659a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800659e:	b2d9      	uxtb	r1, r3
 80065a0:	2909      	cmp	r1, #9
 80065a2:	d928      	bls.n	80065f6 <_strtod_l+0x1a6>
 80065a4:	494f      	ldr	r1, [pc, #316]	@ (80066e4 <_strtod_l+0x294>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	f001 fc42 	bl	8007e30 <strncmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d032      	beq.n	8006616 <_strtod_l+0x1c6>
 80065b0:	2000      	movs	r0, #0
 80065b2:	462a      	mov	r2, r5
 80065b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80065b6:	464d      	mov	r5, r9
 80065b8:	4603      	mov	r3, r0
 80065ba:	2a65      	cmp	r2, #101	@ 0x65
 80065bc:	d001      	beq.n	80065c2 <_strtod_l+0x172>
 80065be:	2a45      	cmp	r2, #69	@ 0x45
 80065c0:	d114      	bne.n	80065ec <_strtod_l+0x19c>
 80065c2:	b91d      	cbnz	r5, 80065cc <_strtod_l+0x17c>
 80065c4:	9a08      	ldr	r2, [sp, #32]
 80065c6:	4302      	orrs	r2, r0
 80065c8:	d096      	beq.n	80064f8 <_strtod_l+0xa8>
 80065ca:	2500      	movs	r5, #0
 80065cc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80065ce:	1c62      	adds	r2, r4, #1
 80065d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80065d2:	7862      	ldrb	r2, [r4, #1]
 80065d4:	2a2b      	cmp	r2, #43	@ 0x2b
 80065d6:	d07a      	beq.n	80066ce <_strtod_l+0x27e>
 80065d8:	2a2d      	cmp	r2, #45	@ 0x2d
 80065da:	d07e      	beq.n	80066da <_strtod_l+0x28a>
 80065dc:	f04f 0c00 	mov.w	ip, #0
 80065e0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80065e4:	2909      	cmp	r1, #9
 80065e6:	f240 8085 	bls.w	80066f4 <_strtod_l+0x2a4>
 80065ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80065ec:	f04f 0800 	mov.w	r8, #0
 80065f0:	e0a5      	b.n	800673e <_strtod_l+0x2ee>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e7c8      	b.n	8006588 <_strtod_l+0x138>
 80065f6:	f1b9 0f08 	cmp.w	r9, #8
 80065fa:	bfd8      	it	le
 80065fc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80065fe:	f100 0001 	add.w	r0, r0, #1
 8006602:	bfda      	itte	le
 8006604:	fb02 3301 	mlale	r3, r2, r1, r3
 8006608:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800660a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800660e:	f109 0901 	add.w	r9, r9, #1
 8006612:	9019      	str	r0, [sp, #100]	@ 0x64
 8006614:	e7bf      	b.n	8006596 <_strtod_l+0x146>
 8006616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	9219      	str	r2, [sp, #100]	@ 0x64
 800661c:	785a      	ldrb	r2, [r3, #1]
 800661e:	f1b9 0f00 	cmp.w	r9, #0
 8006622:	d03b      	beq.n	800669c <_strtod_l+0x24c>
 8006624:	900a      	str	r0, [sp, #40]	@ 0x28
 8006626:	464d      	mov	r5, r9
 8006628:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d912      	bls.n	8006656 <_strtod_l+0x206>
 8006630:	2301      	movs	r3, #1
 8006632:	e7c2      	b.n	80065ba <_strtod_l+0x16a>
 8006634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	9219      	str	r2, [sp, #100]	@ 0x64
 800663a:	785a      	ldrb	r2, [r3, #1]
 800663c:	3001      	adds	r0, #1
 800663e:	2a30      	cmp	r2, #48	@ 0x30
 8006640:	d0f8      	beq.n	8006634 <_strtod_l+0x1e4>
 8006642:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006646:	2b08      	cmp	r3, #8
 8006648:	f200 84d2 	bhi.w	8006ff0 <_strtod_l+0xba0>
 800664c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800664e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006650:	2000      	movs	r0, #0
 8006652:	930c      	str	r3, [sp, #48]	@ 0x30
 8006654:	4605      	mov	r5, r0
 8006656:	3a30      	subs	r2, #48	@ 0x30
 8006658:	f100 0301 	add.w	r3, r0, #1
 800665c:	d018      	beq.n	8006690 <_strtod_l+0x240>
 800665e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006660:	4419      	add	r1, r3
 8006662:	910a      	str	r1, [sp, #40]	@ 0x28
 8006664:	462e      	mov	r6, r5
 8006666:	f04f 0e0a 	mov.w	lr, #10
 800666a:	1c71      	adds	r1, r6, #1
 800666c:	eba1 0c05 	sub.w	ip, r1, r5
 8006670:	4563      	cmp	r3, ip
 8006672:	dc15      	bgt.n	80066a0 <_strtod_l+0x250>
 8006674:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006678:	182b      	adds	r3, r5, r0
 800667a:	2b08      	cmp	r3, #8
 800667c:	f105 0501 	add.w	r5, r5, #1
 8006680:	4405      	add	r5, r0
 8006682:	dc1a      	bgt.n	80066ba <_strtod_l+0x26a>
 8006684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006686:	230a      	movs	r3, #10
 8006688:	fb03 2301 	mla	r3, r3, r1, r2
 800668c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800668e:	2300      	movs	r3, #0
 8006690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006692:	1c51      	adds	r1, r2, #1
 8006694:	9119      	str	r1, [sp, #100]	@ 0x64
 8006696:	7852      	ldrb	r2, [r2, #1]
 8006698:	4618      	mov	r0, r3
 800669a:	e7c5      	b.n	8006628 <_strtod_l+0x1d8>
 800669c:	4648      	mov	r0, r9
 800669e:	e7ce      	b.n	800663e <_strtod_l+0x1ee>
 80066a0:	2e08      	cmp	r6, #8
 80066a2:	dc05      	bgt.n	80066b0 <_strtod_l+0x260>
 80066a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80066a6:	fb0e f606 	mul.w	r6, lr, r6
 80066aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80066ac:	460e      	mov	r6, r1
 80066ae:	e7dc      	b.n	800666a <_strtod_l+0x21a>
 80066b0:	2910      	cmp	r1, #16
 80066b2:	bfd8      	it	le
 80066b4:	fb0e f707 	mulle.w	r7, lr, r7
 80066b8:	e7f8      	b.n	80066ac <_strtod_l+0x25c>
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	bfdc      	itt	le
 80066be:	230a      	movle	r3, #10
 80066c0:	fb03 2707 	mlale	r7, r3, r7, r2
 80066c4:	e7e3      	b.n	800668e <_strtod_l+0x23e>
 80066c6:	2300      	movs	r3, #0
 80066c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ca:	2301      	movs	r3, #1
 80066cc:	e77a      	b.n	80065c4 <_strtod_l+0x174>
 80066ce:	f04f 0c00 	mov.w	ip, #0
 80066d2:	1ca2      	adds	r2, r4, #2
 80066d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80066d6:	78a2      	ldrb	r2, [r4, #2]
 80066d8:	e782      	b.n	80065e0 <_strtod_l+0x190>
 80066da:	f04f 0c01 	mov.w	ip, #1
 80066de:	e7f8      	b.n	80066d2 <_strtod_l+0x282>
 80066e0:	0800b73c 	.word	0x0800b73c
 80066e4:	0800b53c 	.word	0x0800b53c
 80066e8:	7ff00000 	.word	0x7ff00000
 80066ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066ee:	1c51      	adds	r1, r2, #1
 80066f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80066f2:	7852      	ldrb	r2, [r2, #1]
 80066f4:	2a30      	cmp	r2, #48	@ 0x30
 80066f6:	d0f9      	beq.n	80066ec <_strtod_l+0x29c>
 80066f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80066fc:	2908      	cmp	r1, #8
 80066fe:	f63f af75 	bhi.w	80065ec <_strtod_l+0x19c>
 8006702:	3a30      	subs	r2, #48	@ 0x30
 8006704:	9209      	str	r2, [sp, #36]	@ 0x24
 8006706:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006708:	920f      	str	r2, [sp, #60]	@ 0x3c
 800670a:	f04f 080a 	mov.w	r8, #10
 800670e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006710:	1c56      	adds	r6, r2, #1
 8006712:	9619      	str	r6, [sp, #100]	@ 0x64
 8006714:	7852      	ldrb	r2, [r2, #1]
 8006716:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800671a:	f1be 0f09 	cmp.w	lr, #9
 800671e:	d939      	bls.n	8006794 <_strtod_l+0x344>
 8006720:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006722:	1a76      	subs	r6, r6, r1
 8006724:	2e08      	cmp	r6, #8
 8006726:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800672a:	dc03      	bgt.n	8006734 <_strtod_l+0x2e4>
 800672c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800672e:	4588      	cmp	r8, r1
 8006730:	bfa8      	it	ge
 8006732:	4688      	movge	r8, r1
 8006734:	f1bc 0f00 	cmp.w	ip, #0
 8006738:	d001      	beq.n	800673e <_strtod_l+0x2ee>
 800673a:	f1c8 0800 	rsb	r8, r8, #0
 800673e:	2d00      	cmp	r5, #0
 8006740:	d14e      	bne.n	80067e0 <_strtod_l+0x390>
 8006742:	9908      	ldr	r1, [sp, #32]
 8006744:	4308      	orrs	r0, r1
 8006746:	f47f aebc 	bne.w	80064c2 <_strtod_l+0x72>
 800674a:	2b00      	cmp	r3, #0
 800674c:	f47f aed4 	bne.w	80064f8 <_strtod_l+0xa8>
 8006750:	2a69      	cmp	r2, #105	@ 0x69
 8006752:	d028      	beq.n	80067a6 <_strtod_l+0x356>
 8006754:	dc25      	bgt.n	80067a2 <_strtod_l+0x352>
 8006756:	2a49      	cmp	r2, #73	@ 0x49
 8006758:	d025      	beq.n	80067a6 <_strtod_l+0x356>
 800675a:	2a4e      	cmp	r2, #78	@ 0x4e
 800675c:	f47f aecc 	bne.w	80064f8 <_strtod_l+0xa8>
 8006760:	499a      	ldr	r1, [pc, #616]	@ (80069cc <_strtod_l+0x57c>)
 8006762:	a819      	add	r0, sp, #100	@ 0x64
 8006764:	f002 fd6c 	bl	8009240 <__match>
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f aec5 	beq.w	80064f8 <_strtod_l+0xa8>
 800676e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b28      	cmp	r3, #40	@ 0x28
 8006774:	d12e      	bne.n	80067d4 <_strtod_l+0x384>
 8006776:	4996      	ldr	r1, [pc, #600]	@ (80069d0 <_strtod_l+0x580>)
 8006778:	aa1c      	add	r2, sp, #112	@ 0x70
 800677a:	a819      	add	r0, sp, #100	@ 0x64
 800677c:	f002 fd74 	bl	8009268 <__hexnan>
 8006780:	2805      	cmp	r0, #5
 8006782:	d127      	bne.n	80067d4 <_strtod_l+0x384>
 8006784:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006786:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800678a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800678e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006792:	e696      	b.n	80064c2 <_strtod_l+0x72>
 8006794:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006796:	fb08 2101 	mla	r1, r8, r1, r2
 800679a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800679e:	9209      	str	r2, [sp, #36]	@ 0x24
 80067a0:	e7b5      	b.n	800670e <_strtod_l+0x2be>
 80067a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80067a4:	e7da      	b.n	800675c <_strtod_l+0x30c>
 80067a6:	498b      	ldr	r1, [pc, #556]	@ (80069d4 <_strtod_l+0x584>)
 80067a8:	a819      	add	r0, sp, #100	@ 0x64
 80067aa:	f002 fd49 	bl	8009240 <__match>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f43f aea2 	beq.w	80064f8 <_strtod_l+0xa8>
 80067b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b6:	4988      	ldr	r1, [pc, #544]	@ (80069d8 <_strtod_l+0x588>)
 80067b8:	3b01      	subs	r3, #1
 80067ba:	a819      	add	r0, sp, #100	@ 0x64
 80067bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80067be:	f002 fd3f 	bl	8009240 <__match>
 80067c2:	b910      	cbnz	r0, 80067ca <_strtod_l+0x37a>
 80067c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067c6:	3301      	adds	r3, #1
 80067c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80067ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80069e8 <_strtod_l+0x598>
 80067ce:	f04f 0a00 	mov.w	sl, #0
 80067d2:	e676      	b.n	80064c2 <_strtod_l+0x72>
 80067d4:	4881      	ldr	r0, [pc, #516]	@ (80069dc <_strtod_l+0x58c>)
 80067d6:	f001 fbff 	bl	8007fd8 <nan>
 80067da:	ec5b ab10 	vmov	sl, fp, d0
 80067de:	e670      	b.n	80064c2 <_strtod_l+0x72>
 80067e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80067e4:	eba8 0303 	sub.w	r3, r8, r3
 80067e8:	f1b9 0f00 	cmp.w	r9, #0
 80067ec:	bf08      	it	eq
 80067ee:	46a9      	moveq	r9, r5
 80067f0:	2d10      	cmp	r5, #16
 80067f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f4:	462c      	mov	r4, r5
 80067f6:	bfa8      	it	ge
 80067f8:	2410      	movge	r4, #16
 80067fa:	f7f9 feb3 	bl	8000564 <__aeabi_ui2d>
 80067fe:	2d09      	cmp	r5, #9
 8006800:	4682      	mov	sl, r0
 8006802:	468b      	mov	fp, r1
 8006804:	dc13      	bgt.n	800682e <_strtod_l+0x3de>
 8006806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	f43f ae5a 	beq.w	80064c2 <_strtod_l+0x72>
 800680e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006810:	dd78      	ble.n	8006904 <_strtod_l+0x4b4>
 8006812:	2b16      	cmp	r3, #22
 8006814:	dc5f      	bgt.n	80068d6 <_strtod_l+0x486>
 8006816:	4972      	ldr	r1, [pc, #456]	@ (80069e0 <_strtod_l+0x590>)
 8006818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800681c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006820:	4652      	mov	r2, sl
 8006822:	465b      	mov	r3, fp
 8006824:	f7f9 ff18 	bl	8000658 <__aeabi_dmul>
 8006828:	4682      	mov	sl, r0
 800682a:	468b      	mov	fp, r1
 800682c:	e649      	b.n	80064c2 <_strtod_l+0x72>
 800682e:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <_strtod_l+0x590>)
 8006830:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006834:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006838:	f7f9 ff0e 	bl	8000658 <__aeabi_dmul>
 800683c:	4682      	mov	sl, r0
 800683e:	4638      	mov	r0, r7
 8006840:	468b      	mov	fp, r1
 8006842:	f7f9 fe8f 	bl	8000564 <__aeabi_ui2d>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4650      	mov	r0, sl
 800684c:	4659      	mov	r1, fp
 800684e:	f7f9 fd4d 	bl	80002ec <__adddf3>
 8006852:	2d0f      	cmp	r5, #15
 8006854:	4682      	mov	sl, r0
 8006856:	468b      	mov	fp, r1
 8006858:	ddd5      	ble.n	8006806 <_strtod_l+0x3b6>
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	1b2c      	subs	r4, r5, r4
 800685e:	441c      	add	r4, r3
 8006860:	2c00      	cmp	r4, #0
 8006862:	f340 8093 	ble.w	800698c <_strtod_l+0x53c>
 8006866:	f014 030f 	ands.w	r3, r4, #15
 800686a:	d00a      	beq.n	8006882 <_strtod_l+0x432>
 800686c:	495c      	ldr	r1, [pc, #368]	@ (80069e0 <_strtod_l+0x590>)
 800686e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006872:	4652      	mov	r2, sl
 8006874:	465b      	mov	r3, fp
 8006876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687a:	f7f9 feed 	bl	8000658 <__aeabi_dmul>
 800687e:	4682      	mov	sl, r0
 8006880:	468b      	mov	fp, r1
 8006882:	f034 040f 	bics.w	r4, r4, #15
 8006886:	d073      	beq.n	8006970 <_strtod_l+0x520>
 8006888:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800688c:	dd49      	ble.n	8006922 <_strtod_l+0x4d2>
 800688e:	2400      	movs	r4, #0
 8006890:	46a0      	mov	r8, r4
 8006892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006894:	46a1      	mov	r9, r4
 8006896:	9a05      	ldr	r2, [sp, #20]
 8006898:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80069e8 <_strtod_l+0x598>
 800689c:	2322      	movs	r3, #34	@ 0x22
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	f04f 0a00 	mov.w	sl, #0
 80068a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f43f ae0b 	beq.w	80064c2 <_strtod_l+0x72>
 80068ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068ae:	9805      	ldr	r0, [sp, #20]
 80068b0:	f002 fdc8 	bl	8009444 <_Bfree>
 80068b4:	9805      	ldr	r0, [sp, #20]
 80068b6:	4649      	mov	r1, r9
 80068b8:	f002 fdc4 	bl	8009444 <_Bfree>
 80068bc:	9805      	ldr	r0, [sp, #20]
 80068be:	4641      	mov	r1, r8
 80068c0:	f002 fdc0 	bl	8009444 <_Bfree>
 80068c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068c6:	9805      	ldr	r0, [sp, #20]
 80068c8:	f002 fdbc 	bl	8009444 <_Bfree>
 80068cc:	9805      	ldr	r0, [sp, #20]
 80068ce:	4621      	mov	r1, r4
 80068d0:	f002 fdb8 	bl	8009444 <_Bfree>
 80068d4:	e5f5      	b.n	80064c2 <_strtod_l+0x72>
 80068d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80068dc:	4293      	cmp	r3, r2
 80068de:	dbbc      	blt.n	800685a <_strtod_l+0x40a>
 80068e0:	4c3f      	ldr	r4, [pc, #252]	@ (80069e0 <_strtod_l+0x590>)
 80068e2:	f1c5 050f 	rsb	r5, r5, #15
 80068e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80068ea:	4652      	mov	r2, sl
 80068ec:	465b      	mov	r3, fp
 80068ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f2:	f7f9 feb1 	bl	8000658 <__aeabi_dmul>
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	1b5d      	subs	r5, r3, r5
 80068fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006902:	e78f      	b.n	8006824 <_strtod_l+0x3d4>
 8006904:	3316      	adds	r3, #22
 8006906:	dba8      	blt.n	800685a <_strtod_l+0x40a>
 8006908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800690a:	eba3 0808 	sub.w	r8, r3, r8
 800690e:	4b34      	ldr	r3, [pc, #208]	@ (80069e0 <_strtod_l+0x590>)
 8006910:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006914:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006918:	4650      	mov	r0, sl
 800691a:	4659      	mov	r1, fp
 800691c:	f7f9 ffc6 	bl	80008ac <__aeabi_ddiv>
 8006920:	e782      	b.n	8006828 <_strtod_l+0x3d8>
 8006922:	2300      	movs	r3, #0
 8006924:	4f2f      	ldr	r7, [pc, #188]	@ (80069e4 <_strtod_l+0x594>)
 8006926:	1124      	asrs	r4, r4, #4
 8006928:	4650      	mov	r0, sl
 800692a:	4659      	mov	r1, fp
 800692c:	461e      	mov	r6, r3
 800692e:	2c01      	cmp	r4, #1
 8006930:	dc21      	bgt.n	8006976 <_strtod_l+0x526>
 8006932:	b10b      	cbz	r3, 8006938 <_strtod_l+0x4e8>
 8006934:	4682      	mov	sl, r0
 8006936:	468b      	mov	fp, r1
 8006938:	492a      	ldr	r1, [pc, #168]	@ (80069e4 <_strtod_l+0x594>)
 800693a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800693e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006942:	4652      	mov	r2, sl
 8006944:	465b      	mov	r3, fp
 8006946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694a:	f7f9 fe85 	bl	8000658 <__aeabi_dmul>
 800694e:	4b26      	ldr	r3, [pc, #152]	@ (80069e8 <_strtod_l+0x598>)
 8006950:	460a      	mov	r2, r1
 8006952:	400b      	ands	r3, r1
 8006954:	4925      	ldr	r1, [pc, #148]	@ (80069ec <_strtod_l+0x59c>)
 8006956:	428b      	cmp	r3, r1
 8006958:	4682      	mov	sl, r0
 800695a:	d898      	bhi.n	800688e <_strtod_l+0x43e>
 800695c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006960:	428b      	cmp	r3, r1
 8006962:	bf86      	itte	hi
 8006964:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80069f0 <_strtod_l+0x5a0>
 8006968:	f04f 3aff 	movhi.w	sl, #4294967295
 800696c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006970:	2300      	movs	r3, #0
 8006972:	9308      	str	r3, [sp, #32]
 8006974:	e076      	b.n	8006a64 <_strtod_l+0x614>
 8006976:	07e2      	lsls	r2, r4, #31
 8006978:	d504      	bpl.n	8006984 <_strtod_l+0x534>
 800697a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697e:	f7f9 fe6b 	bl	8000658 <__aeabi_dmul>
 8006982:	2301      	movs	r3, #1
 8006984:	3601      	adds	r6, #1
 8006986:	1064      	asrs	r4, r4, #1
 8006988:	3708      	adds	r7, #8
 800698a:	e7d0      	b.n	800692e <_strtod_l+0x4de>
 800698c:	d0f0      	beq.n	8006970 <_strtod_l+0x520>
 800698e:	4264      	negs	r4, r4
 8006990:	f014 020f 	ands.w	r2, r4, #15
 8006994:	d00a      	beq.n	80069ac <_strtod_l+0x55c>
 8006996:	4b12      	ldr	r3, [pc, #72]	@ (80069e0 <_strtod_l+0x590>)
 8006998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f7f9 ff82 	bl	80008ac <__aeabi_ddiv>
 80069a8:	4682      	mov	sl, r0
 80069aa:	468b      	mov	fp, r1
 80069ac:	1124      	asrs	r4, r4, #4
 80069ae:	d0df      	beq.n	8006970 <_strtod_l+0x520>
 80069b0:	2c1f      	cmp	r4, #31
 80069b2:	dd1f      	ble.n	80069f4 <_strtod_l+0x5a4>
 80069b4:	2400      	movs	r4, #0
 80069b6:	46a0      	mov	r8, r4
 80069b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069ba:	46a1      	mov	r9, r4
 80069bc:	9a05      	ldr	r2, [sp, #20]
 80069be:	2322      	movs	r3, #34	@ 0x22
 80069c0:	f04f 0a00 	mov.w	sl, #0
 80069c4:	f04f 0b00 	mov.w	fp, #0
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e76b      	b.n	80068a4 <_strtod_l+0x454>
 80069cc:	0800b54b 	.word	0x0800b54b
 80069d0:	0800b728 	.word	0x0800b728
 80069d4:	0800b543 	.word	0x0800b543
 80069d8:	0800b57b 	.word	0x0800b57b
 80069dc:	0800b725 	.word	0x0800b725
 80069e0:	0800b8b0 	.word	0x0800b8b0
 80069e4:	0800b888 	.word	0x0800b888
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	7ca00000 	.word	0x7ca00000
 80069f0:	7fefffff 	.word	0x7fefffff
 80069f4:	f014 0310 	ands.w	r3, r4, #16
 80069f8:	bf18      	it	ne
 80069fa:	236a      	movne	r3, #106	@ 0x6a
 80069fc:	4ea9      	ldr	r6, [pc, #676]	@ (8006ca4 <_strtod_l+0x854>)
 80069fe:	9308      	str	r3, [sp, #32]
 8006a00:	4650      	mov	r0, sl
 8006a02:	4659      	mov	r1, fp
 8006a04:	2300      	movs	r3, #0
 8006a06:	07e7      	lsls	r7, r4, #31
 8006a08:	d504      	bpl.n	8006a14 <_strtod_l+0x5c4>
 8006a0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a0e:	f7f9 fe23 	bl	8000658 <__aeabi_dmul>
 8006a12:	2301      	movs	r3, #1
 8006a14:	1064      	asrs	r4, r4, #1
 8006a16:	f106 0608 	add.w	r6, r6, #8
 8006a1a:	d1f4      	bne.n	8006a06 <_strtod_l+0x5b6>
 8006a1c:	b10b      	cbz	r3, 8006a22 <_strtod_l+0x5d2>
 8006a1e:	4682      	mov	sl, r0
 8006a20:	468b      	mov	fp, r1
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	b1b3      	cbz	r3, 8006a54 <_strtod_l+0x604>
 8006a26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	4659      	mov	r1, fp
 8006a32:	dd0f      	ble.n	8006a54 <_strtod_l+0x604>
 8006a34:	2b1f      	cmp	r3, #31
 8006a36:	dd56      	ble.n	8006ae6 <_strtod_l+0x696>
 8006a38:	2b34      	cmp	r3, #52	@ 0x34
 8006a3a:	bfde      	ittt	le
 8006a3c:	f04f 33ff 	movle.w	r3, #4294967295
 8006a40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006a44:	4093      	lslle	r3, r2
 8006a46:	f04f 0a00 	mov.w	sl, #0
 8006a4a:	bfcc      	ite	gt
 8006a4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006a50:	ea03 0b01 	andle.w	fp, r3, r1
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	4650      	mov	r0, sl
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	f7fa f864 	bl	8000b28 <__aeabi_dcmpeq>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1a7      	bne.n	80069b4 <_strtod_l+0x564>
 8006a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a6a:	9805      	ldr	r0, [sp, #20]
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	464a      	mov	r2, r9
 8006a70:	f002 fd50 	bl	8009514 <__s2b>
 8006a74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f af09 	beq.w	800688e <_strtod_l+0x43e>
 8006a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	eba3 0308 	sub.w	r3, r3, r8
 8006a86:	bfa8      	it	ge
 8006a88:	2300      	movge	r3, #0
 8006a8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a8c:	2400      	movs	r4, #0
 8006a8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a92:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a94:	46a0      	mov	r8, r4
 8006a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a98:	9805      	ldr	r0, [sp, #20]
 8006a9a:	6859      	ldr	r1, [r3, #4]
 8006a9c:	f002 fc92 	bl	80093c4 <_Balloc>
 8006aa0:	4681      	mov	r9, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f43f aef7 	beq.w	8006896 <_strtod_l+0x446>
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	3202      	adds	r2, #2
 8006aae:	f103 010c 	add.w	r1, r3, #12
 8006ab2:	0092      	lsls	r2, r2, #2
 8006ab4:	300c      	adds	r0, #12
 8006ab6:	f001 fa7e 	bl	8007fb6 <memcpy>
 8006aba:	ec4b ab10 	vmov	d0, sl, fp
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ac2:	a91b      	add	r1, sp, #108	@ 0x6c
 8006ac4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ac8:	f003 f858 	bl	8009b7c <__d2b>
 8006acc:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f43f aee1 	beq.w	8006896 <_strtod_l+0x446>
 8006ad4:	9805      	ldr	r0, [sp, #20]
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	f002 fdb2 	bl	8009640 <__i2b>
 8006adc:	4680      	mov	r8, r0
 8006ade:	b948      	cbnz	r0, 8006af4 <_strtod_l+0x6a4>
 8006ae0:	f04f 0800 	mov.w	r8, #0
 8006ae4:	e6d7      	b.n	8006896 <_strtod_l+0x446>
 8006ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	ea03 0a0a 	and.w	sl, r3, sl
 8006af2:	e7af      	b.n	8006a54 <_strtod_l+0x604>
 8006af4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006af6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	bfab      	itete	ge
 8006afc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006afe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006b00:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006b02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006b04:	bfac      	ite	ge
 8006b06:	18ef      	addge	r7, r5, r3
 8006b08:	1b5e      	sublt	r6, r3, r5
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	1aed      	subs	r5, r5, r3
 8006b0e:	4415      	add	r5, r2
 8006b10:	4b65      	ldr	r3, [pc, #404]	@ (8006ca8 <_strtod_l+0x858>)
 8006b12:	3d01      	subs	r5, #1
 8006b14:	429d      	cmp	r5, r3
 8006b16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006b1a:	da50      	bge.n	8006bbe <_strtod_l+0x76e>
 8006b1c:	1b5b      	subs	r3, r3, r5
 8006b1e:	2b1f      	cmp	r3, #31
 8006b20:	eba2 0203 	sub.w	r2, r2, r3
 8006b24:	f04f 0101 	mov.w	r1, #1
 8006b28:	dc3d      	bgt.n	8006ba6 <_strtod_l+0x756>
 8006b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b30:	2300      	movs	r3, #0
 8006b32:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b34:	18bd      	adds	r5, r7, r2
 8006b36:	9b08      	ldr	r3, [sp, #32]
 8006b38:	42af      	cmp	r7, r5
 8006b3a:	4416      	add	r6, r2
 8006b3c:	441e      	add	r6, r3
 8006b3e:	463b      	mov	r3, r7
 8006b40:	bfa8      	it	ge
 8006b42:	462b      	movge	r3, r5
 8006b44:	42b3      	cmp	r3, r6
 8006b46:	bfa8      	it	ge
 8006b48:	4633      	movge	r3, r6
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfc2      	ittt	gt
 8006b4e:	1aed      	subgt	r5, r5, r3
 8006b50:	1af6      	subgt	r6, r6, r3
 8006b52:	1aff      	subgt	r7, r7, r3
 8006b54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dd16      	ble.n	8006b88 <_strtod_l+0x738>
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	9805      	ldr	r0, [sp, #20]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f002 fe26 	bl	80097b0 <__pow5mult>
 8006b64:	4680      	mov	r8, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d0ba      	beq.n	8006ae0 <_strtod_l+0x690>
 8006b6a:	4601      	mov	r1, r0
 8006b6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b6e:	9805      	ldr	r0, [sp, #20]
 8006b70:	f002 fd7c 	bl	800966c <__multiply>
 8006b74:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f43f ae8d 	beq.w	8006896 <_strtod_l+0x446>
 8006b7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b7e:	9805      	ldr	r0, [sp, #20]
 8006b80:	f002 fc60 	bl	8009444 <_Bfree>
 8006b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b86:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b88:	2d00      	cmp	r5, #0
 8006b8a:	dc1d      	bgt.n	8006bc8 <_strtod_l+0x778>
 8006b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd23      	ble.n	8006bda <_strtod_l+0x78a>
 8006b92:	4649      	mov	r1, r9
 8006b94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b96:	9805      	ldr	r0, [sp, #20]
 8006b98:	f002 fe0a 	bl	80097b0 <__pow5mult>
 8006b9c:	4681      	mov	r9, r0
 8006b9e:	b9e0      	cbnz	r0, 8006bda <_strtod_l+0x78a>
 8006ba0:	f04f 0900 	mov.w	r9, #0
 8006ba4:	e677      	b.n	8006896 <_strtod_l+0x446>
 8006ba6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006baa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006bae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006bb2:	35e2      	adds	r5, #226	@ 0xe2
 8006bb4:	fa01 f305 	lsl.w	r3, r1, r5
 8006bb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006bbc:	e7ba      	b.n	8006b34 <_strtod_l+0x6e4>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bc6:	e7b5      	b.n	8006b34 <_strtod_l+0x6e4>
 8006bc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bca:	9805      	ldr	r0, [sp, #20]
 8006bcc:	462a      	mov	r2, r5
 8006bce:	f002 fe49 	bl	8009864 <__lshift>
 8006bd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d1d9      	bne.n	8006b8c <_strtod_l+0x73c>
 8006bd8:	e65d      	b.n	8006896 <_strtod_l+0x446>
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	dd07      	ble.n	8006bee <_strtod_l+0x79e>
 8006bde:	4649      	mov	r1, r9
 8006be0:	9805      	ldr	r0, [sp, #20]
 8006be2:	4632      	mov	r2, r6
 8006be4:	f002 fe3e 	bl	8009864 <__lshift>
 8006be8:	4681      	mov	r9, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d0d8      	beq.n	8006ba0 <_strtod_l+0x750>
 8006bee:	2f00      	cmp	r7, #0
 8006bf0:	dd08      	ble.n	8006c04 <_strtod_l+0x7b4>
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	463a      	mov	r2, r7
 8006bf8:	f002 fe34 	bl	8009864 <__lshift>
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f ae49 	beq.w	8006896 <_strtod_l+0x446>
 8006c04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c06:	9805      	ldr	r0, [sp, #20]
 8006c08:	464a      	mov	r2, r9
 8006c0a:	f002 feb3 	bl	8009974 <__mdiff>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f43f ae40 	beq.w	8006896 <_strtod_l+0x446>
 8006c16:	68c3      	ldr	r3, [r0, #12]
 8006c18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60c3      	str	r3, [r0, #12]
 8006c1e:	4641      	mov	r1, r8
 8006c20:	f002 fe8c 	bl	800993c <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	da45      	bge.n	8006cb4 <_strtod_l+0x864>
 8006c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c2a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c2e:	d16b      	bne.n	8006d08 <_strtod_l+0x8b8>
 8006c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d167      	bne.n	8006d08 <_strtod_l+0x8b8>
 8006c38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c3c:	0d1b      	lsrs	r3, r3, #20
 8006c3e:	051b      	lsls	r3, r3, #20
 8006c40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c44:	d960      	bls.n	8006d08 <_strtod_l+0x8b8>
 8006c46:	6963      	ldr	r3, [r4, #20]
 8006c48:	b913      	cbnz	r3, 8006c50 <_strtod_l+0x800>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	dd5b      	ble.n	8006d08 <_strtod_l+0x8b8>
 8006c50:	4621      	mov	r1, r4
 8006c52:	2201      	movs	r2, #1
 8006c54:	9805      	ldr	r0, [sp, #20]
 8006c56:	f002 fe05 	bl	8009864 <__lshift>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	f002 fe6d 	bl	800993c <__mcmp>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	dd50      	ble.n	8006d08 <_strtod_l+0x8b8>
 8006c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c6a:	9a08      	ldr	r2, [sp, #32]
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	051b      	lsls	r3, r3, #20
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d06a      	beq.n	8006d4a <_strtod_l+0x8fa>
 8006c74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c78:	d867      	bhi.n	8006d4a <_strtod_l+0x8fa>
 8006c7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006c7e:	f67f ae9d 	bls.w	80069bc <_strtod_l+0x56c>
 8006c82:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <_strtod_l+0x85c>)
 8006c84:	4650      	mov	r0, sl
 8006c86:	4659      	mov	r1, fp
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f7f9 fce5 	bl	8000658 <__aeabi_dmul>
 8006c8e:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <_strtod_l+0x860>)
 8006c90:	400b      	ands	r3, r1
 8006c92:	4682      	mov	sl, r0
 8006c94:	468b      	mov	fp, r1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f47f ae08 	bne.w	80068ac <_strtod_l+0x45c>
 8006c9c:	9a05      	ldr	r2, [sp, #20]
 8006c9e:	2322      	movs	r3, #34	@ 0x22
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e603      	b.n	80068ac <_strtod_l+0x45c>
 8006ca4:	0800b750 	.word	0x0800b750
 8006ca8:	fffffc02 	.word	0xfffffc02
 8006cac:	39500000 	.word	0x39500000
 8006cb0:	7ff00000 	.word	0x7ff00000
 8006cb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006cb8:	d165      	bne.n	8006d86 <_strtod_l+0x936>
 8006cba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006cbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cc0:	b35a      	cbz	r2, 8006d1a <_strtod_l+0x8ca>
 8006cc2:	4a9f      	ldr	r2, [pc, #636]	@ (8006f40 <_strtod_l+0xaf0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d12b      	bne.n	8006d20 <_strtod_l+0x8d0>
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	4651      	mov	r1, sl
 8006ccc:	b303      	cbz	r3, 8006d10 <_strtod_l+0x8c0>
 8006cce:	4b9d      	ldr	r3, [pc, #628]	@ (8006f44 <_strtod_l+0xaf4>)
 8006cd0:	465a      	mov	r2, fp
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	d81b      	bhi.n	8006d16 <_strtod_l+0x8c6>
 8006cde:	0d1b      	lsrs	r3, r3, #20
 8006ce0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	4299      	cmp	r1, r3
 8006cea:	d119      	bne.n	8006d20 <_strtod_l+0x8d0>
 8006cec:	4b96      	ldr	r3, [pc, #600]	@ (8006f48 <_strtod_l+0xaf8>)
 8006cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d102      	bne.n	8006cfa <_strtod_l+0x8aa>
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	f43f adce 	beq.w	8006896 <_strtod_l+0x446>
 8006cfa:	4b92      	ldr	r3, [pc, #584]	@ (8006f44 <_strtod_l+0xaf4>)
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cfe:	401a      	ands	r2, r3
 8006d00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006d04:	f04f 0a00 	mov.w	sl, #0
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1b9      	bne.n	8006c82 <_strtod_l+0x832>
 8006d0e:	e5cd      	b.n	80068ac <_strtod_l+0x45c>
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e7e8      	b.n	8006ce8 <_strtod_l+0x898>
 8006d16:	4613      	mov	r3, r2
 8006d18:	e7e6      	b.n	8006ce8 <_strtod_l+0x898>
 8006d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d1e:	d0a2      	beq.n	8006c66 <_strtod_l+0x816>
 8006d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d22:	b1db      	cbz	r3, 8006d5c <_strtod_l+0x90c>
 8006d24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d26:	4213      	tst	r3, r2
 8006d28:	d0ee      	beq.n	8006d08 <_strtod_l+0x8b8>
 8006d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d2c:	9a08      	ldr	r2, [sp, #32]
 8006d2e:	4650      	mov	r0, sl
 8006d30:	4659      	mov	r1, fp
 8006d32:	b1bb      	cbz	r3, 8006d64 <_strtod_l+0x914>
 8006d34:	f7ff fb6c 	bl	8006410 <sulp>
 8006d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3c:	ec53 2b10 	vmov	r2, r3, d0
 8006d40:	f7f9 fad4 	bl	80002ec <__adddf3>
 8006d44:	4682      	mov	sl, r0
 8006d46:	468b      	mov	fp, r1
 8006d48:	e7de      	b.n	8006d08 <_strtod_l+0x8b8>
 8006d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006d4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d56:	f04f 3aff 	mov.w	sl, #4294967295
 8006d5a:	e7d5      	b.n	8006d08 <_strtod_l+0x8b8>
 8006d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d5e:	ea13 0f0a 	tst.w	r3, sl
 8006d62:	e7e1      	b.n	8006d28 <_strtod_l+0x8d8>
 8006d64:	f7ff fb54 	bl	8006410 <sulp>
 8006d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d6c:	ec53 2b10 	vmov	r2, r3, d0
 8006d70:	f7f9 faba 	bl	80002e8 <__aeabi_dsub>
 8006d74:	2200      	movs	r2, #0
 8006d76:	2300      	movs	r3, #0
 8006d78:	4682      	mov	sl, r0
 8006d7a:	468b      	mov	fp, r1
 8006d7c:	f7f9 fed4 	bl	8000b28 <__aeabi_dcmpeq>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d0c1      	beq.n	8006d08 <_strtod_l+0x8b8>
 8006d84:	e61a      	b.n	80069bc <_strtod_l+0x56c>
 8006d86:	4641      	mov	r1, r8
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f002 ff4f 	bl	8009c2c <__ratio>
 8006d8e:	ec57 6b10 	vmov	r6, r7, d0
 8006d92:	2200      	movs	r2, #0
 8006d94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d98:	4630      	mov	r0, r6
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	f7f9 fed8 	bl	8000b50 <__aeabi_dcmple>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d06f      	beq.n	8006e84 <_strtod_l+0xa34>
 8006da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d17a      	bne.n	8006ea0 <_strtod_l+0xa50>
 8006daa:	f1ba 0f00 	cmp.w	sl, #0
 8006dae:	d158      	bne.n	8006e62 <_strtod_l+0xa12>
 8006db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d15a      	bne.n	8006e70 <_strtod_l+0xa20>
 8006dba:	4b64      	ldr	r3, [pc, #400]	@ (8006f4c <_strtod_l+0xafc>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 febb 	bl	8000b3c <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d159      	bne.n	8006e7e <_strtod_l+0xa2e>
 8006dca:	4630      	mov	r0, r6
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4b60      	ldr	r3, [pc, #384]	@ (8006f50 <_strtod_l+0xb00>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fc41 	bl	8000658 <__aeabi_dmul>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006dde:	9606      	str	r6, [sp, #24]
 8006de0:	9307      	str	r3, [sp, #28]
 8006de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006de6:	4d57      	ldr	r5, [pc, #348]	@ (8006f44 <_strtod_l+0xaf4>)
 8006de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dee:	401d      	ands	r5, r3
 8006df0:	4b58      	ldr	r3, [pc, #352]	@ (8006f54 <_strtod_l+0xb04>)
 8006df2:	429d      	cmp	r5, r3
 8006df4:	f040 80b2 	bne.w	8006f5c <_strtod_l+0xb0c>
 8006df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006dfe:	ec4b ab10 	vmov	d0, sl, fp
 8006e02:	f002 fe4b 	bl	8009a9c <__ulp>
 8006e06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e0a:	ec51 0b10 	vmov	r0, r1, d0
 8006e0e:	f7f9 fc23 	bl	8000658 <__aeabi_dmul>
 8006e12:	4652      	mov	r2, sl
 8006e14:	465b      	mov	r3, fp
 8006e16:	f7f9 fa69 	bl	80002ec <__adddf3>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4949      	ldr	r1, [pc, #292]	@ (8006f44 <_strtod_l+0xaf4>)
 8006e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f58 <_strtod_l+0xb08>)
 8006e20:	4019      	ands	r1, r3
 8006e22:	4291      	cmp	r1, r2
 8006e24:	4682      	mov	sl, r0
 8006e26:	d942      	bls.n	8006eae <_strtod_l+0xa5e>
 8006e28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e2a:	4b47      	ldr	r3, [pc, #284]	@ (8006f48 <_strtod_l+0xaf8>)
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d103      	bne.n	8006e38 <_strtod_l+0x9e8>
 8006e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e32:	3301      	adds	r3, #1
 8006e34:	f43f ad2f 	beq.w	8006896 <_strtod_l+0x446>
 8006e38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006f48 <_strtod_l+0xaf8>
 8006e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e42:	9805      	ldr	r0, [sp, #20]
 8006e44:	f002 fafe 	bl	8009444 <_Bfree>
 8006e48:	9805      	ldr	r0, [sp, #20]
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f002 fafa 	bl	8009444 <_Bfree>
 8006e50:	9805      	ldr	r0, [sp, #20]
 8006e52:	4641      	mov	r1, r8
 8006e54:	f002 faf6 	bl	8009444 <_Bfree>
 8006e58:	9805      	ldr	r0, [sp, #20]
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	f002 faf2 	bl	8009444 <_Bfree>
 8006e60:	e619      	b.n	8006a96 <_strtod_l+0x646>
 8006e62:	f1ba 0f01 	cmp.w	sl, #1
 8006e66:	d103      	bne.n	8006e70 <_strtod_l+0xa20>
 8006e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f43f ada6 	beq.w	80069bc <_strtod_l+0x56c>
 8006e70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006f20 <_strtod_l+0xad0>
 8006e74:	4f35      	ldr	r7, [pc, #212]	@ (8006f4c <_strtod_l+0xafc>)
 8006e76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	e7b1      	b.n	8006de2 <_strtod_l+0x992>
 8006e7e:	4f34      	ldr	r7, [pc, #208]	@ (8006f50 <_strtod_l+0xb00>)
 8006e80:	2600      	movs	r6, #0
 8006e82:	e7aa      	b.n	8006dda <_strtod_l+0x98a>
 8006e84:	4b32      	ldr	r3, [pc, #200]	@ (8006f50 <_strtod_l+0xb00>)
 8006e86:	4630      	mov	r0, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f7f9 fbe4 	bl	8000658 <__aeabi_dmul>
 8006e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d09f      	beq.n	8006dda <_strtod_l+0x98a>
 8006e9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e9e:	e7a0      	b.n	8006de2 <_strtod_l+0x992>
 8006ea0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006f28 <_strtod_l+0xad8>
 8006ea4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ea8:	ec57 6b17 	vmov	r6, r7, d7
 8006eac:	e799      	b.n	8006de2 <_strtod_l+0x992>
 8006eae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006eb2:	9b08      	ldr	r3, [sp, #32]
 8006eb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1c1      	bne.n	8006e40 <_strtod_l+0x9f0>
 8006ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ec0:	0d1b      	lsrs	r3, r3, #20
 8006ec2:	051b      	lsls	r3, r3, #20
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	d1bb      	bne.n	8006e40 <_strtod_l+0x9f0>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4639      	mov	r1, r7
 8006ecc:	f7f9 fed4 	bl	8000c78 <__aeabi_d2lz>
 8006ed0:	f7f9 fb94 	bl	80005fc <__aeabi_l2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 fa04 	bl	80002e8 <__aeabi_dsub>
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ee8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eee:	ea46 060a 	orr.w	r6, r6, sl
 8006ef2:	431e      	orrs	r6, r3
 8006ef4:	d06f      	beq.n	8006fd6 <_strtod_l+0xb86>
 8006ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006f30 <_strtod_l+0xae0>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 fe1e 	bl	8000b3c <__aeabi_dcmplt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f47f acd3 	bne.w	80068ac <_strtod_l+0x45c>
 8006f06:	a30c      	add	r3, pc, #48	@ (adr r3, 8006f38 <_strtod_l+0xae8>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f10:	f7f9 fe32 	bl	8000b78 <__aeabi_dcmpgt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d093      	beq.n	8006e40 <_strtod_l+0x9f0>
 8006f18:	e4c8      	b.n	80068ac <_strtod_l+0x45c>
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w
 8006f20:	00000000 	.word	0x00000000
 8006f24:	bff00000 	.word	0xbff00000
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	3ff00000 	.word	0x3ff00000
 8006f30:	94a03595 	.word	0x94a03595
 8006f34:	3fdfffff 	.word	0x3fdfffff
 8006f38:	35afe535 	.word	0x35afe535
 8006f3c:	3fe00000 	.word	0x3fe00000
 8006f40:	000fffff 	.word	0x000fffff
 8006f44:	7ff00000 	.word	0x7ff00000
 8006f48:	7fefffff 	.word	0x7fefffff
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	7fe00000 	.word	0x7fe00000
 8006f58:	7c9fffff 	.word	0x7c9fffff
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	b323      	cbz	r3, 8006faa <_strtod_l+0xb5a>
 8006f60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006f64:	d821      	bhi.n	8006faa <_strtod_l+0xb5a>
 8006f66:	a328      	add	r3, pc, #160	@ (adr r3, 8007008 <_strtod_l+0xbb8>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	4639      	mov	r1, r7
 8006f70:	f7f9 fdee 	bl	8000b50 <__aeabi_dcmple>
 8006f74:	b1a0      	cbz	r0, 8006fa0 <_strtod_l+0xb50>
 8006f76:	4639      	mov	r1, r7
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7f9 fe45 	bl	8000c08 <__aeabi_d2uiz>
 8006f7e:	2801      	cmp	r0, #1
 8006f80:	bf38      	it	cc
 8006f82:	2001      	movcc	r0, #1
 8006f84:	f7f9 faee 	bl	8000564 <__aeabi_ui2d>
 8006f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	b9fb      	cbnz	r3, 8006fd0 <_strtod_l+0xb80>
 8006f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f94:	9014      	str	r0, [sp, #80]	@ 0x50
 8006f96:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006f9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006fa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fa2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006fa6:	1b5b      	subs	r3, r3, r5
 8006fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006faa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006fae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006fb2:	f002 fd73 	bl	8009a9c <__ulp>
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	ec53 2b10 	vmov	r2, r3, d0
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	f7f9 fb4b 	bl	8000658 <__aeabi_dmul>
 8006fc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006fc6:	f7f9 f991 	bl	80002ec <__adddf3>
 8006fca:	4682      	mov	sl, r0
 8006fcc:	468b      	mov	fp, r1
 8006fce:	e770      	b.n	8006eb2 <_strtod_l+0xa62>
 8006fd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006fd4:	e7e0      	b.n	8006f98 <_strtod_l+0xb48>
 8006fd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007010 <_strtod_l+0xbc0>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 fdae 	bl	8000b3c <__aeabi_dcmplt>
 8006fe0:	e798      	b.n	8006f14 <_strtod_l+0xac4>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fe6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	f7ff ba6d 	b.w	80064ca <_strtod_l+0x7a>
 8006ff0:	2a65      	cmp	r2, #101	@ 0x65
 8006ff2:	f43f ab68 	beq.w	80066c6 <_strtod_l+0x276>
 8006ff6:	2a45      	cmp	r2, #69	@ 0x45
 8006ff8:	f43f ab65 	beq.w	80066c6 <_strtod_l+0x276>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f7ff bba0 	b.w	8006742 <_strtod_l+0x2f2>
 8007002:	bf00      	nop
 8007004:	f3af 8000 	nop.w
 8007008:	ffc00000 	.word	0xffc00000
 800700c:	41dfffff 	.word	0x41dfffff
 8007010:	94a03595 	.word	0x94a03595
 8007014:	3fcfffff 	.word	0x3fcfffff

08007018 <strtod>:
 8007018:	460a      	mov	r2, r1
 800701a:	4601      	mov	r1, r0
 800701c:	4802      	ldr	r0, [pc, #8]	@ (8007028 <strtod+0x10>)
 800701e:	4b03      	ldr	r3, [pc, #12]	@ (800702c <strtod+0x14>)
 8007020:	6800      	ldr	r0, [r0, #0]
 8007022:	f7ff ba15 	b.w	8006450 <_strtod_l>
 8007026:	bf00      	nop
 8007028:	200001c0 	.word	0x200001c0
 800702c:	20000054 	.word	0x20000054

08007030 <__cvt>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	ec57 6b10 	vmov	r6, r7, d0
 8007038:	2f00      	cmp	r7, #0
 800703a:	460c      	mov	r4, r1
 800703c:	4619      	mov	r1, r3
 800703e:	463b      	mov	r3, r7
 8007040:	bfbb      	ittet	lt
 8007042:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007046:	461f      	movlt	r7, r3
 8007048:	2300      	movge	r3, #0
 800704a:	232d      	movlt	r3, #45	@ 0x2d
 800704c:	700b      	strb	r3, [r1, #0]
 800704e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007050:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007054:	4691      	mov	r9, r2
 8007056:	f023 0820 	bic.w	r8, r3, #32
 800705a:	bfbc      	itt	lt
 800705c:	4632      	movlt	r2, r6
 800705e:	4616      	movlt	r6, r2
 8007060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007064:	d005      	beq.n	8007072 <__cvt+0x42>
 8007066:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800706a:	d100      	bne.n	800706e <__cvt+0x3e>
 800706c:	3401      	adds	r4, #1
 800706e:	2102      	movs	r1, #2
 8007070:	e000      	b.n	8007074 <__cvt+0x44>
 8007072:	2103      	movs	r1, #3
 8007074:	ab03      	add	r3, sp, #12
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	ab02      	add	r3, sp, #8
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	ec47 6b10 	vmov	d0, r6, r7
 8007080:	4653      	mov	r3, sl
 8007082:	4622      	mov	r2, r4
 8007084:	f001 f838 	bl	80080f8 <_dtoa_r>
 8007088:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800708c:	4605      	mov	r5, r0
 800708e:	d119      	bne.n	80070c4 <__cvt+0x94>
 8007090:	f019 0f01 	tst.w	r9, #1
 8007094:	d00e      	beq.n	80070b4 <__cvt+0x84>
 8007096:	eb00 0904 	add.w	r9, r0, r4
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	4630      	mov	r0, r6
 80070a0:	4639      	mov	r1, r7
 80070a2:	f7f9 fd41 	bl	8000b28 <__aeabi_dcmpeq>
 80070a6:	b108      	cbz	r0, 80070ac <__cvt+0x7c>
 80070a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80070ac:	2230      	movs	r2, #48	@ 0x30
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	454b      	cmp	r3, r9
 80070b2:	d31e      	bcc.n	80070f2 <__cvt+0xc2>
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070b8:	1b5b      	subs	r3, r3, r5
 80070ba:	4628      	mov	r0, r5
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	b004      	add	sp, #16
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070c8:	eb00 0904 	add.w	r9, r0, r4
 80070cc:	d1e5      	bne.n	800709a <__cvt+0x6a>
 80070ce:	7803      	ldrb	r3, [r0, #0]
 80070d0:	2b30      	cmp	r3, #48	@ 0x30
 80070d2:	d10a      	bne.n	80070ea <__cvt+0xba>
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fd24 	bl	8000b28 <__aeabi_dcmpeq>
 80070e0:	b918      	cbnz	r0, 80070ea <__cvt+0xba>
 80070e2:	f1c4 0401 	rsb	r4, r4, #1
 80070e6:	f8ca 4000 	str.w	r4, [sl]
 80070ea:	f8da 3000 	ldr.w	r3, [sl]
 80070ee:	4499      	add	r9, r3
 80070f0:	e7d3      	b.n	800709a <__cvt+0x6a>
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	9103      	str	r1, [sp, #12]
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e7d9      	b.n	80070ae <__cvt+0x7e>

080070fa <__exponent>:
 80070fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070fc:	2900      	cmp	r1, #0
 80070fe:	bfba      	itte	lt
 8007100:	4249      	neglt	r1, r1
 8007102:	232d      	movlt	r3, #45	@ 0x2d
 8007104:	232b      	movge	r3, #43	@ 0x2b
 8007106:	2909      	cmp	r1, #9
 8007108:	7002      	strb	r2, [r0, #0]
 800710a:	7043      	strb	r3, [r0, #1]
 800710c:	dd29      	ble.n	8007162 <__exponent+0x68>
 800710e:	f10d 0307 	add.w	r3, sp, #7
 8007112:	461d      	mov	r5, r3
 8007114:	270a      	movs	r7, #10
 8007116:	461a      	mov	r2, r3
 8007118:	fbb1 f6f7 	udiv	r6, r1, r7
 800711c:	fb07 1416 	mls	r4, r7, r6, r1
 8007120:	3430      	adds	r4, #48	@ 0x30
 8007122:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007126:	460c      	mov	r4, r1
 8007128:	2c63      	cmp	r4, #99	@ 0x63
 800712a:	f103 33ff 	add.w	r3, r3, #4294967295
 800712e:	4631      	mov	r1, r6
 8007130:	dcf1      	bgt.n	8007116 <__exponent+0x1c>
 8007132:	3130      	adds	r1, #48	@ 0x30
 8007134:	1e94      	subs	r4, r2, #2
 8007136:	f803 1c01 	strb.w	r1, [r3, #-1]
 800713a:	1c41      	adds	r1, r0, #1
 800713c:	4623      	mov	r3, r4
 800713e:	42ab      	cmp	r3, r5
 8007140:	d30a      	bcc.n	8007158 <__exponent+0x5e>
 8007142:	f10d 0309 	add.w	r3, sp, #9
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ac      	cmp	r4, r5
 800714a:	bf88      	it	hi
 800714c:	2300      	movhi	r3, #0
 800714e:	3302      	adds	r3, #2
 8007150:	4403      	add	r3, r0
 8007152:	1a18      	subs	r0, r3, r0
 8007154:	b003      	add	sp, #12
 8007156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007158:	f813 6b01 	ldrb.w	r6, [r3], #1
 800715c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007160:	e7ed      	b.n	800713e <__exponent+0x44>
 8007162:	2330      	movs	r3, #48	@ 0x30
 8007164:	3130      	adds	r1, #48	@ 0x30
 8007166:	7083      	strb	r3, [r0, #2]
 8007168:	70c1      	strb	r1, [r0, #3]
 800716a:	1d03      	adds	r3, r0, #4
 800716c:	e7f1      	b.n	8007152 <__exponent+0x58>
	...

08007170 <_printf_float>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	b08d      	sub	sp, #52	@ 0x34
 8007176:	460c      	mov	r4, r1
 8007178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800717c:	4616      	mov	r6, r2
 800717e:	461f      	mov	r7, r3
 8007180:	4605      	mov	r5, r0
 8007182:	f000 fe91 	bl	8007ea8 <_localeconv_r>
 8007186:	6803      	ldr	r3, [r0, #0]
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	4618      	mov	r0, r3
 800718c:	f7f9 f8a0 	bl	80002d0 <strlen>
 8007190:	2300      	movs	r3, #0
 8007192:	930a      	str	r3, [sp, #40]	@ 0x28
 8007194:	f8d8 3000 	ldr.w	r3, [r8]
 8007198:	9005      	str	r0, [sp, #20]
 800719a:	3307      	adds	r3, #7
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	f103 0208 	add.w	r2, r3, #8
 80071a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071a8:	f8d4 b000 	ldr.w	fp, [r4]
 80071ac:	f8c8 2000 	str.w	r2, [r8]
 80071b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80071be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007438 <_printf_float+0x2c8>)
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	f7f9 fcde 	bl	8000b8c <__aeabi_dcmpun>
 80071d0:	bb70      	cbnz	r0, 8007230 <_printf_float+0xc0>
 80071d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071d6:	4b98      	ldr	r3, [pc, #608]	@ (8007438 <_printf_float+0x2c8>)
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	f7f9 fcb8 	bl	8000b50 <__aeabi_dcmple>
 80071e0:	bb30      	cbnz	r0, 8007230 <_printf_float+0xc0>
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	4640      	mov	r0, r8
 80071e8:	4649      	mov	r1, r9
 80071ea:	f7f9 fca7 	bl	8000b3c <__aeabi_dcmplt>
 80071ee:	b110      	cbz	r0, 80071f6 <_printf_float+0x86>
 80071f0:	232d      	movs	r3, #45	@ 0x2d
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f6:	4a91      	ldr	r2, [pc, #580]	@ (800743c <_printf_float+0x2cc>)
 80071f8:	4b91      	ldr	r3, [pc, #580]	@ (8007440 <_printf_float+0x2d0>)
 80071fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071fe:	bf8c      	ite	hi
 8007200:	4690      	movhi	r8, r2
 8007202:	4698      	movls	r8, r3
 8007204:	2303      	movs	r3, #3
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	f02b 0304 	bic.w	r3, fp, #4
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	f04f 0900 	mov.w	r9, #0
 8007212:	9700      	str	r7, [sp, #0]
 8007214:	4633      	mov	r3, r6
 8007216:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007218:	4621      	mov	r1, r4
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f9d2 	bl	80075c4 <_printf_common>
 8007220:	3001      	adds	r0, #1
 8007222:	f040 808d 	bne.w	8007340 <_printf_float+0x1d0>
 8007226:	f04f 30ff 	mov.w	r0, #4294967295
 800722a:	b00d      	add	sp, #52	@ 0x34
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	4642      	mov	r2, r8
 8007232:	464b      	mov	r3, r9
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 fca8 	bl	8000b8c <__aeabi_dcmpun>
 800723c:	b140      	cbz	r0, 8007250 <_printf_float+0xe0>
 800723e:	464b      	mov	r3, r9
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfbc      	itt	lt
 8007244:	232d      	movlt	r3, #45	@ 0x2d
 8007246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800724a:	4a7e      	ldr	r2, [pc, #504]	@ (8007444 <_printf_float+0x2d4>)
 800724c:	4b7e      	ldr	r3, [pc, #504]	@ (8007448 <_printf_float+0x2d8>)
 800724e:	e7d4      	b.n	80071fa <_printf_float+0x8a>
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007256:	9206      	str	r2, [sp, #24]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	d13b      	bne.n	80072d4 <_printf_float+0x164>
 800725c:	2306      	movs	r3, #6
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007264:	2300      	movs	r3, #0
 8007266:	6022      	str	r2, [r4, #0]
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	ab0a      	add	r3, sp, #40	@ 0x28
 800726c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007270:	ab09      	add	r3, sp, #36	@ 0x24
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	ec49 8b10 	vmov	d0, r8, r9
 800727a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800727e:	4628      	mov	r0, r5
 8007280:	f7ff fed6 	bl	8007030 <__cvt>
 8007284:	9b06      	ldr	r3, [sp, #24]
 8007286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007288:	2b47      	cmp	r3, #71	@ 0x47
 800728a:	4680      	mov	r8, r0
 800728c:	d129      	bne.n	80072e2 <_printf_float+0x172>
 800728e:	1cc8      	adds	r0, r1, #3
 8007290:	db02      	blt.n	8007298 <_printf_float+0x128>
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	4299      	cmp	r1, r3
 8007296:	dd41      	ble.n	800731c <_printf_float+0x1ac>
 8007298:	f1aa 0a02 	sub.w	sl, sl, #2
 800729c:	fa5f fa8a 	uxtb.w	sl, sl
 80072a0:	3901      	subs	r1, #1
 80072a2:	4652      	mov	r2, sl
 80072a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80072aa:	f7ff ff26 	bl	80070fa <__exponent>
 80072ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072b0:	1813      	adds	r3, r2, r0
 80072b2:	2a01      	cmp	r2, #1
 80072b4:	4681      	mov	r9, r0
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	dc02      	bgt.n	80072c0 <_printf_float+0x150>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	07d2      	lsls	r2, r2, #31
 80072be:	d501      	bpl.n	80072c4 <_printf_float+0x154>
 80072c0:	3301      	adds	r3, #1
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0a2      	beq.n	8007212 <_printf_float+0xa2>
 80072cc:	232d      	movs	r3, #45	@ 0x2d
 80072ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d2:	e79e      	b.n	8007212 <_printf_float+0xa2>
 80072d4:	9a06      	ldr	r2, [sp, #24]
 80072d6:	2a47      	cmp	r2, #71	@ 0x47
 80072d8:	d1c2      	bne.n	8007260 <_printf_float+0xf0>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1c0      	bne.n	8007260 <_printf_float+0xf0>
 80072de:	2301      	movs	r3, #1
 80072e0:	e7bd      	b.n	800725e <_printf_float+0xee>
 80072e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072e6:	d9db      	bls.n	80072a0 <_printf_float+0x130>
 80072e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072ec:	d118      	bne.n	8007320 <_printf_float+0x1b0>
 80072ee:	2900      	cmp	r1, #0
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	dd0b      	ble.n	800730c <_printf_float+0x19c>
 80072f4:	6121      	str	r1, [r4, #16]
 80072f6:	b913      	cbnz	r3, 80072fe <_printf_float+0x18e>
 80072f8:	6822      	ldr	r2, [r4, #0]
 80072fa:	07d0      	lsls	r0, r2, #31
 80072fc:	d502      	bpl.n	8007304 <_printf_float+0x194>
 80072fe:	3301      	adds	r3, #1
 8007300:	440b      	add	r3, r1
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007306:	f04f 0900 	mov.w	r9, #0
 800730a:	e7db      	b.n	80072c4 <_printf_float+0x154>
 800730c:	b913      	cbnz	r3, 8007314 <_printf_float+0x1a4>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	07d2      	lsls	r2, r2, #31
 8007312:	d501      	bpl.n	8007318 <_printf_float+0x1a8>
 8007314:	3302      	adds	r3, #2
 8007316:	e7f4      	b.n	8007302 <_printf_float+0x192>
 8007318:	2301      	movs	r3, #1
 800731a:	e7f2      	b.n	8007302 <_printf_float+0x192>
 800731c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007322:	4299      	cmp	r1, r3
 8007324:	db05      	blt.n	8007332 <_printf_float+0x1c2>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	6121      	str	r1, [r4, #16]
 800732a:	07d8      	lsls	r0, r3, #31
 800732c:	d5ea      	bpl.n	8007304 <_printf_float+0x194>
 800732e:	1c4b      	adds	r3, r1, #1
 8007330:	e7e7      	b.n	8007302 <_printf_float+0x192>
 8007332:	2900      	cmp	r1, #0
 8007334:	bfd4      	ite	le
 8007336:	f1c1 0202 	rsble	r2, r1, #2
 800733a:	2201      	movgt	r2, #1
 800733c:	4413      	add	r3, r2
 800733e:	e7e0      	b.n	8007302 <_printf_float+0x192>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	055a      	lsls	r2, r3, #21
 8007344:	d407      	bmi.n	8007356 <_printf_float+0x1e6>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	4642      	mov	r2, r8
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	d12b      	bne.n	80073ac <_printf_float+0x23c>
 8007354:	e767      	b.n	8007226 <_printf_float+0xb6>
 8007356:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800735a:	f240 80dd 	bls.w	8007518 <_printf_float+0x3a8>
 800735e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	f7f9 fbdf 	bl	8000b28 <__aeabi_dcmpeq>
 800736a:	2800      	cmp	r0, #0
 800736c:	d033      	beq.n	80073d6 <_printf_float+0x266>
 800736e:	4a37      	ldr	r2, [pc, #220]	@ (800744c <_printf_float+0x2dc>)
 8007370:	2301      	movs	r3, #1
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	f43f af54 	beq.w	8007226 <_printf_float+0xb6>
 800737e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007382:	4543      	cmp	r3, r8
 8007384:	db02      	blt.n	800738c <_printf_float+0x21c>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	07d8      	lsls	r0, r3, #31
 800738a:	d50f      	bpl.n	80073ac <_printf_float+0x23c>
 800738c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af45 	beq.w	8007226 <_printf_float+0xb6>
 800739c:	f04f 0900 	mov.w	r9, #0
 80073a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80073a4:	f104 0a1a 	add.w	sl, r4, #26
 80073a8:	45c8      	cmp	r8, r9
 80073aa:	dc09      	bgt.n	80073c0 <_printf_float+0x250>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	079b      	lsls	r3, r3, #30
 80073b0:	f100 8103 	bmi.w	80075ba <_printf_float+0x44a>
 80073b4:	68e0      	ldr	r0, [r4, #12]
 80073b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073b8:	4298      	cmp	r0, r3
 80073ba:	bfb8      	it	lt
 80073bc:	4618      	movlt	r0, r3
 80073be:	e734      	b.n	800722a <_printf_float+0xba>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4652      	mov	r2, sl
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f af2b 	beq.w	8007226 <_printf_float+0xb6>
 80073d0:	f109 0901 	add.w	r9, r9, #1
 80073d4:	e7e8      	b.n	80073a8 <_printf_float+0x238>
 80073d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	dc39      	bgt.n	8007450 <_printf_float+0x2e0>
 80073dc:	4a1b      	ldr	r2, [pc, #108]	@ (800744c <_printf_float+0x2dc>)
 80073de:	2301      	movs	r3, #1
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b8      	blx	r7
 80073e6:	3001      	adds	r0, #1
 80073e8:	f43f af1d 	beq.w	8007226 <_printf_float+0xb6>
 80073ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073f0:	ea59 0303 	orrs.w	r3, r9, r3
 80073f4:	d102      	bne.n	80073fc <_printf_float+0x28c>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	07d9      	lsls	r1, r3, #31
 80073fa:	d5d7      	bpl.n	80073ac <_printf_float+0x23c>
 80073fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af0d 	beq.w	8007226 <_printf_float+0xb6>
 800740c:	f04f 0a00 	mov.w	sl, #0
 8007410:	f104 0b1a 	add.w	fp, r4, #26
 8007414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007416:	425b      	negs	r3, r3
 8007418:	4553      	cmp	r3, sl
 800741a:	dc01      	bgt.n	8007420 <_printf_float+0x2b0>
 800741c:	464b      	mov	r3, r9
 800741e:	e793      	b.n	8007348 <_printf_float+0x1d8>
 8007420:	2301      	movs	r3, #1
 8007422:	465a      	mov	r2, fp
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f aefb 	beq.w	8007226 <_printf_float+0xb6>
 8007430:	f10a 0a01 	add.w	sl, sl, #1
 8007434:	e7ee      	b.n	8007414 <_printf_float+0x2a4>
 8007436:	bf00      	nop
 8007438:	7fefffff 	.word	0x7fefffff
 800743c:	0800b542 	.word	0x0800b542
 8007440:	0800b53e 	.word	0x0800b53e
 8007444:	0800b54a 	.word	0x0800b54a
 8007448:	0800b546 	.word	0x0800b546
 800744c:	0800b6e5 	.word	0x0800b6e5
 8007450:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007452:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007456:	4553      	cmp	r3, sl
 8007458:	bfa8      	it	ge
 800745a:	4653      	movge	r3, sl
 800745c:	2b00      	cmp	r3, #0
 800745e:	4699      	mov	r9, r3
 8007460:	dc36      	bgt.n	80074d0 <_printf_float+0x360>
 8007462:	f04f 0b00 	mov.w	fp, #0
 8007466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746a:	f104 021a 	add.w	r2, r4, #26
 800746e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007470:	9306      	str	r3, [sp, #24]
 8007472:	eba3 0309 	sub.w	r3, r3, r9
 8007476:	455b      	cmp	r3, fp
 8007478:	dc31      	bgt.n	80074de <_printf_float+0x36e>
 800747a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747c:	459a      	cmp	sl, r3
 800747e:	dc3a      	bgt.n	80074f6 <_printf_float+0x386>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	07da      	lsls	r2, r3, #31
 8007484:	d437      	bmi.n	80074f6 <_printf_float+0x386>
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	ebaa 0903 	sub.w	r9, sl, r3
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	ebaa 0303 	sub.w	r3, sl, r3
 8007492:	4599      	cmp	r9, r3
 8007494:	bfa8      	it	ge
 8007496:	4699      	movge	r9, r3
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	dc33      	bgt.n	8007506 <_printf_float+0x396>
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a6:	f104 0b1a 	add.w	fp, r4, #26
 80074aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ac:	ebaa 0303 	sub.w	r3, sl, r3
 80074b0:	eba3 0309 	sub.w	r3, r3, r9
 80074b4:	4543      	cmp	r3, r8
 80074b6:	f77f af79 	ble.w	80073ac <_printf_float+0x23c>
 80074ba:	2301      	movs	r3, #1
 80074bc:	465a      	mov	r2, fp
 80074be:	4631      	mov	r1, r6
 80074c0:	4628      	mov	r0, r5
 80074c2:	47b8      	blx	r7
 80074c4:	3001      	adds	r0, #1
 80074c6:	f43f aeae 	beq.w	8007226 <_printf_float+0xb6>
 80074ca:	f108 0801 	add.w	r8, r8, #1
 80074ce:	e7ec      	b.n	80074aa <_printf_float+0x33a>
 80074d0:	4642      	mov	r2, r8
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d1c2      	bne.n	8007462 <_printf_float+0x2f2>
 80074dc:	e6a3      	b.n	8007226 <_printf_float+0xb6>
 80074de:	2301      	movs	r3, #1
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	9206      	str	r2, [sp, #24]
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae9c 	beq.w	8007226 <_printf_float+0xb6>
 80074ee:	9a06      	ldr	r2, [sp, #24]
 80074f0:	f10b 0b01 	add.w	fp, fp, #1
 80074f4:	e7bb      	b.n	800746e <_printf_float+0x2fe>
 80074f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	d1c0      	bne.n	8007486 <_printf_float+0x316>
 8007504:	e68f      	b.n	8007226 <_printf_float+0xb6>
 8007506:	9a06      	ldr	r2, [sp, #24]
 8007508:	464b      	mov	r3, r9
 800750a:	4442      	add	r2, r8
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	d1c3      	bne.n	800749e <_printf_float+0x32e>
 8007516:	e686      	b.n	8007226 <_printf_float+0xb6>
 8007518:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800751c:	f1ba 0f01 	cmp.w	sl, #1
 8007520:	dc01      	bgt.n	8007526 <_printf_float+0x3b6>
 8007522:	07db      	lsls	r3, r3, #31
 8007524:	d536      	bpl.n	8007594 <_printf_float+0x424>
 8007526:	2301      	movs	r3, #1
 8007528:	4642      	mov	r2, r8
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	f43f ae78 	beq.w	8007226 <_printf_float+0xb6>
 8007536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae70 	beq.w	8007226 <_printf_float+0xb6>
 8007546:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800754a:	2200      	movs	r2, #0
 800754c:	2300      	movs	r3, #0
 800754e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007552:	f7f9 fae9 	bl	8000b28 <__aeabi_dcmpeq>
 8007556:	b9c0      	cbnz	r0, 800758a <_printf_float+0x41a>
 8007558:	4653      	mov	r3, sl
 800755a:	f108 0201 	add.w	r2, r8, #1
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	d10c      	bne.n	8007582 <_printf_float+0x412>
 8007568:	e65d      	b.n	8007226 <_printf_float+0xb6>
 800756a:	2301      	movs	r3, #1
 800756c:	465a      	mov	r2, fp
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae56 	beq.w	8007226 <_printf_float+0xb6>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	45d0      	cmp	r8, sl
 8007580:	dbf3      	blt.n	800756a <_printf_float+0x3fa>
 8007582:	464b      	mov	r3, r9
 8007584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007588:	e6df      	b.n	800734a <_printf_float+0x1da>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 0b1a 	add.w	fp, r4, #26
 8007592:	e7f4      	b.n	800757e <_printf_float+0x40e>
 8007594:	2301      	movs	r3, #1
 8007596:	4642      	mov	r2, r8
 8007598:	e7e1      	b.n	800755e <_printf_float+0x3ee>
 800759a:	2301      	movs	r3, #1
 800759c:	464a      	mov	r2, r9
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	f43f ae3e 	beq.w	8007226 <_printf_float+0xb6>
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075b2:	1a5b      	subs	r3, r3, r1
 80075b4:	4543      	cmp	r3, r8
 80075b6:	dcf0      	bgt.n	800759a <_printf_float+0x42a>
 80075b8:	e6fc      	b.n	80073b4 <_printf_float+0x244>
 80075ba:	f04f 0800 	mov.w	r8, #0
 80075be:	f104 0919 	add.w	r9, r4, #25
 80075c2:	e7f4      	b.n	80075ae <_printf_float+0x43e>

080075c4 <_printf_common>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	4616      	mov	r6, r2
 80075ca:	4698      	mov	r8, r3
 80075cc:	688a      	ldr	r2, [r1, #8]
 80075ce:	690b      	ldr	r3, [r1, #16]
 80075d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	bfb8      	it	lt
 80075d8:	4613      	movlt	r3, r2
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075e0:	4607      	mov	r7, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	b10a      	cbz	r2, 80075ea <_printf_common+0x26>
 80075e6:	3301      	adds	r3, #1
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	0699      	lsls	r1, r3, #26
 80075ee:	bf42      	ittt	mi
 80075f0:	6833      	ldrmi	r3, [r6, #0]
 80075f2:	3302      	addmi	r3, #2
 80075f4:	6033      	strmi	r3, [r6, #0]
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	f015 0506 	ands.w	r5, r5, #6
 80075fc:	d106      	bne.n	800760c <_printf_common+0x48>
 80075fe:	f104 0a19 	add.w	sl, r4, #25
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	6832      	ldr	r2, [r6, #0]
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc26      	bgt.n	800765a <_printf_common+0x96>
 800760c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	3b00      	subs	r3, #0
 8007614:	bf18      	it	ne
 8007616:	2301      	movne	r3, #1
 8007618:	0692      	lsls	r2, r2, #26
 800761a:	d42b      	bmi.n	8007674 <_printf_common+0xb0>
 800761c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007620:	4641      	mov	r1, r8
 8007622:	4638      	mov	r0, r7
 8007624:	47c8      	blx	r9
 8007626:	3001      	adds	r0, #1
 8007628:	d01e      	beq.n	8007668 <_printf_common+0xa4>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	f003 0306 	and.w	r3, r3, #6
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf02      	ittt	eq
 8007636:	68e5      	ldreq	r5, [r4, #12]
 8007638:	6833      	ldreq	r3, [r6, #0]
 800763a:	1aed      	subeq	r5, r5, r3
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	bf0c      	ite	eq
 8007640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007644:	2500      	movne	r5, #0
 8007646:	4293      	cmp	r3, r2
 8007648:	bfc4      	itt	gt
 800764a:	1a9b      	subgt	r3, r3, r2
 800764c:	18ed      	addgt	r5, r5, r3
 800764e:	2600      	movs	r6, #0
 8007650:	341a      	adds	r4, #26
 8007652:	42b5      	cmp	r5, r6
 8007654:	d11a      	bne.n	800768c <_printf_common+0xc8>
 8007656:	2000      	movs	r0, #0
 8007658:	e008      	b.n	800766c <_printf_common+0xa8>
 800765a:	2301      	movs	r3, #1
 800765c:	4652      	mov	r2, sl
 800765e:	4641      	mov	r1, r8
 8007660:	4638      	mov	r0, r7
 8007662:	47c8      	blx	r9
 8007664:	3001      	adds	r0, #1
 8007666:	d103      	bne.n	8007670 <_printf_common+0xac>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	3501      	adds	r5, #1
 8007672:	e7c6      	b.n	8007602 <_printf_common+0x3e>
 8007674:	18e1      	adds	r1, r4, r3
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	2030      	movs	r0, #48	@ 0x30
 800767a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800767e:	4422      	add	r2, r4
 8007680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007688:	3302      	adds	r3, #2
 800768a:	e7c7      	b.n	800761c <_printf_common+0x58>
 800768c:	2301      	movs	r3, #1
 800768e:	4622      	mov	r2, r4
 8007690:	4641      	mov	r1, r8
 8007692:	4638      	mov	r0, r7
 8007694:	47c8      	blx	r9
 8007696:	3001      	adds	r0, #1
 8007698:	d0e6      	beq.n	8007668 <_printf_common+0xa4>
 800769a:	3601      	adds	r6, #1
 800769c:	e7d9      	b.n	8007652 <_printf_common+0x8e>
	...

080076a0 <_printf_i>:
 80076a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	7e0f      	ldrb	r7, [r1, #24]
 80076a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076a8:	2f78      	cmp	r7, #120	@ 0x78
 80076aa:	4691      	mov	r9, r2
 80076ac:	4680      	mov	r8, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	469a      	mov	sl, r3
 80076b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076b6:	d807      	bhi.n	80076c8 <_printf_i+0x28>
 80076b8:	2f62      	cmp	r7, #98	@ 0x62
 80076ba:	d80a      	bhi.n	80076d2 <_printf_i+0x32>
 80076bc:	2f00      	cmp	r7, #0
 80076be:	f000 80d1 	beq.w	8007864 <_printf_i+0x1c4>
 80076c2:	2f58      	cmp	r7, #88	@ 0x58
 80076c4:	f000 80b8 	beq.w	8007838 <_printf_i+0x198>
 80076c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d0:	e03a      	b.n	8007748 <_printf_i+0xa8>
 80076d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076d6:	2b15      	cmp	r3, #21
 80076d8:	d8f6      	bhi.n	80076c8 <_printf_i+0x28>
 80076da:	a101      	add	r1, pc, #4	@ (adr r1, 80076e0 <_printf_i+0x40>)
 80076dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e0:	08007739 	.word	0x08007739
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	080076c9 	.word	0x080076c9
 80076ec:	080076c9 	.word	0x080076c9
 80076f0:	080076c9 	.word	0x080076c9
 80076f4:	080076c9 	.word	0x080076c9
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	080076c9 	.word	0x080076c9
 8007700:	080076c9 	.word	0x080076c9
 8007704:	080076c9 	.word	0x080076c9
 8007708:	080076c9 	.word	0x080076c9
 800770c:	0800784b 	.word	0x0800784b
 8007710:	08007777 	.word	0x08007777
 8007714:	08007805 	.word	0x08007805
 8007718:	080076c9 	.word	0x080076c9
 800771c:	080076c9 	.word	0x080076c9
 8007720:	0800786d 	.word	0x0800786d
 8007724:	080076c9 	.word	0x080076c9
 8007728:	08007777 	.word	0x08007777
 800772c:	080076c9 	.word	0x080076c9
 8007730:	080076c9 	.word	0x080076c9
 8007734:	0800780d 	.word	0x0800780d
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6032      	str	r2, [r6, #0]
 8007740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007748:	2301      	movs	r3, #1
 800774a:	e09c      	b.n	8007886 <_printf_i+0x1e6>
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	1d19      	adds	r1, r3, #4
 8007752:	6031      	str	r1, [r6, #0]
 8007754:	0606      	lsls	r6, r0, #24
 8007756:	d501      	bpl.n	800775c <_printf_i+0xbc>
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	e003      	b.n	8007764 <_printf_i+0xc4>
 800775c:	0645      	lsls	r5, r0, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0xb8>
 8007760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007764:	2d00      	cmp	r5, #0
 8007766:	da03      	bge.n	8007770 <_printf_i+0xd0>
 8007768:	232d      	movs	r3, #45	@ 0x2d
 800776a:	426d      	negs	r5, r5
 800776c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007770:	4858      	ldr	r0, [pc, #352]	@ (80078d4 <_printf_i+0x234>)
 8007772:	230a      	movs	r3, #10
 8007774:	e011      	b.n	800779a <_printf_i+0xfa>
 8007776:	6821      	ldr	r1, [r4, #0]
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	0608      	lsls	r0, r1, #24
 800777c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007780:	d402      	bmi.n	8007788 <_printf_i+0xe8>
 8007782:	0649      	lsls	r1, r1, #25
 8007784:	bf48      	it	mi
 8007786:	b2ad      	uxthmi	r5, r5
 8007788:	2f6f      	cmp	r7, #111	@ 0x6f
 800778a:	4852      	ldr	r0, [pc, #328]	@ (80078d4 <_printf_i+0x234>)
 800778c:	6033      	str	r3, [r6, #0]
 800778e:	bf14      	ite	ne
 8007790:	230a      	movne	r3, #10
 8007792:	2308      	moveq	r3, #8
 8007794:	2100      	movs	r1, #0
 8007796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800779a:	6866      	ldr	r6, [r4, #4]
 800779c:	60a6      	str	r6, [r4, #8]
 800779e:	2e00      	cmp	r6, #0
 80077a0:	db05      	blt.n	80077ae <_printf_i+0x10e>
 80077a2:	6821      	ldr	r1, [r4, #0]
 80077a4:	432e      	orrs	r6, r5
 80077a6:	f021 0104 	bic.w	r1, r1, #4
 80077aa:	6021      	str	r1, [r4, #0]
 80077ac:	d04b      	beq.n	8007846 <_printf_i+0x1a6>
 80077ae:	4616      	mov	r6, r2
 80077b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80077b4:	fb03 5711 	mls	r7, r3, r1, r5
 80077b8:	5dc7      	ldrb	r7, [r0, r7]
 80077ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077be:	462f      	mov	r7, r5
 80077c0:	42bb      	cmp	r3, r7
 80077c2:	460d      	mov	r5, r1
 80077c4:	d9f4      	bls.n	80077b0 <_printf_i+0x110>
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d10b      	bne.n	80077e2 <_printf_i+0x142>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	07df      	lsls	r7, r3, #31
 80077ce:	d508      	bpl.n	80077e2 <_printf_i+0x142>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	6861      	ldr	r1, [r4, #4]
 80077d4:	4299      	cmp	r1, r3
 80077d6:	bfde      	ittt	le
 80077d8:	2330      	movle	r3, #48	@ 0x30
 80077da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077e2:	1b92      	subs	r2, r2, r6
 80077e4:	6122      	str	r2, [r4, #16]
 80077e6:	f8cd a000 	str.w	sl, [sp]
 80077ea:	464b      	mov	r3, r9
 80077ec:	aa03      	add	r2, sp, #12
 80077ee:	4621      	mov	r1, r4
 80077f0:	4640      	mov	r0, r8
 80077f2:	f7ff fee7 	bl	80075c4 <_printf_common>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d14a      	bne.n	8007890 <_printf_i+0x1f0>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	b004      	add	sp, #16
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	f043 0320 	orr.w	r3, r3, #32
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	4832      	ldr	r0, [pc, #200]	@ (80078d8 <_printf_i+0x238>)
 800780e:	2778      	movs	r7, #120	@ 0x78
 8007810:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	6831      	ldr	r1, [r6, #0]
 8007818:	061f      	lsls	r7, r3, #24
 800781a:	f851 5b04 	ldr.w	r5, [r1], #4
 800781e:	d402      	bmi.n	8007826 <_printf_i+0x186>
 8007820:	065f      	lsls	r7, r3, #25
 8007822:	bf48      	it	mi
 8007824:	b2ad      	uxthmi	r5, r5
 8007826:	6031      	str	r1, [r6, #0]
 8007828:	07d9      	lsls	r1, r3, #31
 800782a:	bf44      	itt	mi
 800782c:	f043 0320 	orrmi.w	r3, r3, #32
 8007830:	6023      	strmi	r3, [r4, #0]
 8007832:	b11d      	cbz	r5, 800783c <_printf_i+0x19c>
 8007834:	2310      	movs	r3, #16
 8007836:	e7ad      	b.n	8007794 <_printf_i+0xf4>
 8007838:	4826      	ldr	r0, [pc, #152]	@ (80078d4 <_printf_i+0x234>)
 800783a:	e7e9      	b.n	8007810 <_printf_i+0x170>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f023 0320 	bic.w	r3, r3, #32
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	e7f6      	b.n	8007834 <_printf_i+0x194>
 8007846:	4616      	mov	r6, r2
 8007848:	e7bd      	b.n	80077c6 <_printf_i+0x126>
 800784a:	6833      	ldr	r3, [r6, #0]
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	6961      	ldr	r1, [r4, #20]
 8007850:	1d18      	adds	r0, r3, #4
 8007852:	6030      	str	r0, [r6, #0]
 8007854:	062e      	lsls	r6, r5, #24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	d501      	bpl.n	800785e <_printf_i+0x1be>
 800785a:	6019      	str	r1, [r3, #0]
 800785c:	e002      	b.n	8007864 <_printf_i+0x1c4>
 800785e:	0668      	lsls	r0, r5, #25
 8007860:	d5fb      	bpl.n	800785a <_printf_i+0x1ba>
 8007862:	8019      	strh	r1, [r3, #0]
 8007864:	2300      	movs	r3, #0
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	4616      	mov	r6, r2
 800786a:	e7bc      	b.n	80077e6 <_printf_i+0x146>
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	6032      	str	r2, [r6, #0]
 8007872:	681e      	ldr	r6, [r3, #0]
 8007874:	6862      	ldr	r2, [r4, #4]
 8007876:	2100      	movs	r1, #0
 8007878:	4630      	mov	r0, r6
 800787a:	f7f8 fcd9 	bl	8000230 <memchr>
 800787e:	b108      	cbz	r0, 8007884 <_printf_i+0x1e4>
 8007880:	1b80      	subs	r0, r0, r6
 8007882:	6060      	str	r0, [r4, #4]
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	2300      	movs	r3, #0
 800788a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800788e:	e7aa      	b.n	80077e6 <_printf_i+0x146>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	4632      	mov	r2, r6
 8007894:	4649      	mov	r1, r9
 8007896:	4640      	mov	r0, r8
 8007898:	47d0      	blx	sl
 800789a:	3001      	adds	r0, #1
 800789c:	d0ad      	beq.n	80077fa <_printf_i+0x15a>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	079b      	lsls	r3, r3, #30
 80078a2:	d413      	bmi.n	80078cc <_printf_i+0x22c>
 80078a4:	68e0      	ldr	r0, [r4, #12]
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	4298      	cmp	r0, r3
 80078aa:	bfb8      	it	lt
 80078ac:	4618      	movlt	r0, r3
 80078ae:	e7a6      	b.n	80077fe <_printf_i+0x15e>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4632      	mov	r2, r6
 80078b4:	4649      	mov	r1, r9
 80078b6:	4640      	mov	r0, r8
 80078b8:	47d0      	blx	sl
 80078ba:	3001      	adds	r0, #1
 80078bc:	d09d      	beq.n	80077fa <_printf_i+0x15a>
 80078be:	3501      	adds	r5, #1
 80078c0:	68e3      	ldr	r3, [r4, #12]
 80078c2:	9903      	ldr	r1, [sp, #12]
 80078c4:	1a5b      	subs	r3, r3, r1
 80078c6:	42ab      	cmp	r3, r5
 80078c8:	dcf2      	bgt.n	80078b0 <_printf_i+0x210>
 80078ca:	e7eb      	b.n	80078a4 <_printf_i+0x204>
 80078cc:	2500      	movs	r5, #0
 80078ce:	f104 0619 	add.w	r6, r4, #25
 80078d2:	e7f5      	b.n	80078c0 <_printf_i+0x220>
 80078d4:	0800b54e 	.word	0x0800b54e
 80078d8:	0800b55f 	.word	0x0800b55f

080078dc <std>:
 80078dc:	2300      	movs	r3, #0
 80078de:	b510      	push	{r4, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	e9c0 3300 	strd	r3, r3, [r0]
 80078e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ea:	6083      	str	r3, [r0, #8]
 80078ec:	8181      	strh	r1, [r0, #12]
 80078ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80078f0:	81c2      	strh	r2, [r0, #14]
 80078f2:	6183      	str	r3, [r0, #24]
 80078f4:	4619      	mov	r1, r3
 80078f6:	2208      	movs	r2, #8
 80078f8:	305c      	adds	r0, #92	@ 0x5c
 80078fa:	f000 fa91 	bl	8007e20 <memset>
 80078fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <std+0x58>)
 8007900:	6263      	str	r3, [r4, #36]	@ 0x24
 8007902:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <std+0x5c>)
 8007904:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007906:	4b0d      	ldr	r3, [pc, #52]	@ (800793c <std+0x60>)
 8007908:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800790a:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <std+0x64>)
 800790c:	6323      	str	r3, [r4, #48]	@ 0x30
 800790e:	4b0d      	ldr	r3, [pc, #52]	@ (8007944 <std+0x68>)
 8007910:	6224      	str	r4, [r4, #32]
 8007912:	429c      	cmp	r4, r3
 8007914:	d006      	beq.n	8007924 <std+0x48>
 8007916:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800791a:	4294      	cmp	r4, r2
 800791c:	d002      	beq.n	8007924 <std+0x48>
 800791e:	33d0      	adds	r3, #208	@ 0xd0
 8007920:	429c      	cmp	r4, r3
 8007922:	d105      	bne.n	8007930 <std+0x54>
 8007924:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	f000 bb40 	b.w	8007fb0 <__retarget_lock_init_recursive>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	bf00      	nop
 8007934:	08007c6d 	.word	0x08007c6d
 8007938:	08007c93 	.word	0x08007c93
 800793c:	08007ccb 	.word	0x08007ccb
 8007940:	08007cef 	.word	0x08007cef
 8007944:	20000b9c 	.word	0x20000b9c

08007948 <stdio_exit_handler>:
 8007948:	4a02      	ldr	r2, [pc, #8]	@ (8007954 <stdio_exit_handler+0xc>)
 800794a:	4903      	ldr	r1, [pc, #12]	@ (8007958 <stdio_exit_handler+0x10>)
 800794c:	4803      	ldr	r0, [pc, #12]	@ (800795c <stdio_exit_handler+0x14>)
 800794e:	f000 b87b 	b.w	8007a48 <_fwalk_sglue>
 8007952:	bf00      	nop
 8007954:	20000048 	.word	0x20000048
 8007958:	0800aa99 	.word	0x0800aa99
 800795c:	200001c4 	.word	0x200001c4

08007960 <cleanup_stdio>:
 8007960:	6841      	ldr	r1, [r0, #4]
 8007962:	4b0c      	ldr	r3, [pc, #48]	@ (8007994 <cleanup_stdio+0x34>)
 8007964:	4299      	cmp	r1, r3
 8007966:	b510      	push	{r4, lr}
 8007968:	4604      	mov	r4, r0
 800796a:	d001      	beq.n	8007970 <cleanup_stdio+0x10>
 800796c:	f003 f894 	bl	800aa98 <_fflush_r>
 8007970:	68a1      	ldr	r1, [r4, #8]
 8007972:	4b09      	ldr	r3, [pc, #36]	@ (8007998 <cleanup_stdio+0x38>)
 8007974:	4299      	cmp	r1, r3
 8007976:	d002      	beq.n	800797e <cleanup_stdio+0x1e>
 8007978:	4620      	mov	r0, r4
 800797a:	f003 f88d 	bl	800aa98 <_fflush_r>
 800797e:	68e1      	ldr	r1, [r4, #12]
 8007980:	4b06      	ldr	r3, [pc, #24]	@ (800799c <cleanup_stdio+0x3c>)
 8007982:	4299      	cmp	r1, r3
 8007984:	d004      	beq.n	8007990 <cleanup_stdio+0x30>
 8007986:	4620      	mov	r0, r4
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f003 b884 	b.w	800aa98 <_fflush_r>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	20000b9c 	.word	0x20000b9c
 8007998:	20000c04 	.word	0x20000c04
 800799c:	20000c6c 	.word	0x20000c6c

080079a0 <global_stdio_init.part.0>:
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4b0b      	ldr	r3, [pc, #44]	@ (80079d0 <global_stdio_init.part.0+0x30>)
 80079a4:	4c0b      	ldr	r4, [pc, #44]	@ (80079d4 <global_stdio_init.part.0+0x34>)
 80079a6:	4a0c      	ldr	r2, [pc, #48]	@ (80079d8 <global_stdio_init.part.0+0x38>)
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	4620      	mov	r0, r4
 80079ac:	2200      	movs	r2, #0
 80079ae:	2104      	movs	r1, #4
 80079b0:	f7ff ff94 	bl	80078dc <std>
 80079b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079b8:	2201      	movs	r2, #1
 80079ba:	2109      	movs	r1, #9
 80079bc:	f7ff ff8e 	bl	80078dc <std>
 80079c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079c4:	2202      	movs	r2, #2
 80079c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ca:	2112      	movs	r1, #18
 80079cc:	f7ff bf86 	b.w	80078dc <std>
 80079d0:	20000cd4 	.word	0x20000cd4
 80079d4:	20000b9c 	.word	0x20000b9c
 80079d8:	08007949 	.word	0x08007949

080079dc <__sfp_lock_acquire>:
 80079dc:	4801      	ldr	r0, [pc, #4]	@ (80079e4 <__sfp_lock_acquire+0x8>)
 80079de:	f000 bae8 	b.w	8007fb2 <__retarget_lock_acquire_recursive>
 80079e2:	bf00      	nop
 80079e4:	20000cdd 	.word	0x20000cdd

080079e8 <__sfp_lock_release>:
 80079e8:	4801      	ldr	r0, [pc, #4]	@ (80079f0 <__sfp_lock_release+0x8>)
 80079ea:	f000 bae3 	b.w	8007fb4 <__retarget_lock_release_recursive>
 80079ee:	bf00      	nop
 80079f0:	20000cdd 	.word	0x20000cdd

080079f4 <__sinit>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	f7ff fff0 	bl	80079dc <__sfp_lock_acquire>
 80079fc:	6a23      	ldr	r3, [r4, #32]
 80079fe:	b11b      	cbz	r3, 8007a08 <__sinit+0x14>
 8007a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a04:	f7ff bff0 	b.w	80079e8 <__sfp_lock_release>
 8007a08:	4b04      	ldr	r3, [pc, #16]	@ (8007a1c <__sinit+0x28>)
 8007a0a:	6223      	str	r3, [r4, #32]
 8007a0c:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <__sinit+0x2c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1f5      	bne.n	8007a00 <__sinit+0xc>
 8007a14:	f7ff ffc4 	bl	80079a0 <global_stdio_init.part.0>
 8007a18:	e7f2      	b.n	8007a00 <__sinit+0xc>
 8007a1a:	bf00      	nop
 8007a1c:	08007961 	.word	0x08007961
 8007a20:	20000cd4 	.word	0x20000cd4

08007a24 <fiprintf>:
 8007a24:	b40e      	push	{r1, r2, r3}
 8007a26:	b503      	push	{r0, r1, lr}
 8007a28:	4601      	mov	r1, r0
 8007a2a:	ab03      	add	r3, sp, #12
 8007a2c:	4805      	ldr	r0, [pc, #20]	@ (8007a44 <fiprintf+0x20>)
 8007a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a32:	6800      	ldr	r0, [r0, #0]
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	f002 fd45 	bl	800a4c4 <_vfiprintf_r>
 8007a3a:	b002      	add	sp, #8
 8007a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a40:	b003      	add	sp, #12
 8007a42:	4770      	bx	lr
 8007a44:	200001c0 	.word	0x200001c0

08007a48 <_fwalk_sglue>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	4688      	mov	r8, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	2600      	movs	r6, #0
 8007a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a58:	f1b9 0901 	subs.w	r9, r9, #1
 8007a5c:	d505      	bpl.n	8007a6a <_fwalk_sglue+0x22>
 8007a5e:	6824      	ldr	r4, [r4, #0]
 8007a60:	2c00      	cmp	r4, #0
 8007a62:	d1f7      	bne.n	8007a54 <_fwalk_sglue+0xc>
 8007a64:	4630      	mov	r0, r6
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	89ab      	ldrh	r3, [r5, #12]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d907      	bls.n	8007a80 <_fwalk_sglue+0x38>
 8007a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a74:	3301      	adds	r3, #1
 8007a76:	d003      	beq.n	8007a80 <_fwalk_sglue+0x38>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	47c0      	blx	r8
 8007a7e:	4306      	orrs	r6, r0
 8007a80:	3568      	adds	r5, #104	@ 0x68
 8007a82:	e7e9      	b.n	8007a58 <_fwalk_sglue+0x10>

08007a84 <iprintf>:
 8007a84:	b40f      	push	{r0, r1, r2, r3}
 8007a86:	b507      	push	{r0, r1, r2, lr}
 8007a88:	4906      	ldr	r1, [pc, #24]	@ (8007aa4 <iprintf+0x20>)
 8007a8a:	ab04      	add	r3, sp, #16
 8007a8c:	6808      	ldr	r0, [r1, #0]
 8007a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a92:	6881      	ldr	r1, [r0, #8]
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	f002 fd15 	bl	800a4c4 <_vfiprintf_r>
 8007a9a:	b003      	add	sp, #12
 8007a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa0:	b004      	add	sp, #16
 8007aa2:	4770      	bx	lr
 8007aa4:	200001c0 	.word	0x200001c0

08007aa8 <_puts_r>:
 8007aa8:	6a03      	ldr	r3, [r0, #32]
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	6884      	ldr	r4, [r0, #8]
 8007aae:	4605      	mov	r5, r0
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	b90b      	cbnz	r3, 8007ab8 <_puts_r+0x10>
 8007ab4:	f7ff ff9e 	bl	80079f4 <__sinit>
 8007ab8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d405      	bmi.n	8007aca <_puts_r+0x22>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0598      	lsls	r0, r3, #22
 8007ac2:	d402      	bmi.n	8007aca <_puts_r+0x22>
 8007ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ac6:	f000 fa74 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	0719      	lsls	r1, r3, #28
 8007ace:	d502      	bpl.n	8007ad6 <_puts_r+0x2e>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d135      	bne.n	8007b42 <_puts_r+0x9a>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 f94b 	bl	8007d74 <__swsetup_r>
 8007ade:	b380      	cbz	r0, 8007b42 <_puts_r+0x9a>
 8007ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ae6:	07da      	lsls	r2, r3, #31
 8007ae8:	d405      	bmi.n	8007af6 <_puts_r+0x4e>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	059b      	lsls	r3, r3, #22
 8007aee:	d402      	bmi.n	8007af6 <_puts_r+0x4e>
 8007af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007af2:	f000 fa5f 	bl	8007fb4 <__retarget_lock_release_recursive>
 8007af6:	4628      	mov	r0, r5
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da04      	bge.n	8007b08 <_puts_r+0x60>
 8007afe:	69a2      	ldr	r2, [r4, #24]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	dc17      	bgt.n	8007b34 <_puts_r+0x8c>
 8007b04:	290a      	cmp	r1, #10
 8007b06:	d015      	beq.n	8007b34 <_puts_r+0x8c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	7019      	strb	r1, [r3, #0]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b16:	3b01      	subs	r3, #1
 8007b18:	60a3      	str	r3, [r4, #8]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d1ed      	bne.n	8007afa <_puts_r+0x52>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da11      	bge.n	8007b46 <_puts_r+0x9e>
 8007b22:	4622      	mov	r2, r4
 8007b24:	210a      	movs	r1, #10
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f8e5 	bl	8007cf6 <__swbuf_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d0d7      	beq.n	8007ae0 <_puts_r+0x38>
 8007b30:	250a      	movs	r5, #10
 8007b32:	e7d7      	b.n	8007ae4 <_puts_r+0x3c>
 8007b34:	4622      	mov	r2, r4
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 f8dd 	bl	8007cf6 <__swbuf_r>
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1e7      	bne.n	8007b10 <_puts_r+0x68>
 8007b40:	e7ce      	b.n	8007ae0 <_puts_r+0x38>
 8007b42:	3e01      	subs	r6, #1
 8007b44:	e7e4      	b.n	8007b10 <_puts_r+0x68>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	e7ee      	b.n	8007b30 <_puts_r+0x88>
	...

08007b54 <puts>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	@ (8007b60 <puts+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f7ff bfa5 	b.w	8007aa8 <_puts_r>
 8007b5e:	bf00      	nop
 8007b60:	200001c0 	.word	0x200001c0

08007b64 <sniprintf>:
 8007b64:	b40c      	push	{r2, r3}
 8007b66:	b530      	push	{r4, r5, lr}
 8007b68:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <sniprintf+0x68>)
 8007b6a:	1e0c      	subs	r4, r1, #0
 8007b6c:	681d      	ldr	r5, [r3, #0]
 8007b6e:	b09d      	sub	sp, #116	@ 0x74
 8007b70:	da08      	bge.n	8007b84 <sniprintf+0x20>
 8007b72:	238b      	movs	r3, #139	@ 0x8b
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	b01d      	add	sp, #116	@ 0x74
 8007b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b80:	b002      	add	sp, #8
 8007b82:	4770      	bx	lr
 8007b84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007b92:	bf14      	ite	ne
 8007b94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b98:	4623      	moveq	r3, r4
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ba2:	9002      	str	r0, [sp, #8]
 8007ba4:	9006      	str	r0, [sp, #24]
 8007ba6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007baa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007bac:	ab21      	add	r3, sp, #132	@ 0x84
 8007bae:	a902      	add	r1, sp, #8
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f002 f990 	bl	8009ed8 <_svfiprintf_r>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	bfbc      	itt	lt
 8007bbc:	238b      	movlt	r3, #139	@ 0x8b
 8007bbe:	602b      	strlt	r3, [r5, #0]
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	d0da      	beq.n	8007b7a <sniprintf+0x16>
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e7d6      	b.n	8007b7a <sniprintf+0x16>
 8007bcc:	200001c0 	.word	0x200001c0

08007bd0 <siprintf>:
 8007bd0:	b40e      	push	{r1, r2, r3}
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	b09d      	sub	sp, #116	@ 0x74
 8007bd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007bd8:	9002      	str	r0, [sp, #8]
 8007bda:	9006      	str	r0, [sp, #24]
 8007bdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007be0:	480a      	ldr	r0, [pc, #40]	@ (8007c0c <siprintf+0x3c>)
 8007be2:	9107      	str	r1, [sp, #28]
 8007be4:	9104      	str	r1, [sp, #16]
 8007be6:	490a      	ldr	r1, [pc, #40]	@ (8007c10 <siprintf+0x40>)
 8007be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bec:	9105      	str	r1, [sp, #20]
 8007bee:	2400      	movs	r4, #0
 8007bf0:	a902      	add	r1, sp, #8
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bf8:	f002 f96e 	bl	8009ed8 <_svfiprintf_r>
 8007bfc:	9b02      	ldr	r3, [sp, #8]
 8007bfe:	701c      	strb	r4, [r3, #0]
 8007c00:	b01d      	add	sp, #116	@ 0x74
 8007c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c06:	b003      	add	sp, #12
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	200001c0 	.word	0x200001c0
 8007c10:	ffff0208 	.word	0xffff0208

08007c14 <siscanf>:
 8007c14:	b40e      	push	{r1, r2, r3}
 8007c16:	b570      	push	{r4, r5, r6, lr}
 8007c18:	b09d      	sub	sp, #116	@ 0x74
 8007c1a:	ac21      	add	r4, sp, #132	@ 0x84
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007c22:	f854 6b04 	ldr.w	r6, [r4], #4
 8007c26:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007c2a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007c2c:	9002      	str	r0, [sp, #8]
 8007c2e:	9006      	str	r0, [sp, #24]
 8007c30:	f7f8 fb4e 	bl	80002d0 <strlen>
 8007c34:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <siscanf+0x50>)
 8007c36:	9003      	str	r0, [sp, #12]
 8007c38:	9007      	str	r0, [sp, #28]
 8007c3a:	480b      	ldr	r0, [pc, #44]	@ (8007c68 <siscanf+0x54>)
 8007c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c46:	4632      	mov	r2, r6
 8007c48:	4623      	mov	r3, r4
 8007c4a:	a902      	add	r1, sp, #8
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007c50:	9514      	str	r5, [sp, #80]	@ 0x50
 8007c52:	9401      	str	r4, [sp, #4]
 8007c54:	f002 fa96 	bl	800a184 <__ssvfiscanf_r>
 8007c58:	b01d      	add	sp, #116	@ 0x74
 8007c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c5e:	b003      	add	sp, #12
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	200001c0 	.word	0x200001c0

08007c6c <__sread>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	f000 f93e 	bl	8007ef4 <_read_r>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	bfab      	itete	ge
 8007c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c80:	181b      	addge	r3, r3, r0
 8007c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c86:	bfac      	ite	ge
 8007c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c8a:	81a3      	strhlt	r3, [r4, #12]
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <__seofread>:
 8007c8e:	2000      	movs	r0, #0
 8007c90:	4770      	bx	lr

08007c92 <__swrite>:
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	461f      	mov	r7, r3
 8007c98:	898b      	ldrh	r3, [r1, #12]
 8007c9a:	05db      	lsls	r3, r3, #23
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	d505      	bpl.n	8007cb0 <__swrite+0x1e>
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	f000 f910 	bl	8007ed0 <_lseek_r>
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	f000 b937 	b.w	8007f38 <_write_r>

08007cca <__sseek>:
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 f8fd 	bl	8007ed0 <_lseek_r>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	bf15      	itete	ne
 8007cdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ce2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ce6:	81a3      	strheq	r3, [r4, #12]
 8007ce8:	bf18      	it	ne
 8007cea:	81a3      	strhne	r3, [r4, #12]
 8007cec:	bd10      	pop	{r4, pc}

08007cee <__sclose>:
 8007cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf2:	f000 b8dd 	b.w	8007eb0 <_close_r>

08007cf6 <__swbuf_r>:
 8007cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b118      	cbz	r0, 8007d08 <__swbuf_r+0x12>
 8007d00:	6a03      	ldr	r3, [r0, #32]
 8007d02:	b90b      	cbnz	r3, 8007d08 <__swbuf_r+0x12>
 8007d04:	f7ff fe76 	bl	80079f4 <__sinit>
 8007d08:	69a3      	ldr	r3, [r4, #24]
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	071a      	lsls	r2, r3, #28
 8007d10:	d501      	bpl.n	8007d16 <__swbuf_r+0x20>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	b943      	cbnz	r3, 8007d28 <__swbuf_r+0x32>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f82b 	bl	8007d74 <__swsetup_r>
 8007d1e:	b118      	cbz	r0, 8007d28 <__swbuf_r+0x32>
 8007d20:	f04f 37ff 	mov.w	r7, #4294967295
 8007d24:	4638      	mov	r0, r7
 8007d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	6922      	ldr	r2, [r4, #16]
 8007d2c:	1a98      	subs	r0, r3, r2
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	b2f6      	uxtb	r6, r6
 8007d32:	4283      	cmp	r3, r0
 8007d34:	4637      	mov	r7, r6
 8007d36:	dc05      	bgt.n	8007d44 <__swbuf_r+0x4e>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f002 feac 	bl	800aa98 <_fflush_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d1ed      	bne.n	8007d20 <__swbuf_r+0x2a>
 8007d44:	68a3      	ldr	r3, [r4, #8]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	60a3      	str	r3, [r4, #8]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	6022      	str	r2, [r4, #0]
 8007d50:	701e      	strb	r6, [r3, #0]
 8007d52:	6962      	ldr	r2, [r4, #20]
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d004      	beq.n	8007d64 <__swbuf_r+0x6e>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	07db      	lsls	r3, r3, #31
 8007d5e:	d5e1      	bpl.n	8007d24 <__swbuf_r+0x2e>
 8007d60:	2e0a      	cmp	r6, #10
 8007d62:	d1df      	bne.n	8007d24 <__swbuf_r+0x2e>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f002 fe96 	bl	800aa98 <_fflush_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d0d9      	beq.n	8007d24 <__swbuf_r+0x2e>
 8007d70:	e7d6      	b.n	8007d20 <__swbuf_r+0x2a>
	...

08007d74 <__swsetup_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <__swsetup_r+0xa8>)
 8007d78:	4605      	mov	r5, r0
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b118      	cbz	r0, 8007d88 <__swsetup_r+0x14>
 8007d80:	6a03      	ldr	r3, [r0, #32]
 8007d82:	b90b      	cbnz	r3, 8007d88 <__swsetup_r+0x14>
 8007d84:	f7ff fe36 	bl	80079f4 <__sinit>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	0719      	lsls	r1, r3, #28
 8007d8e:	d422      	bmi.n	8007dd6 <__swsetup_r+0x62>
 8007d90:	06da      	lsls	r2, r3, #27
 8007d92:	d407      	bmi.n	8007da4 <__swsetup_r+0x30>
 8007d94:	2209      	movs	r2, #9
 8007d96:	602a      	str	r2, [r5, #0]
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	e033      	b.n	8007e0c <__swsetup_r+0x98>
 8007da4:	0758      	lsls	r0, r3, #29
 8007da6:	d512      	bpl.n	8007dce <__swsetup_r+0x5a>
 8007da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007daa:	b141      	cbz	r1, 8007dbe <__swsetup_r+0x4a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__swsetup_r+0x46>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 ff6f 	bl	8008c98 <_free_r>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	b94b      	cbnz	r3, 8007dee <__swsetup_r+0x7a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de4:	d003      	beq.n	8007dee <__swsetup_r+0x7a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f002 fea3 	bl	800ab34 <__smakebuf_r>
 8007dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df2:	f013 0201 	ands.w	r2, r3, #1
 8007df6:	d00a      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	60a2      	str	r2, [r4, #8]
 8007dfc:	6962      	ldr	r2, [r4, #20]
 8007dfe:	4252      	negs	r2, r2
 8007e00:	61a2      	str	r2, [r4, #24]
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	b942      	cbnz	r2, 8007e18 <__swsetup_r+0xa4>
 8007e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e0a:	d1c5      	bne.n	8007d98 <__swsetup_r+0x24>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	0799      	lsls	r1, r3, #30
 8007e10:	bf58      	it	pl
 8007e12:	6962      	ldrpl	r2, [r4, #20]
 8007e14:	60a2      	str	r2, [r4, #8]
 8007e16:	e7f4      	b.n	8007e02 <__swsetup_r+0x8e>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f7      	b.n	8007e0c <__swsetup_r+0x98>
 8007e1c:	200001c0 	.word	0x200001c0

08007e20 <memset>:
 8007e20:	4402      	add	r2, r0
 8007e22:	4603      	mov	r3, r0
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d100      	bne.n	8007e2a <memset+0xa>
 8007e28:	4770      	bx	lr
 8007e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2e:	e7f9      	b.n	8007e24 <memset+0x4>

08007e30 <strncmp>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	b16a      	cbz	r2, 8007e50 <strncmp+0x20>
 8007e34:	3901      	subs	r1, #1
 8007e36:	1884      	adds	r4, r0, r2
 8007e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d103      	bne.n	8007e4c <strncmp+0x1c>
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d001      	beq.n	8007e4c <strncmp+0x1c>
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	d1f5      	bne.n	8007e38 <strncmp+0x8>
 8007e4c:	1ad0      	subs	r0, r2, r3
 8007e4e:	bd10      	pop	{r4, pc}
 8007e50:	4610      	mov	r0, r2
 8007e52:	e7fc      	b.n	8007e4e <strncmp+0x1e>

08007e54 <strncpy>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	3901      	subs	r1, #1
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b132      	cbz	r2, 8007e6a <strncpy+0x16>
 8007e5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e60:	f803 4b01 	strb.w	r4, [r3], #1
 8007e64:	3a01      	subs	r2, #1
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d1f7      	bne.n	8007e5a <strncpy+0x6>
 8007e6a:	441a      	add	r2, r3
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d100      	bne.n	8007e74 <strncpy+0x20>
 8007e72:	bd10      	pop	{r4, pc}
 8007e74:	f803 1b01 	strb.w	r1, [r3], #1
 8007e78:	e7f9      	b.n	8007e6e <strncpy+0x1a>

08007e7a <strstr>:
 8007e7a:	780a      	ldrb	r2, [r1, #0]
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	b96a      	cbnz	r2, 8007e9c <strstr+0x22>
 8007e80:	bd70      	pop	{r4, r5, r6, pc}
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d109      	bne.n	8007e9a <strstr+0x20>
 8007e86:	460c      	mov	r4, r1
 8007e88:	4605      	mov	r5, r0
 8007e8a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f6      	beq.n	8007e80 <strstr+0x6>
 8007e92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e96:	429e      	cmp	r6, r3
 8007e98:	d0f7      	beq.n	8007e8a <strstr+0x10>
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	7803      	ldrb	r3, [r0, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1ef      	bne.n	8007e82 <strstr+0x8>
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	e7ec      	b.n	8007e80 <strstr+0x6>
	...

08007ea8 <_localeconv_r>:
 8007ea8:	4800      	ldr	r0, [pc, #0]	@ (8007eac <_localeconv_r+0x4>)
 8007eaa:	4770      	bx	lr
 8007eac:	20000144 	.word	0x20000144

08007eb0 <_close_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	@ (8007ecc <_close_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7fb f8ca 	bl	8003054 <_close>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_close_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_close_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	20000cd8 	.word	0x20000cd8

08007ed0 <_lseek_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	@ (8007ef0 <_lseek_r+0x20>)
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f7fb f8df 	bl	80030a2 <_lseek>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_lseek_r+0x1e>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_lseek_r+0x1e>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	20000cd8 	.word	0x20000cd8

08007ef4 <_read_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d07      	ldr	r5, [pc, #28]	@ (8007f14 <_read_r+0x20>)
 8007ef8:	4604      	mov	r4, r0
 8007efa:	4608      	mov	r0, r1
 8007efc:	4611      	mov	r1, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	602a      	str	r2, [r5, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f7fb f86d 	bl	8002fe2 <_read>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_read_r+0x1e>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_read_r+0x1e>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000cd8 	.word	0x20000cd8

08007f18 <_sbrk_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d06      	ldr	r5, [pc, #24]	@ (8007f34 <_sbrk_r+0x1c>)
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	f7fb f8ca 	bl	80030bc <_sbrk>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_sbrk_r+0x1a>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_sbrk_r+0x1a>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20000cd8 	.word	0x20000cd8

08007f38 <_write_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	@ (8007f58 <_write_r+0x20>)
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	4608      	mov	r0, r1
 8007f40:	4611      	mov	r1, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7fb f868 	bl	800301c <_write>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_write_r+0x1e>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_write_r+0x1e>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20000cd8 	.word	0x20000cd8

08007f5c <__errno>:
 8007f5c:	4b01      	ldr	r3, [pc, #4]	@ (8007f64 <__errno+0x8>)
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	200001c0 	.word	0x200001c0

08007f68 <__libc_init_array>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007fa0 <__libc_init_array+0x38>)
 8007f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007fa4 <__libc_init_array+0x3c>)
 8007f6e:	1b64      	subs	r4, r4, r5
 8007f70:	10a4      	asrs	r4, r4, #2
 8007f72:	2600      	movs	r6, #0
 8007f74:	42a6      	cmp	r6, r4
 8007f76:	d109      	bne.n	8007f8c <__libc_init_array+0x24>
 8007f78:	4d0b      	ldr	r5, [pc, #44]	@ (8007fa8 <__libc_init_array+0x40>)
 8007f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007fac <__libc_init_array+0x44>)
 8007f7c:	f002 ffc0 	bl	800af00 <_init>
 8007f80:	1b64      	subs	r4, r4, r5
 8007f82:	10a4      	asrs	r4, r4, #2
 8007f84:	2600      	movs	r6, #0
 8007f86:	42a6      	cmp	r6, r4
 8007f88:	d105      	bne.n	8007f96 <__libc_init_array+0x2e>
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f90:	4798      	blx	r3
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7ee      	b.n	8007f74 <__libc_init_array+0xc>
 8007f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9a:	4798      	blx	r3
 8007f9c:	3601      	adds	r6, #1
 8007f9e:	e7f2      	b.n	8007f86 <__libc_init_array+0x1e>
 8007fa0:	0800b980 	.word	0x0800b980
 8007fa4:	0800b980 	.word	0x0800b980
 8007fa8:	0800b980 	.word	0x0800b980
 8007fac:	0800b984 	.word	0x0800b984

08007fb0 <__retarget_lock_init_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_acquire_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <__retarget_lock_release_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <memcpy>:
 8007fb6:	440a      	add	r2, r1
 8007fb8:	4291      	cmp	r1, r2
 8007fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fbe:	d100      	bne.n	8007fc2 <memcpy+0xc>
 8007fc0:	4770      	bx	lr
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fcc:	4291      	cmp	r1, r2
 8007fce:	d1f9      	bne.n	8007fc4 <memcpy+0xe>
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	0000      	movs	r0, r0
 8007fd4:	0000      	movs	r0, r0
	...

08007fd8 <nan>:
 8007fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fe0 <nan+0x8>
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	7ff80000 	.word	0x7ff80000

08007fe8 <quorem>:
 8007fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	6903      	ldr	r3, [r0, #16]
 8007fee:	690c      	ldr	r4, [r1, #16]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	db7e      	blt.n	80080f4 <quorem+0x10c>
 8007ff6:	3c01      	subs	r4, #1
 8007ff8:	f101 0814 	add.w	r8, r1, #20
 8007ffc:	00a3      	lsls	r3, r4, #2
 8007ffe:	f100 0514 	add.w	r5, r0, #20
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800800e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008012:	3301      	adds	r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800801a:	fbb2 f6f3 	udiv	r6, r2, r3
 800801e:	d32e      	bcc.n	800807e <quorem+0x96>
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	46c4      	mov	ip, r8
 8008026:	46ae      	mov	lr, r5
 8008028:	46d3      	mov	fp, sl
 800802a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800802e:	b298      	uxth	r0, r3
 8008030:	fb06 a000 	mla	r0, r6, r0, sl
 8008034:	0c02      	lsrs	r2, r0, #16
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	fb06 2303 	mla	r3, r6, r3, r2
 800803c:	f8de 2000 	ldr.w	r2, [lr]
 8008040:	b280      	uxth	r0, r0
 8008042:	b292      	uxth	r2, r2
 8008044:	1a12      	subs	r2, r2, r0
 8008046:	445a      	add	r2, fp
 8008048:	f8de 0000 	ldr.w	r0, [lr]
 800804c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008050:	b29b      	uxth	r3, r3
 8008052:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008056:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800805a:	b292      	uxth	r2, r2
 800805c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008060:	45e1      	cmp	r9, ip
 8008062:	f84e 2b04 	str.w	r2, [lr], #4
 8008066:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800806a:	d2de      	bcs.n	800802a <quorem+0x42>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	58eb      	ldr	r3, [r5, r3]
 8008070:	b92b      	cbnz	r3, 800807e <quorem+0x96>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3b04      	subs	r3, #4
 8008076:	429d      	cmp	r5, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d32f      	bcc.n	80080dc <quorem+0xf4>
 800807c:	613c      	str	r4, [r7, #16]
 800807e:	4638      	mov	r0, r7
 8008080:	f001 fc5c 	bl	800993c <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	db25      	blt.n	80080d4 <quorem+0xec>
 8008088:	4629      	mov	r1, r5
 800808a:	2000      	movs	r0, #0
 800808c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008090:	f8d1 c000 	ldr.w	ip, [r1]
 8008094:	fa1f fe82 	uxth.w	lr, r2
 8008098:	fa1f f38c 	uxth.w	r3, ip
 800809c:	eba3 030e 	sub.w	r3, r3, lr
 80080a0:	4403      	add	r3, r0
 80080a2:	0c12      	lsrs	r2, r2, #16
 80080a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	45c1      	cmp	r9, r8
 80080b4:	f841 3b04 	str.w	r3, [r1], #4
 80080b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080bc:	d2e6      	bcs.n	800808c <quorem+0xa4>
 80080be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	b922      	cbnz	r2, 80080d2 <quorem+0xea>
 80080c8:	3b04      	subs	r3, #4
 80080ca:	429d      	cmp	r5, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	d30b      	bcc.n	80080e8 <quorem+0x100>
 80080d0:	613c      	str	r4, [r7, #16]
 80080d2:	3601      	adds	r6, #1
 80080d4:	4630      	mov	r0, r6
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	3b04      	subs	r3, #4
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d1cb      	bne.n	800807c <quorem+0x94>
 80080e4:	3c01      	subs	r4, #1
 80080e6:	e7c6      	b.n	8008076 <quorem+0x8e>
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	d1ef      	bne.n	80080d0 <quorem+0xe8>
 80080f0:	3c01      	subs	r4, #1
 80080f2:	e7ea      	b.n	80080ca <quorem+0xe2>
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7ee      	b.n	80080d6 <quorem+0xee>

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	69c7      	ldr	r7, [r0, #28]
 80080fe:	b097      	sub	sp, #92	@ 0x5c
 8008100:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008104:	ec55 4b10 	vmov	r4, r5, d0
 8008108:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	4681      	mov	r9, r0
 800810e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008110:	9311      	str	r3, [sp, #68]	@ 0x44
 8008112:	b97f      	cbnz	r7, 8008134 <_dtoa_r+0x3c>
 8008114:	2010      	movs	r0, #16
 8008116:	f7fe f887 	bl	8006228 <malloc>
 800811a:	4602      	mov	r2, r0
 800811c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008120:	b920      	cbnz	r0, 800812c <_dtoa_r+0x34>
 8008122:	4ba9      	ldr	r3, [pc, #676]	@ (80083c8 <_dtoa_r+0x2d0>)
 8008124:	21ef      	movs	r1, #239	@ 0xef
 8008126:	48a9      	ldr	r0, [pc, #676]	@ (80083cc <_dtoa_r+0x2d4>)
 8008128:	f002 fdf0 	bl	800ad0c <__assert_func>
 800812c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008130:	6007      	str	r7, [r0, #0]
 8008132:	60c7      	str	r7, [r0, #12]
 8008134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	b159      	cbz	r1, 8008154 <_dtoa_r+0x5c>
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	604a      	str	r2, [r1, #4]
 8008140:	2301      	movs	r3, #1
 8008142:	4093      	lsls	r3, r2
 8008144:	608b      	str	r3, [r1, #8]
 8008146:	4648      	mov	r0, r9
 8008148:	f001 f97c 	bl	8009444 <_Bfree>
 800814c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	1e2b      	subs	r3, r5, #0
 8008156:	bfb9      	ittee	lt
 8008158:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800815c:	9305      	strlt	r3, [sp, #20]
 800815e:	2300      	movge	r3, #0
 8008160:	6033      	strge	r3, [r6, #0]
 8008162:	9f05      	ldr	r7, [sp, #20]
 8008164:	4b9a      	ldr	r3, [pc, #616]	@ (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	6032      	strlt	r2, [r6, #0]
 800816c:	43bb      	bics	r3, r7
 800816e:	d112      	bne.n	8008196 <_dtoa_r+0x9e>
 8008170:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008172:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800817c:	4323      	orrs	r3, r4
 800817e:	f000 855a 	beq.w	8008c36 <_dtoa_r+0xb3e>
 8008182:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008184:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80083e4 <_dtoa_r+0x2ec>
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 855c 	beq.w	8008c46 <_dtoa_r+0xb4e>
 800818e:	f10a 0303 	add.w	r3, sl, #3
 8008192:	f000 bd56 	b.w	8008c42 <_dtoa_r+0xb4a>
 8008196:	ed9d 7b04 	vldr	d7, [sp, #16]
 800819a:	2200      	movs	r2, #0
 800819c:	ec51 0b17 	vmov	r0, r1, d7
 80081a0:	2300      	movs	r3, #0
 80081a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80081a6:	f7f8 fcbf 	bl	8000b28 <__aeabi_dcmpeq>
 80081aa:	4680      	mov	r8, r0
 80081ac:	b158      	cbz	r0, 80081c6 <_dtoa_r+0xce>
 80081ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081b0:	2301      	movs	r3, #1
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081b6:	b113      	cbz	r3, 80081be <_dtoa_r+0xc6>
 80081b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081ba:	4b86      	ldr	r3, [pc, #536]	@ (80083d4 <_dtoa_r+0x2dc>)
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80083e8 <_dtoa_r+0x2f0>
 80081c2:	f000 bd40 	b.w	8008c46 <_dtoa_r+0xb4e>
 80081c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80081ca:	aa14      	add	r2, sp, #80	@ 0x50
 80081cc:	a915      	add	r1, sp, #84	@ 0x54
 80081ce:	4648      	mov	r0, r9
 80081d0:	f001 fcd4 	bl	8009b7c <__d2b>
 80081d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80081d8:	9002      	str	r0, [sp, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d078      	beq.n	80082d0 <_dtoa_r+0x1d8>
 80081de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80081e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081f8:	4619      	mov	r1, r3
 80081fa:	2200      	movs	r2, #0
 80081fc:	4b76      	ldr	r3, [pc, #472]	@ (80083d8 <_dtoa_r+0x2e0>)
 80081fe:	f7f8 f873 	bl	80002e8 <__aeabi_dsub>
 8008202:	a36b      	add	r3, pc, #428	@ (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 fa26 	bl	8000658 <__aeabi_dmul>
 800820c:	a36a      	add	r3, pc, #424	@ (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f86b 	bl	80002ec <__adddf3>
 8008216:	4604      	mov	r4, r0
 8008218:	4630      	mov	r0, r6
 800821a:	460d      	mov	r5, r1
 800821c:	f7f8 f9b2 	bl	8000584 <__aeabi_i2d>
 8008220:	a367      	add	r3, pc, #412	@ (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 fa17 	bl	8000658 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4620      	mov	r0, r4
 8008230:	4629      	mov	r1, r5
 8008232:	f7f8 f85b 	bl	80002ec <__adddf3>
 8008236:	4604      	mov	r4, r0
 8008238:	460d      	mov	r5, r1
 800823a:	f7f8 fcbd 	bl	8000bb8 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4607      	mov	r7, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4620      	mov	r0, r4
 8008246:	4629      	mov	r1, r5
 8008248:	f7f8 fc78 	bl	8000b3c <__aeabi_dcmplt>
 800824c:	b140      	cbz	r0, 8008260 <_dtoa_r+0x168>
 800824e:	4638      	mov	r0, r7
 8008250:	f7f8 f998 	bl	8000584 <__aeabi_i2d>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f8 fc66 	bl	8000b28 <__aeabi_dcmpeq>
 800825c:	b900      	cbnz	r0, 8008260 <_dtoa_r+0x168>
 800825e:	3f01      	subs	r7, #1
 8008260:	2f16      	cmp	r7, #22
 8008262:	d852      	bhi.n	800830a <_dtoa_r+0x212>
 8008264:	4b5d      	ldr	r3, [pc, #372]	@ (80083dc <_dtoa_r+0x2e4>)
 8008266:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008272:	f7f8 fc63 	bl	8000b3c <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	d049      	beq.n	800830e <_dtoa_r+0x216>
 800827a:	3f01      	subs	r7, #1
 800827c:	2300      	movs	r3, #0
 800827e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008280:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008282:	1b9b      	subs	r3, r3, r6
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	bf45      	ittet	mi
 8008288:	f1c3 0301 	rsbmi	r3, r3, #1
 800828c:	9300      	strmi	r3, [sp, #0]
 800828e:	2300      	movpl	r3, #0
 8008290:	2300      	movmi	r3, #0
 8008292:	9206      	str	r2, [sp, #24]
 8008294:	bf54      	ite	pl
 8008296:	9300      	strpl	r3, [sp, #0]
 8008298:	9306      	strmi	r3, [sp, #24]
 800829a:	2f00      	cmp	r7, #0
 800829c:	db39      	blt.n	8008312 <_dtoa_r+0x21a>
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80082a2:	443b      	add	r3, r7
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	2b09      	cmp	r3, #9
 80082ae:	d863      	bhi.n	8008378 <_dtoa_r+0x280>
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	bfc4      	itt	gt
 80082b4:	3b04      	subgt	r3, #4
 80082b6:	9307      	strgt	r3, [sp, #28]
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	f1a3 0302 	sub.w	r3, r3, #2
 80082be:	bfcc      	ite	gt
 80082c0:	2400      	movgt	r4, #0
 80082c2:	2401      	movle	r4, #1
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d863      	bhi.n	8008390 <_dtoa_r+0x298>
 80082c8:	e8df f003 	tbb	[pc, r3]
 80082cc:	2b375452 	.word	0x2b375452
 80082d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80082d4:	441e      	add	r6, r3
 80082d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082da:	2b20      	cmp	r3, #32
 80082dc:	bfc1      	itttt	gt
 80082de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082e2:	409f      	lslgt	r7, r3
 80082e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082ec:	bfd6      	itet	le
 80082ee:	f1c3 0320 	rsble	r3, r3, #32
 80082f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80082f6:	fa04 f003 	lslle.w	r0, r4, r3
 80082fa:	f7f8 f933 	bl	8000564 <__aeabi_ui2d>
 80082fe:	2201      	movs	r2, #1
 8008300:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008304:	3e01      	subs	r6, #1
 8008306:	9212      	str	r2, [sp, #72]	@ 0x48
 8008308:	e776      	b.n	80081f8 <_dtoa_r+0x100>
 800830a:	2301      	movs	r3, #1
 800830c:	e7b7      	b.n	800827e <_dtoa_r+0x186>
 800830e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008310:	e7b6      	b.n	8008280 <_dtoa_r+0x188>
 8008312:	9b00      	ldr	r3, [sp, #0]
 8008314:	1bdb      	subs	r3, r3, r7
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	427b      	negs	r3, r7
 800831a:	9308      	str	r3, [sp, #32]
 800831c:	2300      	movs	r3, #0
 800831e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008320:	e7c3      	b.n	80082aa <_dtoa_r+0x1b2>
 8008322:	2301      	movs	r3, #1
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008328:	eb07 0b03 	add.w	fp, r7, r3
 800832c:	f10b 0301 	add.w	r3, fp, #1
 8008330:	2b01      	cmp	r3, #1
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	bfb8      	it	lt
 8008336:	2301      	movlt	r3, #1
 8008338:	e006      	b.n	8008348 <_dtoa_r+0x250>
 800833a:	2301      	movs	r3, #1
 800833c:	9309      	str	r3, [sp, #36]	@ 0x24
 800833e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd28      	ble.n	8008396 <_dtoa_r+0x29e>
 8008344:	469b      	mov	fp, r3
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800834c:	2100      	movs	r1, #0
 800834e:	2204      	movs	r2, #4
 8008350:	f102 0514 	add.w	r5, r2, #20
 8008354:	429d      	cmp	r5, r3
 8008356:	d926      	bls.n	80083a6 <_dtoa_r+0x2ae>
 8008358:	6041      	str	r1, [r0, #4]
 800835a:	4648      	mov	r0, r9
 800835c:	f001 f832 	bl	80093c4 <_Balloc>
 8008360:	4682      	mov	sl, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d142      	bne.n	80083ec <_dtoa_r+0x2f4>
 8008366:	4b1e      	ldr	r3, [pc, #120]	@ (80083e0 <_dtoa_r+0x2e8>)
 8008368:	4602      	mov	r2, r0
 800836a:	f240 11af 	movw	r1, #431	@ 0x1af
 800836e:	e6da      	b.n	8008126 <_dtoa_r+0x2e>
 8008370:	2300      	movs	r3, #0
 8008372:	e7e3      	b.n	800833c <_dtoa_r+0x244>
 8008374:	2300      	movs	r3, #0
 8008376:	e7d5      	b.n	8008324 <_dtoa_r+0x22c>
 8008378:	2401      	movs	r4, #1
 800837a:	2300      	movs	r3, #0
 800837c:	9307      	str	r3, [sp, #28]
 800837e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008380:	f04f 3bff 	mov.w	fp, #4294967295
 8008384:	2200      	movs	r2, #0
 8008386:	f8cd b00c 	str.w	fp, [sp, #12]
 800838a:	2312      	movs	r3, #18
 800838c:	920c      	str	r2, [sp, #48]	@ 0x30
 800838e:	e7db      	b.n	8008348 <_dtoa_r+0x250>
 8008390:	2301      	movs	r3, #1
 8008392:	9309      	str	r3, [sp, #36]	@ 0x24
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x288>
 8008396:	f04f 0b01 	mov.w	fp, #1
 800839a:	f8cd b00c 	str.w	fp, [sp, #12]
 800839e:	465b      	mov	r3, fp
 80083a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80083a4:	e7d0      	b.n	8008348 <_dtoa_r+0x250>
 80083a6:	3101      	adds	r1, #1
 80083a8:	0052      	lsls	r2, r2, #1
 80083aa:	e7d1      	b.n	8008350 <_dtoa_r+0x258>
 80083ac:	f3af 8000 	nop.w
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800b585 	.word	0x0800b585
 80083cc:	0800b59c 	.word	0x0800b59c
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800b6e6 	.word	0x0800b6e6
 80083d8:	3ff80000 	.word	0x3ff80000
 80083dc:	0800b8b0 	.word	0x0800b8b0
 80083e0:	0800b5f4 	.word	0x0800b5f4
 80083e4:	0800b581 	.word	0x0800b581
 80083e8:	0800b6e5 	.word	0x0800b6e5
 80083ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083f0:	6018      	str	r0, [r3, #0]
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	2b0e      	cmp	r3, #14
 80083f6:	f200 80a1 	bhi.w	800853c <_dtoa_r+0x444>
 80083fa:	2c00      	cmp	r4, #0
 80083fc:	f000 809e 	beq.w	800853c <_dtoa_r+0x444>
 8008400:	2f00      	cmp	r7, #0
 8008402:	dd33      	ble.n	800846c <_dtoa_r+0x374>
 8008404:	4b9c      	ldr	r3, [pc, #624]	@ (8008678 <_dtoa_r+0x580>)
 8008406:	f007 020f 	and.w	r2, r7, #15
 800840a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840e:	ed93 7b00 	vldr	d7, [r3]
 8008412:	05f8      	lsls	r0, r7, #23
 8008414:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008418:	ea4f 1427 	mov.w	r4, r7, asr #4
 800841c:	d516      	bpl.n	800844c <_dtoa_r+0x354>
 800841e:	4b97      	ldr	r3, [pc, #604]	@ (800867c <_dtoa_r+0x584>)
 8008420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008428:	f7f8 fa40 	bl	80008ac <__aeabi_ddiv>
 800842c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008430:	f004 040f 	and.w	r4, r4, #15
 8008434:	2603      	movs	r6, #3
 8008436:	4d91      	ldr	r5, [pc, #580]	@ (800867c <_dtoa_r+0x584>)
 8008438:	b954      	cbnz	r4, 8008450 <_dtoa_r+0x358>
 800843a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800843e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008442:	f7f8 fa33 	bl	80008ac <__aeabi_ddiv>
 8008446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800844a:	e028      	b.n	800849e <_dtoa_r+0x3a6>
 800844c:	2602      	movs	r6, #2
 800844e:	e7f2      	b.n	8008436 <_dtoa_r+0x33e>
 8008450:	07e1      	lsls	r1, r4, #31
 8008452:	d508      	bpl.n	8008466 <_dtoa_r+0x36e>
 8008454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800845c:	f7f8 f8fc 	bl	8000658 <__aeabi_dmul>
 8008460:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008464:	3601      	adds	r6, #1
 8008466:	1064      	asrs	r4, r4, #1
 8008468:	3508      	adds	r5, #8
 800846a:	e7e5      	b.n	8008438 <_dtoa_r+0x340>
 800846c:	f000 80af 	beq.w	80085ce <_dtoa_r+0x4d6>
 8008470:	427c      	negs	r4, r7
 8008472:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <_dtoa_r+0x580>)
 8008474:	4d81      	ldr	r5, [pc, #516]	@ (800867c <_dtoa_r+0x584>)
 8008476:	f004 020f 	and.w	r2, r4, #15
 800847a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008486:	f7f8 f8e7 	bl	8000658 <__aeabi_dmul>
 800848a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848e:	1124      	asrs	r4, r4, #4
 8008490:	2300      	movs	r3, #0
 8008492:	2602      	movs	r6, #2
 8008494:	2c00      	cmp	r4, #0
 8008496:	f040 808f 	bne.w	80085b8 <_dtoa_r+0x4c0>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d3      	bne.n	8008446 <_dtoa_r+0x34e>
 800849e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8094 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084aa:	4b75      	ldr	r3, [pc, #468]	@ (8008680 <_dtoa_r+0x588>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4620      	mov	r0, r4
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7f8 fb43 	bl	8000b3c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f000 808b 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8087 	beq.w	80085d2 <_dtoa_r+0x4da>
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	dd34      	ble.n	8008534 <_dtoa_r+0x43c>
 80084ca:	4620      	mov	r0, r4
 80084cc:	4b6d      	ldr	r3, [pc, #436]	@ (8008684 <_dtoa_r+0x58c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f8 f8c1 	bl	8000658 <__aeabi_dmul>
 80084d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084da:	f107 38ff 	add.w	r8, r7, #4294967295
 80084de:	3601      	adds	r6, #1
 80084e0:	465c      	mov	r4, fp
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7f8 f84e 	bl	8000584 <__aeabi_i2d>
 80084e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ec:	f7f8 f8b4 	bl	8000658 <__aeabi_dmul>
 80084f0:	4b65      	ldr	r3, [pc, #404]	@ (8008688 <_dtoa_r+0x590>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	f7f7 fefa 	bl	80002ec <__adddf3>
 80084f8:	4605      	mov	r5, r0
 80084fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d16a      	bne.n	80085d8 <_dtoa_r+0x4e0>
 8008502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008506:	4b61      	ldr	r3, [pc, #388]	@ (800868c <_dtoa_r+0x594>)
 8008508:	2200      	movs	r2, #0
 800850a:	f7f7 feed 	bl	80002e8 <__aeabi_dsub>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008516:	462a      	mov	r2, r5
 8008518:	4633      	mov	r3, r6
 800851a:	f7f8 fb2d 	bl	8000b78 <__aeabi_dcmpgt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 8298 	bne.w	8008a54 <_dtoa_r+0x95c>
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	462a      	mov	r2, r5
 800852a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800852e:	f7f8 fb05 	bl	8000b3c <__aeabi_dcmplt>
 8008532:	bb38      	cbnz	r0, 8008584 <_dtoa_r+0x48c>
 8008534:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008538:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800853c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	f2c0 8157 	blt.w	80087f2 <_dtoa_r+0x6fa>
 8008544:	2f0e      	cmp	r7, #14
 8008546:	f300 8154 	bgt.w	80087f2 <_dtoa_r+0x6fa>
 800854a:	4b4b      	ldr	r3, [pc, #300]	@ (8008678 <_dtoa_r+0x580>)
 800854c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	ed8d 7b00 	vstr	d7, [sp]
 800855c:	f280 80e5 	bge.w	800872a <_dtoa_r+0x632>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f300 80e1 	bgt.w	800872a <_dtoa_r+0x632>
 8008568:	d10c      	bne.n	8008584 <_dtoa_r+0x48c>
 800856a:	4b48      	ldr	r3, [pc, #288]	@ (800868c <_dtoa_r+0x594>)
 800856c:	2200      	movs	r2, #0
 800856e:	ec51 0b17 	vmov	r0, r1, d7
 8008572:	f7f8 f871 	bl	8000658 <__aeabi_dmul>
 8008576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857a:	f7f8 faf3 	bl	8000b64 <__aeabi_dcmpge>
 800857e:	2800      	cmp	r0, #0
 8008580:	f000 8266 	beq.w	8008a50 <_dtoa_r+0x958>
 8008584:	2400      	movs	r4, #0
 8008586:	4625      	mov	r5, r4
 8008588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800858a:	4656      	mov	r6, sl
 800858c:	ea6f 0803 	mvn.w	r8, r3
 8008590:	2700      	movs	r7, #0
 8008592:	4621      	mov	r1, r4
 8008594:	4648      	mov	r0, r9
 8008596:	f000 ff55 	bl	8009444 <_Bfree>
 800859a:	2d00      	cmp	r5, #0
 800859c:	f000 80bd 	beq.w	800871a <_dtoa_r+0x622>
 80085a0:	b12f      	cbz	r7, 80085ae <_dtoa_r+0x4b6>
 80085a2:	42af      	cmp	r7, r5
 80085a4:	d003      	beq.n	80085ae <_dtoa_r+0x4b6>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4648      	mov	r0, r9
 80085aa:	f000 ff4b 	bl	8009444 <_Bfree>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4648      	mov	r0, r9
 80085b2:	f000 ff47 	bl	8009444 <_Bfree>
 80085b6:	e0b0      	b.n	800871a <_dtoa_r+0x622>
 80085b8:	07e2      	lsls	r2, r4, #31
 80085ba:	d505      	bpl.n	80085c8 <_dtoa_r+0x4d0>
 80085bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085c0:	f7f8 f84a 	bl	8000658 <__aeabi_dmul>
 80085c4:	3601      	adds	r6, #1
 80085c6:	2301      	movs	r3, #1
 80085c8:	1064      	asrs	r4, r4, #1
 80085ca:	3508      	adds	r5, #8
 80085cc:	e762      	b.n	8008494 <_dtoa_r+0x39c>
 80085ce:	2602      	movs	r6, #2
 80085d0:	e765      	b.n	800849e <_dtoa_r+0x3a6>
 80085d2:	9c03      	ldr	r4, [sp, #12]
 80085d4:	46b8      	mov	r8, r7
 80085d6:	e784      	b.n	80084e2 <_dtoa_r+0x3ea>
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <_dtoa_r+0x580>)
 80085da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085e4:	4454      	add	r4, sl
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d054      	beq.n	8008694 <_dtoa_r+0x59c>
 80085ea:	4929      	ldr	r1, [pc, #164]	@ (8008690 <_dtoa_r+0x598>)
 80085ec:	2000      	movs	r0, #0
 80085ee:	f7f8 f95d 	bl	80008ac <__aeabi_ddiv>
 80085f2:	4633      	mov	r3, r6
 80085f4:	462a      	mov	r2, r5
 80085f6:	f7f7 fe77 	bl	80002e8 <__aeabi_dsub>
 80085fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085fe:	4656      	mov	r6, sl
 8008600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008604:	f7f8 fad8 	bl	8000bb8 <__aeabi_d2iz>
 8008608:	4605      	mov	r5, r0
 800860a:	f7f7 ffbb 	bl	8000584 <__aeabi_i2d>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008616:	f7f7 fe67 	bl	80002e8 <__aeabi_dsub>
 800861a:	3530      	adds	r5, #48	@ 0x30
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008624:	f806 5b01 	strb.w	r5, [r6], #1
 8008628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800862c:	f7f8 fa86 	bl	8000b3c <__aeabi_dcmplt>
 8008630:	2800      	cmp	r0, #0
 8008632:	d172      	bne.n	800871a <_dtoa_r+0x622>
 8008634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <_dtoa_r+0x588>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe54 	bl	80002e8 <__aeabi_dsub>
 8008640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008644:	f7f8 fa7a 	bl	8000b3c <__aeabi_dcmplt>
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 80b4 	bne.w	80087b6 <_dtoa_r+0x6be>
 800864e:	42a6      	cmp	r6, r4
 8008650:	f43f af70 	beq.w	8008534 <_dtoa_r+0x43c>
 8008654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008658:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <_dtoa_r+0x58c>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 fffc 	bl	8000658 <__aeabi_dmul>
 8008660:	4b08      	ldr	r3, [pc, #32]	@ (8008684 <_dtoa_r+0x58c>)
 8008662:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008666:	2200      	movs	r2, #0
 8008668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866c:	f7f7 fff4 	bl	8000658 <__aeabi_dmul>
 8008670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008674:	e7c4      	b.n	8008600 <_dtoa_r+0x508>
 8008676:	bf00      	nop
 8008678:	0800b8b0 	.word	0x0800b8b0
 800867c:	0800b888 	.word	0x0800b888
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	f7f7 ffde 	bl	8000658 <__aeabi_dmul>
 800869c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086a2:	4656      	mov	r6, sl
 80086a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086a8:	f7f8 fa86 	bl	8000bb8 <__aeabi_d2iz>
 80086ac:	4605      	mov	r5, r0
 80086ae:	f7f7 ff69 	bl	8000584 <__aeabi_i2d>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f7 fe15 	bl	80002e8 <__aeabi_dsub>
 80086be:	3530      	adds	r5, #48	@ 0x30
 80086c0:	f806 5b01 	strb.w	r5, [r6], #1
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	42a6      	cmp	r6, r4
 80086ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	d124      	bne.n	800871e <_dtoa_r+0x626>
 80086d4:	4baf      	ldr	r3, [pc, #700]	@ (8008994 <_dtoa_r+0x89c>)
 80086d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086da:	f7f7 fe07 	bl	80002ec <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e6:	f7f8 fa47 	bl	8000b78 <__aeabi_dcmpgt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d163      	bne.n	80087b6 <_dtoa_r+0x6be>
 80086ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086f2:	49a8      	ldr	r1, [pc, #672]	@ (8008994 <_dtoa_r+0x89c>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f7 fdf7 	bl	80002e8 <__aeabi_dsub>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008702:	f7f8 fa1b 	bl	8000b3c <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f af14 	beq.w	8008534 <_dtoa_r+0x43c>
 800870c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800870e:	1e73      	subs	r3, r6, #1
 8008710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008712:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008716:	2b30      	cmp	r3, #48	@ 0x30
 8008718:	d0f8      	beq.n	800870c <_dtoa_r+0x614>
 800871a:	4647      	mov	r7, r8
 800871c:	e03b      	b.n	8008796 <_dtoa_r+0x69e>
 800871e:	4b9e      	ldr	r3, [pc, #632]	@ (8008998 <_dtoa_r+0x8a0>)
 8008720:	f7f7 ff9a 	bl	8000658 <__aeabi_dmul>
 8008724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008728:	e7bc      	b.n	80086a4 <_dtoa_r+0x5ac>
 800872a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800872e:	4656      	mov	r6, sl
 8008730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f8 f8b8 	bl	80008ac <__aeabi_ddiv>
 800873c:	f7f8 fa3c 	bl	8000bb8 <__aeabi_d2iz>
 8008740:	4680      	mov	r8, r0
 8008742:	f7f7 ff1f 	bl	8000584 <__aeabi_i2d>
 8008746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800874a:	f7f7 ff85 	bl	8000658 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800875a:	f7f7 fdc5 	bl	80002e8 <__aeabi_dsub>
 800875e:	f806 4b01 	strb.w	r4, [r6], #1
 8008762:	9d03      	ldr	r5, [sp, #12]
 8008764:	eba6 040a 	sub.w	r4, r6, sl
 8008768:	42a5      	cmp	r5, r4
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	d133      	bne.n	80087d8 <_dtoa_r+0x6e0>
 8008770:	f7f7 fdbc 	bl	80002ec <__adddf3>
 8008774:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008778:	4604      	mov	r4, r0
 800877a:	460d      	mov	r5, r1
 800877c:	f7f8 f9fc 	bl	8000b78 <__aeabi_dcmpgt>
 8008780:	b9c0      	cbnz	r0, 80087b4 <_dtoa_r+0x6bc>
 8008782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f9cd 	bl	8000b28 <__aeabi_dcmpeq>
 800878e:	b110      	cbz	r0, 8008796 <_dtoa_r+0x69e>
 8008790:	f018 0f01 	tst.w	r8, #1
 8008794:	d10e      	bne.n	80087b4 <_dtoa_r+0x6bc>
 8008796:	9902      	ldr	r1, [sp, #8]
 8008798:	4648      	mov	r0, r9
 800879a:	f000 fe53 	bl	8009444 <_Bfree>
 800879e:	2300      	movs	r3, #0
 80087a0:	7033      	strb	r3, [r6, #0]
 80087a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087a4:	3701      	adds	r7, #1
 80087a6:	601f      	str	r7, [r3, #0]
 80087a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 824b 	beq.w	8008c46 <_dtoa_r+0xb4e>
 80087b0:	601e      	str	r6, [r3, #0]
 80087b2:	e248      	b.n	8008c46 <_dtoa_r+0xb4e>
 80087b4:	46b8      	mov	r8, r7
 80087b6:	4633      	mov	r3, r6
 80087b8:	461e      	mov	r6, r3
 80087ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087be:	2a39      	cmp	r2, #57	@ 0x39
 80087c0:	d106      	bne.n	80087d0 <_dtoa_r+0x6d8>
 80087c2:	459a      	cmp	sl, r3
 80087c4:	d1f8      	bne.n	80087b8 <_dtoa_r+0x6c0>
 80087c6:	2230      	movs	r2, #48	@ 0x30
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	f88a 2000 	strb.w	r2, [sl]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	3201      	adds	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e7a0      	b.n	800871a <_dtoa_r+0x622>
 80087d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008998 <_dtoa_r+0x8a0>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f7 ff3c 	bl	8000658 <__aeabi_dmul>
 80087e0:	2200      	movs	r2, #0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4604      	mov	r4, r0
 80087e6:	460d      	mov	r5, r1
 80087e8:	f7f8 f99e 	bl	8000b28 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d09f      	beq.n	8008730 <_dtoa_r+0x638>
 80087f0:	e7d1      	b.n	8008796 <_dtoa_r+0x69e>
 80087f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f000 80ea 	beq.w	80089ce <_dtoa_r+0x8d6>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	2a01      	cmp	r2, #1
 80087fe:	f300 80cd 	bgt.w	800899c <_dtoa_r+0x8a4>
 8008802:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008804:	2a00      	cmp	r2, #0
 8008806:	f000 80c1 	beq.w	800898c <_dtoa_r+0x894>
 800880a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800880e:	9c08      	ldr	r4, [sp, #32]
 8008810:	9e00      	ldr	r6, [sp, #0]
 8008812:	9a00      	ldr	r2, [sp, #0]
 8008814:	441a      	add	r2, r3
 8008816:	9200      	str	r2, [sp, #0]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	2101      	movs	r1, #1
 800881c:	441a      	add	r2, r3
 800881e:	4648      	mov	r0, r9
 8008820:	9206      	str	r2, [sp, #24]
 8008822:	f000 ff0d 	bl	8009640 <__i2b>
 8008826:	4605      	mov	r5, r0
 8008828:	b166      	cbz	r6, 8008844 <_dtoa_r+0x74c>
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd09      	ble.n	8008844 <_dtoa_r+0x74c>
 8008830:	42b3      	cmp	r3, r6
 8008832:	9a00      	ldr	r2, [sp, #0]
 8008834:	bfa8      	it	ge
 8008836:	4633      	movge	r3, r6
 8008838:	1ad2      	subs	r2, r2, r3
 800883a:	9200      	str	r2, [sp, #0]
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	1af6      	subs	r6, r6, r3
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	9306      	str	r3, [sp, #24]
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	b30b      	cbz	r3, 800888c <_dtoa_r+0x794>
 8008848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80c6 	beq.w	80089dc <_dtoa_r+0x8e4>
 8008850:	2c00      	cmp	r4, #0
 8008852:	f000 80c0 	beq.w	80089d6 <_dtoa_r+0x8de>
 8008856:	4629      	mov	r1, r5
 8008858:	4622      	mov	r2, r4
 800885a:	4648      	mov	r0, r9
 800885c:	f000 ffa8 	bl	80097b0 <__pow5mult>
 8008860:	9a02      	ldr	r2, [sp, #8]
 8008862:	4601      	mov	r1, r0
 8008864:	4605      	mov	r5, r0
 8008866:	4648      	mov	r0, r9
 8008868:	f000 ff00 	bl	800966c <__multiply>
 800886c:	9902      	ldr	r1, [sp, #8]
 800886e:	4680      	mov	r8, r0
 8008870:	4648      	mov	r0, r9
 8008872:	f000 fde7 	bl	8009444 <_Bfree>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	1b1b      	subs	r3, r3, r4
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	f000 80b1 	beq.w	80089e2 <_dtoa_r+0x8ea>
 8008880:	9a08      	ldr	r2, [sp, #32]
 8008882:	4641      	mov	r1, r8
 8008884:	4648      	mov	r0, r9
 8008886:	f000 ff93 	bl	80097b0 <__pow5mult>
 800888a:	9002      	str	r0, [sp, #8]
 800888c:	2101      	movs	r1, #1
 800888e:	4648      	mov	r0, r9
 8008890:	f000 fed6 	bl	8009640 <__i2b>
 8008894:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008896:	4604      	mov	r4, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 81d8 	beq.w	8008c4e <_dtoa_r+0xb56>
 800889e:	461a      	mov	r2, r3
 80088a0:	4601      	mov	r1, r0
 80088a2:	4648      	mov	r0, r9
 80088a4:	f000 ff84 	bl	80097b0 <__pow5mult>
 80088a8:	9b07      	ldr	r3, [sp, #28]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	4604      	mov	r4, r0
 80088ae:	f300 809f 	bgt.w	80089f0 <_dtoa_r+0x8f8>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8097 	bne.w	80089e8 <_dtoa_r+0x8f0>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 8093 	bne.w	80089ec <_dtoa_r+0x8f4>
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088cc:	0d1b      	lsrs	r3, r3, #20
 80088ce:	051b      	lsls	r3, r3, #20
 80088d0:	b133      	cbz	r3, 80088e0 <_dtoa_r+0x7e8>
 80088d2:	9b00      	ldr	r3, [sp, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	3301      	adds	r3, #1
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	2301      	movs	r3, #1
 80088e0:	9308      	str	r3, [sp, #32]
 80088e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 81b8 	beq.w	8008c5a <_dtoa_r+0xb62>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f000 fe59 	bl	80095a8 <__hi0bits>
 80088f6:	f1c0 0020 	rsb	r0, r0, #32
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	4418      	add	r0, r3
 80088fe:	f010 001f 	ands.w	r0, r0, #31
 8008902:	f000 8082 	beq.w	8008a0a <_dtoa_r+0x912>
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	2b04      	cmp	r3, #4
 800890c:	dd73      	ble.n	80089f6 <_dtoa_r+0x8fe>
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	4403      	add	r3, r0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	4403      	add	r3, r0
 800891c:	4406      	add	r6, r0
 800891e:	9306      	str	r3, [sp, #24]
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x83a>
 8008926:	9902      	ldr	r1, [sp, #8]
 8008928:	461a      	mov	r2, r3
 800892a:	4648      	mov	r0, r9
 800892c:	f000 ff9a 	bl	8009864 <__lshift>
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd05      	ble.n	8008944 <_dtoa_r+0x84c>
 8008938:	4621      	mov	r1, r4
 800893a:	461a      	mov	r2, r3
 800893c:	4648      	mov	r0, r9
 800893e:	f000 ff91 	bl	8009864 <__lshift>
 8008942:	4604      	mov	r4, r0
 8008944:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d061      	beq.n	8008a0e <_dtoa_r+0x916>
 800894a:	9802      	ldr	r0, [sp, #8]
 800894c:	4621      	mov	r1, r4
 800894e:	f000 fff5 	bl	800993c <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	da5b      	bge.n	8008a0e <_dtoa_r+0x916>
 8008956:	2300      	movs	r3, #0
 8008958:	9902      	ldr	r1, [sp, #8]
 800895a:	220a      	movs	r2, #10
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fd93 	bl	8009488 <__multadd>
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	9002      	str	r0, [sp, #8]
 8008966:	f107 38ff 	add.w	r8, r7, #4294967295
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8177 	beq.w	8008c5e <_dtoa_r+0xb66>
 8008970:	4629      	mov	r1, r5
 8008972:	2300      	movs	r3, #0
 8008974:	220a      	movs	r2, #10
 8008976:	4648      	mov	r0, r9
 8008978:	f000 fd86 	bl	8009488 <__multadd>
 800897c:	f1bb 0f00 	cmp.w	fp, #0
 8008980:	4605      	mov	r5, r0
 8008982:	dc6f      	bgt.n	8008a64 <_dtoa_r+0x96c>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	2b02      	cmp	r3, #2
 8008988:	dc49      	bgt.n	8008a1e <_dtoa_r+0x926>
 800898a:	e06b      	b.n	8008a64 <_dtoa_r+0x96c>
 800898c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800898e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008992:	e73c      	b.n	800880e <_dtoa_r+0x716>
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	40240000 	.word	0x40240000
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1e5c      	subs	r4, r3, #1
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	db09      	blt.n	80089ba <_dtoa_r+0x8c2>
 80089a6:	1b1c      	subs	r4, r3, r4
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f6bf af30 	bge.w	8008810 <_dtoa_r+0x718>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	9a03      	ldr	r2, [sp, #12]
 80089b4:	1a9e      	subs	r6, r3, r2
 80089b6:	2300      	movs	r3, #0
 80089b8:	e72b      	b.n	8008812 <_dtoa_r+0x71a>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089be:	9408      	str	r4, [sp, #32]
 80089c0:	1ae3      	subs	r3, r4, r3
 80089c2:	441a      	add	r2, r3
 80089c4:	9e00      	ldr	r6, [sp, #0]
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80089ca:	2400      	movs	r4, #0
 80089cc:	e721      	b.n	8008812 <_dtoa_r+0x71a>
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	9e00      	ldr	r6, [sp, #0]
 80089d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80089d4:	e728      	b.n	8008828 <_dtoa_r+0x730>
 80089d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089da:	e751      	b.n	8008880 <_dtoa_r+0x788>
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	9902      	ldr	r1, [sp, #8]
 80089e0:	e750      	b.n	8008884 <_dtoa_r+0x78c>
 80089e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80089e6:	e751      	b.n	800888c <_dtoa_r+0x794>
 80089e8:	2300      	movs	r3, #0
 80089ea:	e779      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	e777      	b.n	80088e0 <_dtoa_r+0x7e8>
 80089f0:	2300      	movs	r3, #0
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	e779      	b.n	80088ea <_dtoa_r+0x7f2>
 80089f6:	d093      	beq.n	8008920 <_dtoa_r+0x828>
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	331c      	adds	r3, #28
 80089fc:	441a      	add	r2, r3
 80089fe:	9200      	str	r2, [sp, #0]
 8008a00:	9a06      	ldr	r2, [sp, #24]
 8008a02:	441a      	add	r2, r3
 8008a04:	441e      	add	r6, r3
 8008a06:	9206      	str	r2, [sp, #24]
 8008a08:	e78a      	b.n	8008920 <_dtoa_r+0x828>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	e7f4      	b.n	80089f8 <_dtoa_r+0x900>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	46b8      	mov	r8, r7
 8008a14:	dc20      	bgt.n	8008a58 <_dtoa_r+0x960>
 8008a16:	469b      	mov	fp, r3
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dd1e      	ble.n	8008a5c <_dtoa_r+0x964>
 8008a1e:	f1bb 0f00 	cmp.w	fp, #0
 8008a22:	f47f adb1 	bne.w	8008588 <_dtoa_r+0x490>
 8008a26:	4621      	mov	r1, r4
 8008a28:	465b      	mov	r3, fp
 8008a2a:	2205      	movs	r2, #5
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fd2b 	bl	8009488 <__multadd>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4604      	mov	r4, r0
 8008a36:	9802      	ldr	r0, [sp, #8]
 8008a38:	f000 ff80 	bl	800993c <__mcmp>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f77f ada3 	ble.w	8008588 <_dtoa_r+0x490>
 8008a42:	4656      	mov	r6, sl
 8008a44:	2331      	movs	r3, #49	@ 0x31
 8008a46:	f806 3b01 	strb.w	r3, [r6], #1
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	e59f      	b.n	8008590 <_dtoa_r+0x498>
 8008a50:	9c03      	ldr	r4, [sp, #12]
 8008a52:	46b8      	mov	r8, r7
 8008a54:	4625      	mov	r5, r4
 8008a56:	e7f4      	b.n	8008a42 <_dtoa_r+0x94a>
 8008a58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8101 	beq.w	8008c66 <_dtoa_r+0xb6e>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	dd05      	ble.n	8008a74 <_dtoa_r+0x97c>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 fef9 	bl	8009864 <__lshift>
 8008a72:	4605      	mov	r5, r0
 8008a74:	9b08      	ldr	r3, [sp, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05c      	beq.n	8008b34 <_dtoa_r+0xa3c>
 8008a7a:	6869      	ldr	r1, [r5, #4]
 8008a7c:	4648      	mov	r0, r9
 8008a7e:	f000 fca1 	bl	80093c4 <_Balloc>
 8008a82:	4606      	mov	r6, r0
 8008a84:	b928      	cbnz	r0, 8008a92 <_dtoa_r+0x99a>
 8008a86:	4b82      	ldr	r3, [pc, #520]	@ (8008c90 <_dtoa_r+0xb98>)
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a8e:	f7ff bb4a 	b.w	8008126 <_dtoa_r+0x2e>
 8008a92:	692a      	ldr	r2, [r5, #16]
 8008a94:	3202      	adds	r2, #2
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	f105 010c 	add.w	r1, r5, #12
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	f7ff fa8a 	bl	8007fb6 <memcpy>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 fedc 	bl	8009864 <__lshift>
 8008aac:	f10a 0301 	add.w	r3, sl, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	eb0a 030b 	add.w	r3, sl, fp
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	462f      	mov	r7, r5
 8008ac0:	9306      	str	r3, [sp, #24]
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	9802      	ldr	r0, [sp, #8]
 8008ac8:	4621      	mov	r1, r4
 8008aca:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ace:	f7ff fa8b 	bl	8007fe8 <quorem>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	3330      	adds	r3, #48	@ 0x30
 8008ad6:	9003      	str	r0, [sp, #12]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	9802      	ldr	r0, [sp, #8]
 8008adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ade:	f000 ff2d 	bl	800993c <__mcmp>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	9004      	str	r0, [sp, #16]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4648      	mov	r0, r9
 8008aea:	f000 ff43 	bl	8009974 <__mdiff>
 8008aee:	68c2      	ldr	r2, [r0, #12]
 8008af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af2:	4606      	mov	r6, r0
 8008af4:	bb02      	cbnz	r2, 8008b38 <_dtoa_r+0xa40>
 8008af6:	4601      	mov	r1, r0
 8008af8:	9802      	ldr	r0, [sp, #8]
 8008afa:	f000 ff1f 	bl	800993c <__mcmp>
 8008afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b00:	4602      	mov	r2, r0
 8008b02:	4631      	mov	r1, r6
 8008b04:	4648      	mov	r0, r9
 8008b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0a:	f000 fc9b 	bl	8009444 <_Bfree>
 8008b0e:	9b07      	ldr	r3, [sp, #28]
 8008b10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b12:	9e00      	ldr	r6, [sp, #0]
 8008b14:	ea42 0103 	orr.w	r1, r2, r3
 8008b18:	9b06      	ldr	r3, [sp, #24]
 8008b1a:	4319      	orrs	r1, r3
 8008b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1e:	d10d      	bne.n	8008b3c <_dtoa_r+0xa44>
 8008b20:	2b39      	cmp	r3, #57	@ 0x39
 8008b22:	d027      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	dd01      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3331      	adds	r3, #49	@ 0x31
 8008b2e:	f88b 3000 	strb.w	r3, [fp]
 8008b32:	e52e      	b.n	8008592 <_dtoa_r+0x49a>
 8008b34:	4628      	mov	r0, r5
 8008b36:	e7b9      	b.n	8008aac <_dtoa_r+0x9b4>
 8008b38:	2201      	movs	r2, #1
 8008b3a:	e7e2      	b.n	8008b02 <_dtoa_r+0xa0a>
 8008b3c:	9904      	ldr	r1, [sp, #16]
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	db04      	blt.n	8008b4c <_dtoa_r+0xa54>
 8008b42:	9807      	ldr	r0, [sp, #28]
 8008b44:	4301      	orrs	r1, r0
 8008b46:	9806      	ldr	r0, [sp, #24]
 8008b48:	4301      	orrs	r1, r0
 8008b4a:	d120      	bne.n	8008b8e <_dtoa_r+0xa96>
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	ddee      	ble.n	8008b2e <_dtoa_r+0xa36>
 8008b50:	9902      	ldr	r1, [sp, #8]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	4648      	mov	r0, r9
 8008b58:	f000 fe84 	bl	8009864 <__lshift>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	9002      	str	r0, [sp, #8]
 8008b60:	f000 feec 	bl	800993c <__mcmp>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	dc02      	bgt.n	8008b70 <_dtoa_r+0xa78>
 8008b6a:	d1e0      	bne.n	8008b2e <_dtoa_r+0xa36>
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	d5de      	bpl.n	8008b2e <_dtoa_r+0xa36>
 8008b70:	2b39      	cmp	r3, #57	@ 0x39
 8008b72:	d1da      	bne.n	8008b2a <_dtoa_r+0xa32>
 8008b74:	2339      	movs	r3, #57	@ 0x39
 8008b76:	f88b 3000 	strb.w	r3, [fp]
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b84:	2a39      	cmp	r2, #57	@ 0x39
 8008b86:	d04e      	beq.n	8008c26 <_dtoa_r+0xb2e>
 8008b88:	3201      	adds	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e501      	b.n	8008592 <_dtoa_r+0x49a>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dd03      	ble.n	8008b9a <_dtoa_r+0xaa2>
 8008b92:	2b39      	cmp	r3, #57	@ 0x39
 8008b94:	d0ee      	beq.n	8008b74 <_dtoa_r+0xa7c>
 8008b96:	3301      	adds	r3, #1
 8008b98:	e7c9      	b.n	8008b2e <_dtoa_r+0xa36>
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	9908      	ldr	r1, [sp, #32]
 8008b9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ba2:	428a      	cmp	r2, r1
 8008ba4:	d028      	beq.n	8008bf8 <_dtoa_r+0xb00>
 8008ba6:	9902      	ldr	r1, [sp, #8]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	220a      	movs	r2, #10
 8008bac:	4648      	mov	r0, r9
 8008bae:	f000 fc6b 	bl	8009488 <__multadd>
 8008bb2:	42af      	cmp	r7, r5
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	f04f 0300 	mov.w	r3, #0
 8008bba:	f04f 020a 	mov.w	r2, #10
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4648      	mov	r0, r9
 8008bc2:	d107      	bne.n	8008bd4 <_dtoa_r+0xadc>
 8008bc4:	f000 fc60 	bl	8009488 <__multadd>
 8008bc8:	4607      	mov	r7, r0
 8008bca:	4605      	mov	r5, r0
 8008bcc:	9b00      	ldr	r3, [sp, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	e777      	b.n	8008ac4 <_dtoa_r+0x9cc>
 8008bd4:	f000 fc58 	bl	8009488 <__multadd>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4648      	mov	r0, r9
 8008be2:	f000 fc51 	bl	8009488 <__multadd>
 8008be6:	4605      	mov	r5, r0
 8008be8:	e7f0      	b.n	8008bcc <_dtoa_r+0xad4>
 8008bea:	f1bb 0f00 	cmp.w	fp, #0
 8008bee:	bfcc      	ite	gt
 8008bf0:	465e      	movgt	r6, fp
 8008bf2:	2601      	movle	r6, #1
 8008bf4:	4456      	add	r6, sl
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	9902      	ldr	r1, [sp, #8]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4648      	mov	r0, r9
 8008c00:	f000 fe30 	bl	8009864 <__lshift>
 8008c04:	4621      	mov	r1, r4
 8008c06:	9002      	str	r0, [sp, #8]
 8008c08:	f000 fe98 	bl	800993c <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	dcb4      	bgt.n	8008b7a <_dtoa_r+0xa82>
 8008c10:	d102      	bne.n	8008c18 <_dtoa_r+0xb20>
 8008c12:	9b00      	ldr	r3, [sp, #0]
 8008c14:	07db      	lsls	r3, r3, #31
 8008c16:	d4b0      	bmi.n	8008b7a <_dtoa_r+0xa82>
 8008c18:	4633      	mov	r3, r6
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c20:	2a30      	cmp	r2, #48	@ 0x30
 8008c22:	d0fa      	beq.n	8008c1a <_dtoa_r+0xb22>
 8008c24:	e4b5      	b.n	8008592 <_dtoa_r+0x49a>
 8008c26:	459a      	cmp	sl, r3
 8008c28:	d1a8      	bne.n	8008b7c <_dtoa_r+0xa84>
 8008c2a:	2331      	movs	r3, #49	@ 0x31
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	f88a 3000 	strb.w	r3, [sl]
 8008c34:	e4ad      	b.n	8008592 <_dtoa_r+0x49a>
 8008c36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008c94 <_dtoa_r+0xb9c>
 8008c3c:	b11b      	cbz	r3, 8008c46 <_dtoa_r+0xb4e>
 8008c3e:	f10a 0308 	add.w	r3, sl, #8
 8008c42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4650      	mov	r0, sl
 8008c48:	b017      	add	sp, #92	@ 0x5c
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f77f ae2e 	ble.w	80088b2 <_dtoa_r+0x7ba>
 8008c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c58:	9308      	str	r3, [sp, #32]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e64d      	b.n	80088fa <_dtoa_r+0x802>
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	f77f aed9 	ble.w	8008a18 <_dtoa_r+0x920>
 8008c66:	4656      	mov	r6, sl
 8008c68:	9802      	ldr	r0, [sp, #8]
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	f7ff f9bc 	bl	8007fe8 <quorem>
 8008c70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008c74:	f806 3b01 	strb.w	r3, [r6], #1
 8008c78:	eba6 020a 	sub.w	r2, r6, sl
 8008c7c:	4593      	cmp	fp, r2
 8008c7e:	ddb4      	ble.n	8008bea <_dtoa_r+0xaf2>
 8008c80:	9902      	ldr	r1, [sp, #8]
 8008c82:	2300      	movs	r3, #0
 8008c84:	220a      	movs	r2, #10
 8008c86:	4648      	mov	r0, r9
 8008c88:	f000 fbfe 	bl	8009488 <__multadd>
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	e7eb      	b.n	8008c68 <_dtoa_r+0xb70>
 8008c90:	0800b5f4 	.word	0x0800b5f4
 8008c94:	0800b578 	.word	0x0800b578

08008c98 <_free_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d041      	beq.n	8008d24 <_free_r+0x8c>
 8008ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca4:	1f0c      	subs	r4, r1, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bfb8      	it	lt
 8008caa:	18e4      	addlt	r4, r4, r3
 8008cac:	f7fd fb6e 	bl	800638c <__malloc_lock>
 8008cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d28 <_free_r+0x90>)
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x2c>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cc0:	f7fd bb6a 	b.w	8006398 <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x42>
 8008cc8:	6820      	ldr	r0, [r4, #0]
 8008cca:	1821      	adds	r1, r4, r0
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1809      	addeq	r1, r1, r0
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x1e>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x4c>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x42>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1850      	adds	r0, r2, r1
 8008ce8:	42a0      	cmp	r0, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x6c>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	4401      	add	r1, r0
 8008cf0:	1850      	adds	r0, r2, r1
 8008cf2:	4283      	cmp	r3, r0
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x22>
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	4408      	add	r0, r1
 8008d00:	6010      	str	r0, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x22>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x74>
 8008d06:	230c      	movs	r3, #12
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x22>
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	1821      	adds	r1, r4, r0
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1809      	addeq	r1, r1, r0
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x22>
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	bf00      	nop
 8008d28:	20000b98 	.word	0x20000b98

08008d2c <rshift>:
 8008d2c:	6903      	ldr	r3, [r0, #16]
 8008d2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d3a:	f100 0414 	add.w	r4, r0, #20
 8008d3e:	dd45      	ble.n	8008dcc <rshift+0xa0>
 8008d40:	f011 011f 	ands.w	r1, r1, #31
 8008d44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d4c:	d10c      	bne.n	8008d68 <rshift+0x3c>
 8008d4e:	f100 0710 	add.w	r7, r0, #16
 8008d52:	4629      	mov	r1, r5
 8008d54:	42b1      	cmp	r1, r6
 8008d56:	d334      	bcc.n	8008dc2 <rshift+0x96>
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	1eea      	subs	r2, r5, #3
 8008d5e:	4296      	cmp	r6, r2
 8008d60:	bf38      	it	cc
 8008d62:	2300      	movcc	r3, #0
 8008d64:	4423      	add	r3, r4
 8008d66:	e015      	b.n	8008d94 <rshift+0x68>
 8008d68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d6c:	f1c1 0820 	rsb	r8, r1, #32
 8008d70:	40cf      	lsrs	r7, r1
 8008d72:	f105 0e04 	add.w	lr, r5, #4
 8008d76:	46a1      	mov	r9, r4
 8008d78:	4576      	cmp	r6, lr
 8008d7a:	46f4      	mov	ip, lr
 8008d7c:	d815      	bhi.n	8008daa <rshift+0x7e>
 8008d7e:	1a9a      	subs	r2, r3, r2
 8008d80:	0092      	lsls	r2, r2, #2
 8008d82:	3a04      	subs	r2, #4
 8008d84:	3501      	adds	r5, #1
 8008d86:	42ae      	cmp	r6, r5
 8008d88:	bf38      	it	cc
 8008d8a:	2200      	movcc	r2, #0
 8008d8c:	18a3      	adds	r3, r4, r2
 8008d8e:	50a7      	str	r7, [r4, r2]
 8008d90:	b107      	cbz	r7, 8008d94 <rshift+0x68>
 8008d92:	3304      	adds	r3, #4
 8008d94:	1b1a      	subs	r2, r3, r4
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d9c:	bf08      	it	eq
 8008d9e:	2300      	moveq	r3, #0
 8008da0:	6102      	str	r2, [r0, #16]
 8008da2:	bf08      	it	eq
 8008da4:	6143      	streq	r3, [r0, #20]
 8008da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008daa:	f8dc c000 	ldr.w	ip, [ip]
 8008dae:	fa0c fc08 	lsl.w	ip, ip, r8
 8008db2:	ea4c 0707 	orr.w	r7, ip, r7
 8008db6:	f849 7b04 	str.w	r7, [r9], #4
 8008dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008dbe:	40cf      	lsrs	r7, r1
 8008dc0:	e7da      	b.n	8008d78 <rshift+0x4c>
 8008dc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008dc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008dca:	e7c3      	b.n	8008d54 <rshift+0x28>
 8008dcc:	4623      	mov	r3, r4
 8008dce:	e7e1      	b.n	8008d94 <rshift+0x68>

08008dd0 <__hexdig_fun>:
 8008dd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d802      	bhi.n	8008dde <__hexdig_fun+0xe>
 8008dd8:	3820      	subs	r0, #32
 8008dda:	b2c0      	uxtb	r0, r0
 8008ddc:	4770      	bx	lr
 8008dde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d801      	bhi.n	8008dea <__hexdig_fun+0x1a>
 8008de6:	3847      	subs	r0, #71	@ 0x47
 8008de8:	e7f7      	b.n	8008dda <__hexdig_fun+0xa>
 8008dea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d801      	bhi.n	8008df6 <__hexdig_fun+0x26>
 8008df2:	3827      	subs	r0, #39	@ 0x27
 8008df4:	e7f1      	b.n	8008dda <__hexdig_fun+0xa>
 8008df6:	2000      	movs	r0, #0
 8008df8:	4770      	bx	lr
	...

08008dfc <__gethex>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	b085      	sub	sp, #20
 8008e02:	468a      	mov	sl, r1
 8008e04:	9302      	str	r3, [sp, #8]
 8008e06:	680b      	ldr	r3, [r1, #0]
 8008e08:	9001      	str	r0, [sp, #4]
 8008e0a:	4690      	mov	r8, r2
 8008e0c:	1c9c      	adds	r4, r3, #2
 8008e0e:	46a1      	mov	r9, r4
 8008e10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e14:	2830      	cmp	r0, #48	@ 0x30
 8008e16:	d0fa      	beq.n	8008e0e <__gethex+0x12>
 8008e18:	eba9 0303 	sub.w	r3, r9, r3
 8008e1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e20:	f7ff ffd6 	bl	8008dd0 <__hexdig_fun>
 8008e24:	4605      	mov	r5, r0
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d168      	bne.n	8008efc <__gethex+0x100>
 8008e2a:	49a0      	ldr	r1, [pc, #640]	@ (80090ac <__gethex+0x2b0>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f7fe fffe 	bl	8007e30 <strncmp>
 8008e34:	4607      	mov	r7, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d167      	bne.n	8008f0a <__gethex+0x10e>
 8008e3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e3e:	4626      	mov	r6, r4
 8008e40:	f7ff ffc6 	bl	8008dd0 <__hexdig_fun>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d062      	beq.n	8008f0e <__gethex+0x112>
 8008e48:	4623      	mov	r3, r4
 8008e4a:	7818      	ldrb	r0, [r3, #0]
 8008e4c:	2830      	cmp	r0, #48	@ 0x30
 8008e4e:	4699      	mov	r9, r3
 8008e50:	f103 0301 	add.w	r3, r3, #1
 8008e54:	d0f9      	beq.n	8008e4a <__gethex+0x4e>
 8008e56:	f7ff ffbb 	bl	8008dd0 <__hexdig_fun>
 8008e5a:	fab0 f580 	clz	r5, r0
 8008e5e:	096d      	lsrs	r5, r5, #5
 8008e60:	f04f 0b01 	mov.w	fp, #1
 8008e64:	464a      	mov	r2, r9
 8008e66:	4616      	mov	r6, r2
 8008e68:	3201      	adds	r2, #1
 8008e6a:	7830      	ldrb	r0, [r6, #0]
 8008e6c:	f7ff ffb0 	bl	8008dd0 <__hexdig_fun>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d1f8      	bne.n	8008e66 <__gethex+0x6a>
 8008e74:	498d      	ldr	r1, [pc, #564]	@ (80090ac <__gethex+0x2b0>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7fe ffd9 	bl	8007e30 <strncmp>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d13f      	bne.n	8008f02 <__gethex+0x106>
 8008e82:	b944      	cbnz	r4, 8008e96 <__gethex+0x9a>
 8008e84:	1c74      	adds	r4, r6, #1
 8008e86:	4622      	mov	r2, r4
 8008e88:	4616      	mov	r6, r2
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	7830      	ldrb	r0, [r6, #0]
 8008e8e:	f7ff ff9f 	bl	8008dd0 <__hexdig_fun>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1f8      	bne.n	8008e88 <__gethex+0x8c>
 8008e96:	1ba4      	subs	r4, r4, r6
 8008e98:	00a7      	lsls	r7, r4, #2
 8008e9a:	7833      	ldrb	r3, [r6, #0]
 8008e9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ea0:	2b50      	cmp	r3, #80	@ 0x50
 8008ea2:	d13e      	bne.n	8008f22 <__gethex+0x126>
 8008ea4:	7873      	ldrb	r3, [r6, #1]
 8008ea6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ea8:	d033      	beq.n	8008f12 <__gethex+0x116>
 8008eaa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008eac:	d034      	beq.n	8008f18 <__gethex+0x11c>
 8008eae:	1c71      	adds	r1, r6, #1
 8008eb0:	2400      	movs	r4, #0
 8008eb2:	7808      	ldrb	r0, [r1, #0]
 8008eb4:	f7ff ff8c 	bl	8008dd0 <__hexdig_fun>
 8008eb8:	1e43      	subs	r3, r0, #1
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b18      	cmp	r3, #24
 8008ebe:	d830      	bhi.n	8008f22 <__gethex+0x126>
 8008ec0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ec4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ec8:	f7ff ff82 	bl	8008dd0 <__hexdig_fun>
 8008ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8008ed4:	f1bc 0f18 	cmp.w	ip, #24
 8008ed8:	f04f 030a 	mov.w	r3, #10
 8008edc:	d91e      	bls.n	8008f1c <__gethex+0x120>
 8008ede:	b104      	cbz	r4, 8008ee2 <__gethex+0xe6>
 8008ee0:	4252      	negs	r2, r2
 8008ee2:	4417      	add	r7, r2
 8008ee4:	f8ca 1000 	str.w	r1, [sl]
 8008ee8:	b1ed      	cbz	r5, 8008f26 <__gethex+0x12a>
 8008eea:	f1bb 0f00 	cmp.w	fp, #0
 8008eee:	bf0c      	ite	eq
 8008ef0:	2506      	moveq	r5, #6
 8008ef2:	2500      	movne	r5, #0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	b005      	add	sp, #20
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	2500      	movs	r5, #0
 8008efe:	462c      	mov	r4, r5
 8008f00:	e7b0      	b.n	8008e64 <__gethex+0x68>
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1c7      	bne.n	8008e96 <__gethex+0x9a>
 8008f06:	4627      	mov	r7, r4
 8008f08:	e7c7      	b.n	8008e9a <__gethex+0x9e>
 8008f0a:	464e      	mov	r6, r9
 8008f0c:	462f      	mov	r7, r5
 8008f0e:	2501      	movs	r5, #1
 8008f10:	e7c3      	b.n	8008e9a <__gethex+0x9e>
 8008f12:	2400      	movs	r4, #0
 8008f14:	1cb1      	adds	r1, r6, #2
 8008f16:	e7cc      	b.n	8008eb2 <__gethex+0xb6>
 8008f18:	2401      	movs	r4, #1
 8008f1a:	e7fb      	b.n	8008f14 <__gethex+0x118>
 8008f1c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f20:	e7ce      	b.n	8008ec0 <__gethex+0xc4>
 8008f22:	4631      	mov	r1, r6
 8008f24:	e7de      	b.n	8008ee4 <__gethex+0xe8>
 8008f26:	eba6 0309 	sub.w	r3, r6, r9
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	dc0a      	bgt.n	8008f48 <__gethex+0x14c>
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	f000 fa46 	bl	80093c4 <_Balloc>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	b940      	cbnz	r0, 8008f4e <__gethex+0x152>
 8008f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80090b0 <__gethex+0x2b4>)
 8008f3e:	4602      	mov	r2, r0
 8008f40:	21e4      	movs	r1, #228	@ 0xe4
 8008f42:	485c      	ldr	r0, [pc, #368]	@ (80090b4 <__gethex+0x2b8>)
 8008f44:	f001 fee2 	bl	800ad0c <__assert_func>
 8008f48:	3101      	adds	r1, #1
 8008f4a:	105b      	asrs	r3, r3, #1
 8008f4c:	e7ef      	b.n	8008f2e <__gethex+0x132>
 8008f4e:	f100 0a14 	add.w	sl, r0, #20
 8008f52:	2300      	movs	r3, #0
 8008f54:	4655      	mov	r5, sl
 8008f56:	469b      	mov	fp, r3
 8008f58:	45b1      	cmp	r9, r6
 8008f5a:	d337      	bcc.n	8008fcc <__gethex+0x1d0>
 8008f5c:	f845 bb04 	str.w	fp, [r5], #4
 8008f60:	eba5 050a 	sub.w	r5, r5, sl
 8008f64:	10ad      	asrs	r5, r5, #2
 8008f66:	6125      	str	r5, [r4, #16]
 8008f68:	4658      	mov	r0, fp
 8008f6a:	f000 fb1d 	bl	80095a8 <__hi0bits>
 8008f6e:	016d      	lsls	r5, r5, #5
 8008f70:	f8d8 6000 	ldr.w	r6, [r8]
 8008f74:	1a2d      	subs	r5, r5, r0
 8008f76:	42b5      	cmp	r5, r6
 8008f78:	dd54      	ble.n	8009024 <__gethex+0x228>
 8008f7a:	1bad      	subs	r5, r5, r6
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 fea9 	bl	8009cd6 <__any_on>
 8008f84:	4681      	mov	r9, r0
 8008f86:	b178      	cbz	r0, 8008fa8 <__gethex+0x1ac>
 8008f88:	1e6b      	subs	r3, r5, #1
 8008f8a:	1159      	asrs	r1, r3, #5
 8008f8c:	f003 021f 	and.w	r2, r3, #31
 8008f90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	fa09 f202 	lsl.w	r2, r9, r2
 8008f9c:	420a      	tst	r2, r1
 8008f9e:	d003      	beq.n	8008fa8 <__gethex+0x1ac>
 8008fa0:	454b      	cmp	r3, r9
 8008fa2:	dc36      	bgt.n	8009012 <__gethex+0x216>
 8008fa4:	f04f 0902 	mov.w	r9, #2
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff febe 	bl	8008d2c <rshift>
 8008fb0:	442f      	add	r7, r5
 8008fb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fb6:	42bb      	cmp	r3, r7
 8008fb8:	da42      	bge.n	8009040 <__gethex+0x244>
 8008fba:	9801      	ldr	r0, [sp, #4]
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	f000 fa41 	bl	8009444 <_Bfree>
 8008fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	25a3      	movs	r5, #163	@ 0xa3
 8008fca:	e793      	b.n	8008ef4 <__gethex+0xf8>
 8008fcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008fd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008fd2:	d012      	beq.n	8008ffa <__gethex+0x1fe>
 8008fd4:	2b20      	cmp	r3, #32
 8008fd6:	d104      	bne.n	8008fe2 <__gethex+0x1e6>
 8008fd8:	f845 bb04 	str.w	fp, [r5], #4
 8008fdc:	f04f 0b00 	mov.w	fp, #0
 8008fe0:	465b      	mov	r3, fp
 8008fe2:	7830      	ldrb	r0, [r6, #0]
 8008fe4:	9303      	str	r3, [sp, #12]
 8008fe6:	f7ff fef3 	bl	8008dd0 <__hexdig_fun>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	f000 000f 	and.w	r0, r0, #15
 8008ff0:	4098      	lsls	r0, r3
 8008ff2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	e7ae      	b.n	8008f58 <__gethex+0x15c>
 8008ffa:	45b1      	cmp	r9, r6
 8008ffc:	d8ea      	bhi.n	8008fd4 <__gethex+0x1d8>
 8008ffe:	492b      	ldr	r1, [pc, #172]	@ (80090ac <__gethex+0x2b0>)
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	4630      	mov	r0, r6
 8009006:	f7fe ff13 	bl	8007e30 <strncmp>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	2800      	cmp	r0, #0
 800900e:	d1e1      	bne.n	8008fd4 <__gethex+0x1d8>
 8009010:	e7a2      	b.n	8008f58 <__gethex+0x15c>
 8009012:	1ea9      	subs	r1, r5, #2
 8009014:	4620      	mov	r0, r4
 8009016:	f000 fe5e 	bl	8009cd6 <__any_on>
 800901a:	2800      	cmp	r0, #0
 800901c:	d0c2      	beq.n	8008fa4 <__gethex+0x1a8>
 800901e:	f04f 0903 	mov.w	r9, #3
 8009022:	e7c1      	b.n	8008fa8 <__gethex+0x1ac>
 8009024:	da09      	bge.n	800903a <__gethex+0x23e>
 8009026:	1b75      	subs	r5, r6, r5
 8009028:	4621      	mov	r1, r4
 800902a:	9801      	ldr	r0, [sp, #4]
 800902c:	462a      	mov	r2, r5
 800902e:	f000 fc19 	bl	8009864 <__lshift>
 8009032:	1b7f      	subs	r7, r7, r5
 8009034:	4604      	mov	r4, r0
 8009036:	f100 0a14 	add.w	sl, r0, #20
 800903a:	f04f 0900 	mov.w	r9, #0
 800903e:	e7b8      	b.n	8008fb2 <__gethex+0x1b6>
 8009040:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009044:	42bd      	cmp	r5, r7
 8009046:	dd6f      	ble.n	8009128 <__gethex+0x32c>
 8009048:	1bed      	subs	r5, r5, r7
 800904a:	42ae      	cmp	r6, r5
 800904c:	dc34      	bgt.n	80090b8 <__gethex+0x2bc>
 800904e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d022      	beq.n	800909c <__gethex+0x2a0>
 8009056:	2b03      	cmp	r3, #3
 8009058:	d024      	beq.n	80090a4 <__gethex+0x2a8>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d115      	bne.n	800908a <__gethex+0x28e>
 800905e:	42ae      	cmp	r6, r5
 8009060:	d113      	bne.n	800908a <__gethex+0x28e>
 8009062:	2e01      	cmp	r6, #1
 8009064:	d10b      	bne.n	800907e <__gethex+0x282>
 8009066:	9a02      	ldr	r2, [sp, #8]
 8009068:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	2301      	movs	r3, #1
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	f8ca 3000 	str.w	r3, [sl]
 8009076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009078:	2562      	movs	r5, #98	@ 0x62
 800907a:	601c      	str	r4, [r3, #0]
 800907c:	e73a      	b.n	8008ef4 <__gethex+0xf8>
 800907e:	1e71      	subs	r1, r6, #1
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fe28 	bl	8009cd6 <__any_on>
 8009086:	2800      	cmp	r0, #0
 8009088:	d1ed      	bne.n	8009066 <__gethex+0x26a>
 800908a:	9801      	ldr	r0, [sp, #4]
 800908c:	4621      	mov	r1, r4
 800908e:	f000 f9d9 	bl	8009444 <_Bfree>
 8009092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009094:	2300      	movs	r3, #0
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	2550      	movs	r5, #80	@ 0x50
 800909a:	e72b      	b.n	8008ef4 <__gethex+0xf8>
 800909c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f3      	bne.n	800908a <__gethex+0x28e>
 80090a2:	e7e0      	b.n	8009066 <__gethex+0x26a>
 80090a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1dd      	bne.n	8009066 <__gethex+0x26a>
 80090aa:	e7ee      	b.n	800908a <__gethex+0x28e>
 80090ac:	0800b53c 	.word	0x0800b53c
 80090b0:	0800b5f4 	.word	0x0800b5f4
 80090b4:	0800b605 	.word	0x0800b605
 80090b8:	1e6f      	subs	r7, r5, #1
 80090ba:	f1b9 0f00 	cmp.w	r9, #0
 80090be:	d130      	bne.n	8009122 <__gethex+0x326>
 80090c0:	b127      	cbz	r7, 80090cc <__gethex+0x2d0>
 80090c2:	4639      	mov	r1, r7
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fe06 	bl	8009cd6 <__any_on>
 80090ca:	4681      	mov	r9, r0
 80090cc:	117a      	asrs	r2, r7, #5
 80090ce:	2301      	movs	r3, #1
 80090d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090d4:	f007 071f 	and.w	r7, r7, #31
 80090d8:	40bb      	lsls	r3, r7
 80090da:	4213      	tst	r3, r2
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	bf18      	it	ne
 80090e2:	f049 0902 	orrne.w	r9, r9, #2
 80090e6:	f7ff fe21 	bl	8008d2c <rshift>
 80090ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80090ee:	1b76      	subs	r6, r6, r5
 80090f0:	2502      	movs	r5, #2
 80090f2:	f1b9 0f00 	cmp.w	r9, #0
 80090f6:	d047      	beq.n	8009188 <__gethex+0x38c>
 80090f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d015      	beq.n	800912c <__gethex+0x330>
 8009100:	2b03      	cmp	r3, #3
 8009102:	d017      	beq.n	8009134 <__gethex+0x338>
 8009104:	2b01      	cmp	r3, #1
 8009106:	d109      	bne.n	800911c <__gethex+0x320>
 8009108:	f019 0f02 	tst.w	r9, #2
 800910c:	d006      	beq.n	800911c <__gethex+0x320>
 800910e:	f8da 3000 	ldr.w	r3, [sl]
 8009112:	ea49 0903 	orr.w	r9, r9, r3
 8009116:	f019 0f01 	tst.w	r9, #1
 800911a:	d10e      	bne.n	800913a <__gethex+0x33e>
 800911c:	f045 0510 	orr.w	r5, r5, #16
 8009120:	e032      	b.n	8009188 <__gethex+0x38c>
 8009122:	f04f 0901 	mov.w	r9, #1
 8009126:	e7d1      	b.n	80090cc <__gethex+0x2d0>
 8009128:	2501      	movs	r5, #1
 800912a:	e7e2      	b.n	80090f2 <__gethex+0x2f6>
 800912c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800912e:	f1c3 0301 	rsb	r3, r3, #1
 8009132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <__gethex+0x320>
 800913a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800913e:	f104 0314 	add.w	r3, r4, #20
 8009142:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009146:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800914a:	f04f 0c00 	mov.w	ip, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f853 2b04 	ldr.w	r2, [r3], #4
 8009154:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009158:	d01b      	beq.n	8009192 <__gethex+0x396>
 800915a:	3201      	adds	r2, #1
 800915c:	6002      	str	r2, [r0, #0]
 800915e:	2d02      	cmp	r5, #2
 8009160:	f104 0314 	add.w	r3, r4, #20
 8009164:	d13c      	bne.n	80091e0 <__gethex+0x3e4>
 8009166:	f8d8 2000 	ldr.w	r2, [r8]
 800916a:	3a01      	subs	r2, #1
 800916c:	42b2      	cmp	r2, r6
 800916e:	d109      	bne.n	8009184 <__gethex+0x388>
 8009170:	1171      	asrs	r1, r6, #5
 8009172:	2201      	movs	r2, #1
 8009174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009178:	f006 061f 	and.w	r6, r6, #31
 800917c:	fa02 f606 	lsl.w	r6, r2, r6
 8009180:	421e      	tst	r6, r3
 8009182:	d13a      	bne.n	80091fa <__gethex+0x3fe>
 8009184:	f045 0520 	orr.w	r5, r5, #32
 8009188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800918a:	601c      	str	r4, [r3, #0]
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	601f      	str	r7, [r3, #0]
 8009190:	e6b0      	b.n	8008ef4 <__gethex+0xf8>
 8009192:	4299      	cmp	r1, r3
 8009194:	f843 cc04 	str.w	ip, [r3, #-4]
 8009198:	d8d9      	bhi.n	800914e <__gethex+0x352>
 800919a:	68a3      	ldr	r3, [r4, #8]
 800919c:	459b      	cmp	fp, r3
 800919e:	db17      	blt.n	80091d0 <__gethex+0x3d4>
 80091a0:	6861      	ldr	r1, [r4, #4]
 80091a2:	9801      	ldr	r0, [sp, #4]
 80091a4:	3101      	adds	r1, #1
 80091a6:	f000 f90d 	bl	80093c4 <_Balloc>
 80091aa:	4681      	mov	r9, r0
 80091ac:	b918      	cbnz	r0, 80091b6 <__gethex+0x3ba>
 80091ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <__gethex+0x41c>)
 80091b0:	4602      	mov	r2, r0
 80091b2:	2184      	movs	r1, #132	@ 0x84
 80091b4:	e6c5      	b.n	8008f42 <__gethex+0x146>
 80091b6:	6922      	ldr	r2, [r4, #16]
 80091b8:	3202      	adds	r2, #2
 80091ba:	f104 010c 	add.w	r1, r4, #12
 80091be:	0092      	lsls	r2, r2, #2
 80091c0:	300c      	adds	r0, #12
 80091c2:	f7fe fef8 	bl	8007fb6 <memcpy>
 80091c6:	4621      	mov	r1, r4
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	f000 f93b 	bl	8009444 <_Bfree>
 80091ce:	464c      	mov	r4, r9
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091d8:	6122      	str	r2, [r4, #16]
 80091da:	2201      	movs	r2, #1
 80091dc:	615a      	str	r2, [r3, #20]
 80091de:	e7be      	b.n	800915e <__gethex+0x362>
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	455a      	cmp	r2, fp
 80091e4:	dd0b      	ble.n	80091fe <__gethex+0x402>
 80091e6:	2101      	movs	r1, #1
 80091e8:	4620      	mov	r0, r4
 80091ea:	f7ff fd9f 	bl	8008d2c <rshift>
 80091ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091f2:	3701      	adds	r7, #1
 80091f4:	42bb      	cmp	r3, r7
 80091f6:	f6ff aee0 	blt.w	8008fba <__gethex+0x1be>
 80091fa:	2501      	movs	r5, #1
 80091fc:	e7c2      	b.n	8009184 <__gethex+0x388>
 80091fe:	f016 061f 	ands.w	r6, r6, #31
 8009202:	d0fa      	beq.n	80091fa <__gethex+0x3fe>
 8009204:	4453      	add	r3, sl
 8009206:	f1c6 0620 	rsb	r6, r6, #32
 800920a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800920e:	f000 f9cb 	bl	80095a8 <__hi0bits>
 8009212:	42b0      	cmp	r0, r6
 8009214:	dbe7      	blt.n	80091e6 <__gethex+0x3ea>
 8009216:	e7f0      	b.n	80091fa <__gethex+0x3fe>
 8009218:	0800b5f4 	.word	0x0800b5f4

0800921c <L_shift>:
 800921c:	f1c2 0208 	rsb	r2, r2, #8
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	f1c2 0620 	rsb	r6, r2, #32
 8009228:	6843      	ldr	r3, [r0, #4]
 800922a:	6804      	ldr	r4, [r0, #0]
 800922c:	fa03 f506 	lsl.w	r5, r3, r6
 8009230:	432c      	orrs	r4, r5
 8009232:	40d3      	lsrs	r3, r2
 8009234:	6004      	str	r4, [r0, #0]
 8009236:	f840 3f04 	str.w	r3, [r0, #4]!
 800923a:	4288      	cmp	r0, r1
 800923c:	d3f4      	bcc.n	8009228 <L_shift+0xc>
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <__match>:
 8009240:	b530      	push	{r4, r5, lr}
 8009242:	6803      	ldr	r3, [r0, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924a:	b914      	cbnz	r4, 8009252 <__match+0x12>
 800924c:	6003      	str	r3, [r0, #0]
 800924e:	2001      	movs	r0, #1
 8009250:	bd30      	pop	{r4, r5, pc}
 8009252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009256:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800925a:	2d19      	cmp	r5, #25
 800925c:	bf98      	it	ls
 800925e:	3220      	addls	r2, #32
 8009260:	42a2      	cmp	r2, r4
 8009262:	d0f0      	beq.n	8009246 <__match+0x6>
 8009264:	2000      	movs	r0, #0
 8009266:	e7f3      	b.n	8009250 <__match+0x10>

08009268 <__hexnan>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	6801      	ldr	r1, [r0, #0]
 8009270:	115e      	asrs	r6, r3, #5
 8009272:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009276:	f013 031f 	ands.w	r3, r3, #31
 800927a:	b087      	sub	sp, #28
 800927c:	bf18      	it	ne
 800927e:	3604      	addne	r6, #4
 8009280:	2500      	movs	r5, #0
 8009282:	1f37      	subs	r7, r6, #4
 8009284:	4682      	mov	sl, r0
 8009286:	4690      	mov	r8, r2
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	f846 5c04 	str.w	r5, [r6, #-4]
 800928e:	46b9      	mov	r9, r7
 8009290:	463c      	mov	r4, r7
 8009292:	9502      	str	r5, [sp, #8]
 8009294:	46ab      	mov	fp, r5
 8009296:	784a      	ldrb	r2, [r1, #1]
 8009298:	1c4b      	adds	r3, r1, #1
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	b342      	cbz	r2, 80092f0 <__hexnan+0x88>
 800929e:	4610      	mov	r0, r2
 80092a0:	9105      	str	r1, [sp, #20]
 80092a2:	9204      	str	r2, [sp, #16]
 80092a4:	f7ff fd94 	bl	8008dd0 <__hexdig_fun>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d151      	bne.n	8009350 <__hexnan+0xe8>
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	9905      	ldr	r1, [sp, #20]
 80092b0:	2a20      	cmp	r2, #32
 80092b2:	d818      	bhi.n	80092e6 <__hexnan+0x7e>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	459b      	cmp	fp, r3
 80092b8:	dd13      	ble.n	80092e2 <__hexnan+0x7a>
 80092ba:	454c      	cmp	r4, r9
 80092bc:	d206      	bcs.n	80092cc <__hexnan+0x64>
 80092be:	2d07      	cmp	r5, #7
 80092c0:	dc04      	bgt.n	80092cc <__hexnan+0x64>
 80092c2:	462a      	mov	r2, r5
 80092c4:	4649      	mov	r1, r9
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff ffa8 	bl	800921c <L_shift>
 80092cc:	4544      	cmp	r4, r8
 80092ce:	d952      	bls.n	8009376 <__hexnan+0x10e>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f1a4 0904 	sub.w	r9, r4, #4
 80092d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80092da:	f8cd b008 	str.w	fp, [sp, #8]
 80092de:	464c      	mov	r4, r9
 80092e0:	461d      	mov	r5, r3
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	e7d7      	b.n	8009296 <__hexnan+0x2e>
 80092e6:	2a29      	cmp	r2, #41	@ 0x29
 80092e8:	d157      	bne.n	800939a <__hexnan+0x132>
 80092ea:	3102      	adds	r1, #2
 80092ec:	f8ca 1000 	str.w	r1, [sl]
 80092f0:	f1bb 0f00 	cmp.w	fp, #0
 80092f4:	d051      	beq.n	800939a <__hexnan+0x132>
 80092f6:	454c      	cmp	r4, r9
 80092f8:	d206      	bcs.n	8009308 <__hexnan+0xa0>
 80092fa:	2d07      	cmp	r5, #7
 80092fc:	dc04      	bgt.n	8009308 <__hexnan+0xa0>
 80092fe:	462a      	mov	r2, r5
 8009300:	4649      	mov	r1, r9
 8009302:	4620      	mov	r0, r4
 8009304:	f7ff ff8a 	bl	800921c <L_shift>
 8009308:	4544      	cmp	r4, r8
 800930a:	d936      	bls.n	800937a <__hexnan+0x112>
 800930c:	f1a8 0204 	sub.w	r2, r8, #4
 8009310:	4623      	mov	r3, r4
 8009312:	f853 1b04 	ldr.w	r1, [r3], #4
 8009316:	f842 1f04 	str.w	r1, [r2, #4]!
 800931a:	429f      	cmp	r7, r3
 800931c:	d2f9      	bcs.n	8009312 <__hexnan+0xaa>
 800931e:	1b3b      	subs	r3, r7, r4
 8009320:	f023 0303 	bic.w	r3, r3, #3
 8009324:	3304      	adds	r3, #4
 8009326:	3401      	adds	r4, #1
 8009328:	3e03      	subs	r6, #3
 800932a:	42b4      	cmp	r4, r6
 800932c:	bf88      	it	hi
 800932e:	2304      	movhi	r3, #4
 8009330:	4443      	add	r3, r8
 8009332:	2200      	movs	r2, #0
 8009334:	f843 2b04 	str.w	r2, [r3], #4
 8009338:	429f      	cmp	r7, r3
 800933a:	d2fb      	bcs.n	8009334 <__hexnan+0xcc>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	b91b      	cbnz	r3, 8009348 <__hexnan+0xe0>
 8009340:	4547      	cmp	r7, r8
 8009342:	d128      	bne.n	8009396 <__hexnan+0x12e>
 8009344:	2301      	movs	r3, #1
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	2005      	movs	r0, #5
 800934a:	b007      	add	sp, #28
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	2d08      	cmp	r5, #8
 8009354:	f10b 0b01 	add.w	fp, fp, #1
 8009358:	dd06      	ble.n	8009368 <__hexnan+0x100>
 800935a:	4544      	cmp	r4, r8
 800935c:	d9c1      	bls.n	80092e2 <__hexnan+0x7a>
 800935e:	2300      	movs	r3, #0
 8009360:	f844 3c04 	str.w	r3, [r4, #-4]
 8009364:	2501      	movs	r5, #1
 8009366:	3c04      	subs	r4, #4
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	f000 000f 	and.w	r0, r0, #15
 800936e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	e7b5      	b.n	80092e2 <__hexnan+0x7a>
 8009376:	2508      	movs	r5, #8
 8009378:	e7b3      	b.n	80092e2 <__hexnan+0x7a>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0dd      	beq.n	800933c <__hexnan+0xd4>
 8009380:	f1c3 0320 	rsb	r3, r3, #32
 8009384:	f04f 32ff 	mov.w	r2, #4294967295
 8009388:	40da      	lsrs	r2, r3
 800938a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800938e:	4013      	ands	r3, r2
 8009390:	f846 3c04 	str.w	r3, [r6, #-4]
 8009394:	e7d2      	b.n	800933c <__hexnan+0xd4>
 8009396:	3f04      	subs	r7, #4
 8009398:	e7d0      	b.n	800933c <__hexnan+0xd4>
 800939a:	2004      	movs	r0, #4
 800939c:	e7d5      	b.n	800934a <__hexnan+0xe2>

0800939e <__ascii_mbtowc>:
 800939e:	b082      	sub	sp, #8
 80093a0:	b901      	cbnz	r1, 80093a4 <__ascii_mbtowc+0x6>
 80093a2:	a901      	add	r1, sp, #4
 80093a4:	b142      	cbz	r2, 80093b8 <__ascii_mbtowc+0x1a>
 80093a6:	b14b      	cbz	r3, 80093bc <__ascii_mbtowc+0x1e>
 80093a8:	7813      	ldrb	r3, [r2, #0]
 80093aa:	600b      	str	r3, [r1, #0]
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	1e10      	subs	r0, r2, #0
 80093b0:	bf18      	it	ne
 80093b2:	2001      	movne	r0, #1
 80093b4:	b002      	add	sp, #8
 80093b6:	4770      	bx	lr
 80093b8:	4610      	mov	r0, r2
 80093ba:	e7fb      	b.n	80093b4 <__ascii_mbtowc+0x16>
 80093bc:	f06f 0001 	mvn.w	r0, #1
 80093c0:	e7f8      	b.n	80093b4 <__ascii_mbtowc+0x16>
	...

080093c4 <_Balloc>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	69c6      	ldr	r6, [r0, #28]
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	b976      	cbnz	r6, 80093ec <_Balloc+0x28>
 80093ce:	2010      	movs	r0, #16
 80093d0:	f7fc ff2a 	bl	8006228 <malloc>
 80093d4:	4602      	mov	r2, r0
 80093d6:	61e0      	str	r0, [r4, #28]
 80093d8:	b920      	cbnz	r0, 80093e4 <_Balloc+0x20>
 80093da:	4b18      	ldr	r3, [pc, #96]	@ (800943c <_Balloc+0x78>)
 80093dc:	4818      	ldr	r0, [pc, #96]	@ (8009440 <_Balloc+0x7c>)
 80093de:	216b      	movs	r1, #107	@ 0x6b
 80093e0:	f001 fc94 	bl	800ad0c <__assert_func>
 80093e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e8:	6006      	str	r6, [r0, #0]
 80093ea:	60c6      	str	r6, [r0, #12]
 80093ec:	69e6      	ldr	r6, [r4, #28]
 80093ee:	68f3      	ldr	r3, [r6, #12]
 80093f0:	b183      	cbz	r3, 8009414 <_Balloc+0x50>
 80093f2:	69e3      	ldr	r3, [r4, #28]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093fa:	b9b8      	cbnz	r0, 800942c <_Balloc+0x68>
 80093fc:	2101      	movs	r1, #1
 80093fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009402:	1d72      	adds	r2, r6, #5
 8009404:	0092      	lsls	r2, r2, #2
 8009406:	4620      	mov	r0, r4
 8009408:	f001 fc9e 	bl	800ad48 <_calloc_r>
 800940c:	b160      	cbz	r0, 8009428 <_Balloc+0x64>
 800940e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009412:	e00e      	b.n	8009432 <_Balloc+0x6e>
 8009414:	2221      	movs	r2, #33	@ 0x21
 8009416:	2104      	movs	r1, #4
 8009418:	4620      	mov	r0, r4
 800941a:	f001 fc95 	bl	800ad48 <_calloc_r>
 800941e:	69e3      	ldr	r3, [r4, #28]
 8009420:	60f0      	str	r0, [r6, #12]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e4      	bne.n	80093f2 <_Balloc+0x2e>
 8009428:	2000      	movs	r0, #0
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	6802      	ldr	r2, [r0, #0]
 800942e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009432:	2300      	movs	r3, #0
 8009434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009438:	e7f7      	b.n	800942a <_Balloc+0x66>
 800943a:	bf00      	nop
 800943c:	0800b585 	.word	0x0800b585
 8009440:	0800b665 	.word	0x0800b665

08009444 <_Bfree>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	69c6      	ldr	r6, [r0, #28]
 8009448:	4605      	mov	r5, r0
 800944a:	460c      	mov	r4, r1
 800944c:	b976      	cbnz	r6, 800946c <_Bfree+0x28>
 800944e:	2010      	movs	r0, #16
 8009450:	f7fc feea 	bl	8006228 <malloc>
 8009454:	4602      	mov	r2, r0
 8009456:	61e8      	str	r0, [r5, #28]
 8009458:	b920      	cbnz	r0, 8009464 <_Bfree+0x20>
 800945a:	4b09      	ldr	r3, [pc, #36]	@ (8009480 <_Bfree+0x3c>)
 800945c:	4809      	ldr	r0, [pc, #36]	@ (8009484 <_Bfree+0x40>)
 800945e:	218f      	movs	r1, #143	@ 0x8f
 8009460:	f001 fc54 	bl	800ad0c <__assert_func>
 8009464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009468:	6006      	str	r6, [r0, #0]
 800946a:	60c6      	str	r6, [r0, #12]
 800946c:	b13c      	cbz	r4, 800947e <_Bfree+0x3a>
 800946e:	69eb      	ldr	r3, [r5, #28]
 8009470:	6862      	ldr	r2, [r4, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009478:	6021      	str	r1, [r4, #0]
 800947a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	0800b585 	.word	0x0800b585
 8009484:	0800b665 	.word	0x0800b665

08009488 <__multadd>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	690d      	ldr	r5, [r1, #16]
 800948e:	4607      	mov	r7, r0
 8009490:	460c      	mov	r4, r1
 8009492:	461e      	mov	r6, r3
 8009494:	f101 0c14 	add.w	ip, r1, #20
 8009498:	2000      	movs	r0, #0
 800949a:	f8dc 3000 	ldr.w	r3, [ip]
 800949e:	b299      	uxth	r1, r3
 80094a0:	fb02 6101 	mla	r1, r2, r1, r6
 80094a4:	0c1e      	lsrs	r6, r3, #16
 80094a6:	0c0b      	lsrs	r3, r1, #16
 80094a8:	fb02 3306 	mla	r3, r2, r6, r3
 80094ac:	b289      	uxth	r1, r1
 80094ae:	3001      	adds	r0, #1
 80094b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094b4:	4285      	cmp	r5, r0
 80094b6:	f84c 1b04 	str.w	r1, [ip], #4
 80094ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094be:	dcec      	bgt.n	800949a <__multadd+0x12>
 80094c0:	b30e      	cbz	r6, 8009506 <__multadd+0x7e>
 80094c2:	68a3      	ldr	r3, [r4, #8]
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dc19      	bgt.n	80094fc <__multadd+0x74>
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	4638      	mov	r0, r7
 80094cc:	3101      	adds	r1, #1
 80094ce:	f7ff ff79 	bl	80093c4 <_Balloc>
 80094d2:	4680      	mov	r8, r0
 80094d4:	b928      	cbnz	r0, 80094e2 <__multadd+0x5a>
 80094d6:	4602      	mov	r2, r0
 80094d8:	4b0c      	ldr	r3, [pc, #48]	@ (800950c <__multadd+0x84>)
 80094da:	480d      	ldr	r0, [pc, #52]	@ (8009510 <__multadd+0x88>)
 80094dc:	21ba      	movs	r1, #186	@ 0xba
 80094de:	f001 fc15 	bl	800ad0c <__assert_func>
 80094e2:	6922      	ldr	r2, [r4, #16]
 80094e4:	3202      	adds	r2, #2
 80094e6:	f104 010c 	add.w	r1, r4, #12
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	300c      	adds	r0, #12
 80094ee:	f7fe fd62 	bl	8007fb6 <memcpy>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff ffa5 	bl	8009444 <_Bfree>
 80094fa:	4644      	mov	r4, r8
 80094fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009500:	3501      	adds	r5, #1
 8009502:	615e      	str	r6, [r3, #20]
 8009504:	6125      	str	r5, [r4, #16]
 8009506:	4620      	mov	r0, r4
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	0800b5f4 	.word	0x0800b5f4
 8009510:	0800b665 	.word	0x0800b665

08009514 <__s2b>:
 8009514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009518:	460c      	mov	r4, r1
 800951a:	4615      	mov	r5, r2
 800951c:	461f      	mov	r7, r3
 800951e:	2209      	movs	r2, #9
 8009520:	3308      	adds	r3, #8
 8009522:	4606      	mov	r6, r0
 8009524:	fb93 f3f2 	sdiv	r3, r3, r2
 8009528:	2100      	movs	r1, #0
 800952a:	2201      	movs	r2, #1
 800952c:	429a      	cmp	r2, r3
 800952e:	db09      	blt.n	8009544 <__s2b+0x30>
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ff47 	bl	80093c4 <_Balloc>
 8009536:	b940      	cbnz	r0, 800954a <__s2b+0x36>
 8009538:	4602      	mov	r2, r0
 800953a:	4b19      	ldr	r3, [pc, #100]	@ (80095a0 <__s2b+0x8c>)
 800953c:	4819      	ldr	r0, [pc, #100]	@ (80095a4 <__s2b+0x90>)
 800953e:	21d3      	movs	r1, #211	@ 0xd3
 8009540:	f001 fbe4 	bl	800ad0c <__assert_func>
 8009544:	0052      	lsls	r2, r2, #1
 8009546:	3101      	adds	r1, #1
 8009548:	e7f0      	b.n	800952c <__s2b+0x18>
 800954a:	9b08      	ldr	r3, [sp, #32]
 800954c:	6143      	str	r3, [r0, #20]
 800954e:	2d09      	cmp	r5, #9
 8009550:	f04f 0301 	mov.w	r3, #1
 8009554:	6103      	str	r3, [r0, #16]
 8009556:	dd16      	ble.n	8009586 <__s2b+0x72>
 8009558:	f104 0909 	add.w	r9, r4, #9
 800955c:	46c8      	mov	r8, r9
 800955e:	442c      	add	r4, r5
 8009560:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009564:	4601      	mov	r1, r0
 8009566:	3b30      	subs	r3, #48	@ 0x30
 8009568:	220a      	movs	r2, #10
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ff8c 	bl	8009488 <__multadd>
 8009570:	45a0      	cmp	r8, r4
 8009572:	d1f5      	bne.n	8009560 <__s2b+0x4c>
 8009574:	f1a5 0408 	sub.w	r4, r5, #8
 8009578:	444c      	add	r4, r9
 800957a:	1b2d      	subs	r5, r5, r4
 800957c:	1963      	adds	r3, r4, r5
 800957e:	42bb      	cmp	r3, r7
 8009580:	db04      	blt.n	800958c <__s2b+0x78>
 8009582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009586:	340a      	adds	r4, #10
 8009588:	2509      	movs	r5, #9
 800958a:	e7f6      	b.n	800957a <__s2b+0x66>
 800958c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009590:	4601      	mov	r1, r0
 8009592:	3b30      	subs	r3, #48	@ 0x30
 8009594:	220a      	movs	r2, #10
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ff76 	bl	8009488 <__multadd>
 800959c:	e7ee      	b.n	800957c <__s2b+0x68>
 800959e:	bf00      	nop
 80095a0:	0800b5f4 	.word	0x0800b5f4
 80095a4:	0800b665 	.word	0x0800b665

080095a8 <__hi0bits>:
 80095a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095ac:	4603      	mov	r3, r0
 80095ae:	bf36      	itet	cc
 80095b0:	0403      	lslcc	r3, r0, #16
 80095b2:	2000      	movcs	r0, #0
 80095b4:	2010      	movcc	r0, #16
 80095b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095ba:	bf3c      	itt	cc
 80095bc:	021b      	lslcc	r3, r3, #8
 80095be:	3008      	addcc	r0, #8
 80095c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095c4:	bf3c      	itt	cc
 80095c6:	011b      	lslcc	r3, r3, #4
 80095c8:	3004      	addcc	r0, #4
 80095ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ce:	bf3c      	itt	cc
 80095d0:	009b      	lslcc	r3, r3, #2
 80095d2:	3002      	addcc	r0, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db05      	blt.n	80095e4 <__hi0bits+0x3c>
 80095d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80095dc:	f100 0001 	add.w	r0, r0, #1
 80095e0:	bf08      	it	eq
 80095e2:	2020      	moveq	r0, #32
 80095e4:	4770      	bx	lr

080095e6 <__lo0bits>:
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	4602      	mov	r2, r0
 80095ea:	f013 0007 	ands.w	r0, r3, #7
 80095ee:	d00b      	beq.n	8009608 <__lo0bits+0x22>
 80095f0:	07d9      	lsls	r1, r3, #31
 80095f2:	d421      	bmi.n	8009638 <__lo0bits+0x52>
 80095f4:	0798      	lsls	r0, r3, #30
 80095f6:	bf49      	itett	mi
 80095f8:	085b      	lsrmi	r3, r3, #1
 80095fa:	089b      	lsrpl	r3, r3, #2
 80095fc:	2001      	movmi	r0, #1
 80095fe:	6013      	strmi	r3, [r2, #0]
 8009600:	bf5c      	itt	pl
 8009602:	6013      	strpl	r3, [r2, #0]
 8009604:	2002      	movpl	r0, #2
 8009606:	4770      	bx	lr
 8009608:	b299      	uxth	r1, r3
 800960a:	b909      	cbnz	r1, 8009610 <__lo0bits+0x2a>
 800960c:	0c1b      	lsrs	r3, r3, #16
 800960e:	2010      	movs	r0, #16
 8009610:	b2d9      	uxtb	r1, r3
 8009612:	b909      	cbnz	r1, 8009618 <__lo0bits+0x32>
 8009614:	3008      	adds	r0, #8
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	0719      	lsls	r1, r3, #28
 800961a:	bf04      	itt	eq
 800961c:	091b      	lsreq	r3, r3, #4
 800961e:	3004      	addeq	r0, #4
 8009620:	0799      	lsls	r1, r3, #30
 8009622:	bf04      	itt	eq
 8009624:	089b      	lsreq	r3, r3, #2
 8009626:	3002      	addeq	r0, #2
 8009628:	07d9      	lsls	r1, r3, #31
 800962a:	d403      	bmi.n	8009634 <__lo0bits+0x4e>
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	f100 0001 	add.w	r0, r0, #1
 8009632:	d003      	beq.n	800963c <__lo0bits+0x56>
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	4770      	bx	lr
 8009638:	2000      	movs	r0, #0
 800963a:	4770      	bx	lr
 800963c:	2020      	movs	r0, #32
 800963e:	4770      	bx	lr

08009640 <__i2b>:
 8009640:	b510      	push	{r4, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	2101      	movs	r1, #1
 8009646:	f7ff febd 	bl	80093c4 <_Balloc>
 800964a:	4602      	mov	r2, r0
 800964c:	b928      	cbnz	r0, 800965a <__i2b+0x1a>
 800964e:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <__i2b+0x24>)
 8009650:	4805      	ldr	r0, [pc, #20]	@ (8009668 <__i2b+0x28>)
 8009652:	f240 1145 	movw	r1, #325	@ 0x145
 8009656:	f001 fb59 	bl	800ad0c <__assert_func>
 800965a:	2301      	movs	r3, #1
 800965c:	6144      	str	r4, [r0, #20]
 800965e:	6103      	str	r3, [r0, #16]
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop
 8009664:	0800b5f4 	.word	0x0800b5f4
 8009668:	0800b665 	.word	0x0800b665

0800966c <__multiply>:
 800966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	4617      	mov	r7, r2
 8009672:	690a      	ldr	r2, [r1, #16]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	bfa8      	it	ge
 800967a:	463b      	movge	r3, r7
 800967c:	4689      	mov	r9, r1
 800967e:	bfa4      	itt	ge
 8009680:	460f      	movge	r7, r1
 8009682:	4699      	movge	r9, r3
 8009684:	693d      	ldr	r5, [r7, #16]
 8009686:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	eb05 060a 	add.w	r6, r5, sl
 8009692:	42b3      	cmp	r3, r6
 8009694:	b085      	sub	sp, #20
 8009696:	bfb8      	it	lt
 8009698:	3101      	addlt	r1, #1
 800969a:	f7ff fe93 	bl	80093c4 <_Balloc>
 800969e:	b930      	cbnz	r0, 80096ae <__multiply+0x42>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4b41      	ldr	r3, [pc, #260]	@ (80097a8 <__multiply+0x13c>)
 80096a4:	4841      	ldr	r0, [pc, #260]	@ (80097ac <__multiply+0x140>)
 80096a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096aa:	f001 fb2f 	bl	800ad0c <__assert_func>
 80096ae:	f100 0414 	add.w	r4, r0, #20
 80096b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80096b6:	4623      	mov	r3, r4
 80096b8:	2200      	movs	r2, #0
 80096ba:	4573      	cmp	r3, lr
 80096bc:	d320      	bcc.n	8009700 <__multiply+0x94>
 80096be:	f107 0814 	add.w	r8, r7, #20
 80096c2:	f109 0114 	add.w	r1, r9, #20
 80096c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80096ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	1beb      	subs	r3, r5, r7
 80096d2:	3b15      	subs	r3, #21
 80096d4:	f023 0303 	bic.w	r3, r3, #3
 80096d8:	3304      	adds	r3, #4
 80096da:	3715      	adds	r7, #21
 80096dc:	42bd      	cmp	r5, r7
 80096de:	bf38      	it	cc
 80096e0:	2304      	movcc	r3, #4
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	9103      	str	r1, [sp, #12]
 80096e8:	428b      	cmp	r3, r1
 80096ea:	d80c      	bhi.n	8009706 <__multiply+0x9a>
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	dd03      	ble.n	80096f8 <__multiply+0x8c>
 80096f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d055      	beq.n	80097a4 <__multiply+0x138>
 80096f8:	6106      	str	r6, [r0, #16]
 80096fa:	b005      	add	sp, #20
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	f843 2b04 	str.w	r2, [r3], #4
 8009704:	e7d9      	b.n	80096ba <__multiply+0x4e>
 8009706:	f8b1 a000 	ldrh.w	sl, [r1]
 800970a:	f1ba 0f00 	cmp.w	sl, #0
 800970e:	d01f      	beq.n	8009750 <__multiply+0xe4>
 8009710:	46c4      	mov	ip, r8
 8009712:	46a1      	mov	r9, r4
 8009714:	2700      	movs	r7, #0
 8009716:	f85c 2b04 	ldr.w	r2, [ip], #4
 800971a:	f8d9 3000 	ldr.w	r3, [r9]
 800971e:	fa1f fb82 	uxth.w	fp, r2
 8009722:	b29b      	uxth	r3, r3
 8009724:	fb0a 330b 	mla	r3, sl, fp, r3
 8009728:	443b      	add	r3, r7
 800972a:	f8d9 7000 	ldr.w	r7, [r9]
 800972e:	0c12      	lsrs	r2, r2, #16
 8009730:	0c3f      	lsrs	r7, r7, #16
 8009732:	fb0a 7202 	mla	r2, sl, r2, r7
 8009736:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800973a:	b29b      	uxth	r3, r3
 800973c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009740:	4565      	cmp	r5, ip
 8009742:	f849 3b04 	str.w	r3, [r9], #4
 8009746:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800974a:	d8e4      	bhi.n	8009716 <__multiply+0xaa>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	50e7      	str	r7, [r4, r3]
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009756:	3104      	adds	r1, #4
 8009758:	f1b9 0f00 	cmp.w	r9, #0
 800975c:	d020      	beq.n	80097a0 <__multiply+0x134>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	4647      	mov	r7, r8
 8009762:	46a4      	mov	ip, r4
 8009764:	f04f 0a00 	mov.w	sl, #0
 8009768:	f8b7 b000 	ldrh.w	fp, [r7]
 800976c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009770:	fb09 220b 	mla	r2, r9, fp, r2
 8009774:	4452      	add	r2, sl
 8009776:	b29b      	uxth	r3, r3
 8009778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800977c:	f84c 3b04 	str.w	r3, [ip], #4
 8009780:	f857 3b04 	ldr.w	r3, [r7], #4
 8009784:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009788:	f8bc 3000 	ldrh.w	r3, [ip]
 800978c:	fb09 330a 	mla	r3, r9, sl, r3
 8009790:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009794:	42bd      	cmp	r5, r7
 8009796:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800979a:	d8e5      	bhi.n	8009768 <__multiply+0xfc>
 800979c:	9a01      	ldr	r2, [sp, #4]
 800979e:	50a3      	str	r3, [r4, r2]
 80097a0:	3404      	adds	r4, #4
 80097a2:	e79f      	b.n	80096e4 <__multiply+0x78>
 80097a4:	3e01      	subs	r6, #1
 80097a6:	e7a1      	b.n	80096ec <__multiply+0x80>
 80097a8:	0800b5f4 	.word	0x0800b5f4
 80097ac:	0800b665 	.word	0x0800b665

080097b0 <__pow5mult>:
 80097b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b4:	4615      	mov	r5, r2
 80097b6:	f012 0203 	ands.w	r2, r2, #3
 80097ba:	4607      	mov	r7, r0
 80097bc:	460e      	mov	r6, r1
 80097be:	d007      	beq.n	80097d0 <__pow5mult+0x20>
 80097c0:	4c25      	ldr	r4, [pc, #148]	@ (8009858 <__pow5mult+0xa8>)
 80097c2:	3a01      	subs	r2, #1
 80097c4:	2300      	movs	r3, #0
 80097c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ca:	f7ff fe5d 	bl	8009488 <__multadd>
 80097ce:	4606      	mov	r6, r0
 80097d0:	10ad      	asrs	r5, r5, #2
 80097d2:	d03d      	beq.n	8009850 <__pow5mult+0xa0>
 80097d4:	69fc      	ldr	r4, [r7, #28]
 80097d6:	b97c      	cbnz	r4, 80097f8 <__pow5mult+0x48>
 80097d8:	2010      	movs	r0, #16
 80097da:	f7fc fd25 	bl	8006228 <malloc>
 80097de:	4602      	mov	r2, r0
 80097e0:	61f8      	str	r0, [r7, #28]
 80097e2:	b928      	cbnz	r0, 80097f0 <__pow5mult+0x40>
 80097e4:	4b1d      	ldr	r3, [pc, #116]	@ (800985c <__pow5mult+0xac>)
 80097e6:	481e      	ldr	r0, [pc, #120]	@ (8009860 <__pow5mult+0xb0>)
 80097e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80097ec:	f001 fa8e 	bl	800ad0c <__assert_func>
 80097f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097f4:	6004      	str	r4, [r0, #0]
 80097f6:	60c4      	str	r4, [r0, #12]
 80097f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80097fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009800:	b94c      	cbnz	r4, 8009816 <__pow5mult+0x66>
 8009802:	f240 2171 	movw	r1, #625	@ 0x271
 8009806:	4638      	mov	r0, r7
 8009808:	f7ff ff1a 	bl	8009640 <__i2b>
 800980c:	2300      	movs	r3, #0
 800980e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009812:	4604      	mov	r4, r0
 8009814:	6003      	str	r3, [r0, #0]
 8009816:	f04f 0900 	mov.w	r9, #0
 800981a:	07eb      	lsls	r3, r5, #31
 800981c:	d50a      	bpl.n	8009834 <__pow5mult+0x84>
 800981e:	4631      	mov	r1, r6
 8009820:	4622      	mov	r2, r4
 8009822:	4638      	mov	r0, r7
 8009824:	f7ff ff22 	bl	800966c <__multiply>
 8009828:	4631      	mov	r1, r6
 800982a:	4680      	mov	r8, r0
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff fe09 	bl	8009444 <_Bfree>
 8009832:	4646      	mov	r6, r8
 8009834:	106d      	asrs	r5, r5, #1
 8009836:	d00b      	beq.n	8009850 <__pow5mult+0xa0>
 8009838:	6820      	ldr	r0, [r4, #0]
 800983a:	b938      	cbnz	r0, 800984c <__pow5mult+0x9c>
 800983c:	4622      	mov	r2, r4
 800983e:	4621      	mov	r1, r4
 8009840:	4638      	mov	r0, r7
 8009842:	f7ff ff13 	bl	800966c <__multiply>
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	f8c0 9000 	str.w	r9, [r0]
 800984c:	4604      	mov	r4, r0
 800984e:	e7e4      	b.n	800981a <__pow5mult+0x6a>
 8009850:	4630      	mov	r0, r6
 8009852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009856:	bf00      	nop
 8009858:	0800b87c 	.word	0x0800b87c
 800985c:	0800b585 	.word	0x0800b585
 8009860:	0800b665 	.word	0x0800b665

08009864 <__lshift>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	460c      	mov	r4, r1
 800986a:	6849      	ldr	r1, [r1, #4]
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	4607      	mov	r7, r0
 8009876:	4691      	mov	r9, r2
 8009878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800987c:	f108 0601 	add.w	r6, r8, #1
 8009880:	42b3      	cmp	r3, r6
 8009882:	db0b      	blt.n	800989c <__lshift+0x38>
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff fd9d 	bl	80093c4 <_Balloc>
 800988a:	4605      	mov	r5, r0
 800988c:	b948      	cbnz	r0, 80098a2 <__lshift+0x3e>
 800988e:	4602      	mov	r2, r0
 8009890:	4b28      	ldr	r3, [pc, #160]	@ (8009934 <__lshift+0xd0>)
 8009892:	4829      	ldr	r0, [pc, #164]	@ (8009938 <__lshift+0xd4>)
 8009894:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009898:	f001 fa38 	bl	800ad0c <__assert_func>
 800989c:	3101      	adds	r1, #1
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	e7ee      	b.n	8009880 <__lshift+0x1c>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f100 0114 	add.w	r1, r0, #20
 80098a8:	f100 0210 	add.w	r2, r0, #16
 80098ac:	4618      	mov	r0, r3
 80098ae:	4553      	cmp	r3, sl
 80098b0:	db33      	blt.n	800991a <__lshift+0xb6>
 80098b2:	6920      	ldr	r0, [r4, #16]
 80098b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098b8:	f104 0314 	add.w	r3, r4, #20
 80098bc:	f019 091f 	ands.w	r9, r9, #31
 80098c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098c8:	d02b      	beq.n	8009922 <__lshift+0xbe>
 80098ca:	f1c9 0e20 	rsb	lr, r9, #32
 80098ce:	468a      	mov	sl, r1
 80098d0:	2200      	movs	r2, #0
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	fa00 f009 	lsl.w	r0, r0, r9
 80098d8:	4310      	orrs	r0, r2
 80098da:	f84a 0b04 	str.w	r0, [sl], #4
 80098de:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e2:	459c      	cmp	ip, r3
 80098e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80098e8:	d8f3      	bhi.n	80098d2 <__lshift+0x6e>
 80098ea:	ebac 0304 	sub.w	r3, ip, r4
 80098ee:	3b15      	subs	r3, #21
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	3304      	adds	r3, #4
 80098f6:	f104 0015 	add.w	r0, r4, #21
 80098fa:	4560      	cmp	r0, ip
 80098fc:	bf88      	it	hi
 80098fe:	2304      	movhi	r3, #4
 8009900:	50ca      	str	r2, [r1, r3]
 8009902:	b10a      	cbz	r2, 8009908 <__lshift+0xa4>
 8009904:	f108 0602 	add.w	r6, r8, #2
 8009908:	3e01      	subs	r6, #1
 800990a:	4638      	mov	r0, r7
 800990c:	612e      	str	r6, [r5, #16]
 800990e:	4621      	mov	r1, r4
 8009910:	f7ff fd98 	bl	8009444 <_Bfree>
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991a:	f842 0f04 	str.w	r0, [r2, #4]!
 800991e:	3301      	adds	r3, #1
 8009920:	e7c5      	b.n	80098ae <__lshift+0x4a>
 8009922:	3904      	subs	r1, #4
 8009924:	f853 2b04 	ldr.w	r2, [r3], #4
 8009928:	f841 2f04 	str.w	r2, [r1, #4]!
 800992c:	459c      	cmp	ip, r3
 800992e:	d8f9      	bhi.n	8009924 <__lshift+0xc0>
 8009930:	e7ea      	b.n	8009908 <__lshift+0xa4>
 8009932:	bf00      	nop
 8009934:	0800b5f4 	.word	0x0800b5f4
 8009938:	0800b665 	.word	0x0800b665

0800993c <__mcmp>:
 800993c:	690a      	ldr	r2, [r1, #16]
 800993e:	4603      	mov	r3, r0
 8009940:	6900      	ldr	r0, [r0, #16]
 8009942:	1a80      	subs	r0, r0, r2
 8009944:	b530      	push	{r4, r5, lr}
 8009946:	d10e      	bne.n	8009966 <__mcmp+0x2a>
 8009948:	3314      	adds	r3, #20
 800994a:	3114      	adds	r1, #20
 800994c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009950:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800995c:	4295      	cmp	r5, r2
 800995e:	d003      	beq.n	8009968 <__mcmp+0x2c>
 8009960:	d205      	bcs.n	800996e <__mcmp+0x32>
 8009962:	f04f 30ff 	mov.w	r0, #4294967295
 8009966:	bd30      	pop	{r4, r5, pc}
 8009968:	42a3      	cmp	r3, r4
 800996a:	d3f3      	bcc.n	8009954 <__mcmp+0x18>
 800996c:	e7fb      	b.n	8009966 <__mcmp+0x2a>
 800996e:	2001      	movs	r0, #1
 8009970:	e7f9      	b.n	8009966 <__mcmp+0x2a>
	...

08009974 <__mdiff>:
 8009974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	4689      	mov	r9, r1
 800997a:	4606      	mov	r6, r0
 800997c:	4611      	mov	r1, r2
 800997e:	4648      	mov	r0, r9
 8009980:	4614      	mov	r4, r2
 8009982:	f7ff ffdb 	bl	800993c <__mcmp>
 8009986:	1e05      	subs	r5, r0, #0
 8009988:	d112      	bne.n	80099b0 <__mdiff+0x3c>
 800998a:	4629      	mov	r1, r5
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff fd19 	bl	80093c4 <_Balloc>
 8009992:	4602      	mov	r2, r0
 8009994:	b928      	cbnz	r0, 80099a2 <__mdiff+0x2e>
 8009996:	4b3f      	ldr	r3, [pc, #252]	@ (8009a94 <__mdiff+0x120>)
 8009998:	f240 2137 	movw	r1, #567	@ 0x237
 800999c:	483e      	ldr	r0, [pc, #248]	@ (8009a98 <__mdiff+0x124>)
 800999e:	f001 f9b5 	bl	800ad0c <__assert_func>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099a8:	4610      	mov	r0, r2
 80099aa:	b003      	add	sp, #12
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	bfbc      	itt	lt
 80099b2:	464b      	movlt	r3, r9
 80099b4:	46a1      	movlt	r9, r4
 80099b6:	4630      	mov	r0, r6
 80099b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099bc:	bfba      	itte	lt
 80099be:	461c      	movlt	r4, r3
 80099c0:	2501      	movlt	r5, #1
 80099c2:	2500      	movge	r5, #0
 80099c4:	f7ff fcfe 	bl	80093c4 <_Balloc>
 80099c8:	4602      	mov	r2, r0
 80099ca:	b918      	cbnz	r0, 80099d4 <__mdiff+0x60>
 80099cc:	4b31      	ldr	r3, [pc, #196]	@ (8009a94 <__mdiff+0x120>)
 80099ce:	f240 2145 	movw	r1, #581	@ 0x245
 80099d2:	e7e3      	b.n	800999c <__mdiff+0x28>
 80099d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80099d8:	6926      	ldr	r6, [r4, #16]
 80099da:	60c5      	str	r5, [r0, #12]
 80099dc:	f109 0310 	add.w	r3, r9, #16
 80099e0:	f109 0514 	add.w	r5, r9, #20
 80099e4:	f104 0e14 	add.w	lr, r4, #20
 80099e8:	f100 0b14 	add.w	fp, r0, #20
 80099ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80099f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	46d9      	mov	r9, fp
 80099f8:	f04f 0c00 	mov.w	ip, #0
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	fa1f f38a 	uxth.w	r3, sl
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	b283      	uxth	r3, r0
 8009a10:	1acb      	subs	r3, r1, r3
 8009a12:	0c00      	lsrs	r0, r0, #16
 8009a14:	4463      	add	r3, ip
 8009a16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a24:	4576      	cmp	r6, lr
 8009a26:	f849 3b04 	str.w	r3, [r9], #4
 8009a2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a2e:	d8e5      	bhi.n	80099fc <__mdiff+0x88>
 8009a30:	1b33      	subs	r3, r6, r4
 8009a32:	3b15      	subs	r3, #21
 8009a34:	f023 0303 	bic.w	r3, r3, #3
 8009a38:	3415      	adds	r4, #21
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	42a6      	cmp	r6, r4
 8009a3e:	bf38      	it	cc
 8009a40:	2304      	movcc	r3, #4
 8009a42:	441d      	add	r5, r3
 8009a44:	445b      	add	r3, fp
 8009a46:	461e      	mov	r6, r3
 8009a48:	462c      	mov	r4, r5
 8009a4a:	4544      	cmp	r4, r8
 8009a4c:	d30e      	bcc.n	8009a6c <__mdiff+0xf8>
 8009a4e:	f108 0103 	add.w	r1, r8, #3
 8009a52:	1b49      	subs	r1, r1, r5
 8009a54:	f021 0103 	bic.w	r1, r1, #3
 8009a58:	3d03      	subs	r5, #3
 8009a5a:	45a8      	cmp	r8, r5
 8009a5c:	bf38      	it	cc
 8009a5e:	2100      	movcc	r1, #0
 8009a60:	440b      	add	r3, r1
 8009a62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a66:	b191      	cbz	r1, 8009a8e <__mdiff+0x11a>
 8009a68:	6117      	str	r7, [r2, #16]
 8009a6a:	e79d      	b.n	80099a8 <__mdiff+0x34>
 8009a6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a70:	46e6      	mov	lr, ip
 8009a72:	0c08      	lsrs	r0, r1, #16
 8009a74:	fa1c fc81 	uxtah	ip, ip, r1
 8009a78:	4471      	add	r1, lr
 8009a7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a7e:	b289      	uxth	r1, r1
 8009a80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a84:	f846 1b04 	str.w	r1, [r6], #4
 8009a88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a8c:	e7dd      	b.n	8009a4a <__mdiff+0xd6>
 8009a8e:	3f01      	subs	r7, #1
 8009a90:	e7e7      	b.n	8009a62 <__mdiff+0xee>
 8009a92:	bf00      	nop
 8009a94:	0800b5f4 	.word	0x0800b5f4
 8009a98:	0800b665 	.word	0x0800b665

08009a9c <__ulp>:
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	ed8d 0b00 	vstr	d0, [sp]
 8009aa2:	9a01      	ldr	r2, [sp, #4]
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae4 <__ulp+0x48>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dc08      	bgt.n	8009ac2 <__ulp+0x26>
 8009ab0:	425b      	negs	r3, r3
 8009ab2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ab6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009aba:	da04      	bge.n	8009ac6 <__ulp+0x2a>
 8009abc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009ac0:	4113      	asrs	r3, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	e008      	b.n	8009ad8 <__ulp+0x3c>
 8009ac6:	f1a2 0314 	sub.w	r3, r2, #20
 8009aca:	2b1e      	cmp	r3, #30
 8009acc:	bfda      	itte	le
 8009ace:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ad2:	40da      	lsrle	r2, r3
 8009ad4:	2201      	movgt	r2, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	ec41 0b10 	vmov	d0, r0, r1
 8009ae0:	b002      	add	sp, #8
 8009ae2:	4770      	bx	lr
 8009ae4:	7ff00000 	.word	0x7ff00000

08009ae8 <__b2d>:
 8009ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aec:	6906      	ldr	r6, [r0, #16]
 8009aee:	f100 0814 	add.w	r8, r0, #20
 8009af2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009af6:	1f37      	subs	r7, r6, #4
 8009af8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7ff fd53 	bl	80095a8 <__hi0bits>
 8009b02:	f1c0 0320 	rsb	r3, r0, #32
 8009b06:	280a      	cmp	r0, #10
 8009b08:	600b      	str	r3, [r1, #0]
 8009b0a:	491b      	ldr	r1, [pc, #108]	@ (8009b78 <__b2d+0x90>)
 8009b0c:	dc15      	bgt.n	8009b3a <__b2d+0x52>
 8009b0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b12:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b16:	45b8      	cmp	r8, r7
 8009b18:	ea43 0501 	orr.w	r5, r3, r1
 8009b1c:	bf34      	ite	cc
 8009b1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b22:	2300      	movcs	r3, #0
 8009b24:	3015      	adds	r0, #21
 8009b26:	fa02 f000 	lsl.w	r0, r2, r0
 8009b2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b2e:	4303      	orrs	r3, r0
 8009b30:	461c      	mov	r4, r3
 8009b32:	ec45 4b10 	vmov	d0, r4, r5
 8009b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3a:	45b8      	cmp	r8, r7
 8009b3c:	bf3a      	itte	cc
 8009b3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b42:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b46:	2300      	movcs	r3, #0
 8009b48:	380b      	subs	r0, #11
 8009b4a:	d012      	beq.n	8009b72 <__b2d+0x8a>
 8009b4c:	f1c0 0120 	rsb	r1, r0, #32
 8009b50:	fa23 f401 	lsr.w	r4, r3, r1
 8009b54:	4082      	lsls	r2, r0
 8009b56:	4322      	orrs	r2, r4
 8009b58:	4547      	cmp	r7, r8
 8009b5a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009b5e:	bf8c      	ite	hi
 8009b60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b64:	2200      	movls	r2, #0
 8009b66:	4083      	lsls	r3, r0
 8009b68:	40ca      	lsrs	r2, r1
 8009b6a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	e7de      	b.n	8009b30 <__b2d+0x48>
 8009b72:	ea42 0501 	orr.w	r5, r2, r1
 8009b76:	e7db      	b.n	8009b30 <__b2d+0x48>
 8009b78:	3ff00000 	.word	0x3ff00000

08009b7c <__d2b>:
 8009b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	460f      	mov	r7, r1
 8009b82:	2101      	movs	r1, #1
 8009b84:	ec59 8b10 	vmov	r8, r9, d0
 8009b88:	4616      	mov	r6, r2
 8009b8a:	f7ff fc1b 	bl	80093c4 <_Balloc>
 8009b8e:	4604      	mov	r4, r0
 8009b90:	b930      	cbnz	r0, 8009ba0 <__d2b+0x24>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4b23      	ldr	r3, [pc, #140]	@ (8009c24 <__d2b+0xa8>)
 8009b96:	4824      	ldr	r0, [pc, #144]	@ (8009c28 <__d2b+0xac>)
 8009b98:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b9c:	f001 f8b6 	bl	800ad0c <__assert_func>
 8009ba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ba8:	b10d      	cbz	r5, 8009bae <__d2b+0x32>
 8009baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f1b8 0300 	subs.w	r3, r8, #0
 8009bb4:	d023      	beq.n	8009bfe <__d2b+0x82>
 8009bb6:	4668      	mov	r0, sp
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	f7ff fd14 	bl	80095e6 <__lo0bits>
 8009bbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bc2:	b1d0      	cbz	r0, 8009bfa <__d2b+0x7e>
 8009bc4:	f1c0 0320 	rsb	r3, r0, #32
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	40c2      	lsrs	r2, r0
 8009bd0:	6163      	str	r3, [r4, #20]
 8009bd2:	9201      	str	r2, [sp, #4]
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	61a3      	str	r3, [r4, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bf0c      	ite	eq
 8009bdc:	2201      	moveq	r2, #1
 8009bde:	2202      	movne	r2, #2
 8009be0:	6122      	str	r2, [r4, #16]
 8009be2:	b1a5      	cbz	r5, 8009c0e <__d2b+0x92>
 8009be4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009be8:	4405      	add	r5, r0
 8009bea:	603d      	str	r5, [r7, #0]
 8009bec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009bf0:	6030      	str	r0, [r6, #0]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	b003      	add	sp, #12
 8009bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	6161      	str	r1, [r4, #20]
 8009bfc:	e7ea      	b.n	8009bd4 <__d2b+0x58>
 8009bfe:	a801      	add	r0, sp, #4
 8009c00:	f7ff fcf1 	bl	80095e6 <__lo0bits>
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	3020      	adds	r0, #32
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	e7e8      	b.n	8009be0 <__d2b+0x64>
 8009c0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c16:	6038      	str	r0, [r7, #0]
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f7ff fcc5 	bl	80095a8 <__hi0bits>
 8009c1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c22:	e7e5      	b.n	8009bf0 <__d2b+0x74>
 8009c24:	0800b5f4 	.word	0x0800b5f4
 8009c28:	0800b665 	.word	0x0800b665

08009c2c <__ratio>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	b085      	sub	sp, #20
 8009c32:	e9cd 1000 	strd	r1, r0, [sp]
 8009c36:	a902      	add	r1, sp, #8
 8009c38:	f7ff ff56 	bl	8009ae8 <__b2d>
 8009c3c:	9800      	ldr	r0, [sp, #0]
 8009c3e:	a903      	add	r1, sp, #12
 8009c40:	ec55 4b10 	vmov	r4, r5, d0
 8009c44:	f7ff ff50 	bl	8009ae8 <__b2d>
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	6919      	ldr	r1, [r3, #16]
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	1ac9      	subs	r1, r1, r3
 8009c52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c56:	1a9b      	subs	r3, r3, r2
 8009c58:	ec5b ab10 	vmov	sl, fp, d0
 8009c5c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfce      	itee	gt
 8009c64:	462a      	movgt	r2, r5
 8009c66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c6a:	465a      	movle	r2, fp
 8009c6c:	462f      	mov	r7, r5
 8009c6e:	46d9      	mov	r9, fp
 8009c70:	bfcc      	ite	gt
 8009c72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c76:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	4652      	mov	r2, sl
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fe13 	bl	80008ac <__aeabi_ddiv>
 8009c86:	ec41 0b10 	vmov	d0, r0, r1
 8009c8a:	b005      	add	sp, #20
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c90 <__copybits>:
 8009c90:	3901      	subs	r1, #1
 8009c92:	b570      	push	{r4, r5, r6, lr}
 8009c94:	1149      	asrs	r1, r1, #5
 8009c96:	6914      	ldr	r4, [r2, #16]
 8009c98:	3101      	adds	r1, #1
 8009c9a:	f102 0314 	add.w	r3, r2, #20
 8009c9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ca2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ca6:	1f05      	subs	r5, r0, #4
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d30c      	bcc.n	8009cc6 <__copybits+0x36>
 8009cac:	1aa3      	subs	r3, r4, r2
 8009cae:	3b11      	subs	r3, #17
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3211      	adds	r2, #17
 8009cb6:	42a2      	cmp	r2, r4
 8009cb8:	bf88      	it	hi
 8009cba:	2300      	movhi	r3, #0
 8009cbc:	4418      	add	r0, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4288      	cmp	r0, r1
 8009cc2:	d305      	bcc.n	8009cd0 <__copybits+0x40>
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cca:	f845 6f04 	str.w	r6, [r5, #4]!
 8009cce:	e7eb      	b.n	8009ca8 <__copybits+0x18>
 8009cd0:	f840 3b04 	str.w	r3, [r0], #4
 8009cd4:	e7f4      	b.n	8009cc0 <__copybits+0x30>

08009cd6 <__any_on>:
 8009cd6:	f100 0214 	add.w	r2, r0, #20
 8009cda:	6900      	ldr	r0, [r0, #16]
 8009cdc:	114b      	asrs	r3, r1, #5
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	db11      	blt.n	8009d08 <__any_on+0x32>
 8009ce4:	dd0a      	ble.n	8009cfc <__any_on+0x26>
 8009ce6:	f011 011f 	ands.w	r1, r1, #31
 8009cea:	d007      	beq.n	8009cfc <__any_on+0x26>
 8009cec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cf0:	fa24 f001 	lsr.w	r0, r4, r1
 8009cf4:	fa00 f101 	lsl.w	r1, r0, r1
 8009cf8:	428c      	cmp	r4, r1
 8009cfa:	d10b      	bne.n	8009d14 <__any_on+0x3e>
 8009cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d803      	bhi.n	8009d0c <__any_on+0x36>
 8009d04:	2000      	movs	r0, #0
 8009d06:	bd10      	pop	{r4, pc}
 8009d08:	4603      	mov	r3, r0
 8009d0a:	e7f7      	b.n	8009cfc <__any_on+0x26>
 8009d0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d0f5      	beq.n	8009d00 <__any_on+0x2a>
 8009d14:	2001      	movs	r0, #1
 8009d16:	e7f6      	b.n	8009d06 <__any_on+0x30>

08009d18 <_malloc_usable_size_r>:
 8009d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d1c:	1f18      	subs	r0, r3, #4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bfbc      	itt	lt
 8009d22:	580b      	ldrlt	r3, [r1, r0]
 8009d24:	18c0      	addlt	r0, r0, r3
 8009d26:	4770      	bx	lr

08009d28 <_strtoul_l.isra.0>:
 8009d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	4e34      	ldr	r6, [pc, #208]	@ (8009e00 <_strtoul_l.isra.0+0xd8>)
 8009d2e:	4686      	mov	lr, r0
 8009d30:	460d      	mov	r5, r1
 8009d32:	4628      	mov	r0, r5
 8009d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d38:	5d37      	ldrb	r7, [r6, r4]
 8009d3a:	f017 0708 	ands.w	r7, r7, #8
 8009d3e:	d1f8      	bne.n	8009d32 <_strtoul_l.isra.0+0xa>
 8009d40:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d42:	d110      	bne.n	8009d66 <_strtoul_l.isra.0+0x3e>
 8009d44:	782c      	ldrb	r4, [r5, #0]
 8009d46:	2701      	movs	r7, #1
 8009d48:	1c85      	adds	r5, r0, #2
 8009d4a:	f033 0010 	bics.w	r0, r3, #16
 8009d4e:	d115      	bne.n	8009d7c <_strtoul_l.isra.0+0x54>
 8009d50:	2c30      	cmp	r4, #48	@ 0x30
 8009d52:	d10d      	bne.n	8009d70 <_strtoul_l.isra.0+0x48>
 8009d54:	7828      	ldrb	r0, [r5, #0]
 8009d56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009d5a:	2858      	cmp	r0, #88	@ 0x58
 8009d5c:	d108      	bne.n	8009d70 <_strtoul_l.isra.0+0x48>
 8009d5e:	786c      	ldrb	r4, [r5, #1]
 8009d60:	3502      	adds	r5, #2
 8009d62:	2310      	movs	r3, #16
 8009d64:	e00a      	b.n	8009d7c <_strtoul_l.isra.0+0x54>
 8009d66:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d68:	bf04      	itt	eq
 8009d6a:	782c      	ldrbeq	r4, [r5, #0]
 8009d6c:	1c85      	addeq	r5, r0, #2
 8009d6e:	e7ec      	b.n	8009d4a <_strtoul_l.isra.0+0x22>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1f6      	bne.n	8009d62 <_strtoul_l.isra.0+0x3a>
 8009d74:	2c30      	cmp	r4, #48	@ 0x30
 8009d76:	bf14      	ite	ne
 8009d78:	230a      	movne	r3, #10
 8009d7a:	2308      	moveq	r3, #8
 8009d7c:	f04f 38ff 	mov.w	r8, #4294967295
 8009d80:	2600      	movs	r6, #0
 8009d82:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d86:	fb03 f908 	mul.w	r9, r3, r8
 8009d8a:	ea6f 0909 	mvn.w	r9, r9
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009d94:	f1bc 0f09 	cmp.w	ip, #9
 8009d98:	d810      	bhi.n	8009dbc <_strtoul_l.isra.0+0x94>
 8009d9a:	4664      	mov	r4, ip
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	dd1e      	ble.n	8009dde <_strtoul_l.isra.0+0xb6>
 8009da0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009da4:	d007      	beq.n	8009db6 <_strtoul_l.isra.0+0x8e>
 8009da6:	4580      	cmp	r8, r0
 8009da8:	d316      	bcc.n	8009dd8 <_strtoul_l.isra.0+0xb0>
 8009daa:	d101      	bne.n	8009db0 <_strtoul_l.isra.0+0x88>
 8009dac:	45a1      	cmp	r9, r4
 8009dae:	db13      	blt.n	8009dd8 <_strtoul_l.isra.0+0xb0>
 8009db0:	fb00 4003 	mla	r0, r0, r3, r4
 8009db4:	2601      	movs	r6, #1
 8009db6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dba:	e7e9      	b.n	8009d90 <_strtoul_l.isra.0+0x68>
 8009dbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009dc0:	f1bc 0f19 	cmp.w	ip, #25
 8009dc4:	d801      	bhi.n	8009dca <_strtoul_l.isra.0+0xa2>
 8009dc6:	3c37      	subs	r4, #55	@ 0x37
 8009dc8:	e7e8      	b.n	8009d9c <_strtoul_l.isra.0+0x74>
 8009dca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009dce:	f1bc 0f19 	cmp.w	ip, #25
 8009dd2:	d804      	bhi.n	8009dde <_strtoul_l.isra.0+0xb6>
 8009dd4:	3c57      	subs	r4, #87	@ 0x57
 8009dd6:	e7e1      	b.n	8009d9c <_strtoul_l.isra.0+0x74>
 8009dd8:	f04f 36ff 	mov.w	r6, #4294967295
 8009ddc:	e7eb      	b.n	8009db6 <_strtoul_l.isra.0+0x8e>
 8009dde:	1c73      	adds	r3, r6, #1
 8009de0:	d106      	bne.n	8009df0 <_strtoul_l.isra.0+0xc8>
 8009de2:	2322      	movs	r3, #34	@ 0x22
 8009de4:	f8ce 3000 	str.w	r3, [lr]
 8009de8:	4630      	mov	r0, r6
 8009dea:	b932      	cbnz	r2, 8009dfa <_strtoul_l.isra.0+0xd2>
 8009dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df0:	b107      	cbz	r7, 8009df4 <_strtoul_l.isra.0+0xcc>
 8009df2:	4240      	negs	r0, r0
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	d0f9      	beq.n	8009dec <_strtoul_l.isra.0+0xc4>
 8009df8:	b106      	cbz	r6, 8009dfc <_strtoul_l.isra.0+0xd4>
 8009dfa:	1e69      	subs	r1, r5, #1
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	e7f5      	b.n	8009dec <_strtoul_l.isra.0+0xc4>
 8009e00:	0800b779 	.word	0x0800b779

08009e04 <_strtoul_r>:
 8009e04:	f7ff bf90 	b.w	8009d28 <_strtoul_l.isra.0>

08009e08 <__ascii_wctomb>:
 8009e08:	4603      	mov	r3, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	b141      	cbz	r1, 8009e20 <__ascii_wctomb+0x18>
 8009e0e:	2aff      	cmp	r2, #255	@ 0xff
 8009e10:	d904      	bls.n	8009e1c <__ascii_wctomb+0x14>
 8009e12:	228a      	movs	r2, #138	@ 0x8a
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1a:	4770      	bx	lr
 8009e1c:	700a      	strb	r2, [r1, #0]
 8009e1e:	2001      	movs	r0, #1
 8009e20:	4770      	bx	lr

08009e22 <__ssputs_r>:
 8009e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e26:	688e      	ldr	r6, [r1, #8]
 8009e28:	461f      	mov	r7, r3
 8009e2a:	42be      	cmp	r6, r7
 8009e2c:	680b      	ldr	r3, [r1, #0]
 8009e2e:	4682      	mov	sl, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	4690      	mov	r8, r2
 8009e34:	d82d      	bhi.n	8009e92 <__ssputs_r+0x70>
 8009e36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e3a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e3e:	d026      	beq.n	8009e8e <__ssputs_r+0x6c>
 8009e40:	6965      	ldr	r5, [r4, #20]
 8009e42:	6909      	ldr	r1, [r1, #16]
 8009e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e48:	eba3 0901 	sub.w	r9, r3, r1
 8009e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e50:	1c7b      	adds	r3, r7, #1
 8009e52:	444b      	add	r3, r9
 8009e54:	106d      	asrs	r5, r5, #1
 8009e56:	429d      	cmp	r5, r3
 8009e58:	bf38      	it	cc
 8009e5a:	461d      	movcc	r5, r3
 8009e5c:	0553      	lsls	r3, r2, #21
 8009e5e:	d527      	bpl.n	8009eb0 <__ssputs_r+0x8e>
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7fc fa13 	bl	800628c <_malloc_r>
 8009e66:	4606      	mov	r6, r0
 8009e68:	b360      	cbz	r0, 8009ec4 <__ssputs_r+0xa2>
 8009e6a:	6921      	ldr	r1, [r4, #16]
 8009e6c:	464a      	mov	r2, r9
 8009e6e:	f7fe f8a2 	bl	8007fb6 <memcpy>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	6126      	str	r6, [r4, #16]
 8009e80:	6165      	str	r5, [r4, #20]
 8009e82:	444e      	add	r6, r9
 8009e84:	eba5 0509 	sub.w	r5, r5, r9
 8009e88:	6026      	str	r6, [r4, #0]
 8009e8a:	60a5      	str	r5, [r4, #8]
 8009e8c:	463e      	mov	r6, r7
 8009e8e:	42be      	cmp	r6, r7
 8009e90:	d900      	bls.n	8009e94 <__ssputs_r+0x72>
 8009e92:	463e      	mov	r6, r7
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	4632      	mov	r2, r6
 8009e98:	4641      	mov	r1, r8
 8009e9a:	f000 fefa 	bl	800ac92 <memmove>
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	1b9b      	subs	r3, r3, r6
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	4433      	add	r3, r6
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	2000      	movs	r0, #0
 8009eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	f7fc fa7f 	bl	80063b4 <_realloc_r>
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1e0      	bne.n	8009e7e <__ssputs_r+0x5c>
 8009ebc:	6921      	ldr	r1, [r4, #16]
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	f7fe feea 	bl	8008c98 <_free_r>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	f8ca 3000 	str.w	r3, [sl]
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	e7e9      	b.n	8009eac <__ssputs_r+0x8a>

08009ed8 <_svfiprintf_r>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	4698      	mov	r8, r3
 8009ede:	898b      	ldrh	r3, [r1, #12]
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	b09d      	sub	sp, #116	@ 0x74
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	4614      	mov	r4, r2
 8009eea:	d510      	bpl.n	8009f0e <_svfiprintf_r+0x36>
 8009eec:	690b      	ldr	r3, [r1, #16]
 8009eee:	b973      	cbnz	r3, 8009f0e <_svfiprintf_r+0x36>
 8009ef0:	2140      	movs	r1, #64	@ 0x40
 8009ef2:	f7fc f9cb 	bl	800628c <_malloc_r>
 8009ef6:	6028      	str	r0, [r5, #0]
 8009ef8:	6128      	str	r0, [r5, #16]
 8009efa:	b930      	cbnz	r0, 8009f0a <_svfiprintf_r+0x32>
 8009efc:	230c      	movs	r3, #12
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	b01d      	add	sp, #116	@ 0x74
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	2340      	movs	r3, #64	@ 0x40
 8009f0c:	616b      	str	r3, [r5, #20]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f12:	2320      	movs	r3, #32
 8009f14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f1c:	2330      	movs	r3, #48	@ 0x30
 8009f1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a0bc <_svfiprintf_r+0x1e4>
 8009f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f26:	f04f 0901 	mov.w	r9, #1
 8009f2a:	4623      	mov	r3, r4
 8009f2c:	469a      	mov	sl, r3
 8009f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f32:	b10a      	cbz	r2, 8009f38 <_svfiprintf_r+0x60>
 8009f34:	2a25      	cmp	r2, #37	@ 0x25
 8009f36:	d1f9      	bne.n	8009f2c <_svfiprintf_r+0x54>
 8009f38:	ebba 0b04 	subs.w	fp, sl, r4
 8009f3c:	d00b      	beq.n	8009f56 <_svfiprintf_r+0x7e>
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4622      	mov	r2, r4
 8009f42:	4629      	mov	r1, r5
 8009f44:	4638      	mov	r0, r7
 8009f46:	f7ff ff6c 	bl	8009e22 <__ssputs_r>
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	f000 80a7 	beq.w	800a09e <_svfiprintf_r+0x1c6>
 8009f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f52:	445a      	add	r2, fp
 8009f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f56:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 809f 	beq.w	800a09e <_svfiprintf_r+0x1c6>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f04f 32ff 	mov.w	r2, #4294967295
 8009f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f6a:	f10a 0a01 	add.w	sl, sl, #1
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	9307      	str	r3, [sp, #28]
 8009f72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f76:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f78:	4654      	mov	r4, sl
 8009f7a:	2205      	movs	r2, #5
 8009f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f80:	484e      	ldr	r0, [pc, #312]	@ (800a0bc <_svfiprintf_r+0x1e4>)
 8009f82:	f7f6 f955 	bl	8000230 <memchr>
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	b9d8      	cbnz	r0, 8009fc2 <_svfiprintf_r+0xea>
 8009f8a:	06d0      	lsls	r0, r2, #27
 8009f8c:	bf44      	itt	mi
 8009f8e:	2320      	movmi	r3, #32
 8009f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f94:	0711      	lsls	r1, r2, #28
 8009f96:	bf44      	itt	mi
 8009f98:	232b      	movmi	r3, #43	@ 0x2b
 8009f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fa4:	d015      	beq.n	8009fd2 <_svfiprintf_r+0xfa>
 8009fa6:	9a07      	ldr	r2, [sp, #28]
 8009fa8:	4654      	mov	r4, sl
 8009faa:	2000      	movs	r0, #0
 8009fac:	f04f 0c0a 	mov.w	ip, #10
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb6:	3b30      	subs	r3, #48	@ 0x30
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d94b      	bls.n	800a054 <_svfiprintf_r+0x17c>
 8009fbc:	b1b0      	cbz	r0, 8009fec <_svfiprintf_r+0x114>
 8009fbe:	9207      	str	r2, [sp, #28]
 8009fc0:	e014      	b.n	8009fec <_svfiprintf_r+0x114>
 8009fc2:	eba0 0308 	sub.w	r3, r0, r8
 8009fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	46a2      	mov	sl, r4
 8009fd0:	e7d2      	b.n	8009f78 <_svfiprintf_r+0xa0>
 8009fd2:	9b03      	ldr	r3, [sp, #12]
 8009fd4:	1d19      	adds	r1, r3, #4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	9103      	str	r1, [sp, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bfbb      	ittet	lt
 8009fde:	425b      	neglt	r3, r3
 8009fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fe4:	9307      	strge	r3, [sp, #28]
 8009fe6:	9307      	strlt	r3, [sp, #28]
 8009fe8:	bfb8      	it	lt
 8009fea:	9204      	strlt	r2, [sp, #16]
 8009fec:	7823      	ldrb	r3, [r4, #0]
 8009fee:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ff0:	d10a      	bne.n	800a008 <_svfiprintf_r+0x130>
 8009ff2:	7863      	ldrb	r3, [r4, #1]
 8009ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff6:	d132      	bne.n	800a05e <_svfiprintf_r+0x186>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9203      	str	r2, [sp, #12]
 800a000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a004:	3402      	adds	r4, #2
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0cc <_svfiprintf_r+0x1f4>
 800a00c:	7821      	ldrb	r1, [r4, #0]
 800a00e:	2203      	movs	r2, #3
 800a010:	4650      	mov	r0, sl
 800a012:	f7f6 f90d 	bl	8000230 <memchr>
 800a016:	b138      	cbz	r0, 800a028 <_svfiprintf_r+0x150>
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	eba0 000a 	sub.w	r0, r0, sl
 800a01e:	2240      	movs	r2, #64	@ 0x40
 800a020:	4082      	lsls	r2, r0
 800a022:	4313      	orrs	r3, r2
 800a024:	3401      	adds	r4, #1
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02c:	4824      	ldr	r0, [pc, #144]	@ (800a0c0 <_svfiprintf_r+0x1e8>)
 800a02e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a032:	2206      	movs	r2, #6
 800a034:	f7f6 f8fc 	bl	8000230 <memchr>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d036      	beq.n	800a0aa <_svfiprintf_r+0x1d2>
 800a03c:	4b21      	ldr	r3, [pc, #132]	@ (800a0c4 <_svfiprintf_r+0x1ec>)
 800a03e:	bb1b      	cbnz	r3, 800a088 <_svfiprintf_r+0x1b0>
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	3307      	adds	r3, #7
 800a044:	f023 0307 	bic.w	r3, r3, #7
 800a048:	3308      	adds	r3, #8
 800a04a:	9303      	str	r3, [sp, #12]
 800a04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a04e:	4433      	add	r3, r6
 800a050:	9309      	str	r3, [sp, #36]	@ 0x24
 800a052:	e76a      	b.n	8009f2a <_svfiprintf_r+0x52>
 800a054:	fb0c 3202 	mla	r2, ip, r2, r3
 800a058:	460c      	mov	r4, r1
 800a05a:	2001      	movs	r0, #1
 800a05c:	e7a8      	b.n	8009fb0 <_svfiprintf_r+0xd8>
 800a05e:	2300      	movs	r3, #0
 800a060:	3401      	adds	r4, #1
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	4619      	mov	r1, r3
 800a066:	f04f 0c0a 	mov.w	ip, #10
 800a06a:	4620      	mov	r0, r4
 800a06c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a070:	3a30      	subs	r2, #48	@ 0x30
 800a072:	2a09      	cmp	r2, #9
 800a074:	d903      	bls.n	800a07e <_svfiprintf_r+0x1a6>
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0c6      	beq.n	800a008 <_svfiprintf_r+0x130>
 800a07a:	9105      	str	r1, [sp, #20]
 800a07c:	e7c4      	b.n	800a008 <_svfiprintf_r+0x130>
 800a07e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a082:	4604      	mov	r4, r0
 800a084:	2301      	movs	r3, #1
 800a086:	e7f0      	b.n	800a06a <_svfiprintf_r+0x192>
 800a088:	ab03      	add	r3, sp, #12
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	462a      	mov	r2, r5
 800a08e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c8 <_svfiprintf_r+0x1f0>)
 800a090:	a904      	add	r1, sp, #16
 800a092:	4638      	mov	r0, r7
 800a094:	f7fd f86c 	bl	8007170 <_printf_float>
 800a098:	1c42      	adds	r2, r0, #1
 800a09a:	4606      	mov	r6, r0
 800a09c:	d1d6      	bne.n	800a04c <_svfiprintf_r+0x174>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	065b      	lsls	r3, r3, #25
 800a0a2:	f53f af2d 	bmi.w	8009f00 <_svfiprintf_r+0x28>
 800a0a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0a8:	e72c      	b.n	8009f04 <_svfiprintf_r+0x2c>
 800a0aa:	ab03      	add	r3, sp, #12
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <_svfiprintf_r+0x1f0>)
 800a0b2:	a904      	add	r1, sp, #16
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f7fd faf3 	bl	80076a0 <_printf_i>
 800a0ba:	e7ed      	b.n	800a098 <_svfiprintf_r+0x1c0>
 800a0bc:	0800b6be 	.word	0x0800b6be
 800a0c0:	0800b6c8 	.word	0x0800b6c8
 800a0c4:	08007171 	.word	0x08007171
 800a0c8:	08009e23 	.word	0x08009e23
 800a0cc:	0800b6c4 	.word	0x0800b6c4

0800a0d0 <_sungetc_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	1c4b      	adds	r3, r1, #1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	d103      	bne.n	800a0e0 <_sungetc_r+0x10>
 800a0d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a0dc:	4628      	mov	r0, r5
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	8993      	ldrh	r3, [r2, #12]
 800a0e2:	f023 0320 	bic.w	r3, r3, #32
 800a0e6:	8193      	strh	r3, [r2, #12]
 800a0e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0ea:	6852      	ldr	r2, [r2, #4]
 800a0ec:	b2cd      	uxtb	r5, r1
 800a0ee:	b18b      	cbz	r3, 800a114 <_sungetc_r+0x44>
 800a0f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	dd08      	ble.n	800a108 <_sungetc_r+0x38>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	1e5a      	subs	r2, r3, #1
 800a0fa:	6022      	str	r2, [r4, #0]
 800a0fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	3301      	adds	r3, #1
 800a104:	6063      	str	r3, [r4, #4]
 800a106:	e7e9      	b.n	800a0dc <_sungetc_r+0xc>
 800a108:	4621      	mov	r1, r4
 800a10a:	f000 fd88 	bl	800ac1e <__submore>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d0f1      	beq.n	800a0f6 <_sungetc_r+0x26>
 800a112:	e7e1      	b.n	800a0d8 <_sungetc_r+0x8>
 800a114:	6921      	ldr	r1, [r4, #16]
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	b151      	cbz	r1, 800a130 <_sungetc_r+0x60>
 800a11a:	4299      	cmp	r1, r3
 800a11c:	d208      	bcs.n	800a130 <_sungetc_r+0x60>
 800a11e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a122:	42a9      	cmp	r1, r5
 800a124:	d104      	bne.n	800a130 <_sungetc_r+0x60>
 800a126:	3b01      	subs	r3, #1
 800a128:	3201      	adds	r2, #1
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	6062      	str	r2, [r4, #4]
 800a12e:	e7d5      	b.n	800a0dc <_sungetc_r+0xc>
 800a130:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a138:	6363      	str	r3, [r4, #52]	@ 0x34
 800a13a:	2303      	movs	r3, #3
 800a13c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a13e:	4623      	mov	r3, r4
 800a140:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	2301      	movs	r3, #1
 800a148:	e7dc      	b.n	800a104 <_sungetc_r+0x34>

0800a14a <__ssrefill_r>:
 800a14a:	b510      	push	{r4, lr}
 800a14c:	460c      	mov	r4, r1
 800a14e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a150:	b169      	cbz	r1, 800a16e <__ssrefill_r+0x24>
 800a152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a156:	4299      	cmp	r1, r3
 800a158:	d001      	beq.n	800a15e <__ssrefill_r+0x14>
 800a15a:	f7fe fd9d 	bl	8008c98 <_free_r>
 800a15e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	2000      	movs	r0, #0
 800a164:	6360      	str	r0, [r4, #52]	@ 0x34
 800a166:	b113      	cbz	r3, 800a16e <__ssrefill_r+0x24>
 800a168:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	2300      	movs	r3, #0
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f043 0320 	orr.w	r3, r3, #32
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	e7f3      	b.n	800a16c <__ssrefill_r+0x22>

0800a184 <__ssvfiscanf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	460c      	mov	r4, r1
 800a18a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a18e:	2100      	movs	r1, #0
 800a190:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a194:	49a6      	ldr	r1, [pc, #664]	@ (800a430 <__ssvfiscanf_r+0x2ac>)
 800a196:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a198:	f10d 0804 	add.w	r8, sp, #4
 800a19c:	49a5      	ldr	r1, [pc, #660]	@ (800a434 <__ssvfiscanf_r+0x2b0>)
 800a19e:	4fa6      	ldr	r7, [pc, #664]	@ (800a438 <__ssvfiscanf_r+0x2b4>)
 800a1a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	f892 9000 	ldrb.w	r9, [r2]
 800a1ae:	f1b9 0f00 	cmp.w	r9, #0
 800a1b2:	f000 8158 	beq.w	800a466 <__ssvfiscanf_r+0x2e2>
 800a1b6:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a1ba:	f013 0308 	ands.w	r3, r3, #8
 800a1be:	f102 0501 	add.w	r5, r2, #1
 800a1c2:	d019      	beq.n	800a1f8 <__ssvfiscanf_r+0x74>
 800a1c4:	6863      	ldr	r3, [r4, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	dd0f      	ble.n	800a1ea <__ssvfiscanf_r+0x66>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	5cba      	ldrb	r2, [r7, r2]
 800a1d0:	0712      	lsls	r2, r2, #28
 800a1d2:	d401      	bmi.n	800a1d8 <__ssvfiscanf_r+0x54>
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	e7e8      	b.n	800a1aa <__ssvfiscanf_r+0x26>
 800a1d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a1da:	3201      	adds	r2, #1
 800a1dc:	9245      	str	r2, [sp, #276]	@ 0x114
 800a1de:	6862      	ldr	r2, [r4, #4]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	3a01      	subs	r2, #1
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	6023      	str	r3, [r4, #0]
 800a1e8:	e7ec      	b.n	800a1c4 <__ssvfiscanf_r+0x40>
 800a1ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4798      	blx	r3
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d0e9      	beq.n	800a1ca <__ssvfiscanf_r+0x46>
 800a1f6:	e7ed      	b.n	800a1d4 <__ssvfiscanf_r+0x50>
 800a1f8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a1fc:	f040 8085 	bne.w	800a30a <__ssvfiscanf_r+0x186>
 800a200:	9341      	str	r3, [sp, #260]	@ 0x104
 800a202:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a204:	7853      	ldrb	r3, [r2, #1]
 800a206:	2b2a      	cmp	r3, #42	@ 0x2a
 800a208:	bf02      	ittt	eq
 800a20a:	2310      	moveq	r3, #16
 800a20c:	1c95      	addeq	r5, r2, #2
 800a20e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a210:	220a      	movs	r2, #10
 800a212:	46aa      	mov	sl, r5
 800a214:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a218:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a21c:	2b09      	cmp	r3, #9
 800a21e:	d91e      	bls.n	800a25e <__ssvfiscanf_r+0xda>
 800a220:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a43c <__ssvfiscanf_r+0x2b8>
 800a224:	2203      	movs	r2, #3
 800a226:	4658      	mov	r0, fp
 800a228:	f7f6 f802 	bl	8000230 <memchr>
 800a22c:	b138      	cbz	r0, 800a23e <__ssvfiscanf_r+0xba>
 800a22e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a230:	eba0 000b 	sub.w	r0, r0, fp
 800a234:	2301      	movs	r3, #1
 800a236:	4083      	lsls	r3, r0
 800a238:	4313      	orrs	r3, r2
 800a23a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a23c:	4655      	mov	r5, sl
 800a23e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a242:	2b78      	cmp	r3, #120	@ 0x78
 800a244:	d806      	bhi.n	800a254 <__ssvfiscanf_r+0xd0>
 800a246:	2b57      	cmp	r3, #87	@ 0x57
 800a248:	d810      	bhi.n	800a26c <__ssvfiscanf_r+0xe8>
 800a24a:	2b25      	cmp	r3, #37	@ 0x25
 800a24c:	d05d      	beq.n	800a30a <__ssvfiscanf_r+0x186>
 800a24e:	d857      	bhi.n	800a300 <__ssvfiscanf_r+0x17c>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d075      	beq.n	800a340 <__ssvfiscanf_r+0x1bc>
 800a254:	2303      	movs	r3, #3
 800a256:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a258:	230a      	movs	r3, #10
 800a25a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a25c:	e088      	b.n	800a370 <__ssvfiscanf_r+0x1ec>
 800a25e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a260:	fb02 1103 	mla	r1, r2, r3, r1
 800a264:	3930      	subs	r1, #48	@ 0x30
 800a266:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a268:	4655      	mov	r5, sl
 800a26a:	e7d2      	b.n	800a212 <__ssvfiscanf_r+0x8e>
 800a26c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a270:	2a20      	cmp	r2, #32
 800a272:	d8ef      	bhi.n	800a254 <__ssvfiscanf_r+0xd0>
 800a274:	a101      	add	r1, pc, #4	@ (adr r1, 800a27c <__ssvfiscanf_r+0xf8>)
 800a276:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a34f 	.word	0x0800a34f
 800a280:	0800a255 	.word	0x0800a255
 800a284:	0800a255 	.word	0x0800a255
 800a288:	0800a3a9 	.word	0x0800a3a9
 800a28c:	0800a255 	.word	0x0800a255
 800a290:	0800a255 	.word	0x0800a255
 800a294:	0800a255 	.word	0x0800a255
 800a298:	0800a255 	.word	0x0800a255
 800a29c:	0800a255 	.word	0x0800a255
 800a2a0:	0800a255 	.word	0x0800a255
 800a2a4:	0800a255 	.word	0x0800a255
 800a2a8:	0800a3bf 	.word	0x0800a3bf
 800a2ac:	0800a3a5 	.word	0x0800a3a5
 800a2b0:	0800a307 	.word	0x0800a307
 800a2b4:	0800a307 	.word	0x0800a307
 800a2b8:	0800a307 	.word	0x0800a307
 800a2bc:	0800a255 	.word	0x0800a255
 800a2c0:	0800a361 	.word	0x0800a361
 800a2c4:	0800a255 	.word	0x0800a255
 800a2c8:	0800a255 	.word	0x0800a255
 800a2cc:	0800a255 	.word	0x0800a255
 800a2d0:	0800a255 	.word	0x0800a255
 800a2d4:	0800a3cf 	.word	0x0800a3cf
 800a2d8:	0800a369 	.word	0x0800a369
 800a2dc:	0800a347 	.word	0x0800a347
 800a2e0:	0800a255 	.word	0x0800a255
 800a2e4:	0800a255 	.word	0x0800a255
 800a2e8:	0800a3cb 	.word	0x0800a3cb
 800a2ec:	0800a255 	.word	0x0800a255
 800a2f0:	0800a3a5 	.word	0x0800a3a5
 800a2f4:	0800a255 	.word	0x0800a255
 800a2f8:	0800a255 	.word	0x0800a255
 800a2fc:	0800a34f 	.word	0x0800a34f
 800a300:	3b45      	subs	r3, #69	@ 0x45
 800a302:	2b02      	cmp	r3, #2
 800a304:	d8a6      	bhi.n	800a254 <__ssvfiscanf_r+0xd0>
 800a306:	2305      	movs	r3, #5
 800a308:	e031      	b.n	800a36e <__ssvfiscanf_r+0x1ea>
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dd0d      	ble.n	800a32c <__ssvfiscanf_r+0x1a8>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	781a      	ldrb	r2, [r3, #0]
 800a314:	454a      	cmp	r2, r9
 800a316:	f040 80a6 	bne.w	800a466 <__ssvfiscanf_r+0x2e2>
 800a31a:	3301      	adds	r3, #1
 800a31c:	6862      	ldr	r2, [r4, #4]
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a322:	3a01      	subs	r2, #1
 800a324:	3301      	adds	r3, #1
 800a326:	6062      	str	r2, [r4, #4]
 800a328:	9345      	str	r3, [sp, #276]	@ 0x114
 800a32a:	e753      	b.n	800a1d4 <__ssvfiscanf_r+0x50>
 800a32c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a32e:	4621      	mov	r1, r4
 800a330:	4630      	mov	r0, r6
 800a332:	4798      	blx	r3
 800a334:	2800      	cmp	r0, #0
 800a336:	d0eb      	beq.n	800a310 <__ssvfiscanf_r+0x18c>
 800a338:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f040 808b 	bne.w	800a456 <__ssvfiscanf_r+0x2d2>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e08b      	b.n	800a45e <__ssvfiscanf_r+0x2da>
 800a346:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a348:	f042 0220 	orr.w	r2, r2, #32
 800a34c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a34e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a354:	9241      	str	r2, [sp, #260]	@ 0x104
 800a356:	2210      	movs	r2, #16
 800a358:	2b6e      	cmp	r3, #110	@ 0x6e
 800a35a:	9242      	str	r2, [sp, #264]	@ 0x108
 800a35c:	d902      	bls.n	800a364 <__ssvfiscanf_r+0x1e0>
 800a35e:	e005      	b.n	800a36c <__ssvfiscanf_r+0x1e8>
 800a360:	2300      	movs	r3, #0
 800a362:	9342      	str	r3, [sp, #264]	@ 0x108
 800a364:	2303      	movs	r3, #3
 800a366:	e002      	b.n	800a36e <__ssvfiscanf_r+0x1ea>
 800a368:	2308      	movs	r3, #8
 800a36a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a36c:	2304      	movs	r3, #4
 800a36e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	dd39      	ble.n	800a3ea <__ssvfiscanf_r+0x266>
 800a376:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a378:	0659      	lsls	r1, r3, #25
 800a37a:	d404      	bmi.n	800a386 <__ssvfiscanf_r+0x202>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	781a      	ldrb	r2, [r3, #0]
 800a380:	5cba      	ldrb	r2, [r7, r2]
 800a382:	0712      	lsls	r2, r2, #28
 800a384:	d438      	bmi.n	800a3f8 <__ssvfiscanf_r+0x274>
 800a386:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a388:	2b02      	cmp	r3, #2
 800a38a:	dc47      	bgt.n	800a41c <__ssvfiscanf_r+0x298>
 800a38c:	466b      	mov	r3, sp
 800a38e:	4622      	mov	r2, r4
 800a390:	a941      	add	r1, sp, #260	@ 0x104
 800a392:	4630      	mov	r0, r6
 800a394:	f000 f9ae 	bl	800a6f4 <_scanf_chars>
 800a398:	2801      	cmp	r0, #1
 800a39a:	d064      	beq.n	800a466 <__ssvfiscanf_r+0x2e2>
 800a39c:	2802      	cmp	r0, #2
 800a39e:	f47f af19 	bne.w	800a1d4 <__ssvfiscanf_r+0x50>
 800a3a2:	e7c9      	b.n	800a338 <__ssvfiscanf_r+0x1b4>
 800a3a4:	220a      	movs	r2, #10
 800a3a6:	e7d7      	b.n	800a358 <__ssvfiscanf_r+0x1d4>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f000 fbfe 	bl	800abac <__sccl>
 800a3b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3b6:	9341      	str	r3, [sp, #260]	@ 0x104
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e7d7      	b.n	800a36e <__ssvfiscanf_r+0x1ea>
 800a3be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e7d1      	b.n	800a36e <__ssvfiscanf_r+0x1ea>
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	e7cf      	b.n	800a36e <__ssvfiscanf_r+0x1ea>
 800a3ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a3d0:	06c3      	lsls	r3, r0, #27
 800a3d2:	f53f aeff 	bmi.w	800a1d4 <__ssvfiscanf_r+0x50>
 800a3d6:	9b00      	ldr	r3, [sp, #0]
 800a3d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a3da:	1d19      	adds	r1, r3, #4
 800a3dc:	9100      	str	r1, [sp, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	07c0      	lsls	r0, r0, #31
 800a3e2:	bf4c      	ite	mi
 800a3e4:	801a      	strhmi	r2, [r3, #0]
 800a3e6:	601a      	strpl	r2, [r3, #0]
 800a3e8:	e6f4      	b.n	800a1d4 <__ssvfiscanf_r+0x50>
 800a3ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	4798      	blx	r3
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0bf      	beq.n	800a376 <__ssvfiscanf_r+0x1f2>
 800a3f6:	e79f      	b.n	800a338 <__ssvfiscanf_r+0x1b4>
 800a3f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a3fa:	3201      	adds	r2, #1
 800a3fc:	9245      	str	r2, [sp, #276]	@ 0x114
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	3a01      	subs	r2, #1
 800a402:	2a00      	cmp	r2, #0
 800a404:	6062      	str	r2, [r4, #4]
 800a406:	dd02      	ble.n	800a40e <__ssvfiscanf_r+0x28a>
 800a408:	3301      	adds	r3, #1
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e7b6      	b.n	800a37c <__ssvfiscanf_r+0x1f8>
 800a40e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a410:	4621      	mov	r1, r4
 800a412:	4630      	mov	r0, r6
 800a414:	4798      	blx	r3
 800a416:	2800      	cmp	r0, #0
 800a418:	d0b0      	beq.n	800a37c <__ssvfiscanf_r+0x1f8>
 800a41a:	e78d      	b.n	800a338 <__ssvfiscanf_r+0x1b4>
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	dc0f      	bgt.n	800a440 <__ssvfiscanf_r+0x2bc>
 800a420:	466b      	mov	r3, sp
 800a422:	4622      	mov	r2, r4
 800a424:	a941      	add	r1, sp, #260	@ 0x104
 800a426:	4630      	mov	r0, r6
 800a428:	f000 f9be 	bl	800a7a8 <_scanf_i>
 800a42c:	e7b4      	b.n	800a398 <__ssvfiscanf_r+0x214>
 800a42e:	bf00      	nop
 800a430:	0800a0d1 	.word	0x0800a0d1
 800a434:	0800a14b 	.word	0x0800a14b
 800a438:	0800b779 	.word	0x0800b779
 800a43c:	0800b6c4 	.word	0x0800b6c4
 800a440:	4b0a      	ldr	r3, [pc, #40]	@ (800a46c <__ssvfiscanf_r+0x2e8>)
 800a442:	2b00      	cmp	r3, #0
 800a444:	f43f aec6 	beq.w	800a1d4 <__ssvfiscanf_r+0x50>
 800a448:	466b      	mov	r3, sp
 800a44a:	4622      	mov	r2, r4
 800a44c:	a941      	add	r1, sp, #260	@ 0x104
 800a44e:	4630      	mov	r0, r6
 800a450:	f3af 8000 	nop.w
 800a454:	e7a0      	b.n	800a398 <__ssvfiscanf_r+0x214>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	065b      	lsls	r3, r3, #25
 800a45a:	f53f af71 	bmi.w	800a340 <__ssvfiscanf_r+0x1bc>
 800a45e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a468:	e7f9      	b.n	800a45e <__ssvfiscanf_r+0x2da>
 800a46a:	bf00      	nop
 800a46c:	00000000 	.word	0x00000000

0800a470 <__sfputc_r>:
 800a470:	6893      	ldr	r3, [r2, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	b410      	push	{r4}
 800a478:	6093      	str	r3, [r2, #8]
 800a47a:	da08      	bge.n	800a48e <__sfputc_r+0x1e>
 800a47c:	6994      	ldr	r4, [r2, #24]
 800a47e:	42a3      	cmp	r3, r4
 800a480:	db01      	blt.n	800a486 <__sfputc_r+0x16>
 800a482:	290a      	cmp	r1, #10
 800a484:	d103      	bne.n	800a48e <__sfputc_r+0x1e>
 800a486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48a:	f7fd bc34 	b.w	8007cf6 <__swbuf_r>
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	1c58      	adds	r0, r3, #1
 800a492:	6010      	str	r0, [r2, #0]
 800a494:	7019      	strb	r1, [r3, #0]
 800a496:	4608      	mov	r0, r1
 800a498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <__sfputs_r>:
 800a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	18d5      	adds	r5, r2, r3
 800a4a8:	42ac      	cmp	r4, r5
 800a4aa:	d101      	bne.n	800a4b0 <__sfputs_r+0x12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e007      	b.n	800a4c0 <__sfputs_r+0x22>
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ffda 	bl	800a470 <__sfputc_r>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d1f3      	bne.n	800a4a8 <__sfputs_r+0xa>
 800a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4c4 <_vfiprintf_r>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	b09d      	sub	sp, #116	@ 0x74
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <_vfiprintf_r+0x18>
 800a4d4:	6a03      	ldr	r3, [r0, #32]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <_vfiprintf_r+0x18>
 800a4d8:	f7fd fa8c 	bl	80079f4 <__sinit>
 800a4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4de:	07d9      	lsls	r1, r3, #31
 800a4e0:	d405      	bmi.n	800a4ee <_vfiprintf_r+0x2a>
 800a4e2:	89ab      	ldrh	r3, [r5, #12]
 800a4e4:	059a      	lsls	r2, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_vfiprintf_r+0x2a>
 800a4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ea:	f7fd fd62 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	071b      	lsls	r3, r3, #28
 800a4f2:	d501      	bpl.n	800a4f8 <_vfiprintf_r+0x34>
 800a4f4:	692b      	ldr	r3, [r5, #16]
 800a4f6:	b99b      	cbnz	r3, 800a520 <_vfiprintf_r+0x5c>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7fd fc3a 	bl	8007d74 <__swsetup_r>
 800a500:	b170      	cbz	r0, 800a520 <_vfiprintf_r+0x5c>
 800a502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a504:	07dc      	lsls	r4, r3, #31
 800a506:	d504      	bpl.n	800a512 <_vfiprintf_r+0x4e>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	b01d      	add	sp, #116	@ 0x74
 800a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	0598      	lsls	r0, r3, #22
 800a516:	d4f7      	bmi.n	800a508 <_vfiprintf_r+0x44>
 800a518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a51a:	f7fd fd4b 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a51e:	e7f3      	b.n	800a508 <_vfiprintf_r+0x44>
 800a520:	2300      	movs	r3, #0
 800a522:	9309      	str	r3, [sp, #36]	@ 0x24
 800a524:	2320      	movs	r3, #32
 800a526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a52e:	2330      	movs	r3, #48	@ 0x30
 800a530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6e0 <_vfiprintf_r+0x21c>
 800a534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a538:	f04f 0901 	mov.w	r9, #1
 800a53c:	4623      	mov	r3, r4
 800a53e:	469a      	mov	sl, r3
 800a540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a544:	b10a      	cbz	r2, 800a54a <_vfiprintf_r+0x86>
 800a546:	2a25      	cmp	r2, #37	@ 0x25
 800a548:	d1f9      	bne.n	800a53e <_vfiprintf_r+0x7a>
 800a54a:	ebba 0b04 	subs.w	fp, sl, r4
 800a54e:	d00b      	beq.n	800a568 <_vfiprintf_r+0xa4>
 800a550:	465b      	mov	r3, fp
 800a552:	4622      	mov	r2, r4
 800a554:	4629      	mov	r1, r5
 800a556:	4630      	mov	r0, r6
 800a558:	f7ff ffa1 	bl	800a49e <__sfputs_r>
 800a55c:	3001      	adds	r0, #1
 800a55e:	f000 80a7 	beq.w	800a6b0 <_vfiprintf_r+0x1ec>
 800a562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a564:	445a      	add	r2, fp
 800a566:	9209      	str	r2, [sp, #36]	@ 0x24
 800a568:	f89a 3000 	ldrb.w	r3, [sl]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 809f 	beq.w	800a6b0 <_vfiprintf_r+0x1ec>
 800a572:	2300      	movs	r3, #0
 800a574:	f04f 32ff 	mov.w	r2, #4294967295
 800a578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57c:	f10a 0a01 	add.w	sl, sl, #1
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	9307      	str	r3, [sp, #28]
 800a584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a588:	931a      	str	r3, [sp, #104]	@ 0x68
 800a58a:	4654      	mov	r4, sl
 800a58c:	2205      	movs	r2, #5
 800a58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a592:	4853      	ldr	r0, [pc, #332]	@ (800a6e0 <_vfiprintf_r+0x21c>)
 800a594:	f7f5 fe4c 	bl	8000230 <memchr>
 800a598:	9a04      	ldr	r2, [sp, #16]
 800a59a:	b9d8      	cbnz	r0, 800a5d4 <_vfiprintf_r+0x110>
 800a59c:	06d1      	lsls	r1, r2, #27
 800a59e:	bf44      	itt	mi
 800a5a0:	2320      	movmi	r3, #32
 800a5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a6:	0713      	lsls	r3, r2, #28
 800a5a8:	bf44      	itt	mi
 800a5aa:	232b      	movmi	r3, #43	@ 0x2b
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b6:	d015      	beq.n	800a5e4 <_vfiprintf_r+0x120>
 800a5b8:	9a07      	ldr	r2, [sp, #28]
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c8:	3b30      	subs	r3, #48	@ 0x30
 800a5ca:	2b09      	cmp	r3, #9
 800a5cc:	d94b      	bls.n	800a666 <_vfiprintf_r+0x1a2>
 800a5ce:	b1b0      	cbz	r0, 800a5fe <_vfiprintf_r+0x13a>
 800a5d0:	9207      	str	r2, [sp, #28]
 800a5d2:	e014      	b.n	800a5fe <_vfiprintf_r+0x13a>
 800a5d4:	eba0 0308 	sub.w	r3, r0, r8
 800a5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	46a2      	mov	sl, r4
 800a5e2:	e7d2      	b.n	800a58a <_vfiprintf_r+0xc6>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	1d19      	adds	r1, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	9103      	str	r1, [sp, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bfbb      	ittet	lt
 800a5f0:	425b      	neglt	r3, r3
 800a5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f6:	9307      	strge	r3, [sp, #28]
 800a5f8:	9307      	strlt	r3, [sp, #28]
 800a5fa:	bfb8      	it	lt
 800a5fc:	9204      	strlt	r2, [sp, #16]
 800a5fe:	7823      	ldrb	r3, [r4, #0]
 800a600:	2b2e      	cmp	r3, #46	@ 0x2e
 800a602:	d10a      	bne.n	800a61a <_vfiprintf_r+0x156>
 800a604:	7863      	ldrb	r3, [r4, #1]
 800a606:	2b2a      	cmp	r3, #42	@ 0x2a
 800a608:	d132      	bne.n	800a670 <_vfiprintf_r+0x1ac>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	9203      	str	r2, [sp, #12]
 800a612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a616:	3402      	adds	r4, #2
 800a618:	9305      	str	r3, [sp, #20]
 800a61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6f0 <_vfiprintf_r+0x22c>
 800a61e:	7821      	ldrb	r1, [r4, #0]
 800a620:	2203      	movs	r2, #3
 800a622:	4650      	mov	r0, sl
 800a624:	f7f5 fe04 	bl	8000230 <memchr>
 800a628:	b138      	cbz	r0, 800a63a <_vfiprintf_r+0x176>
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	eba0 000a 	sub.w	r0, r0, sl
 800a630:	2240      	movs	r2, #64	@ 0x40
 800a632:	4082      	lsls	r2, r0
 800a634:	4313      	orrs	r3, r2
 800a636:	3401      	adds	r4, #1
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63e:	4829      	ldr	r0, [pc, #164]	@ (800a6e4 <_vfiprintf_r+0x220>)
 800a640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a644:	2206      	movs	r2, #6
 800a646:	f7f5 fdf3 	bl	8000230 <memchr>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d03f      	beq.n	800a6ce <_vfiprintf_r+0x20a>
 800a64e:	4b26      	ldr	r3, [pc, #152]	@ (800a6e8 <_vfiprintf_r+0x224>)
 800a650:	bb1b      	cbnz	r3, 800a69a <_vfiprintf_r+0x1d6>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	3307      	adds	r3, #7
 800a656:	f023 0307 	bic.w	r3, r3, #7
 800a65a:	3308      	adds	r3, #8
 800a65c:	9303      	str	r3, [sp, #12]
 800a65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a660:	443b      	add	r3, r7
 800a662:	9309      	str	r3, [sp, #36]	@ 0x24
 800a664:	e76a      	b.n	800a53c <_vfiprintf_r+0x78>
 800a666:	fb0c 3202 	mla	r2, ip, r2, r3
 800a66a:	460c      	mov	r4, r1
 800a66c:	2001      	movs	r0, #1
 800a66e:	e7a8      	b.n	800a5c2 <_vfiprintf_r+0xfe>
 800a670:	2300      	movs	r3, #0
 800a672:	3401      	adds	r4, #1
 800a674:	9305      	str	r3, [sp, #20]
 800a676:	4619      	mov	r1, r3
 800a678:	f04f 0c0a 	mov.w	ip, #10
 800a67c:	4620      	mov	r0, r4
 800a67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a682:	3a30      	subs	r2, #48	@ 0x30
 800a684:	2a09      	cmp	r2, #9
 800a686:	d903      	bls.n	800a690 <_vfiprintf_r+0x1cc>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0c6      	beq.n	800a61a <_vfiprintf_r+0x156>
 800a68c:	9105      	str	r1, [sp, #20]
 800a68e:	e7c4      	b.n	800a61a <_vfiprintf_r+0x156>
 800a690:	fb0c 2101 	mla	r1, ip, r1, r2
 800a694:	4604      	mov	r4, r0
 800a696:	2301      	movs	r3, #1
 800a698:	e7f0      	b.n	800a67c <_vfiprintf_r+0x1b8>
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4b12      	ldr	r3, [pc, #72]	@ (800a6ec <_vfiprintf_r+0x228>)
 800a6a2:	a904      	add	r1, sp, #16
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7fc fd63 	bl	8007170 <_printf_float>
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	1c78      	adds	r0, r7, #1
 800a6ae:	d1d6      	bne.n	800a65e <_vfiprintf_r+0x19a>
 800a6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6b2:	07d9      	lsls	r1, r3, #31
 800a6b4:	d405      	bmi.n	800a6c2 <_vfiprintf_r+0x1fe>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	059a      	lsls	r2, r3, #22
 800a6ba:	d402      	bmi.n	800a6c2 <_vfiprintf_r+0x1fe>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6be:	f7fd fc79 	bl	8007fb4 <__retarget_lock_release_recursive>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	065b      	lsls	r3, r3, #25
 800a6c6:	f53f af1f 	bmi.w	800a508 <_vfiprintf_r+0x44>
 800a6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6cc:	e71e      	b.n	800a50c <_vfiprintf_r+0x48>
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <_vfiprintf_r+0x228>)
 800a6d6:	a904      	add	r1, sp, #16
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7fc ffe1 	bl	80076a0 <_printf_i>
 800a6de:	e7e4      	b.n	800a6aa <_vfiprintf_r+0x1e6>
 800a6e0:	0800b6be 	.word	0x0800b6be
 800a6e4:	0800b6c8 	.word	0x0800b6c8
 800a6e8:	08007171 	.word	0x08007171
 800a6ec:	0800a49f 	.word	0x0800a49f
 800a6f0:	0800b6c4 	.word	0x0800b6c4

0800a6f4 <_scanf_chars>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4615      	mov	r5, r2
 800a6fa:	688a      	ldr	r2, [r1, #8]
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	460c      	mov	r4, r1
 800a700:	b932      	cbnz	r2, 800a710 <_scanf_chars+0x1c>
 800a702:	698a      	ldr	r2, [r1, #24]
 800a704:	2a00      	cmp	r2, #0
 800a706:	bf14      	ite	ne
 800a708:	f04f 32ff 	movne.w	r2, #4294967295
 800a70c:	2201      	moveq	r2, #1
 800a70e:	608a      	str	r2, [r1, #8]
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a7a4 <_scanf_chars+0xb0>
 800a716:	06d1      	lsls	r1, r2, #27
 800a718:	bf5f      	itttt	pl
 800a71a:	681a      	ldrpl	r2, [r3, #0]
 800a71c:	1d11      	addpl	r1, r2, #4
 800a71e:	6019      	strpl	r1, [r3, #0]
 800a720:	6816      	ldrpl	r6, [r2, #0]
 800a722:	2700      	movs	r7, #0
 800a724:	69a0      	ldr	r0, [r4, #24]
 800a726:	b188      	cbz	r0, 800a74c <_scanf_chars+0x58>
 800a728:	2801      	cmp	r0, #1
 800a72a:	d107      	bne.n	800a73c <_scanf_chars+0x48>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	6963      	ldr	r3, [r4, #20]
 800a732:	5c9b      	ldrb	r3, [r3, r2]
 800a734:	b953      	cbnz	r3, 800a74c <_scanf_chars+0x58>
 800a736:	2f00      	cmp	r7, #0
 800a738:	d031      	beq.n	800a79e <_scanf_chars+0xaa>
 800a73a:	e022      	b.n	800a782 <_scanf_chars+0x8e>
 800a73c:	2802      	cmp	r0, #2
 800a73e:	d120      	bne.n	800a782 <_scanf_chars+0x8e>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a748:	071b      	lsls	r3, r3, #28
 800a74a:	d41a      	bmi.n	800a782 <_scanf_chars+0x8e>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	06da      	lsls	r2, r3, #27
 800a750:	bf5e      	ittt	pl
 800a752:	682b      	ldrpl	r3, [r5, #0]
 800a754:	781b      	ldrbpl	r3, [r3, #0]
 800a756:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a75a:	682a      	ldr	r2, [r5, #0]
 800a75c:	686b      	ldr	r3, [r5, #4]
 800a75e:	3201      	adds	r2, #1
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	68a2      	ldr	r2, [r4, #8]
 800a764:	3b01      	subs	r3, #1
 800a766:	3a01      	subs	r2, #1
 800a768:	606b      	str	r3, [r5, #4]
 800a76a:	3701      	adds	r7, #1
 800a76c:	60a2      	str	r2, [r4, #8]
 800a76e:	b142      	cbz	r2, 800a782 <_scanf_chars+0x8e>
 800a770:	2b00      	cmp	r3, #0
 800a772:	dcd7      	bgt.n	800a724 <_scanf_chars+0x30>
 800a774:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a778:	4629      	mov	r1, r5
 800a77a:	4640      	mov	r0, r8
 800a77c:	4798      	blx	r3
 800a77e:	2800      	cmp	r0, #0
 800a780:	d0d0      	beq.n	800a724 <_scanf_chars+0x30>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f013 0310 	ands.w	r3, r3, #16
 800a788:	d105      	bne.n	800a796 <_scanf_chars+0xa2>
 800a78a:	68e2      	ldr	r2, [r4, #12]
 800a78c:	3201      	adds	r2, #1
 800a78e:	60e2      	str	r2, [r4, #12]
 800a790:	69a2      	ldr	r2, [r4, #24]
 800a792:	b102      	cbz	r2, 800a796 <_scanf_chars+0xa2>
 800a794:	7033      	strb	r3, [r6, #0]
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	443b      	add	r3, r7
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	2000      	movs	r0, #0
 800a79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	bf00      	nop
 800a7a4:	0800b779 	.word	0x0800b779

0800a7a8 <_scanf_i>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4698      	mov	r8, r3
 800a7ae:	4b74      	ldr	r3, [pc, #464]	@ (800a980 <_scanf_i+0x1d8>)
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	4682      	mov	sl, r0
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a7c2:	4b70      	ldr	r3, [pc, #448]	@ (800a984 <_scanf_i+0x1dc>)
 800a7c4:	69a1      	ldr	r1, [r4, #24]
 800a7c6:	4a70      	ldr	r2, [pc, #448]	@ (800a988 <_scanf_i+0x1e0>)
 800a7c8:	2903      	cmp	r1, #3
 800a7ca:	bf08      	it	eq
 800a7cc:	461a      	moveq	r2, r3
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	9201      	str	r2, [sp, #4]
 800a7d2:	1e5a      	subs	r2, r3, #1
 800a7d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7d8:	bf88      	it	hi
 800a7da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7de:	4627      	mov	r7, r4
 800a7e0:	bf82      	ittt	hi
 800a7e2:	eb03 0905 	addhi.w	r9, r3, r5
 800a7e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7ea:	60a3      	strhi	r3, [r4, #8]
 800a7ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a7f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a7f4:	bf98      	it	ls
 800a7f6:	f04f 0900 	movls.w	r9, #0
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	463d      	mov	r5, r7
 800a7fe:	f04f 0b00 	mov.w	fp, #0
 800a802:	6831      	ldr	r1, [r6, #0]
 800a804:	ab03      	add	r3, sp, #12
 800a806:	7809      	ldrb	r1, [r1, #0]
 800a808:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a80c:	2202      	movs	r2, #2
 800a80e:	f7f5 fd0f 	bl	8000230 <memchr>
 800a812:	b328      	cbz	r0, 800a860 <_scanf_i+0xb8>
 800a814:	f1bb 0f01 	cmp.w	fp, #1
 800a818:	d159      	bne.n	800a8ce <_scanf_i+0x126>
 800a81a:	6862      	ldr	r2, [r4, #4]
 800a81c:	b92a      	cbnz	r2, 800a82a <_scanf_i+0x82>
 800a81e:	6822      	ldr	r2, [r4, #0]
 800a820:	2108      	movs	r1, #8
 800a822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a826:	6061      	str	r1, [r4, #4]
 800a828:	6022      	str	r2, [r4, #0]
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a830:	6022      	str	r2, [r4, #0]
 800a832:	68a2      	ldr	r2, [r4, #8]
 800a834:	1e51      	subs	r1, r2, #1
 800a836:	60a1      	str	r1, [r4, #8]
 800a838:	b192      	cbz	r2, 800a860 <_scanf_i+0xb8>
 800a83a:	6832      	ldr	r2, [r6, #0]
 800a83c:	1c51      	adds	r1, r2, #1
 800a83e:	6031      	str	r1, [r6, #0]
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	f805 2b01 	strb.w	r2, [r5], #1
 800a846:	6872      	ldr	r2, [r6, #4]
 800a848:	3a01      	subs	r2, #1
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	6072      	str	r2, [r6, #4]
 800a84e:	dc07      	bgt.n	800a860 <_scanf_i+0xb8>
 800a850:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a854:	4631      	mov	r1, r6
 800a856:	4650      	mov	r0, sl
 800a858:	4790      	blx	r2
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f040 8085 	bne.w	800a96a <_scanf_i+0x1c2>
 800a860:	f10b 0b01 	add.w	fp, fp, #1
 800a864:	f1bb 0f03 	cmp.w	fp, #3
 800a868:	d1cb      	bne.n	800a802 <_scanf_i+0x5a>
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	b90b      	cbnz	r3, 800a872 <_scanf_i+0xca>
 800a86e:	230a      	movs	r3, #10
 800a870:	6063      	str	r3, [r4, #4]
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	4945      	ldr	r1, [pc, #276]	@ (800a98c <_scanf_i+0x1e4>)
 800a876:	6960      	ldr	r0, [r4, #20]
 800a878:	1ac9      	subs	r1, r1, r3
 800a87a:	f000 f997 	bl	800abac <__sccl>
 800a87e:	f04f 0b00 	mov.w	fp, #0
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	6822      	ldr	r2, [r4, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d03d      	beq.n	800a906 <_scanf_i+0x15e>
 800a88a:	6831      	ldr	r1, [r6, #0]
 800a88c:	6960      	ldr	r0, [r4, #20]
 800a88e:	f891 c000 	ldrb.w	ip, [r1]
 800a892:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a896:	2800      	cmp	r0, #0
 800a898:	d035      	beq.n	800a906 <_scanf_i+0x15e>
 800a89a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a89e:	d124      	bne.n	800a8ea <_scanf_i+0x142>
 800a8a0:	0510      	lsls	r0, r2, #20
 800a8a2:	d522      	bpl.n	800a8ea <_scanf_i+0x142>
 800a8a4:	f10b 0b01 	add.w	fp, fp, #1
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	d003      	beq.n	800a8b6 <_scanf_i+0x10e>
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a8b4:	60a3      	str	r3, [r4, #8]
 800a8b6:	6873      	ldr	r3, [r6, #4]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	6073      	str	r3, [r6, #4]
 800a8be:	dd1b      	ble.n	800a8f8 <_scanf_i+0x150>
 800a8c0:	6833      	ldr	r3, [r6, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	6033      	str	r3, [r6, #0]
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	60a3      	str	r3, [r4, #8]
 800a8cc:	e7d9      	b.n	800a882 <_scanf_i+0xda>
 800a8ce:	f1bb 0f02 	cmp.w	fp, #2
 800a8d2:	d1ae      	bne.n	800a832 <_scanf_i+0x8a>
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a8da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a8de:	d1c4      	bne.n	800a86a <_scanf_i+0xc2>
 800a8e0:	2110      	movs	r1, #16
 800a8e2:	6061      	str	r1, [r4, #4]
 800a8e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8e8:	e7a2      	b.n	800a830 <_scanf_i+0x88>
 800a8ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a8ee:	6022      	str	r2, [r4, #0]
 800a8f0:	780b      	ldrb	r3, [r1, #0]
 800a8f2:	f805 3b01 	strb.w	r3, [r5], #1
 800a8f6:	e7de      	b.n	800a8b6 <_scanf_i+0x10e>
 800a8f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4650      	mov	r0, sl
 800a900:	4798      	blx	r3
 800a902:	2800      	cmp	r0, #0
 800a904:	d0df      	beq.n	800a8c6 <_scanf_i+0x11e>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	05d9      	lsls	r1, r3, #23
 800a90a:	d50d      	bpl.n	800a928 <_scanf_i+0x180>
 800a90c:	42bd      	cmp	r5, r7
 800a90e:	d909      	bls.n	800a924 <_scanf_i+0x17c>
 800a910:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a914:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a918:	4632      	mov	r2, r6
 800a91a:	4650      	mov	r0, sl
 800a91c:	4798      	blx	r3
 800a91e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a922:	464d      	mov	r5, r9
 800a924:	42bd      	cmp	r5, r7
 800a926:	d028      	beq.n	800a97a <_scanf_i+0x1d2>
 800a928:	6822      	ldr	r2, [r4, #0]
 800a92a:	f012 0210 	ands.w	r2, r2, #16
 800a92e:	d113      	bne.n	800a958 <_scanf_i+0x1b0>
 800a930:	702a      	strb	r2, [r5, #0]
 800a932:	6863      	ldr	r3, [r4, #4]
 800a934:	9e01      	ldr	r6, [sp, #4]
 800a936:	4639      	mov	r1, r7
 800a938:	4650      	mov	r0, sl
 800a93a:	47b0      	blx	r6
 800a93c:	f8d8 3000 	ldr.w	r3, [r8]
 800a940:	6821      	ldr	r1, [r4, #0]
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	f8c8 2000 	str.w	r2, [r8]
 800a948:	f011 0f20 	tst.w	r1, #32
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	d00f      	beq.n	800a970 <_scanf_i+0x1c8>
 800a950:	6018      	str	r0, [r3, #0]
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60e3      	str	r3, [r4, #12]
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	1bed      	subs	r5, r5, r7
 800a95c:	445d      	add	r5, fp
 800a95e:	442b      	add	r3, r5
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	2000      	movs	r0, #0
 800a964:	b007      	add	sp, #28
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	f04f 0b00 	mov.w	fp, #0
 800a96e:	e7ca      	b.n	800a906 <_scanf_i+0x15e>
 800a970:	07ca      	lsls	r2, r1, #31
 800a972:	bf4c      	ite	mi
 800a974:	8018      	strhmi	r0, [r3, #0]
 800a976:	6018      	strpl	r0, [r3, #0]
 800a978:	e7eb      	b.n	800a952 <_scanf_i+0x1aa>
 800a97a:	2001      	movs	r0, #1
 800a97c:	e7f2      	b.n	800a964 <_scanf_i+0x1bc>
 800a97e:	bf00      	nop
 800a980:	0800b518 	.word	0x0800b518
 800a984:	0800ae65 	.word	0x0800ae65
 800a988:	08009e05 	.word	0x08009e05
 800a98c:	0800b6df 	.word	0x0800b6df

0800a990 <__sflush_r>:
 800a990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	0716      	lsls	r6, r2, #28
 800a99a:	4605      	mov	r5, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	d454      	bmi.n	800aa4a <__sflush_r+0xba>
 800a9a0:	684b      	ldr	r3, [r1, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dc02      	bgt.n	800a9ac <__sflush_r+0x1c>
 800a9a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd48      	ble.n	800aa3e <__sflush_r+0xae>
 800a9ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	d045      	beq.n	800aa3e <__sflush_r+0xae>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9b8:	682f      	ldr	r7, [r5, #0]
 800a9ba:	6a21      	ldr	r1, [r4, #32]
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	d030      	beq.n	800aa22 <__sflush_r+0x92>
 800a9c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	0759      	lsls	r1, r3, #29
 800a9c6:	d505      	bpl.n	800a9d4 <__sflush_r+0x44>
 800a9c8:	6863      	ldr	r3, [r4, #4]
 800a9ca:	1ad2      	subs	r2, r2, r3
 800a9cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9ce:	b10b      	cbz	r3, 800a9d4 <__sflush_r+0x44>
 800a9d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9d2:	1ad2      	subs	r2, r2, r3
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9d8:	6a21      	ldr	r1, [r4, #32]
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b0      	blx	r6
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	d106      	bne.n	800a9f2 <__sflush_r+0x62>
 800a9e4:	6829      	ldr	r1, [r5, #0]
 800a9e6:	291d      	cmp	r1, #29
 800a9e8:	d82b      	bhi.n	800aa42 <__sflush_r+0xb2>
 800a9ea:	4a2a      	ldr	r2, [pc, #168]	@ (800aa94 <__sflush_r+0x104>)
 800a9ec:	40ca      	lsrs	r2, r1
 800a9ee:	07d6      	lsls	r6, r2, #31
 800a9f0:	d527      	bpl.n	800aa42 <__sflush_r+0xb2>
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	6062      	str	r2, [r4, #4]
 800a9f6:	04d9      	lsls	r1, r3, #19
 800a9f8:	6922      	ldr	r2, [r4, #16]
 800a9fa:	6022      	str	r2, [r4, #0]
 800a9fc:	d504      	bpl.n	800aa08 <__sflush_r+0x78>
 800a9fe:	1c42      	adds	r2, r0, #1
 800aa00:	d101      	bne.n	800aa06 <__sflush_r+0x76>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	b903      	cbnz	r3, 800aa08 <__sflush_r+0x78>
 800aa06:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa0a:	602f      	str	r7, [r5, #0]
 800aa0c:	b1b9      	cbz	r1, 800aa3e <__sflush_r+0xae>
 800aa0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa12:	4299      	cmp	r1, r3
 800aa14:	d002      	beq.n	800aa1c <__sflush_r+0x8c>
 800aa16:	4628      	mov	r0, r5
 800aa18:	f7fe f93e 	bl	8008c98 <_free_r>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa20:	e00d      	b.n	800aa3e <__sflush_r+0xae>
 800aa22:	2301      	movs	r3, #1
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b0      	blx	r6
 800aa28:	4602      	mov	r2, r0
 800aa2a:	1c50      	adds	r0, r2, #1
 800aa2c:	d1c9      	bne.n	800a9c2 <__sflush_r+0x32>
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0c6      	beq.n	800a9c2 <__sflush_r+0x32>
 800aa34:	2b1d      	cmp	r3, #29
 800aa36:	d001      	beq.n	800aa3c <__sflush_r+0xac>
 800aa38:	2b16      	cmp	r3, #22
 800aa3a:	d11e      	bne.n	800aa7a <__sflush_r+0xea>
 800aa3c:	602f      	str	r7, [r5, #0]
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e022      	b.n	800aa88 <__sflush_r+0xf8>
 800aa42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa46:	b21b      	sxth	r3, r3
 800aa48:	e01b      	b.n	800aa82 <__sflush_r+0xf2>
 800aa4a:	690f      	ldr	r7, [r1, #16]
 800aa4c:	2f00      	cmp	r7, #0
 800aa4e:	d0f6      	beq.n	800aa3e <__sflush_r+0xae>
 800aa50:	0793      	lsls	r3, r2, #30
 800aa52:	680e      	ldr	r6, [r1, #0]
 800aa54:	bf08      	it	eq
 800aa56:	694b      	ldreq	r3, [r1, #20]
 800aa58:	600f      	str	r7, [r1, #0]
 800aa5a:	bf18      	it	ne
 800aa5c:	2300      	movne	r3, #0
 800aa5e:	eba6 0807 	sub.w	r8, r6, r7
 800aa62:	608b      	str	r3, [r1, #8]
 800aa64:	f1b8 0f00 	cmp.w	r8, #0
 800aa68:	dde9      	ble.n	800aa3e <__sflush_r+0xae>
 800aa6a:	6a21      	ldr	r1, [r4, #32]
 800aa6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa6e:	4643      	mov	r3, r8
 800aa70:	463a      	mov	r2, r7
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b0      	blx	r6
 800aa76:	2800      	cmp	r0, #0
 800aa78:	dc08      	bgt.n	800aa8c <__sflush_r+0xfc>
 800aa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8c:	4407      	add	r7, r0
 800aa8e:	eba8 0800 	sub.w	r8, r8, r0
 800aa92:	e7e7      	b.n	800aa64 <__sflush_r+0xd4>
 800aa94:	20400001 	.word	0x20400001

0800aa98 <_fflush_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	690b      	ldr	r3, [r1, #16]
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b913      	cbnz	r3, 800aaa8 <_fflush_r+0x10>
 800aaa2:	2500      	movs	r5, #0
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	b118      	cbz	r0, 800aab2 <_fflush_r+0x1a>
 800aaaa:	6a03      	ldr	r3, [r0, #32]
 800aaac:	b90b      	cbnz	r3, 800aab2 <_fflush_r+0x1a>
 800aaae:	f7fc ffa1 	bl	80079f4 <__sinit>
 800aab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f3      	beq.n	800aaa2 <_fflush_r+0xa>
 800aaba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aabc:	07d0      	lsls	r0, r2, #31
 800aabe:	d404      	bmi.n	800aaca <_fflush_r+0x32>
 800aac0:	0599      	lsls	r1, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_fflush_r+0x32>
 800aac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aac6:	f7fd fa74 	bl	8007fb2 <__retarget_lock_acquire_recursive>
 800aaca:	4628      	mov	r0, r5
 800aacc:	4621      	mov	r1, r4
 800aace:	f7ff ff5f 	bl	800a990 <__sflush_r>
 800aad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aad4:	07da      	lsls	r2, r3, #31
 800aad6:	4605      	mov	r5, r0
 800aad8:	d4e4      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	059b      	lsls	r3, r3, #22
 800aade:	d4e1      	bmi.n	800aaa4 <_fflush_r+0xc>
 800aae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aae2:	f7fd fa67 	bl	8007fb4 <__retarget_lock_release_recursive>
 800aae6:	e7dd      	b.n	800aaa4 <_fflush_r+0xc>

0800aae8 <__swhatbuf_r>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	b096      	sub	sp, #88	@ 0x58
 800aaf4:	4615      	mov	r5, r2
 800aaf6:	461e      	mov	r6, r3
 800aaf8:	da0d      	bge.n	800ab16 <__swhatbuf_r+0x2e>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab00:	f04f 0100 	mov.w	r1, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2340      	movne	r3, #64	@ 0x40
 800ab08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	6031      	str	r1, [r6, #0]
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	b016      	add	sp, #88	@ 0x58
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
 800ab16:	466a      	mov	r2, sp
 800ab18:	f000 f8d6 	bl	800acc8 <_fstat_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	dbec      	blt.n	800aafa <__swhatbuf_r+0x12>
 800ab20:	9901      	ldr	r1, [sp, #4]
 800ab22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab2a:	4259      	negs	r1, r3
 800ab2c:	4159      	adcs	r1, r3
 800ab2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab32:	e7eb      	b.n	800ab0c <__swhatbuf_r+0x24>

0800ab34 <__smakebuf_r>:
 800ab34:	898b      	ldrh	r3, [r1, #12]
 800ab36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab38:	079d      	lsls	r5, r3, #30
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	d507      	bpl.n	800ab50 <__smakebuf_r+0x1c>
 800ab40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	6123      	str	r3, [r4, #16]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	6163      	str	r3, [r4, #20]
 800ab4c:	b003      	add	sp, #12
 800ab4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab50:	ab01      	add	r3, sp, #4
 800ab52:	466a      	mov	r2, sp
 800ab54:	f7ff ffc8 	bl	800aae8 <__swhatbuf_r>
 800ab58:	9f00      	ldr	r7, [sp, #0]
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7fb fb94 	bl	800628c <_malloc_r>
 800ab64:	b948      	cbnz	r0, 800ab7a <__smakebuf_r+0x46>
 800ab66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6a:	059a      	lsls	r2, r3, #22
 800ab6c:	d4ee      	bmi.n	800ab4c <__smakebuf_r+0x18>
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	f043 0302 	orr.w	r3, r3, #2
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	e7e2      	b.n	800ab40 <__smakebuf_r+0xc>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	6020      	str	r0, [r4, #0]
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab8a:	b15b      	cbz	r3, 800aba4 <__smakebuf_r+0x70>
 800ab8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f8ab 	bl	800acec <_isatty_r>
 800ab96:	b128      	cbz	r0, 800aba4 <__smakebuf_r+0x70>
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	f043 0301 	orr.w	r3, r3, #1
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	431d      	orrs	r5, r3
 800aba8:	81a5      	strh	r5, [r4, #12]
 800abaa:	e7cf      	b.n	800ab4c <__smakebuf_r+0x18>

0800abac <__sccl>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	780b      	ldrb	r3, [r1, #0]
 800abb0:	4604      	mov	r4, r0
 800abb2:	2b5e      	cmp	r3, #94	@ 0x5e
 800abb4:	bf0b      	itete	eq
 800abb6:	784b      	ldrbeq	r3, [r1, #1]
 800abb8:	1c4a      	addne	r2, r1, #1
 800abba:	1c8a      	addeq	r2, r1, #2
 800abbc:	2100      	movne	r1, #0
 800abbe:	bf08      	it	eq
 800abc0:	2101      	moveq	r1, #1
 800abc2:	3801      	subs	r0, #1
 800abc4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800abc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800abcc:	42a8      	cmp	r0, r5
 800abce:	d1fb      	bne.n	800abc8 <__sccl+0x1c>
 800abd0:	b90b      	cbnz	r3, 800abd6 <__sccl+0x2a>
 800abd2:	1e50      	subs	r0, r2, #1
 800abd4:	bd70      	pop	{r4, r5, r6, pc}
 800abd6:	f081 0101 	eor.w	r1, r1, #1
 800abda:	54e1      	strb	r1, [r4, r3]
 800abdc:	4610      	mov	r0, r2
 800abde:	4602      	mov	r2, r0
 800abe0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800abe4:	2d2d      	cmp	r5, #45	@ 0x2d
 800abe6:	d005      	beq.n	800abf4 <__sccl+0x48>
 800abe8:	2d5d      	cmp	r5, #93	@ 0x5d
 800abea:	d016      	beq.n	800ac1a <__sccl+0x6e>
 800abec:	2d00      	cmp	r5, #0
 800abee:	d0f1      	beq.n	800abd4 <__sccl+0x28>
 800abf0:	462b      	mov	r3, r5
 800abf2:	e7f2      	b.n	800abda <__sccl+0x2e>
 800abf4:	7846      	ldrb	r6, [r0, #1]
 800abf6:	2e5d      	cmp	r6, #93	@ 0x5d
 800abf8:	d0fa      	beq.n	800abf0 <__sccl+0x44>
 800abfa:	42b3      	cmp	r3, r6
 800abfc:	dcf8      	bgt.n	800abf0 <__sccl+0x44>
 800abfe:	3002      	adds	r0, #2
 800ac00:	461a      	mov	r2, r3
 800ac02:	3201      	adds	r2, #1
 800ac04:	4296      	cmp	r6, r2
 800ac06:	54a1      	strb	r1, [r4, r2]
 800ac08:	dcfb      	bgt.n	800ac02 <__sccl+0x56>
 800ac0a:	1af2      	subs	r2, r6, r3
 800ac0c:	3a01      	subs	r2, #1
 800ac0e:	1c5d      	adds	r5, r3, #1
 800ac10:	42b3      	cmp	r3, r6
 800ac12:	bfa8      	it	ge
 800ac14:	2200      	movge	r2, #0
 800ac16:	18ab      	adds	r3, r5, r2
 800ac18:	e7e1      	b.n	800abde <__sccl+0x32>
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	e7da      	b.n	800abd4 <__sccl+0x28>

0800ac1e <__submore>:
 800ac1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ac26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac2a:	4299      	cmp	r1, r3
 800ac2c:	d11d      	bne.n	800ac6a <__submore+0x4c>
 800ac2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ac32:	f7fb fb2b 	bl	800628c <_malloc_r>
 800ac36:	b918      	cbnz	r0, 800ac40 <__submore+0x22>
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac44:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ac46:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ac4a:	6360      	str	r0, [r4, #52]	@ 0x34
 800ac4c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ac50:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ac54:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ac58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ac5c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ac60:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ac64:	6020      	str	r0, [r4, #0]
 800ac66:	2000      	movs	r0, #0
 800ac68:	e7e8      	b.n	800ac3c <__submore+0x1e>
 800ac6a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ac6c:	0077      	lsls	r7, r6, #1
 800ac6e:	463a      	mov	r2, r7
 800ac70:	f7fb fba0 	bl	80063b4 <_realloc_r>
 800ac74:	4605      	mov	r5, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d0de      	beq.n	800ac38 <__submore+0x1a>
 800ac7a:	eb00 0806 	add.w	r8, r0, r6
 800ac7e:	4601      	mov	r1, r0
 800ac80:	4632      	mov	r2, r6
 800ac82:	4640      	mov	r0, r8
 800ac84:	f7fd f997 	bl	8007fb6 <memcpy>
 800ac88:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ac8c:	f8c4 8000 	str.w	r8, [r4]
 800ac90:	e7e9      	b.n	800ac66 <__submore+0x48>

0800ac92 <memmove>:
 800ac92:	4288      	cmp	r0, r1
 800ac94:	b510      	push	{r4, lr}
 800ac96:	eb01 0402 	add.w	r4, r1, r2
 800ac9a:	d902      	bls.n	800aca2 <memmove+0x10>
 800ac9c:	4284      	cmp	r4, r0
 800ac9e:	4623      	mov	r3, r4
 800aca0:	d807      	bhi.n	800acb2 <memmove+0x20>
 800aca2:	1e43      	subs	r3, r0, #1
 800aca4:	42a1      	cmp	r1, r4
 800aca6:	d008      	beq.n	800acba <memmove+0x28>
 800aca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acb0:	e7f8      	b.n	800aca4 <memmove+0x12>
 800acb2:	4402      	add	r2, r0
 800acb4:	4601      	mov	r1, r0
 800acb6:	428a      	cmp	r2, r1
 800acb8:	d100      	bne.n	800acbc <memmove+0x2a>
 800acba:	bd10      	pop	{r4, pc}
 800acbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc4:	e7f7      	b.n	800acb6 <memmove+0x24>
	...

0800acc8 <_fstat_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4d07      	ldr	r5, [pc, #28]	@ (800ace8 <_fstat_r+0x20>)
 800accc:	2300      	movs	r3, #0
 800acce:	4604      	mov	r4, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	4611      	mov	r1, r2
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	f7f8 f9c9 	bl	800306c <_fstat>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d102      	bne.n	800ace4 <_fstat_r+0x1c>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b103      	cbz	r3, 800ace4 <_fstat_r+0x1c>
 800ace2:	6023      	str	r3, [r4, #0]
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20000cd8 	.word	0x20000cd8

0800acec <_isatty_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d06      	ldr	r5, [pc, #24]	@ (800ad08 <_isatty_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7f8 f9c8 	bl	800308c <_isatty>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_isatty_r+0x1a>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_isatty_r+0x1a>
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	20000cd8 	.word	0x20000cd8

0800ad0c <__assert_func>:
 800ad0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad0e:	4614      	mov	r4, r2
 800ad10:	461a      	mov	r2, r3
 800ad12:	4b09      	ldr	r3, [pc, #36]	@ (800ad38 <__assert_func+0x2c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4605      	mov	r5, r0
 800ad18:	68d8      	ldr	r0, [r3, #12]
 800ad1a:	b14c      	cbz	r4, 800ad30 <__assert_func+0x24>
 800ad1c:	4b07      	ldr	r3, [pc, #28]	@ (800ad3c <__assert_func+0x30>)
 800ad1e:	9100      	str	r1, [sp, #0]
 800ad20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad24:	4906      	ldr	r1, [pc, #24]	@ (800ad40 <__assert_func+0x34>)
 800ad26:	462b      	mov	r3, r5
 800ad28:	f7fc fe7c 	bl	8007a24 <fiprintf>
 800ad2c:	f000 f89c 	bl	800ae68 <abort>
 800ad30:	4b04      	ldr	r3, [pc, #16]	@ (800ad44 <__assert_func+0x38>)
 800ad32:	461c      	mov	r4, r3
 800ad34:	e7f3      	b.n	800ad1e <__assert_func+0x12>
 800ad36:	bf00      	nop
 800ad38:	200001c0 	.word	0x200001c0
 800ad3c:	0800b6ea 	.word	0x0800b6ea
 800ad40:	0800b6f7 	.word	0x0800b6f7
 800ad44:	0800b725 	.word	0x0800b725

0800ad48 <_calloc_r>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	fba1 5402 	umull	r5, r4, r1, r2
 800ad4e:	b934      	cbnz	r4, 800ad5e <_calloc_r+0x16>
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7fb fa9b 	bl	800628c <_malloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	b928      	cbnz	r0, 800ad66 <_calloc_r+0x1e>
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	220c      	movs	r2, #12
 800ad60:	6002      	str	r2, [r0, #0]
 800ad62:	2600      	movs	r6, #0
 800ad64:	e7f9      	b.n	800ad5a <_calloc_r+0x12>
 800ad66:	462a      	mov	r2, r5
 800ad68:	4621      	mov	r1, r4
 800ad6a:	f7fd f859 	bl	8007e20 <memset>
 800ad6e:	e7f4      	b.n	800ad5a <_calloc_r+0x12>

0800ad70 <_strtol_l.isra.0>:
 800ad70:	2b24      	cmp	r3, #36	@ 0x24
 800ad72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad76:	4686      	mov	lr, r0
 800ad78:	4690      	mov	r8, r2
 800ad7a:	d801      	bhi.n	800ad80 <_strtol_l.isra.0+0x10>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d106      	bne.n	800ad8e <_strtol_l.isra.0+0x1e>
 800ad80:	f7fd f8ec 	bl	8007f5c <__errno>
 800ad84:	2316      	movs	r3, #22
 800ad86:	6003      	str	r3, [r0, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8e:	4834      	ldr	r0, [pc, #208]	@ (800ae60 <_strtol_l.isra.0+0xf0>)
 800ad90:	460d      	mov	r5, r1
 800ad92:	462a      	mov	r2, r5
 800ad94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad98:	5d06      	ldrb	r6, [r0, r4]
 800ad9a:	f016 0608 	ands.w	r6, r6, #8
 800ad9e:	d1f8      	bne.n	800ad92 <_strtol_l.isra.0+0x22>
 800ada0:	2c2d      	cmp	r4, #45	@ 0x2d
 800ada2:	d110      	bne.n	800adc6 <_strtol_l.isra.0+0x56>
 800ada4:	782c      	ldrb	r4, [r5, #0]
 800ada6:	2601      	movs	r6, #1
 800ada8:	1c95      	adds	r5, r2, #2
 800adaa:	f033 0210 	bics.w	r2, r3, #16
 800adae:	d115      	bne.n	800addc <_strtol_l.isra.0+0x6c>
 800adb0:	2c30      	cmp	r4, #48	@ 0x30
 800adb2:	d10d      	bne.n	800add0 <_strtol_l.isra.0+0x60>
 800adb4:	782a      	ldrb	r2, [r5, #0]
 800adb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adba:	2a58      	cmp	r2, #88	@ 0x58
 800adbc:	d108      	bne.n	800add0 <_strtol_l.isra.0+0x60>
 800adbe:	786c      	ldrb	r4, [r5, #1]
 800adc0:	3502      	adds	r5, #2
 800adc2:	2310      	movs	r3, #16
 800adc4:	e00a      	b.n	800addc <_strtol_l.isra.0+0x6c>
 800adc6:	2c2b      	cmp	r4, #43	@ 0x2b
 800adc8:	bf04      	itt	eq
 800adca:	782c      	ldrbeq	r4, [r5, #0]
 800adcc:	1c95      	addeq	r5, r2, #2
 800adce:	e7ec      	b.n	800adaa <_strtol_l.isra.0+0x3a>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1f6      	bne.n	800adc2 <_strtol_l.isra.0+0x52>
 800add4:	2c30      	cmp	r4, #48	@ 0x30
 800add6:	bf14      	ite	ne
 800add8:	230a      	movne	r3, #10
 800adda:	2308      	moveq	r3, #8
 800addc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ade0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ade4:	2200      	movs	r2, #0
 800ade6:	fbbc f9f3 	udiv	r9, ip, r3
 800adea:	4610      	mov	r0, r2
 800adec:	fb03 ca19 	mls	sl, r3, r9, ip
 800adf0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800adf4:	2f09      	cmp	r7, #9
 800adf6:	d80f      	bhi.n	800ae18 <_strtol_l.isra.0+0xa8>
 800adf8:	463c      	mov	r4, r7
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	dd1b      	ble.n	800ae36 <_strtol_l.isra.0+0xc6>
 800adfe:	1c57      	adds	r7, r2, #1
 800ae00:	d007      	beq.n	800ae12 <_strtol_l.isra.0+0xa2>
 800ae02:	4581      	cmp	r9, r0
 800ae04:	d314      	bcc.n	800ae30 <_strtol_l.isra.0+0xc0>
 800ae06:	d101      	bne.n	800ae0c <_strtol_l.isra.0+0x9c>
 800ae08:	45a2      	cmp	sl, r4
 800ae0a:	db11      	blt.n	800ae30 <_strtol_l.isra.0+0xc0>
 800ae0c:	fb00 4003 	mla	r0, r0, r3, r4
 800ae10:	2201      	movs	r2, #1
 800ae12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae16:	e7eb      	b.n	800adf0 <_strtol_l.isra.0+0x80>
 800ae18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae1c:	2f19      	cmp	r7, #25
 800ae1e:	d801      	bhi.n	800ae24 <_strtol_l.isra.0+0xb4>
 800ae20:	3c37      	subs	r4, #55	@ 0x37
 800ae22:	e7ea      	b.n	800adfa <_strtol_l.isra.0+0x8a>
 800ae24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae28:	2f19      	cmp	r7, #25
 800ae2a:	d804      	bhi.n	800ae36 <_strtol_l.isra.0+0xc6>
 800ae2c:	3c57      	subs	r4, #87	@ 0x57
 800ae2e:	e7e4      	b.n	800adfa <_strtol_l.isra.0+0x8a>
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	e7ed      	b.n	800ae12 <_strtol_l.isra.0+0xa2>
 800ae36:	1c53      	adds	r3, r2, #1
 800ae38:	d108      	bne.n	800ae4c <_strtol_l.isra.0+0xdc>
 800ae3a:	2322      	movs	r3, #34	@ 0x22
 800ae3c:	f8ce 3000 	str.w	r3, [lr]
 800ae40:	4660      	mov	r0, ip
 800ae42:	f1b8 0f00 	cmp.w	r8, #0
 800ae46:	d0a0      	beq.n	800ad8a <_strtol_l.isra.0+0x1a>
 800ae48:	1e69      	subs	r1, r5, #1
 800ae4a:	e006      	b.n	800ae5a <_strtol_l.isra.0+0xea>
 800ae4c:	b106      	cbz	r6, 800ae50 <_strtol_l.isra.0+0xe0>
 800ae4e:	4240      	negs	r0, r0
 800ae50:	f1b8 0f00 	cmp.w	r8, #0
 800ae54:	d099      	beq.n	800ad8a <_strtol_l.isra.0+0x1a>
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	d1f6      	bne.n	800ae48 <_strtol_l.isra.0+0xd8>
 800ae5a:	f8c8 1000 	str.w	r1, [r8]
 800ae5e:	e794      	b.n	800ad8a <_strtol_l.isra.0+0x1a>
 800ae60:	0800b779 	.word	0x0800b779

0800ae64 <_strtol_r>:
 800ae64:	f7ff bf84 	b.w	800ad70 <_strtol_l.isra.0>

0800ae68 <abort>:
 800ae68:	b508      	push	{r3, lr}
 800ae6a:	2006      	movs	r0, #6
 800ae6c:	f000 f82c 	bl	800aec8 <raise>
 800ae70:	2001      	movs	r0, #1
 800ae72:	f7f8 f8ab 	bl	8002fcc <_exit>

0800ae76 <_raise_r>:
 800ae76:	291f      	cmp	r1, #31
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	d904      	bls.n	800ae8a <_raise_r+0x14>
 800ae80:	2316      	movs	r3, #22
 800ae82:	6003      	str	r3, [r0, #0]
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae8c:	b112      	cbz	r2, 800ae94 <_raise_r+0x1e>
 800ae8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae92:	b94b      	cbnz	r3, 800aea8 <_raise_r+0x32>
 800ae94:	4628      	mov	r0, r5
 800ae96:	f000 f831 	bl	800aefc <_getpid_r>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	4601      	mov	r1, r0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aea4:	f000 b818 	b.w	800aed8 <_kill_r>
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d00a      	beq.n	800aec2 <_raise_r+0x4c>
 800aeac:	1c59      	adds	r1, r3, #1
 800aeae:	d103      	bne.n	800aeb8 <_raise_r+0x42>
 800aeb0:	2316      	movs	r3, #22
 800aeb2:	6003      	str	r3, [r0, #0]
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	e7e7      	b.n	800ae88 <_raise_r+0x12>
 800aeb8:	2100      	movs	r1, #0
 800aeba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aebe:	4620      	mov	r0, r4
 800aec0:	4798      	blx	r3
 800aec2:	2000      	movs	r0, #0
 800aec4:	e7e0      	b.n	800ae88 <_raise_r+0x12>
	...

0800aec8 <raise>:
 800aec8:	4b02      	ldr	r3, [pc, #8]	@ (800aed4 <raise+0xc>)
 800aeca:	4601      	mov	r1, r0
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f7ff bfd2 	b.w	800ae76 <_raise_r>
 800aed2:	bf00      	nop
 800aed4:	200001c0 	.word	0x200001c0

0800aed8 <_kill_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	@ (800aef8 <_kill_r+0x20>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	4611      	mov	r1, r2
 800aee4:	602b      	str	r3, [r5, #0]
 800aee6:	f7f8 f861 	bl	8002fac <_kill>
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	d102      	bne.n	800aef4 <_kill_r+0x1c>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	b103      	cbz	r3, 800aef4 <_kill_r+0x1c>
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	bd38      	pop	{r3, r4, r5, pc}
 800aef6:	bf00      	nop
 800aef8:	20000cd8 	.word	0x20000cd8

0800aefc <_getpid_r>:
 800aefc:	f7f8 b84e 	b.w	8002f9c <_getpid>

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
