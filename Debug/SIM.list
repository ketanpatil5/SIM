
SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  08008bf0  08008bf0  00009bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009650  08009650  0000b200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009650  08009650  0000a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009658  08009658  0000b200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009658  08009658  0000a658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08009660  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000200  08009860  0000b200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08009860  0000b53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eadd  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afa  00000000  00000000  00019d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  0001c808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a12  00000000  00000000  0001d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d54  00000000  00000000  0001df0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a13  00000000  00000000  00041c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd43e  00000000  00000000  00053671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  00120af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001252dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008bd8 	.word	0x08008bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08008bd8 	.word	0x08008bd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e015      	b.n	8000f5c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff f9bd 	bl	80002b0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	4798      	blx	r3
 8000f44:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e005      	b.n	8000f5c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f005 fa66 	bl	8006426 <memcpy>

    return copy;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2028      	movs	r0, #40	@ 0x28
 8000f72:	4798      	blx	r3
 8000f74:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f7c:	2228      	movs	r2, #40	@ 0x28
 8000f7e:	2100      	movs	r1, #0
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f005 f9aa 	bl	80062da <memset>
    }

    return node;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f9c:	e037      	b.n	800100e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <cJSON_Delete+0x32>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffe7 	bl	8000f90 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <cJSON_Delete+0x52>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <cJSON_Delete+0x90>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6912      	ldr	r2, [r2, #16]
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <cJSON_Delete+0x72>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <cJSON_Delete+0x90>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6a12      	ldr	r2, [r2, #32]
 8000ffe:	4610      	mov	r0, r2
 8001000:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <cJSON_Delete+0x90>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
        item = next;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1c4      	bne.n	8000f9e <cJSON_Delete+0xe>
    }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000

08001024 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001028:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <ensure+0x20>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <ensure+0x24>
    {
        return NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	e086      	b.n	8001166 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <ensure+0x3c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d301      	bcc.n	8001070 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800106c:	2300      	movs	r3, #0
 800106e:	e07a      	b.n	8001166 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	da01      	bge.n	800107a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001076:	2300      	movs	r3, #0
 8001078:	e075      	b.n	8001166 <ensure+0x132>
    }

    needed += p->offset + 1;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	3301      	adds	r3, #1
 8001084:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d805      	bhi.n	800109c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4413      	add	r3, r2
 800109a:	e064      	b.n	8001166 <ensure+0x132>
    }

    if (p->noalloc) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <ensure+0x74>
        return NULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e05e      	b.n	8001166 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ae:	d308      	bcc.n	80010c2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db03      	blt.n	80010be <ensure+0x8a>
        {
            newsize = INT_MAX;
 80010b6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e004      	b.n	80010c8 <ensure+0x94>
        }
        else
        {
            return NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	e051      	b.n	8001166 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d018      	beq.n	8001102 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	4610      	mov	r0, r2
 80010dc:	4798      	blx	r3
 80010de:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d135      	bne.n	8001152 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	4610      	mov	r0, r2
 80010f0:	4798      	blx	r3
            p->length = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

            return NULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	e031      	b.n	8001166 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	68b8      	ldr	r0, [r7, #8]
 8001108:	4798      	blx	r3
 800110a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	4610      	mov	r0, r2
 800111c:	4798      	blx	r3
            p->length = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]

            return NULL;
 800112a:	2300      	movs	r3, #0
 800112c:	e01b      	b.n	8001166 <ensure+0x132>
        }
        if (newbuffer)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	461a      	mov	r2, r3
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f005 f970 	bl	8006426 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4610      	mov	r0, r2
 8001150:	4798      	blx	r3
    }
    p->length = newsize;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4413      	add	r3, r2
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800116e:	b590      	push	{r4, r7, lr}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <update_offset+0x3a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00f      	beq.n	80011a8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4413      	add	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689c      	ldr	r4, [r3, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff f889 	bl	80002b0 <strlen>
 800119e:	4603      	mov	r3, r0
 80011a0:	18e2      	adds	r2, r4, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	e000      	b.n	80011aa <update_offset+0x3c>
        return;
 80011a8:	bf00      	nop
}
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}

080011b0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80011b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	ed87 0b02 	vstr	d0, [r7, #8]
 80011bc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	68fe      	ldr	r6, [r7, #12]
 80011c4:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	687e      	ldr	r6, [r7, #4]
 80011cc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80011d0:	f7ff fcc2 	bl	8000b58 <__aeabi_dcmpgt>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <compare_double+0x34>
 80011da:	68bc      	ldr	r4, [r7, #8]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80011e2:	e003      	b.n	80011ec <compare_double+0x3c>
 80011e4:	683c      	ldr	r4, [r7, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80011ec:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80011f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f8:	f7ff f866 	bl	80002c8 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4690      	mov	r8, r2
 8001202:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <compare_double+0x8c>)
 800120c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001210:	f7ff fa12 	bl	8000638 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	2101      	movs	r1, #1
 800121a:	460c      	mov	r4, r1
 800121c:	4640      	mov	r0, r8
 800121e:	4649      	mov	r1, r9
 8001220:	f7ff fc86 	bl	8000b30 <__aeabi_dcmple>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <compare_double+0x7e>
 800122a:	2300      	movs	r3, #0
 800122c:	461c      	mov	r4, r3
 800122e:	b2e3      	uxtb	r3, r4
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800123a:	bf00      	nop
 800123c:	3cb00000 	.word	0x3cb00000

08001240 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	b093      	sub	sp, #76	@ 0x4c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800124a:	2300      	movs	r3, #0
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001254:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8001274:	f7ff fed6 	bl	8001024 <get_decimal_point>
 8001278:	4603      	mov	r3, r0
 800127a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <print_number+0x54>
    {
        return false;
 8001290:	2300      	movs	r3, #0
 8001292:	e09c      	b.n	80013ce <print_number+0x18e>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001294:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001298:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800129c:	f7ff fc66 	bl	8000b6c <__aeabi_dcmpun>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d121      	bne.n	80012ea <print_number+0xaa>
 80012a6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80012a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012aa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012ae:	2301      	movs	r3, #1
 80012b0:	461e      	mov	r6, r3
 80012b2:	f04f 32ff 	mov.w	r2, #4294967295
 80012b6:	4b48      	ldr	r3, [pc, #288]	@ (80013d8 <print_number+0x198>)
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7ff fc56 	bl	8000b6c <__aeabi_dcmpun>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10b      	bne.n	80012de <print_number+0x9e>
 80012c6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ca:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <print_number+0x198>)
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff fc2e 	bl	8000b30 <__aeabi_dcmple>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <print_number+0x9e>
 80012da:	2300      	movs	r3, #0
 80012dc:	461e      	mov	r6, r3
 80012de:	b2f3      	uxtb	r3, r6
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <print_number+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	493b      	ldr	r1, [pc, #236]	@ (80013dc <print_number+0x19c>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 ff5f 	bl	80061b4 <siprintf>
 80012f6:	6478      	str	r0, [r7, #68]	@ 0x44
 80012f8:	e027      	b.n	800134a <print_number+0x10a>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80012fa:	f107 0014 	add.w	r0, r7, #20
 80012fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001302:	4937      	ldr	r1, [pc, #220]	@ (80013e0 <print_number+0x1a0>)
 8001304:	f004 ff56 	bl	80061b4 <siprintf>
 8001308:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4934      	ldr	r1, [pc, #208]	@ (80013e4 <print_number+0x1a4>)
 8001314:	4618      	mov	r0, r3
 8001316:	f004 ff6f 	bl	80061f8 <siscanf>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10c      	bne.n	800133a <print_number+0xfa>
 8001320:	ed97 7b02 	vldr	d7, [r7, #8]
 8001324:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001328:	eeb0 0a47 	vmov.f32	s0, s14
 800132c:	eef0 0a67 	vmov.f32	s1, s15
 8001330:	f7ff ff3e 	bl	80011b0 <compare_double>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <print_number+0x10a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800133a:	f107 0014 	add.w	r0, r7, #20
 800133e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001342:	4929      	ldr	r1, [pc, #164]	@ (80013e8 <print_number+0x1a8>)
 8001344:	f004 ff36 	bl	80061b4 <siprintf>
 8001348:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800134a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800134c:	2b00      	cmp	r3, #0
 800134e:	db02      	blt.n	8001356 <print_number+0x116>
 8001350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001352:	2b19      	cmp	r3, #25
 8001354:	dd01      	ble.n	800135a <print_number+0x11a>
    {
        return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e039      	b.n	80013ce <print_number+0x18e>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800135a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800135c:	3301      	adds	r3, #1
 800135e:	4619      	mov	r1, r3
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff fe67 	bl	8001034 <ensure>
 8001366:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8001368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <print_number+0x132>
    {
        return false;
 800136e:	2300      	movs	r3, #0
 8001370:	e02d      	b.n	80013ce <print_number+0x18e>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001372:	2300      	movs	r3, #0
 8001374:	643b      	str	r3, [r7, #64]	@ 0x40
 8001376:	e01a      	b.n	80013ae <print_number+0x16e>
    {
        if (number_buffer[i] == decimal_point)
 8001378:	f107 0214 	add.w	r2, r7, #20
 800137c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001386:	429a      	cmp	r2, r3
 8001388:	d105      	bne.n	8001396 <print_number+0x156>
        {
            output_pointer[i] = '.';
 800138a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800138c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800138e:	4413      	add	r3, r2
 8001390:	222e      	movs	r2, #46	@ 0x2e
 8001392:	701a      	strb	r2, [r3, #0]
            continue;
 8001394:	e008      	b.n	80013a8 <print_number+0x168>
        }

        output_pointer[i] = number_buffer[i];
 8001396:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800139a:	4413      	add	r3, r2
 800139c:	f107 0114 	add.w	r1, r7, #20
 80013a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013a2:	440a      	add	r2, r1
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80013a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013aa:	3301      	adds	r3, #1
 80013ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80013ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3e0      	bcc.n	8001378 <print_number+0x138>
    }
    output_pointer[i] = '\0';
 80013b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ba:	4413      	add	r3, r2
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013c6:	441a      	add	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	609a      	str	r2, [r3, #8]

    return true;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	374c      	adds	r7, #76	@ 0x4c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	7fefffff 	.word	0x7fefffff
 80013dc:	08008bfc 	.word	0x08008bfc
 80013e0:	08008c04 	.word	0x08008c04
 80013e4:	08008c0c 	.word	0x08008c0c
 80013e8:	08008c10 	.word	0x08008c10

080013ec <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <print_string_ptr+0x28>
    {
        return false;
 8001410:	2300      	movs	r3, #0
 8001412:	e110      	b.n	8001636 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d111      	bne.n	800143e <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800141a:	2103      	movs	r1, #3
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff fe09 	bl	8001034 <ensure>
 8001422:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <print_string_ptr+0x42>
        {
            return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e103      	b.n	8001636 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4a83      	ldr	r2, [pc, #524]	@ (8001640 <print_string_ptr+0x254>)
 8001432:	8811      	ldrh	r1, [r2, #0]
 8001434:	7892      	ldrb	r2, [r2, #2]
 8001436:	8019      	strh	r1, [r3, #0]
 8001438:	709a      	strb	r2, [r3, #2]

        return true;
 800143a:	2301      	movs	r3, #1
 800143c:	e0fb      	b.n	8001636 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e024      	b.n	800148e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b22      	cmp	r3, #34	@ 0x22
 800144a:	dc0f      	bgt.n	800146c <print_string_ptr+0x80>
 800144c:	2b08      	cmp	r3, #8
 800144e:	db13      	blt.n	8001478 <print_string_ptr+0x8c>
 8001450:	3b08      	subs	r3, #8
 8001452:	4a7c      	ldr	r2, [pc, #496]	@ (8001644 <print_string_ptr+0x258>)
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf14      	ite	ne
 8001460:	2301      	movne	r3, #1
 8001462:	2300      	moveq	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <print_string_ptr+0x84>
 800146a:	e005      	b.n	8001478 <print_string_ptr+0x8c>
 800146c:	2b5c      	cmp	r3, #92	@ 0x5c
 800146e:	d103      	bne.n	8001478 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
                break;
 8001476:	e007      	b.n	8001488 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b1f      	cmp	r3, #31
 800147e:	d802      	bhi.n	8001486 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3305      	adds	r3, #5
 8001484:	617b      	str	r3, [r7, #20]
                }
                break;
 8001486:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1d6      	bne.n	8001444 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	461a      	mov	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3303      	adds	r3, #3
 80014a8:	4619      	mov	r1, r3
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f7ff fdc2 	bl	8001034 <ensure>
 80014b0:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <print_string_ptr+0xd0>
    {
        return false;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e0bc      	b.n	8001636 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d117      	bne.n	80014f2 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2222      	movs	r2, #34	@ 0x22
 80014c6:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	3301      	adds	r3, #1
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 ffa8 	bl	8006426 <memcpy>
        output[output_length + 1] = '\"';
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4413      	add	r3, r2
 80014de:	2222      	movs	r2, #34	@ 0x22
 80014e0:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3302      	adds	r3, #2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]

        return true;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0a1      	b.n	8001636 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	2222      	movs	r2, #34	@ 0x22
 80014f6:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	3301      	adds	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e086      	b.n	8001612 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b1f      	cmp	r3, #31
 800150a:	d90c      	bls.n	8001526 <print_string_ptr+0x13a>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b22      	cmp	r3, #34	@ 0x22
 8001512:	d008      	beq.n	8001526 <print_string_ptr+0x13a>
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b5c      	cmp	r3, #92	@ 0x5c
 800151a:	d004      	beq.n	8001526 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e06f      	b.n	8001606 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	61ba      	str	r2, [r7, #24]
 800152c:	225c      	movs	r2, #92	@ 0x5c
 800152e:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b22      	cmp	r3, #34	@ 0x22
 8001536:	dc3d      	bgt.n	80015b4 <print_string_ptr+0x1c8>
 8001538:	2b08      	cmp	r3, #8
 800153a:	db59      	blt.n	80015f0 <print_string_ptr+0x204>
 800153c:	3b08      	subs	r3, #8
 800153e:	2b1a      	cmp	r3, #26
 8001540:	d856      	bhi.n	80015f0 <print_string_ptr+0x204>
 8001542:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <print_string_ptr+0x15c>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	080015c9 	.word	0x080015c9
 800154c:	080015e9 	.word	0x080015e9
 8001550:	080015d9 	.word	0x080015d9
 8001554:	080015f1 	.word	0x080015f1
 8001558:	080015d1 	.word	0x080015d1
 800155c:	080015e1 	.word	0x080015e1
 8001560:	080015f1 	.word	0x080015f1
 8001564:	080015f1 	.word	0x080015f1
 8001568:	080015f1 	.word	0x080015f1
 800156c:	080015f1 	.word	0x080015f1
 8001570:	080015f1 	.word	0x080015f1
 8001574:	080015f1 	.word	0x080015f1
 8001578:	080015f1 	.word	0x080015f1
 800157c:	080015f1 	.word	0x080015f1
 8001580:	080015f1 	.word	0x080015f1
 8001584:	080015f1 	.word	0x080015f1
 8001588:	080015f1 	.word	0x080015f1
 800158c:	080015f1 	.word	0x080015f1
 8001590:	080015f1 	.word	0x080015f1
 8001594:	080015f1 	.word	0x080015f1
 8001598:	080015f1 	.word	0x080015f1
 800159c:	080015f1 	.word	0x080015f1
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	080015f1 	.word	0x080015f1
 80015a8:	080015f1 	.word	0x080015f1
 80015ac:	080015f1 	.word	0x080015f1
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80015b6:	d11b      	bne.n	80015f0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	225c      	movs	r2, #92	@ 0x5c
 80015bc:	701a      	strb	r2, [r3, #0]
                    break;
 80015be:	e022      	b.n	8001606 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2222      	movs	r2, #34	@ 0x22
 80015c4:	701a      	strb	r2, [r3, #0]
                    break;
 80015c6:	e01e      	b.n	8001606 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2262      	movs	r2, #98	@ 0x62
 80015cc:	701a      	strb	r2, [r3, #0]
                    break;
 80015ce:	e01a      	b.n	8001606 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2266      	movs	r2, #102	@ 0x66
 80015d4:	701a      	strb	r2, [r3, #0]
                    break;
 80015d6:	e016      	b.n	8001606 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	226e      	movs	r2, #110	@ 0x6e
 80015dc:	701a      	strb	r2, [r3, #0]
                    break;
 80015de:	e012      	b.n	8001606 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2272      	movs	r2, #114	@ 0x72
 80015e4:	701a      	strb	r2, [r3, #0]
                    break;
 80015e6:	e00e      	b.n	8001606 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2274      	movs	r2, #116	@ 0x74
 80015ec:	701a      	strb	r2, [r3, #0]
                    break;
 80015ee:	e00a      	b.n	8001606 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4914      	ldr	r1, [pc, #80]	@ (8001648 <print_string_ptr+0x25c>)
 80015f8:	69b8      	ldr	r0, [r7, #24]
 80015fa:	f004 fddb 	bl	80061b4 <siprintf>
                    output_pointer += 4;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3304      	adds	r3, #4
 8001602:	61bb      	str	r3, [r7, #24]
                    break;
 8001604:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3301      	adds	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f af74 	bne.w	8001504 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4413      	add	r3, r2
 8001624:	2222      	movs	r2, #34	@ 0x22
 8001626:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3302      	adds	r3, #2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]

    return true;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	08008c18 	.word	0x08008c18
 8001644:	04000037 	.word	0x04000037
 8001648:	08008c1c 	.word	0x08008c1c

0800164c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fec5 	bl	80013ec <print_string_ptr>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	@ 0x38
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2224      	movs	r2, #36	@ 0x24
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fe28 	bl	80062da <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a38      	ldr	r2, [pc, #224]	@ (8001770 <print+0x104>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4610      	mov	r0, r2
 8001694:	4798      	blx	r3
 8001696:	4603      	mov	r3, r0
 8001698:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800169a:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <print+0x104>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f869 	bl	8001794 <print_value>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d039      	beq.n	800173c <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fd4e 	bl	800116e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00d      	beq.n	80016f6 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	6938      	ldr	r0, [r7, #16]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	3201      	adds	r2, #1
 80016e4:	4611      	mov	r1, r2
 80016e6:	4798      	blx	r3
 80016e8:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 80016ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d027      	beq.n	8001740 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e01e      	b.n	8001734 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	3201      	adds	r2, #1
 80016fe:	4610      	mov	r0, r2
 8001700:	4798      	blx	r3
 8001702:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8001704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01c      	beq.n	8001744 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4293      	cmp	r3, r2
 8001714:	bf28      	it	cs
 8001716:	4613      	movcs	r3, r2
 8001718:	461a      	mov	r2, r3
 800171a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800171c:	f004 fe83 	bl	8006426 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001724:	4413      	add	r3, r2
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4610      	mov	r0, r2
 8001732:	4798      	blx	r3
    }

    return printed;
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	e016      	b.n	8001766 <print+0xfa>
        goto fail;
 8001738:	bf00      	nop
 800173a:	e004      	b.n	8001746 <print+0xda>
        goto fail;
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <print+0xda>
            goto fail;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <print+0xda>
            goto fail;
 8001744:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4610      	mov	r0, r2
 8001754:	4798      	blx	r3
    }

    if (printed != NULL)
 8001756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <print+0xf8>
    {
        hooks->deallocate(printed);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001762:	4798      	blx	r3
    }

    return NULL;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3738      	adds	r7, #56	@ 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	080090a8 	.word	0x080090a8

08001774 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <cJSON_PrintUnformatted+0x1c>)
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff73 	bl	800166c <print>
 8001786:	4603      	mov	r3, r0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000

08001794 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <print_value+0x1a>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <print_value+0x1e>
    {
        return false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e0c9      	b.n	8001946 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b80      	cmp	r3, #128	@ 0x80
 80017ba:	f000 808e 	beq.w	80018da <print_value+0x146>
 80017be:	2b80      	cmp	r3, #128	@ 0x80
 80017c0:	f300 80c0 	bgt.w	8001944 <print_value+0x1b0>
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	dc49      	bgt.n	800185c <print_value+0xc8>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f340 80bb 	ble.w	8001944 <print_value+0x1b0>
 80017ce:	3b01      	subs	r3, #1
 80017d0:	2b1f      	cmp	r3, #31
 80017d2:	f200 80b7 	bhi.w	8001944 <print_value+0x1b0>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <print_value+0x48>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	08001887 	.word	0x08001887
 80017e0:	080018ab 	.word	0x080018ab
 80017e4:	08001945 	.word	0x08001945
 80017e8:	08001863 	.word	0x08001863
 80017ec:	08001945 	.word	0x08001945
 80017f0:	08001945 	.word	0x08001945
 80017f4:	08001945 	.word	0x08001945
 80017f8:	080018cf 	.word	0x080018cf
 80017fc:	08001945 	.word	0x08001945
 8001800:	08001945 	.word	0x08001945
 8001804:	08001945 	.word	0x08001945
 8001808:	08001945 	.word	0x08001945
 800180c:	08001945 	.word	0x08001945
 8001810:	08001945 	.word	0x08001945
 8001814:	08001945 	.word	0x08001945
 8001818:	08001921 	.word	0x08001921
 800181c:	08001945 	.word	0x08001945
 8001820:	08001945 	.word	0x08001945
 8001824:	08001945 	.word	0x08001945
 8001828:	08001945 	.word	0x08001945
 800182c:	08001945 	.word	0x08001945
 8001830:	08001945 	.word	0x08001945
 8001834:	08001945 	.word	0x08001945
 8001838:	08001945 	.word	0x08001945
 800183c:	08001945 	.word	0x08001945
 8001840:	08001945 	.word	0x08001945
 8001844:	08001945 	.word	0x08001945
 8001848:	08001945 	.word	0x08001945
 800184c:	08001945 	.word	0x08001945
 8001850:	08001945 	.word	0x08001945
 8001854:	08001945 	.word	0x08001945
 8001858:	0800192d 	.word	0x0800192d
 800185c:	2b40      	cmp	r3, #64	@ 0x40
 800185e:	d06b      	beq.n	8001938 <print_value+0x1a4>
 8001860:	e070      	b.n	8001944 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001862:	2105      	movs	r1, #5
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff fbe5 	bl	8001034 <ensure>
 800186a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <print_value+0xe2>
            {
                return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e067      	b.n	8001946 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a35      	ldr	r2, [pc, #212]	@ (8001950 <print_value+0x1bc>)
 800187a:	6810      	ldr	r0, [r2, #0]
 800187c:	6018      	str	r0, [r3, #0]
 800187e:	7912      	ldrb	r2, [r2, #4]
 8001880:	711a      	strb	r2, [r3, #4]
            return true;
 8001882:	2301      	movs	r3, #1
 8001884:	e05f      	b.n	8001946 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001886:	2106      	movs	r1, #6
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f7ff fbd3 	bl	8001034 <ensure>
 800188e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <print_value+0x106>
            {
                return false;
 8001896:	2300      	movs	r3, #0
 8001898:	e055      	b.n	8001946 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a2d      	ldr	r2, [pc, #180]	@ (8001954 <print_value+0x1c0>)
 800189e:	6810      	ldr	r0, [r2, #0]
 80018a0:	6018      	str	r0, [r3, #0]
 80018a2:	8892      	ldrh	r2, [r2, #4]
 80018a4:	809a      	strh	r2, [r3, #4]
            return true;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e04d      	b.n	8001946 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80018aa:	2105      	movs	r1, #5
 80018ac:	6838      	ldr	r0, [r7, #0]
 80018ae:	f7ff fbc1 	bl	8001034 <ensure>
 80018b2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <print_value+0x12a>
            {
                return false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e043      	b.n	8001946 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <print_value+0x1c4>)
 80018c2:	6810      	ldr	r0, [r2, #0]
 80018c4:	6018      	str	r0, [r3, #0]
 80018c6:	7912      	ldrb	r2, [r2, #4]
 80018c8:	711a      	strb	r2, [r3, #4]
            return true;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e03b      	b.n	8001946 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fcb5 	bl	8001240 <print_number>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e035      	b.n	8001946 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <print_value+0x156>
            {
                return false;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e02d      	b.n	8001946 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fcde 	bl	80002b0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7ff fb99 	bl	8001034 <ensure>
 8001902:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <print_value+0x17a>
            {
                return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e01b      	b.n	8001946 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	4619      	mov	r1, r3
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f004 fd85 	bl	8006426 <memcpy>
            return true;
 800191c:	2301      	movs	r3, #1
 800191e:	e012      	b.n	8001946 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fe92 	bl	800164c <print_string>
 8001928:	4603      	mov	r3, r0
 800192a:	e00c      	b.n	8001946 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f814 	bl	800195c <print_array>
 8001934:	4603      	mov	r3, r0
 8001936:	e006      	b.n	8001946 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f894 	bl	8001a68 <print_object>
 8001940:	4603      	mov	r3, r0
 8001942:	e000      	b.n	8001946 <print_value+0x1b2>

        default:
            return false;
 8001944:	2300      	movs	r3, #0
    }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	08008bfc 	.word	0x08008bfc
 8001954:	08008c28 	.word	0x08008c28
 8001958:	08008c30 	.word	0x08008c30

0800195c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <print_array+0x22>
    {
        return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e070      	b.n	8001a60 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	6838      	ldr	r0, [r7, #0]
 8001982:	f7ff fb57 	bl	8001034 <ensure>
 8001986:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <print_array+0x36>
    {
        return false;
 800198e:	2300      	movs	r3, #0
 8001990:	e066      	b.n	8001a60 <print_array+0x104>
    }

    *output_pointer = '[';
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	225b      	movs	r2, #91	@ 0x5b
 8001996:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80019ac:	e03d      	b.n	8001a2a <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	6938      	ldr	r0, [r7, #16]
 80019b2:	f7ff feef 	bl	8001794 <print_value>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <print_array+0x64>
        {
            return false;
 80019bc:	2300      	movs	r3, #0
 80019be:	e04f      	b.n	8001a60 <print_array+0x104>
        }
        update_offset(output_buffer);
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f7ff fbd4 	bl	800116e <update_offset>
        if (current_element->next)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d02a      	beq.n	8001a24 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <print_array+0x7e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e000      	b.n	80019dc <print_array+0x80>
 80019da:	2301      	movs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4619      	mov	r1, r3
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff fb25 	bl	8001034 <ensure>
 80019ea:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <print_array+0x9a>
            {
                return false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e034      	b.n	8001a60 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	617a      	str	r2, [r7, #20]
 80019fc:	222c      	movs	r2, #44	@ 0x2c
 80019fe:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	617a      	str	r2, [r7, #20]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	441a      	add	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1be      	bne.n	80019ae <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001a30:	2102      	movs	r1, #2
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f7ff fafe 	bl	8001034 <ensure>
 8001a38:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <print_array+0xe8>
    {
        return false;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e00d      	b.n	8001a60 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	617a      	str	r2, [r7, #20]
 8001a4a:	225d      	movs	r2, #93	@ 0x5d
 8001a4c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60da      	str	r2, [r3, #12]

    return true;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <print_object+0x22>
    {
        return false;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e108      	b.n	8001c9c <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <print_object+0x2e>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e000      	b.n	8001a98 <print_object+0x30>
 8001a96:	2301      	movs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f7ff fac7 	bl	8001034 <ensure>
 8001aa6:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <print_object+0x4a>
    {
        return false;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e0f4      	b.n	8001c9c <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	227b      	movs	r2, #123	@ 0x7b
 8001aba:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	61fa      	str	r2, [r7, #28]
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	441a      	add	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001ae4:	e0a0      	b.n	8001c28 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d022      	beq.n	8001b34 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4619      	mov	r1, r3
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7ff fa9d 	bl	8001034 <ensure>
 8001afa:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <print_object+0x9e>
            {
                return false;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e0ca      	b.n	8001c9c <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e007      	b.n	8001b1c <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	61fa      	str	r2, [r7, #28]
 8001b12:	2209      	movs	r2, #9
 8001b14:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d3f2      	bcc.n	8001b0c <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	441a      	add	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fc56 	bl	80013ec <print_string_ptr>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <print_object+0xe2>
        {
            return false;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e0a8      	b.n	8001c9c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f7ff fb0f 	bl	800116e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <print_object+0xf4>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e000      	b.n	8001b5e <print_object+0xf6>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f7ff fa66 	bl	8001034 <ensure>
 8001b68:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <print_object+0x10c>
        {
            return false;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e093      	b.n	8001c9c <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	61fa      	str	r2, [r7, #28]
 8001b7a:	223a      	movs	r2, #58	@ 0x3a
 8001b7c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	61fa      	str	r2, [r7, #28]
 8001b8c:	2209      	movs	r2, #9
 8001b8e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	441a      	add	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	69b8      	ldr	r0, [r7, #24]
 8001ba0:	f7ff fdf8 	bl	8001794 <print_value>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <print_object+0x146>
        {
            return false;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e076      	b.n	8001c9c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001bae:	6838      	ldr	r0, [r7, #0]
 8001bb0:	f7ff fadd 	bl	800116e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <print_object+0x158>
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	e000      	b.n	8001bc2 <print_object+0x15a>
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <print_object+0x166>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <print_object+0x168>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	f7ff fa2a 	bl	8001034 <ensure>
 8001be0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <print_object+0x184>
        {
            return false;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e057      	b.n	8001c9c <print_object+0x234>
        }
        if (current_item->next)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	61fa      	str	r2, [r7, #28]
 8001bfa:	222c      	movs	r2, #44	@ 0x2c
 8001bfc:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	61fa      	str	r2, [r7, #28]
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f47f af5b 	bne.w	8001ae6 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <print_object+0x1d8>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	e000      	b.n	8001c42 <print_object+0x1da>
 8001c40:	2302      	movs	r3, #2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f7ff f9f5 	bl	8001034 <ensure>
 8001c4a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <print_object+0x1ee>
    {
        return false;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e022      	b.n	8001c9c <print_object+0x234>
    }
    if (output_buffer->format)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e007      	b.n	8001c74 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	61fa      	str	r2, [r7, #28]
 8001c6a:	2209      	movs	r2, #9
 8001c6c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	3301      	adds	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f1      	bcc.n	8001c64 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	61fa      	str	r2, [r7, #28]
 8001c86:	227d      	movs	r2, #125	@ 0x7d
 8001c88:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	60da      	str	r2, [r3, #12]

    return true;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	605a      	str	r2, [r3, #4]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <add_item_to_array+0x22>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <add_item_to_array+0x22>
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d101      	bne.n	8001cec <add_item_to_array+0x26>
    {
        return false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e01e      	b.n	8001d2a <add_item_to_array+0x64>
    }

    child = array->child;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e00d      	b.n	8001d28 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ffc2 	bl	8001ca4 <suffix_object>
            array->child->prev = item;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001d3a:	687b      	ldr	r3, [r7, #4]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <add_item_to_object+0x30>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <add_item_to_object+0x30>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <add_item_to_object+0x30>
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d101      	bne.n	8001d7c <add_item_to_object+0x34>
    {
        return false;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e036      	b.n	8001dea <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d82:	68b8      	ldr	r0, [r7, #8]
 8001d84:	f7ff ffd5 	bl	8001d32 <cast_away_const>
 8001d88:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e00e      	b.n	8001db4 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	68b8      	ldr	r0, [r7, #8]
 8001d9a:	f7ff f8bb 	bl	8000f14 <cJSON_strdup>
 8001d9e:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <add_item_to_object+0x62>
        {
            return false;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e01f      	b.n	8001dea <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001db2:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d109      	bne.n	8001dd4 <add_item_to_object+0x8c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6a12      	ldr	r2, [r2, #32]
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4798      	blx	r3
    }

    item->string = new_key;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff ff6f 	bl	8001cc6 <add_item_to_array>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <cJSON_AddItemToObject+0x28>)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff ff9c 	bl	8001d48 <add_item_to_object>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001e2e:	ed97 0b00 	vldr	d0, [r7]
 8001e32:	f000 f83d 	bl	8001eb0 <cJSON_CreateNumber>
 8001e36:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <cJSON_AddNumberToObject+0x44>)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff ff80 	bl	8001d48 <add_item_to_object>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	e003      	b.n	8001e5a <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff f89c 	bl	8000f90 <cJSON_Delete>
    return NULL;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000

08001e68 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f863 	bl	8001f40 <cJSON_CreateString>
 8001e7a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <cJSON_AddStringToObject+0x40>)
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff ff5e 	bl	8001d48 <add_item_to_object>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	e003      	b.n	8001e9e <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff f87a 	bl	8000f90 <cJSON_Delete>
    return NULL;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	00000000 	.word	0x00000000

08001eb0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001eba:	481f      	ldr	r0, [pc, #124]	@ (8001f38 <cJSON_CreateNumber+0x88>)
 8001ebc:	f7ff f852 	bl	8000f64 <cJSON_New_Item>
 8001ec0:	60f8      	str	r0, [r7, #12]
    if(item)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02c      	beq.n	8001f22 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001ed8:	a315      	add	r3, pc, #84	@ (adr r3, 8001f30 <cJSON_CreateNumber+0x80>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee2:	f7fe fe2f 	bl	8000b44 <__aeabi_dcmpge>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	e015      	b.n	8001f22 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <cJSON_CreateNumber+0x8c>)
 8001efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f00:	f7fe fe16 	bl	8000b30 <__aeabi_dcmple>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f10:	615a      	str	r2, [r3, #20]
 8001f12:	e006      	b.n	8001f22 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8001f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f18:	f7fe fe3e 	bl	8000b98 <__aeabi_d2iz>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	f3af 8000 	nop.w
 8001f30:	ffc00000 	.word	0xffc00000
 8001f34:	41dfffff 	.word	0x41dfffff
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	c1e00000 	.word	0xc1e00000

08001f40 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001f48:	480f      	ldr	r0, [pc, #60]	@ (8001f88 <cJSON_CreateString+0x48>)
 8001f4a:	f7ff f80b 	bl	8000f64 <cJSON_New_Item>
 8001f4e:	60f8      	str	r0, [r7, #12]
    if(item)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001f5c:	490a      	ldr	r1, [pc, #40]	@ (8001f88 <cJSON_CreateString+0x48>)
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe ffd8 	bl	8000f14 <cJSON_strdup>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff f80c 	bl	8000f90 <cJSON_Delete>
            return NULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001f92:	4807      	ldr	r0, [pc, #28]	@ (8001fb0 <cJSON_CreateObject+0x24>)
 8001f94:	f7fe ffe6 	bl	8000f64 <cJSON_New_Item>
 8001f98:	6078      	str	r0, [r7, #4]
    if (item)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001fa6:	687b      	ldr	r3, [r7, #4]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <data>:
    2
};



void data() {
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8001fba:	af00      	add	r7, sp, #0
    // Create a JSON object
    cJSON *root = cJSON_CreateObject();
 8001fbc:	f7ff ffe6 	bl	8001f8c <cJSON_CreateObject>
 8001fc0:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    if (root == NULL) return;
 8001fc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d079      	beq.n	80020c0 <data+0x10c>

    cJSON_AddStringToObject(root, "ts", "1747143868");
 8001fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <data+0x118>)
 8001fce:	4940      	ldr	r1, [pc, #256]	@ (80020d0 <data+0x11c>)
 8001fd0:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001fd4:	f7ff ff48 	bl	8001e68 <cJSON_AddStringToObject>

    cJSON *values = cJSON_CreateObject();
 8001fd8:	f7ff ffd8 	bl	8001f8c <cJSON_CreateObject>
 8001fdc:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
    if (values == NULL) {
 8001fe0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <data+0x3e>
        cJSON_Delete(root);
 8001fe8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001fec:	f7fe ffd0 	bl	8000f90 <cJSON_Delete>
        return;
 8001ff0:	e067      	b.n	80020c2 <data+0x10e>
    }


    for (int i = 0; i < 4; i++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001ff8:	e02c      	b.n	8002054 <data+0xa0>


        float val = modbus_int(SlaveID,FunctionCode,Address[i],Len[i]);
 8001ffa:	4a36      	ldr	r2, [pc, #216]	@ (80020d4 <data+0x120>)
 8001ffc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4934      	ldr	r1, [pc, #208]	@ (80020d8 <data+0x124>)
 8002008:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800200c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2104      	movs	r1, #4
 8002014:	2001      	movs	r0, #1
 8002016:	f000 fb7b 	bl	8002710 <modbus_int>
 800201a:	ee07 0a90 	vmov	s15, r0
 800201e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002022:	edc7 7a81 	vstr	s15, [r7, #516]	@ 0x204
        cJSON_AddNumberToObject(values, Key[i], val);
 8002026:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <data+0x128>)
 8002028:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800202c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002030:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8002034:	f7fe faa8 	bl	8000588 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	ec43 2b10 	vmov	d0, r2, r3
 8002040:	4621      	mov	r1, r4
 8002042:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8002046:	f7ff feeb 	bl	8001e20 <cJSON_AddNumberToObject>
    for (int i = 0; i < 4; i++) {
 800204a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800204e:	3301      	adds	r3, #1
 8002050:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002054:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002058:	2b03      	cmp	r3, #3
 800205a:	ddce      	ble.n	8001ffa <data+0x46>
    }

    cJSON_AddItemToObject(root, "values", values);
 800205c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8002060:	491f      	ldr	r1, [pc, #124]	@ (80020e0 <data+0x12c>)
 8002062:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8002066:	f7ff fec5 	bl	8001df4 <cJSON_AddItemToObject>

    char *json_str = cJSON_PrintUnformatted(root);  // or cJSON_Print() for pretty
 800206a:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 800206e:	f7ff fb81 	bl	8001774 <cJSON_PrintUnformatted>
 8002072:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
    if (json_str) {
 8002076:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01b      	beq.n	80020b6 <data+0x102>
    	char Json[512];
//        printf("JSON: %s\n", json_str);  // For debugging
        sprintf(Json,"JSON: %s\n", json_str);
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002084:	4917      	ldr	r1, [pc, #92]	@ (80020e4 <data+0x130>)
 8002086:	4618      	mov	r0, r3
 8002088:	f004 f894 	bl	80061b4 <siprintf>
        HAL_UART_Transmit(&huart2,(uint8_t *)Json,strlen(Json),1000);
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f90e 	bl	80002b0 <strlen>
 8002094:	4603      	mov	r3, r0
 8002096:	b29a      	uxth	r2, r3
 8002098:	1d39      	adds	r1, r7, #4
 800209a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209e:	4812      	ldr	r0, [pc, #72]	@ (80020e8 <data+0x134>)
 80020a0:	f002 f95c 	bl	800435c <HAL_UART_Transmit>
        // === Use this string to send over MQTT ===
        mqtt_publish("v1/devices/me/telemetry", json_str);
 80020a4:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 80020a8:	4810      	ldr	r0, [pc, #64]	@ (80020ec <data+0x138>)
 80020aa:	f000 f9e7 	bl	800247c <mqtt_publish>

        free(json_str);
 80020ae:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
 80020b2:	f003 fa45 	bl	8005540 <free>
    }

    cJSON_Delete(root);
 80020b6:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80020ba:	f7fe ff69 	bl	8000f90 <cJSON_Delete>
 80020be:	e000      	b.n	80020c2 <data+0x10e>
    if (root == NULL) return;
 80020c0:	bf00      	nop
}
 80020c2:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	08008c80 	.word	0x08008c80
 80020d0:	08008c8c 	.word	0x08008c8c
 80020d4:	2000001c 	.word	0x2000001c
 80020d8:	20000024 	.word	0x20000024
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	08008c90 	.word	0x08008c90
 80020e4:	08008c98 	.word	0x08008c98
 80020e8:	20000310 	.word	0x20000310
 80020ec:	08008ca4 	.word	0x08008ca4

080020f0 <Error_Handler>:
 */
#include "error_handler.h"
#include "sys_init.h"

void Error_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b094      	sub	sp, #80	@ 0x50
 80020f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f6:	b672      	cpsid	i
}
 80020f8:	bf00      	nop
	__disable_irq();
	char Error[80];
    sprintf(Error,"ERROR\r\n");
 80020fa:	463b      	mov	r3, r7
 80020fc:	4908      	ldr	r1, [pc, #32]	@ (8002120 <Error_Handler+0x30>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 f858 	bl	80061b4 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)Error,strlen(Error),1000);
 8002104:	463b      	mov	r3, r7
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f8d2 	bl	80002b0 <strlen>
 800210c:	4603      	mov	r3, r0
 800210e:	b29a      	uxth	r2, r3
 8002110:	4639      	mov	r1, r7
 8002112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <Error_Handler+0x34>)
 8002118:	f002 f920 	bl	800435c <HAL_UART_Transmit>
//  HAL_NVIC_SystemReset();
  while(1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <Error_Handler+0x2c>
 8002120:	08008cbc 	.word	0x08008cbc
 8002124:	20000310 	.word	0x20000310

08002128 <send_at_command>:


char ATcommand[80];
uint8_t buffer[30] = {0};

void send_at_command(const char *cmd, char *response, int timeout_ms) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
//    uart_write_bytes(UART_NUM, cmd, strlen(cmd));
//    uart_write_bytes(UART_NUM, "\r\n", 2);

	sprintf(ATcommand,cmd);
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	481e      	ldr	r0, [pc, #120]	@ (80021b0 <send_at_command+0x88>)
 8002138:	f004 f83c 	bl	80061b4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800213c:	481c      	ldr	r0, [pc, #112]	@ (80021b0 <send_at_command+0x88>)
 800213e:	f7fe f8b7 	bl	80002b0 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	4919      	ldr	r1, [pc, #100]	@ (80021b0 <send_at_command+0x88>)
 800214c:	4819      	ldr	r0, [pc, #100]	@ (80021b4 <send_at_command+0x8c>)
 800214e:	f002 f905 	bl	800435c <HAL_UART_Transmit>
	HAL_UART_Receive (&huart1, buffer, 30, 100);
 8002152:	2364      	movs	r3, #100	@ 0x64
 8002154:	221e      	movs	r2, #30
 8002156:	4918      	ldr	r1, [pc, #96]	@ (80021b8 <send_at_command+0x90>)
 8002158:	4816      	ldr	r0, [pc, #88]	@ (80021b4 <send_at_command+0x8c>)
 800215a:	f002 f98a 	bl	8004472 <HAL_UART_Receive>
    // Wait for response
	if(strstr((char *)buffer,"OK")){
 800215e:	4917      	ldr	r1, [pc, #92]	@ (80021bc <send_at_command+0x94>)
 8002160:	4815      	ldr	r0, [pc, #84]	@ (80021b8 <send_at_command+0x90>)
 8002162:	f004 f8c2 	bl	80062ea <strstr>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <send_at_command+0x6c>
//	   ATisOK = 1
	   char AT[30];
	   sprintf(AT,"OK\r\n");
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4913      	ldr	r1, [pc, #76]	@ (80021c0 <send_at_command+0x98>)
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f81e 	bl	80061b4 <siprintf>
	   HAL_UART_Transmit(&huart2,(uint8_t *)AT,strlen(AT),1000);
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f897 	bl	80002b0 <strlen>
 8002182:	4603      	mov	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	f107 0110 	add.w	r1, r7, #16
 800218a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218e:	480d      	ldr	r0, [pc, #52]	@ (80021c4 <send_at_command+0x9c>)
 8002190:	f002 f8e4 	bl	800435c <HAL_UART_Transmit>

	}
	   HAL_Delay(1000);
 8002194:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002198:	f000 ffb8 	bl	800310c <HAL_Delay>
	   memset(response,0,sizeof(buffer));
 800219c:	221e      	movs	r2, #30
 800219e:	2100      	movs	r1, #0
 80021a0:	68b8      	ldr	r0, [r7, #8]
 80021a2:	f004 f89a 	bl	80062da <memset>
}
 80021a6:	bf00      	nop
 80021a8:	3730      	adds	r7, #48	@ 0x30
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000021c 	.word	0x2000021c
 80021b4:	200002c8 	.word	0x200002c8
 80021b8:	2000026c 	.word	0x2000026c
 80021bc:	08008cc4 	.word	0x08008cc4
 80021c0:	08008cc8 	.word	0x08008cc8
 80021c4:	20000310 	.word	0x20000310

080021c8 <mqtt_init>:

void mqtt_init(const char *broker, const char *accesstoken, const char *clientid) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 80021ce:	af02      	add	r7, sp, #8
 80021d0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80021d4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80021d8:	6018      	str	r0, [r3, #0]
 80021da:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80021de:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80021e2:	6019      	str	r1, [r3, #0]
 80021e4:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80021e8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80021ec:	601a      	str	r2, [r3, #0]
    char response[256];
//    generate_negative_pulse(GPIO_PIN, 10);
    send_at_command("AT\r\n",response,500);
 80021ee:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80021f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4885      	ldr	r0, [pc, #532]	@ (8002410 <mqtt_init+0x248>)
 80021fa:	f7ff ff95 	bl	8002128 <send_at_command>
    HAL_Delay(2500);// New
 80021fe:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002202:	f000 ff83 	bl	800310c <HAL_Delay>
    send_at_command("AT+CFUN=1\r\n",response,500);
 8002206:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800220a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800220e:	4619      	mov	r1, r3
 8002210:	4880      	ldr	r0, [pc, #512]	@ (8002414 <mqtt_init+0x24c>)
 8002212:	f7ff ff89 	bl	8002128 <send_at_command>
    send_at_command("AT+CREG=2\r\n",response,500);
 8002216:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800221a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800221e:	4619      	mov	r1, r3
 8002220:	487d      	ldr	r0, [pc, #500]	@ (8002418 <mqtt_init+0x250>)
 8002222:	f7ff ff81 	bl	8002128 <send_at_command>
    send_at_command("AT+CEREG=2\r\n",response,500);
 8002226:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800222a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800222e:	4619      	mov	r1, r3
 8002230:	487a      	ldr	r0, [pc, #488]	@ (800241c <mqtt_init+0x254>)
 8002232:	f7ff ff79 	bl	8002128 <send_at_command>
    // send_at_command("AT+COPS?\r\n",response,1000);
    send_at_command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r\n",response,500);
 8002236:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800223a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800223e:	4619      	mov	r1, r3
 8002240:	4877      	ldr	r0, [pc, #476]	@ (8002420 <mqtt_init+0x258>)
 8002242:	f7ff ff71 	bl	8002128 <send_at_command>
    send_at_command("AT+CGACT=0,1\r\n",response,500);
 8002246:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800224a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800224e:	4619      	mov	r1, r3
 8002250:	4874      	ldr	r0, [pc, #464]	@ (8002424 <mqtt_init+0x25c>)
 8002252:	f7ff ff69 	bl	8002128 <send_at_command>
    send_at_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n",response,500);
 8002256:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800225a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800225e:	4619      	mov	r1, r3
 8002260:	4871      	ldr	r0, [pc, #452]	@ (8002428 <mqtt_init+0x260>)
 8002262:	f7ff ff61 	bl	8002128 <send_at_command>
    send_at_command("AT+CNTP\r\n",response,500);
 8002266:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800226a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800226e:	4619      	mov	r1, r3
 8002270:	486e      	ldr	r0, [pc, #440]	@ (800242c <mqtt_init+0x264>)
 8002272:	f7ff ff59 	bl	8002128 <send_at_command>
    // send_at_command("AT+CCLK?\r\n",response,500);
    // send_at_command("AT+IPADDR\r\n",response,1000);
    send_at_command("AT+CGATT=1\r\n",response,500);
 8002276:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800227a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800227e:	4619      	mov	r1, r3
 8002280:	486b      	ldr	r0, [pc, #428]	@ (8002430 <mqtt_init+0x268>)
 8002282:	f7ff ff51 	bl	8002128 <send_at_command>
    send_at_command("AT+CGPADDR=1\r\n",response,500);
 8002286:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800228a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800228e:	4619      	mov	r1, r3
 8002290:	4868      	ldr	r0, [pc, #416]	@ (8002434 <mqtt_init+0x26c>)
 8002292:	f7ff ff49 	bl	8002128 <send_at_command>
    // send_at_command("AT+CGACT?\r\n",response,1000);
    // send_at_command("AT+CEREG?\r\n",response,1000);
    send_at_command("AT+NETOPEN\r\n",response,500);
 8002296:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800229a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800229e:	4619      	mov	r1, r3
 80022a0:	4865      	ldr	r0, [pc, #404]	@ (8002438 <mqtt_init+0x270>)
 80022a2:	f7ff ff41 	bl	8002128 <send_at_command>
    // send_at_command("AT+NETOPEN?\r\n",response,1000);

    // send_at_command("AT+CSSLCFG=\"sslversion\",0,4\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"authmode\",0,1\r\n",response,500);
 80022a6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4862      	ldr	r0, [pc, #392]	@ (800243c <mqtt_init+0x274>)
 80022b2:	f7ff ff39 	bl	8002128 <send_at_command>
    send_at_command("AT+CSSLCFG=\"cacert\",0,\"ca_cert.pem\"\r\n",response,500);
 80022b6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022be:	4619      	mov	r1, r3
 80022c0:	485f      	ldr	r0, [pc, #380]	@ (8002440 <mqtt_init+0x278>)
 80022c2:	f7ff ff31 	bl	8002128 <send_at_command>
    // send_at_command("AT+CSSLCFG=\"clientcert\",0,\"client_cert.pem\"\r\n",response,1000);
    // send_at_command("AT+CSSLCFG=\"clientkey\",0,\"client_key.pem\"\r\n",response,1000);
    // send_at_command("AT+CSSLCFG=\"password\",0,\"password.pem\"\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"enableSNI\",0,1\r\n",response,500);
 80022c6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022ce:	4619      	mov	r1, r3
 80022d0:	485c      	ldr	r0, [pc, #368]	@ (8002444 <mqtt_init+0x27c>)
 80022d2:	f7ff ff29 	bl	8002128 <send_at_command>

    send_at_command("AT+CMQTTSTART\r\n", response, 500);
 80022d6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022de:	4619      	mov	r1, r3
 80022e0:	4859      	ldr	r0, [pc, #356]	@ (8002448 <mqtt_init+0x280>)
 80022e2:	f7ff ff21 	bl	8002128 <send_at_command>
    send_at_command("AT+CCHSET=1,1\r\n", response, 500);
 80022e6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4856      	ldr	r0, [pc, #344]	@ (800244c <mqtt_init+0x284>)
 80022f2:	f7ff ff19 	bl	8002128 <send_at_command>
    send_at_command("AT+CCHMODE=1\r\n", response, 500);
 80022f6:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80022fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022fe:	4619      	mov	r1, r3
 8002300:	4853      	ldr	r0, [pc, #332]	@ (8002450 <mqtt_init+0x288>)
 8002302:	f7ff ff11 	bl	8002128 <send_at_command>
    send_at_command("AT+CCHSTART\r\n", response, 500);
 8002306:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800230a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800230e:	4619      	mov	r1, r3
 8002310:	4850      	ldr	r0, [pc, #320]	@ (8002454 <mqtt_init+0x28c>)
 8002312:	f7ff ff09 	bl	8002128 <send_at_command>
    send_at_command("AT+CCHADDR\r\n", response, 500);
 8002316:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800231a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800231e:	4619      	mov	r1, r3
 8002320:	484d      	ldr	r0, [pc, #308]	@ (8002458 <mqtt_init+0x290>)
 8002322:	f7ff ff01 	bl	8002128 <send_at_command>

    // send_at_command("AT+CCHOPEN\r\n", response, 500);
    send_at_command("AT+CCHCFG=\"sendtimeout\",0,60\r\n", response, 500);
 8002326:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800232a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800232e:	4619      	mov	r1, r3
 8002330:	484a      	ldr	r0, [pc, #296]	@ (800245c <mqtt_init+0x294>)
 8002332:	f7ff fef9 	bl	8002128 <send_at_command>
    send_at_command("AT+CCHCFG=\"sslctx\",0,1\r\n", response, 500);
 8002336:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800233a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800233e:	4619      	mov	r1, r3
 8002340:	4847      	ldr	r0, [pc, #284]	@ (8002460 <mqtt_init+0x298>)
 8002342:	f7ff fef1 	bl	8002128 <send_at_command>
    // send_at_command("AT+CCERTMOVE=\"ca_cert.pem\"\r\n", response, 500);
    send_at_command("AT+CMQTTSSLCFG=0,1\r\n", response, 500);
 8002346:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800234a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800234e:	4619      	mov	r1, r3
 8002350:	4844      	ldr	r0, [pc, #272]	@ (8002464 <mqtt_init+0x29c>)
 8002352:	f7ff fee9 	bl	8002128 <send_at_command>
    send_at_command("AT+CSSLCFG=0\r\n",response,500);
 8002356:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800235a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800235e:	4619      	mov	r1, r3
 8002360:	4841      	ldr	r0, [pc, #260]	@ (8002468 <mqtt_init+0x2a0>)
 8002362:	f7ff fee1 	bl	8002128 <send_at_command>

    //Set ID
    char mqtt_id[128];
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMQTTACCQ=0,\"%s\",1\r\n",clientid);
 8002366:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800236a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800236e:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3d      	ldr	r2, [pc, #244]	@ (800246c <mqtt_init+0x2a4>)
 8002376:	2180      	movs	r1, #128	@ 0x80
 8002378:	f003 fee6 	bl	8006148 <sniprintf>
    send_at_command(mqtt_id, response, 500);
 800237c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8002380:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002384:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fecd 	bl	8002128 <send_at_command>

    send_at_command("AT+CMQTTCFG=\"checkUTF8\",0,1\r\n",response,1000);
 800238e:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8002392:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002396:	4619      	mov	r1, r3
 8002398:	4835      	ldr	r0, [pc, #212]	@ (8002470 <mqtt_init+0x2a8>)
 800239a:	f7ff fec5 	bl	8002128 <send_at_command>
    send_at_command("AT+CMQTTCFG=\"optimeout\",0,60\r\n",response,1000);
 800239e:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80023a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a6:	4619      	mov	r1, r3
 80023a8:	4832      	ldr	r0, [pc, #200]	@ (8002474 <mqtt_init+0x2ac>)
 80023aa:	f7ff febd 	bl	8002128 <send_at_command>
    // send_at_command("AT+CMQTTCONNECT?\r\n",response,100);
    // send_at_command("AT+CCERTLIST", response, 1000);
    // send_at_command("AT+CCERTDELE=\"ca_cert.pem\"", response, 1000);

    for(int i=0;i<3;i++){
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80023b4:	e01f      	b.n	80023f6 <mqtt_init+0x22e>
    char mqtt_conn[256];
    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",300,1,\"%s\"\r\n",broker, accesstoken);
 80023b6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80023ba:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80023be:	f107 0014 	add.w	r0, r7, #20
 80023c2:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 80023c6:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a29      	ldr	r2, [pc, #164]	@ (8002478 <mqtt_init+0x2b0>)
 80023d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d6:	f003 feb7 	bl	8006148 <sniprintf>
    send_at_command(mqtt_conn, response, 2000);
 80023da:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fe9e 	bl	8002128 <send_at_command>
    for(int i=0;i<3;i++){
 80023ec:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80023f0:	3301      	adds	r3, #1
 80023f2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80023f6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	dddb      	ble.n	80023b6 <mqtt_init+0x1ee>
    }
    HAL_Delay(1500);
 80023fe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002402:	f000 fe83 	bl	800310c <HAL_Delay>
    // ESP_LOGI("MQTT", "MQTT connection response: %s", response);

}
 8002406:	bf00      	nop
 8002408:	f507 7726 	add.w	r7, r7, #664	@ 0x298
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	08008cd0 	.word	0x08008cd0
 8002414:	08008cd8 	.word	0x08008cd8
 8002418:	08008ce4 	.word	0x08008ce4
 800241c:	08008cf0 	.word	0x08008cf0
 8002420:	08008d00 	.word	0x08008d00
 8002424:	08008d28 	.word	0x08008d28
 8002428:	08008d38 	.word	0x08008d38
 800242c:	08008d58 	.word	0x08008d58
 8002430:	08008d64 	.word	0x08008d64
 8002434:	08008d74 	.word	0x08008d74
 8002438:	08008d84 	.word	0x08008d84
 800243c:	08008d94 	.word	0x08008d94
 8002440:	08008db0 	.word	0x08008db0
 8002444:	08008dd8 	.word	0x08008dd8
 8002448:	08008df8 	.word	0x08008df8
 800244c:	08008e08 	.word	0x08008e08
 8002450:	08008e18 	.word	0x08008e18
 8002454:	08008e28 	.word	0x08008e28
 8002458:	08008e38 	.word	0x08008e38
 800245c:	08008e48 	.word	0x08008e48
 8002460:	08008e68 	.word	0x08008e68
 8002464:	08008e84 	.word	0x08008e84
 8002468:	08008e9c 	.word	0x08008e9c
 800246c:	08008eac 	.word	0x08008eac
 8002470:	08008ec4 	.word	0x08008ec4
 8002474:	08008ee4 	.word	0x08008ee4
 8002478:	08008f04 	.word	0x08008f04

0800247c <mqtt_publish>:

void mqtt_publish(const char *topic, const char *data) {
 800247c:	b580      	push	{r7, lr}
 800247e:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
 8002482:	af00      	add	r7, sp, #0
 8002484:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8002488:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800248c:	6018      	str	r0, [r3, #0]
 800248e:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8002492:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8002496:	6019      	str	r1, [r3, #0]
    char response[256];

    // Set topic
    char mqtt_topic[128];
    int len;
    len=strlen(topic);
 8002498:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800249c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	f7fd ff05 	bl	80002b0 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    snprintf(mqtt_topic, sizeof(mqtt_topic), "AT+CMQTTTOPIC=0,%d\r\n", len);
 80024ac:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80024b0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80024b4:	4a25      	ldr	r2, [pc, #148]	@ (800254c <mqtt_publish+0xd0>)
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	f003 fe46 	bl	8006148 <sniprintf>
    send_at_command(mqtt_topic, response, 1000);
 80024bc:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80024c0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80024c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe2d 	bl	8002128 <send_at_command>
    send_at_command(topic,response,1000);
 80024ce:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80024d2:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80024d6:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80024da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	f7ff fe22 	bl	8002128 <send_at_command>

    // Send payload
    char mqtt_payload[512];
    len=strlen(data);
 80024e4:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80024e8:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f7fd fedf 	bl	80002b0 <strlen>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    snprintf(mqtt_payload, sizeof(mqtt_payload), "AT+CMQTTPAYLOAD=0,%d\r\n", len);
 80024f8:	f107 000c 	add.w	r0, r7, #12
 80024fc:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8002500:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <mqtt_publish+0xd4>)
 8002502:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002506:	f003 fe1f 	bl	8006148 <sniprintf>
    send_at_command(mqtt_payload, response, 1000);
 800250a:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe06 	bl	8002128 <send_at_command>
    send_at_command(data,response,1000);
 800251c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002520:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8002524:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8002528:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	f7ff fdfb 	bl	8002128 <send_at_command>

    // Publish Data
    send_at_command("AT+CMQTTPUB=0,0,60,1\r\n",response,500);
 8002532:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002536:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	@ (8002554 <mqtt_publish+0xd8>)
 800253e:	f7ff fdf3 	bl	8002128 <send_at_command>

    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);

    // ESP_LOGI("MQTT", "MQTT publish response: %s", response);
}
 8002542:	bf00      	nop
 8002544:	f507 7764 	add.w	r7, r7, #912	@ 0x390
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	08008f30 	.word	0x08008f30
 8002550:	08008f48 	.word	0x08008f48
 8002554:	08008f60 	.word	0x08008f60

08002558 <gsm_init>:
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);


    // ESP_LOGI("MQTT", "MQTT Subscribe response: %s", response);
}
void gsm_init(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0

    // Initialize MQTT
    const char *broker = "thingsboard.cloud:8883";
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <gsm_init+0x24>)
 8002560:	60fb      	str	r3, [r7, #12]
    const char *accesstoken = "399kawoa7g4y9ovt57p6";
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <gsm_init+0x28>)
 8002564:	60bb      	str	r3, [r7, #8]
    const char *clientid = "KP";
 8002566:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <gsm_init+0x2c>)
 8002568:	607b      	str	r3, [r7, #4]

    mqtt_init(broker, accesstoken, clientid);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff fe2a 	bl	80021c8 <mqtt_init>
//	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),1000);
//  mqtt_publish("v1/devices/me/telemetry", "{\"temperature\": 51, \"humidity\": 03, \"flowRate\": 4, \"energy\": 91, \"volume\": 563, \"totalVolume\": 64}");
//    mqtt_publish("v1/devices/me/telemetry", msg);

    // mqtt_subscribe("v1/devices/me/telemetry");
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08008fbc 	.word	0x08008fbc
 8002580:	08008fd4 	.word	0x08008fd4
 8002584:	08008fec 	.word	0x08008fec

08002588 <main>:
#include "modbus.h"
#include "sms.h"
#include "data.h"

int main(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b096      	sub	sp, #88	@ 0x58
 800258c:	af00      	add	r7, sp, #0
  char ATcommand[80];
  HAL_Init();
 800258e:	f000 fd4b 	bl	8003028 <HAL_Init>
  SystemClock_Config();
 8002592:	f000 faf7 	bl	8002b84 <SystemClock_Config>
  MX_GPIO_Init();
 8002596:	f000 fbe1 	bl	8002d5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800259a:	f000 fb61 	bl	8002c60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800259e:	f000 fb89 	bl	8002cb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025a2:	f000 fbb1 	bl	8002d08 <MX_USART3_UART_Init>
//  uint8_t FunctionCode = 0x04;
//  uint8_t Address = 100;
//  uint8_t Datalength = 2;


  gsm_init();
 80025a6:	f7ff ffd7 	bl	8002558 <gsm_init>
  sprintf(ATcommand,"gsm ok\r\n");
 80025aa:	463b      	mov	r3, r7
 80025ac:	4920      	ldr	r1, [pc, #128]	@ (8002630 <main+0xa8>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fe00 	bl	80061b4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80025b4:	463b      	mov	r3, r7
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd fe7a 	bl	80002b0 <strlen>
 80025bc:	4603      	mov	r3, r0
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4639      	mov	r1, r7
 80025c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025c6:	481b      	ldr	r0, [pc, #108]	@ (8002634 <main+0xac>)
 80025c8:	f001 fec8 	bl	800435c <HAL_UART_Transmit>
  data();
 80025cc:	f7ff fcf2 	bl	8001fb4 <data>
//  modbus(SlaveID,FunctionCode,Address,Datalength);
  sprintf(ATcommand,"modbus OK\r\n");
 80025d0:	463b      	mov	r3, r7
 80025d2:	4919      	ldr	r1, [pc, #100]	@ (8002638 <main+0xb0>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fded 	bl	80061b4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80025da:	463b      	mov	r3, r7
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd fe67 	bl	80002b0 <strlen>
 80025e2:	4603      	mov	r3, r0
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4639      	mov	r1, r7
 80025e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ec:	4811      	ldr	r0, [pc, #68]	@ (8002634 <main+0xac>)
 80025ee:	f001 feb5 	bl	800435c <HAL_UART_Transmit>
  char *phone ="+919405951862";
 80025f2:	4b12      	ldr	r3, [pc, #72]	@ (800263c <main+0xb4>)
 80025f4:	657b      	str	r3, [r7, #84]	@ 0x54
  char *msg ="Hello World\x1A";
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <main+0xb8>)
 80025f8:	653b      	str	r3, [r7, #80]	@ 0x50
  send_sms(phone, msg);
 80025fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80025fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025fe:	f000 f927 	bl	8002850 <send_sms>
  sprintf(ATcommand,"sms ok\r\n");
 8002602:	463b      	mov	r3, r7
 8002604:	490f      	ldr	r1, [pc, #60]	@ (8002644 <main+0xbc>)
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fdd4 	bl	80061b4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800260c:	463b      	mov	r3, r7
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd fe4e 	bl	80002b0 <strlen>
 8002614:	4603      	mov	r3, r0
 8002616:	b29a      	uxth	r2, r3
 8002618:	4639      	mov	r1, r7
 800261a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800261e:	4805      	ldr	r0, [pc, #20]	@ (8002634 <main+0xac>)
 8002620:	f001 fe9c 	bl	800435c <HAL_UART_Transmit>
 8002624:	2300      	movs	r3, #0


}
 8002626:	4618      	mov	r0, r3
 8002628:	3758      	adds	r7, #88	@ 0x58
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	08008ff0 	.word	0x08008ff0
 8002634:	20000310 	.word	0x20000310
 8002638:	08008ffc 	.word	0x08008ffc
 800263c:	08009008 	.word	0x08009008
 8002640:	08009018 	.word	0x08009018
 8002644:	08009028 	.word	0x08009028

08002648 <HAL_UARTEx_RxEventCallback>:
    return u.f;
}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
	Data[0] = RxData[3]<<8 | RxData[4];
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002656:	78db      	ldrb	r3, [r3, #3]
 8002658:	b21b      	sxth	r3, r3
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	b21a      	sxth	r2, r3
 800265e:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002660:	791b      	ldrb	r3, [r3, #4]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	b29a      	uxth	r2, r3
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <HAL_UARTEx_RxEventCallback+0x84>)
 800266c:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 800266e:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002670:	795b      	ldrb	r3, [r3, #5]
 8002672:	b21b      	sxth	r3, r3
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b21a      	sxth	r2, r3
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 800267a:	799b      	ldrb	r3, [r3, #6]
 800267c:	b21b      	sxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b21b      	sxth	r3, r3
 8002682:	b29a      	uxth	r2, r3
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_UARTEx_RxEventCallback+0x84>)
 8002686:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 800268a:	79db      	ldrb	r3, [r3, #7]
 800268c:	b21b      	sxth	r3, r3
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002694:	7a1b      	ldrb	r3, [r3, #8]
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_UARTEx_RxEventCallback+0x84>)
 80026a0:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 80026a4:	7a5b      	ldrb	r3, [r3, #9]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x80>)
 80026ae:	7a9b      	ldrb	r3, [r3, #10]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <HAL_UARTEx_RxEventCallback+0x84>)
 80026ba:	80da      	strh	r2, [r3, #6]
//	Data[4] = RxData[11]<<8 | RxData[12];
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000028c 	.word	0x2000028c
 80026cc:	200002b4 	.word	0x200002b4

080026d0 <sendData>:

void sendData (uint8_t *data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026de:	480a      	ldr	r0, [pc, #40]	@ (8002708 <sendData+0x38>)
 80026e0:	f001 f870 	bl	80037c4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, data, 8, 1000);
 80026e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e8:	2208      	movs	r2, #8
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4807      	ldr	r0, [pc, #28]	@ (800270c <sendData+0x3c>)
 80026ee:	f001 fe35 	bl	800435c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f8:	4803      	ldr	r0, [pc, #12]	@ (8002708 <sendData+0x38>)
 80026fa:	f001 f863 	bl	80037c4 <HAL_GPIO_WritePin>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40020000 	.word	0x40020000
 800270c:	20000358 	.word	0x20000358

08002710 <modbus_int>:



}

int modbus_int(uint8_t SlaveID, uint8_t FunctionCode, uint8_t Address, uint8_t Datalength){
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	4603      	mov	r3, r0
 8002724:	71bb      	strb	r3, [r7, #6]
 8002726:	460b      	mov	r3, r1
 8002728:	717b      	strb	r3, [r7, #5]
 800272a:	4613      	mov	r3, r2
 800272c:	713b      	strb	r3, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 32);
 800272e:	2220      	movs	r2, #32
 8002730:	4927      	ldr	r1, [pc, #156]	@ (80027d0 <modbus_int+0xc0>)
 8002732:	4828      	ldr	r0, [pc, #160]	@ (80027d4 <modbus_int+0xc4>)
 8002734:	f001 ff34 	bl	80045a0 <HAL_UARTEx_ReceiveToIdle_IT>
	TxData[0] = SlaveID;  // slave address
 8002738:	4a27      	ldr	r2, [pc, #156]	@ (80027d8 <modbus_int+0xc8>)
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	7013      	strb	r3, [r2, #0]
	switch (FunctionCode)
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	3b01      	subs	r3, #1
 8002742:	2b03      	cmp	r3, #3
 8002744:	d81a      	bhi.n	800277c <modbus_int+0x6c>
 8002746:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <modbus_int+0x3c>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	0800275d 	.word	0x0800275d
 8002750:	08002765 	.word	0x08002765
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002775 	.word	0x08002775
	    {
	        case 0x01:  // Read Coils
	        	TxData[1] = 0x01;
 800275c:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <modbus_int+0xc8>)
 800275e:	2201      	movs	r2, #1
 8002760:	705a      	strb	r2, [r3, #1]
	            break;
 8002762:	e00f      	b.n	8002784 <modbus_int+0x74>

	        case 0x02:  // Read Discrete Inputs
	        	TxData[1] = 0x02;
 8002764:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <modbus_int+0xc8>)
 8002766:	2202      	movs	r2, #2
 8002768:	705a      	strb	r2, [r3, #1]
	            break;
 800276a:	e00b      	b.n	8002784 <modbus_int+0x74>

	        case 0x03:  // Read Holding Registers
	        	TxData[1] = 0x03;
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <modbus_int+0xc8>)
 800276e:	2203      	movs	r2, #3
 8002770:	705a      	strb	r2, [r3, #1]
	            break;
 8002772:	e007      	b.n	8002784 <modbus_int+0x74>

	        case 0x04:  // Read Input Registers
	        	TxData[1] = 0x04;
 8002774:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <modbus_int+0xc8>)
 8002776:	2204      	movs	r2, #4
 8002778:	705a      	strb	r2, [r3, #1]
	            break;
 800277a:	e003      	b.n	8002784 <modbus_int+0x74>

	        default:
	        	TxData[1] = 0x04;
 800277c:	4b16      	ldr	r3, [pc, #88]	@ (80027d8 <modbus_int+0xc8>)
 800277e:	2204      	movs	r2, #4
 8002780:	705a      	strb	r2, [r3, #1]
	            break;
 8002782:	bf00      	nop
	    }
	//Address
	TxData[4] = (Address >> 8) & 0xFF;  // High byte
 8002784:	4b14      	ldr	r3, [pc, #80]	@ (80027d8 <modbus_int+0xc8>)
 8002786:	2200      	movs	r2, #0
 8002788:	711a      	strb	r2, [r3, #4]
	TxData[5] = Address & 0xFF;         // Low byte
 800278a:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <modbus_int+0xc8>)
 800278c:	797b      	ldrb	r3, [r7, #5]
 800278e:	7153      	strb	r3, [r2, #5]
	//Datalength
	TxData[4] = (Datalength >> 8) & 0xFF;  // High byte
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <modbus_int+0xc8>)
 8002792:	2200      	movs	r2, #0
 8002794:	711a      	strb	r2, [r3, #4]
	TxData[5] = Datalength & 0xFF;         // Low byte
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <modbus_int+0xc8>)
 8002798:	793b      	ldrb	r3, [r7, #4]
 800279a:	7153      	strb	r3, [r2, #5]

	uint16_t crc = crc16(TxData, 6);
 800279c:	2106      	movs	r1, #6
 800279e:	480e      	ldr	r0, [pc, #56]	@ (80027d8 <modbus_int+0xc8>)
 80027a0:	f000 f81e 	bl	80027e0 <crc16>
 80027a4:	4603      	mov	r3, r0
 80027a6:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <modbus_int+0xc8>)
 80027ae:	719a      	strb	r2, [r3, #6]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <modbus_int+0xc8>)
 80027ba:	71da      	strb	r2, [r3, #7]

	sendData(TxData);
 80027bc:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <modbus_int+0xc8>)
 80027be:	f7ff ff87 	bl	80026d0 <sendData>

		return Data[0];
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <modbus_int+0xcc>)
 80027c4:	881b      	ldrh	r3, [r3, #0]



}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000028c 	.word	0x2000028c
 80027d4:	200002c8 	.word	0x200002c8
 80027d8:	200002ac 	.word	0x200002ac
 80027dc:	200002b4 	.word	0x200002b4

080027e0 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80027ec:	23ff      	movs	r3, #255	@ 0xff
 80027ee:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80027f0:	23ff      	movs	r3, #255	@ 0xff
 80027f2:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80027f4:	e013      	b.n	800281e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
 8002800:	4053      	eors	r3, r2
 8002802:	b2db      	uxtb	r3, r3
 8002804:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002806:	4a10      	ldr	r2, [pc, #64]	@ (8002848 <crc16+0x68>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4413      	add	r3, r2
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	4053      	eors	r3, r2
 8002812:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <crc16+0x6c>)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	807a      	strh	r2, [r7, #2]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e6      	bne.n	80027f6 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	b21b      	sxth	r3, r3
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21a      	sxth	r2, r3
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	b21b      	sxth	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b21b      	sxth	r3, r3
 8002838:	b29b      	uxth	r3, r3
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	080090ac 	.word	0x080090ac
 800284c:	080091ac 	.word	0x080091ac

08002850 <send_sms>:
 */
#include "main.h"
#include "sys_init.h"


void send_sms(const char *phone_number, const char *message) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b0e2      	sub	sp, #392	@ 0x188
 8002854:	af00      	add	r7, sp, #0
 8002856:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800285a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800285e:	6018      	str	r0, [r3, #0]
 8002860:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002864:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002868:	6019      	str	r1, [r3, #0]
	char response[256];
    send_at_command("AT\r\n",response,500);
 800286a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800286e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002872:	4619      	mov	r1, r3
 8002874:	481f      	ldr	r0, [pc, #124]	@ (80028f4 <send_sms+0xa4>)
 8002876:	f7ff fc57 	bl	8002128 <send_at_command>
    send_at_command("AT+CSMP?\r\n",response,500);
 800287a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800287e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002882:	4619      	mov	r1, r3
 8002884:	481c      	ldr	r0, [pc, #112]	@ (80028f8 <send_sms+0xa8>)
 8002886:	f7ff fc4f 	bl	8002128 <send_at_command>
    send_at_command("AT+CMGF=1\r\n",response,500);
 800288a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800288e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002892:	4619      	mov	r1, r3
 8002894:	4819      	ldr	r0, [pc, #100]	@ (80028fc <send_sms+0xac>)
 8002896:	f7ff fc47 	bl	8002128 <send_at_command>
    send_at_command("AT+CSMP=17,167,0,0\r\n",response,500);
 800289a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800289e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4816      	ldr	r0, [pc, #88]	@ (8002900 <send_sms+0xb0>)
 80028a6:	f7ff fc3f 	bl	8002128 <send_at_command>

    //Set Number
    char mqtt_id[128];
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMGS=\"%s\"\r\n",phone_number);
 80028aa:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80028ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028b2:	f107 0008 	add.w	r0, r7, #8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <send_sms+0xb4>)
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	f003 fc44 	bl	8006148 <sniprintf>
    send_at_command(mqtt_id, response, 500);
 80028c0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fc2b 	bl	8002128 <send_at_command>
    send_at_command(message, response, 500);
 80028d2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80028d6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80028da:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028de:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	f7ff fc20 	bl	8002128 <send_at_command>

}
 80028e8:	bf00      	nop
 80028ea:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08009034 	.word	0x08009034
 80028f8:	0800903c 	.word	0x0800903c
 80028fc:	08009048 	.word	0x08009048
 8002900:	08009054 	.word	0x08009054
 8002904:	0800906c 	.word	0x0800906c

08002908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_MspInit+0x4c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <HAL_MspInit+0x4c>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800291c:	6453      	str	r3, [r2, #68]	@ 0x44
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_MspInit+0x4c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <HAL_MspInit+0x4c>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	@ 0x40
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	@ 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5f      	ldr	r2, [pc, #380]	@ (8002af4 <HAL_UART_MspInit+0x19c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12d      	bne.n	80029d6 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	4b5e      	ldr	r3, [pc, #376]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a5d      	ldr	r2, [pc, #372]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029c4:	2307      	movs	r3, #7
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	484b      	ldr	r0, [pc, #300]	@ (8002afc <HAL_UART_MspInit+0x1a4>)
 80029d0:	f000 fd64 	bl	800349c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d4:	e089      	b.n	8002aea <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a49      	ldr	r2, [pc, #292]	@ (8002b00 <HAL_UART_MspInit+0x1a8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d12c      	bne.n	8002a3a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a43      	ldr	r2, [pc, #268]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f0:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	4a3c      	ldr	r2, [pc, #240]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a30:	4619      	mov	r1, r3
 8002a32:	4832      	ldr	r0, [pc, #200]	@ (8002afc <HAL_UART_MspInit+0x1a4>)
 8002a34:	f000 fd32 	bl	800349c <HAL_GPIO_Init>
}
 8002a38:	e057      	b.n	8002aea <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a31      	ldr	r2, [pc, #196]	@ (8002b04 <HAL_UART_MspInit+0x1ac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d152      	bne.n	8002aea <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a54:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	4a23      	ldr	r2, [pc, #140]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <HAL_UART_MspInit+0x1a0>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4815      	ldr	r0, [pc, #84]	@ (8002b08 <HAL_UART_MspInit+0x1b0>)
 8002ab4:	f000 fcf2 	bl	800349c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002aca:	2307      	movs	r3, #7
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <HAL_UART_MspInit+0x1b4>)
 8002ad6:	f000 fce1 	bl	800349c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2027      	movs	r0, #39	@ 0x27
 8002ae0:	f000 fc13 	bl	800330a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae4:	2027      	movs	r0, #39	@ 0x27
 8002ae6:	f000 fc2c 	bl	8003342 <HAL_NVIC_EnableIRQ>
}
 8002aea:	bf00      	nop
 8002aec:	3738      	adds	r7, #56	@ 0x38
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40004400 	.word	0x40004400
 8002b04:	40004800 	.word	0x40004800
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020400 	.word	0x40020400

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <NMI_Handler+0x4>

08002b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <HardFault_Handler+0x4>

08002b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <MemManage_Handler+0x4>

08002b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b66:	f000 fab1 	bl	80030cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b74:	4802      	ldr	r0, [pc, #8]	@ (8002b80 <USART3_IRQHandler+0x10>)
 8002b76:	f001 fd71 	bl	800465c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000358 	.word	0x20000358

08002b84 <SystemClock_Config>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;


extern void SystemClock_Config(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b094      	sub	sp, #80	@ 0x50
 8002b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	2234      	movs	r2, #52	@ 0x34
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fba1 	bl	80062da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <SystemClock_Config+0xd4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	4a29      	ldr	r2, [pc, #164]	@ (8002c58 <SystemClock_Config+0xd4>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb8:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <SystemClock_Config+0xd4>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4b24      	ldr	r3, [pc, #144]	@ (8002c5c <SystemClock_Config+0xd8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002bd0:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <SystemClock_Config+0xd8>)
 8002bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <SystemClock_Config+0xd8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002be8:	2301      	movs	r3, #1
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bec:	2310      	movs	r3, #16
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002bfc:	2348      	movs	r3, #72	@ 0x48
 8002bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c00:	2302      	movs	r3, #2
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f8b5 	bl	8003d80 <HAL_RCC_OscConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002c1c:	f7ff fa68 	bl	80020f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c20:	230f      	movs	r3, #15
 8002c22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c24:	2302      	movs	r3, #2
 8002c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fdda 	bl	80037f8 <HAL_RCC_ClockConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002c4a:	f7ff fa51 	bl	80020f0 <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	@ 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <MX_USART1_UART_Init>:

extern void MX_USART1_UART_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <MX_USART1_UART_Init+0x50>)
 8002c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <MX_USART1_UART_Init+0x4c>)
 8002c98:	f001 fb10 	bl	80042bc <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ca2:	f7ff fa25 	bl	80020f0 <Error_Handler>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200002c8 	.word	0x200002c8
 8002cb0:	40011000 	.word	0x40011000

08002cb4 <MX_USART2_UART_Init>:

extern void MX_USART2_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	@ (8002d04 <MX_USART2_UART_Init+0x50>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002ce6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002cea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cec:	4804      	ldr	r0, [pc, #16]	@ (8002d00 <MX_USART2_UART_Init+0x4c>)
 8002cee:	f001 fae5 	bl	80042bc <HAL_UART_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002cf8:	f7ff f9fa 	bl	80020f0 <Error_Handler>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000310 	.word	0x20000310
 8002d04:	40004400 	.word	0x40004400

08002d08 <MX_USART3_UART_Init>:

extern void MX_USART3_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <MX_USART3_UART_Init+0x50>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	@ (8002d54 <MX_USART3_UART_Init+0x4c>)
 8002d40:	f001 fabc 	bl	80042bc <HAL_UART_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d4a:	f7ff f9d1 	bl	80020f0 <Error_Handler>
  }
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000358 	.word	0x20000358
 8002d58:	40004800 	.word	0x40004800

08002d5c <MX_GPIO_Init>:

extern void MX_GPIO_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d82:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <MX_GPIO_Init+0x9c>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dcc:	480b      	ldr	r0, [pc, #44]	@ (8002dfc <MX_GPIO_Init+0xa0>)
 8002dce:	f000 fcf9 	bl	80037c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4619      	mov	r1, r3
 8002dea:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <MX_GPIO_Init+0xa0>)
 8002dec:	f000 fb56 	bl	800349c <HAL_GPIO_Init>
}
 8002df0:	bf00      	nop
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000

08002e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return 1;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_kill>:

int _kill(int pid, int sig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e1a:	f003 fad7 	bl	80063cc <__errno>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2216      	movs	r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
  return -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_exit>:

void _exit (int status)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ffe7 	bl	8002e10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e42:	bf00      	nop
 8002e44:	e7fd      	b.n	8002e42 <_exit+0x12>

08002e46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e00a      	b.n	8002e6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e58:	f3af 8000 	nop.w
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	b2ca      	uxtb	r2, r1
 8002e66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	dbf0      	blt.n	8002e58 <_read+0x12>
  }

  return len;
 8002e76:	687b      	ldr	r3, [r7, #4]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e009      	b.n	8002ea6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	60ba      	str	r2, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f888 	bl	8002fb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	dbf1      	blt.n	8002e92 <_write+0x12>
  }
  return len;
 8002eae:	687b      	ldr	r3, [r7, #4]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_close>:

int _close(int file)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_isatty>:

int _isatty(int file)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ef8:	2301      	movs	r3, #1
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f28:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <_sbrk+0x5c>)
 8002f2a:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <_sbrk+0x60>)
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <_sbrk+0x64>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <_sbrk+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f50:	f003 fa3c 	bl	80063cc <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e009      	b.n	8002f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <_sbrk+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20020000 	.word	0x20020000
 8002f80:	00000400 	.word	0x00000400
 8002f84:	200003a0 	.word	0x200003a0
 8002f88:	20000540 	.word	0x20000540

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__io_putchar>:
}



PUTCHAR_PROTOTYPE
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002fb8:	1d39      	adds	r1, r7, #4
 8002fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4803      	ldr	r0, [pc, #12]	@ (8002fd0 <__io_putchar+0x20>)
 8002fc2:	f001 f9cb 	bl	800435c <HAL_UART_Transmit>

  return ch;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200003a4 	.word	0x200003a4

08002fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800300c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fd8:	f7ff ffd8 	bl	8002f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fde:	490d      	ldr	r1, [pc, #52]	@ (8003014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8003018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe4:	e002      	b.n	8002fec <LoopCopyDataInit>

08002fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fea:	3304      	adds	r3, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff0:	d3f9      	bcc.n	8002fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8003020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff8:	e001      	b.n	8002ffe <LoopFillZerobss>

08002ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ffc:	3204      	adds	r2, #4

08002ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003000:	d3fb      	bcc.n	8002ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003002:	f003 f9e9 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003006:	f7ff fabf 	bl	8002588 <main>
  bx  lr    
 800300a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800300c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003018:	08009660 	.word	0x08009660
  ldr r2, =_sbss
 800301c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003020:	2000053c 	.word	0x2000053c

08003024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC_IRQHandler>
	...

08003028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800302c:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_Init+0x40>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <HAL_Init+0x40>)
 8003032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_Init+0x40>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_Init+0x40>)
 800303e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003044:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <HAL_Init+0x40>)
 800304a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 f94f 	bl	80032f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	200f      	movs	r0, #15
 8003058:	f000 f808 	bl	800306c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f7ff fc54 	bl	8002908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00

0800306c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_InitTick+0x54>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_InitTick+0x58>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003082:	fbb3 f3f1 	udiv	r3, r3, r1
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f967 	bl	800335e <HAL_SYSTICK_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e00e      	b.n	80030b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d80a      	bhi.n	80030b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f000 f92f 	bl	800330a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ac:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <HAL_InitTick+0x5c>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000002c 	.word	0x2000002c
 80030c4:	20000034 	.word	0x20000034
 80030c8:	20000030 	.word	0x20000030

080030cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_IncTick+0x20>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_IncTick+0x24>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_IncTick+0x24>)
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000034 	.word	0x20000034
 80030f0:	200003ec 	.word	0x200003ec

080030f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return uwTick;
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_GetTick+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200003ec 	.word	0x200003ec

0800310c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7ff ffee 	bl	80030f4 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d005      	beq.n	8003132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_Delay+0x44>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003132:	bf00      	nop
 8003134:	f7ff ffde 	bl	80030f4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d8f7      	bhi.n	8003134 <HAL_Delay+0x28>
  {
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000034 	.word	0x20000034

08003154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4b0c      	ldr	r3, [pc, #48]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800317c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003186:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60d3      	str	r3, [r2, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <__NVIC_GetPriorityGrouping+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0307 	and.w	r3, r3, #7
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0b      	blt.n	80031e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4907      	ldr	r1, [pc, #28]	@ (80031f0 <__NVIC_EnableIRQ+0x38>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e100 	.word	0xe000e100

080031f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	6039      	str	r1, [r7, #0]
 80031fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	2b00      	cmp	r3, #0
 8003206:	db0a      	blt.n	800321e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	490c      	ldr	r1, [pc, #48]	@ (8003240 <__NVIC_SetPriority+0x4c>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	440b      	add	r3, r1
 8003218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800321c:	e00a      	b.n	8003234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4908      	ldr	r1, [pc, #32]	@ (8003244 <__NVIC_SetPriority+0x50>)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	3b04      	subs	r3, #4
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	440b      	add	r3, r1
 8003232:	761a      	strb	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	@ 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f1c3 0307 	rsb	r3, r3, #7
 8003262:	2b04      	cmp	r3, #4
 8003264:	bf28      	it	cs
 8003266:	2304      	movcs	r3, #4
 8003268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3304      	adds	r3, #4
 800326e:	2b06      	cmp	r3, #6
 8003270:	d902      	bls.n	8003278 <NVIC_EncodePriority+0x30>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3b03      	subs	r3, #3
 8003276:	e000      	b.n	800327a <NVIC_EncodePriority+0x32>
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	401a      	ands	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003290:	f04f 31ff 	mov.w	r1, #4294967295
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43d9      	mvns	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	4313      	orrs	r3, r2
         );
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032c0:	d301      	bcc.n	80032c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00f      	b.n	80032e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <SysTick_Config+0x40>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ce:	210f      	movs	r1, #15
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f7ff ff8e 	bl	80031f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <SysTick_Config+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032de:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <SysTick_Config+0x40>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff29 	bl	8003154 <__NVIC_SetPriorityGrouping>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	4603      	mov	r3, r0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800331c:	f7ff ff3e 	bl	800319c <__NVIC_GetPriorityGrouping>
 8003320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	6978      	ldr	r0, [r7, #20]
 8003328:	f7ff ff8e 	bl	8003248 <NVIC_EncodePriority>
 800332c:	4602      	mov	r2, r0
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff5d 	bl	80031f4 <__NVIC_SetPriority>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff31 	bl	80031b8 <__NVIC_EnableIRQ>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffa2 	bl	80032b0 <SysTick_Config>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff feb6 	bl	80030f4 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d008      	beq.n	80033a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2280      	movs	r2, #128	@ 0x80
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e052      	b.n	800344e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0216 	bic.w	r2, r2, #22
 80033b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_DMA_Abort+0x62>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f8:	e013      	b.n	8003422 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033fa:	f7ff fe7b 	bl	80030f4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b05      	cmp	r3, #5
 8003406:	d90c      	bls.n	8003422 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e015      	b.n	800344e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e4      	bne.n	80033fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003434:	223f      	movs	r2, #63	@ 0x3f
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2280      	movs	r2, #128	@ 0x80
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e00c      	b.n	800348e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2205      	movs	r2, #5
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	@ 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e165      	b.n	8003784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	f040 8154 	bne.w	800377e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d005      	beq.n	80034ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d130      	bne.n	8003550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 0201 	and.w	r2, r3, #1
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d017      	beq.n	800358c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d123      	bne.n	80035e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	08da      	lsrs	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3208      	adds	r2, #8
 80035da:	69b9      	ldr	r1, [r7, #24]
 80035dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80ae 	beq.w	800377e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b5d      	ldr	r3, [pc, #372]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	4a5c      	ldr	r2, [pc, #368]	@ (800379c <HAL_GPIO_Init+0x300>)
 800362c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003630:	6453      	str	r3, [r2, #68]	@ 0x44
 8003632:	4b5a      	ldr	r3, [pc, #360]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800363e:	4a58      	ldr	r2, [pc, #352]	@ (80037a0 <HAL_GPIO_Init+0x304>)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a4f      	ldr	r2, [pc, #316]	@ (80037a4 <HAL_GPIO_Init+0x308>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d025      	beq.n	80036b6 <HAL_GPIO_Init+0x21a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4e      	ldr	r2, [pc, #312]	@ (80037a8 <HAL_GPIO_Init+0x30c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01f      	beq.n	80036b2 <HAL_GPIO_Init+0x216>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4d      	ldr	r2, [pc, #308]	@ (80037ac <HAL_GPIO_Init+0x310>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d019      	beq.n	80036ae <HAL_GPIO_Init+0x212>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4c      	ldr	r2, [pc, #304]	@ (80037b0 <HAL_GPIO_Init+0x314>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x20e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4b      	ldr	r2, [pc, #300]	@ (80037b4 <HAL_GPIO_Init+0x318>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x20a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4a      	ldr	r2, [pc, #296]	@ (80037b8 <HAL_GPIO_Init+0x31c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x206>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a49      	ldr	r2, [pc, #292]	@ (80037bc <HAL_GPIO_Init+0x320>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x202>
 800369a:	2306      	movs	r3, #6
 800369c:	e00c      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 800369e:	2307      	movs	r3, #7
 80036a0:	e00a      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e008      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e004      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e002      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x21c>
 80036b6:	2300      	movs	r3, #0
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f002 0203 	and.w	r2, r2, #3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	4093      	lsls	r3, r2
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c8:	4935      	ldr	r1, [pc, #212]	@ (80037a0 <HAL_GPIO_Init+0x304>)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	3302      	adds	r3, #2
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b3a      	ldr	r3, [pc, #232]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a31      	ldr	r2, [pc, #196]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a26      	ldr	r2, [pc, #152]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800374e:	4a1c      	ldr	r2, [pc, #112]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003778:	4a11      	ldr	r2, [pc, #68]	@ (80037c0 <HAL_GPIO_Init+0x324>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3301      	adds	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	f67f ae96 	bls.w	80034b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3724      	adds	r7, #36	@ 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40020000 	.word	0x40020000
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40020800 	.word	0x40020800
 80037b0:	40020c00 	.word	0x40020c00
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40021400 	.word	0x40021400
 80037bc:	40021800 	.word	0x40021800
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037e0:	e003      	b.n	80037ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	619a      	str	r2, [r3, #24]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7ff fc04 	bl	80030f4 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7ff fc00 	bl	80030f4 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	@ (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f855 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	@ (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fb64 	bl	800306c <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	080092ac 	.word	0x080092ac
 80039bc:	2000002c 	.word	0x2000002c
 80039c0:	20000030 	.word	0x20000030

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	@ (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	2000002c 	.word	0x2000002c

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	080092bc 	.word	0x080092bc

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a08:	f7ff ffdc 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0b5b      	lsrs	r3, r3, #13
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	080092bc 	.word	0x080092bc

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b0a6      	sub	sp, #152	@ 0x98
 8003a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a52:	4bc8      	ldr	r3, [pc, #800]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	f200 817e 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x330>
 8003a60:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003d5d 	.word	0x08003d5d
 8003a70:	08003d5d 	.word	0x08003d5d
 8003a74:	08003d5d 	.word	0x08003d5d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003d5d 	.word	0x08003d5d
 8003a80:	08003d5d 	.word	0x08003d5d
 8003a84:	08003d5d 	.word	0x08003d5d
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003d5d 	.word	0x08003d5d
 8003a90:	08003d5d 	.word	0x08003d5d
 8003a94:	08003d5d 	.word	0x08003d5d
 8003a98:	08003c17 	.word	0x08003c17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4bb6      	ldr	r3, [pc, #728]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003aa2:	e15f      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4bb5      	ldr	r3, [pc, #724]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x350>)
 8003aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003aaa:	e15b      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aac:	4bb1      	ldr	r3, [pc, #708]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab8:	4bae      	ldr	r3, [pc, #696]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d031      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac4:	4bab      	ldr	r3, [pc, #684]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	2200      	movs	r2, #0
 8003acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ace:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad8:	2300      	movs	r3, #0
 8003ada:	667b      	str	r3, [r7, #100]	@ 0x64
 8003adc:	4ba7      	ldr	r3, [pc, #668]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x350>)
 8003ade:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	fb03 f202 	mul.w	r2, r3, r2
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4621      	mov	r1, r4
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	4aa2      	ldr	r2, [pc, #648]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x350>)
 8003af4:	4621      	mov	r1, r4
 8003af6:	fba1 1202 	umull	r1, r2, r1, r2
 8003afa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003afc:	460a      	mov	r2, r1
 8003afe:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b02:	4413      	add	r3, r2
 8003b04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b14:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b18:	f7fd f866 	bl	8000be8 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b26:	e064      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	4b92      	ldr	r3, [pc, #584]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	2200      	movs	r2, #0
 8003b30:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b32:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003b44:	4622      	mov	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	1a51      	subs	r1, r2, r1
 8003b60:	6139      	str	r1, [r7, #16]
 8003b62:	4629      	mov	r1, r5
 8003b64:	eb63 0301 	sbc.w	r3, r3, r1
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b76:	4659      	mov	r1, fp
 8003b78:	018b      	lsls	r3, r1, #6
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b80:	4651      	mov	r1, sl
 8003b82:	018a      	lsls	r2, r1, #6
 8003b84:	4651      	mov	r1, sl
 8003b86:	ebb2 0801 	subs.w	r8, r2, r1
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba4:	4690      	mov	r8, r2
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	eb18 0303 	adds.w	r3, r8, r3
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	eb49 0303 	adc.w	r3, r9, r3
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	028b      	lsls	r3, r1, #10
 8003bc8:	4621      	mov	r1, r4
 8003bca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bce:	4621      	mov	r1, r4
 8003bd0:	028a      	lsls	r2, r1, #10
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bda:	2200      	movs	r2, #0
 8003bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bde:	647a      	str	r2, [r7, #68]	@ 0x44
 8003be0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003be4:	f7fd f800 	bl	8000be8 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bf2:	4b60      	ldr	r3, [pc, #384]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003c04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c14:	e0a6      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c16:	4b57      	ldr	r3, [pc, #348]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c22:	4b54      	ldr	r3, [pc, #336]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02a      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2e:	4b51      	ldr	r3, [pc, #324]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	2200      	movs	r2, #0
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c40:	2100      	movs	r1, #0
 8003c42:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x350>)
 8003c44:	fb03 f201 	mul.w	r2, r3, r1
 8003c48:	2300      	movs	r3, #0
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a4a      	ldr	r2, [pc, #296]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x350>)
 8003c52:	fba0 1202 	umull	r1, r2, r0, r2
 8003c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c58:	460a      	mov	r2, r1
 8003c5a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003c5c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c5e:	4413      	add	r3, r2
 8003c60:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c66:	2200      	movs	r2, #0
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c74:	f7fc ffb8 	bl	8000be8 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c82:	e05b      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c84:	4b3b      	ldr	r3, [pc, #236]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	f04f 0000 	mov.w	r0, #0
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	0159      	lsls	r1, r3, #5
 8003cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb2:	0150      	lsls	r0, r2, #5
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4641      	mov	r1, r8
 8003cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	00eb      	lsls	r3, r5, #3
 8003cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	18e3      	adds	r3, r4, r3
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb45 0303 	adc.w	r3, r5, r3
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d24:	2200      	movs	r2, #0
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	61fa      	str	r2, [r7, #28]
 8003d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d2e:	f7fc ff5b 	bl	8000be8 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4613      	mov	r3, r2
 8003d38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0f1b      	lsrs	r3, r3, #28
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d5a:	e003      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3798      	adds	r7, #152	@ 0x98
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	017d7840 	.word	0x017d7840

08003d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e28d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8083 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da0:	4b94      	ldr	r3, [pc, #592]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d019      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003dac:	4b91      	ldr	r3, [pc, #580]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003db8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b88      	ldr	r3, [pc, #544]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b84      	ldr	r3, [pc, #528]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x124>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e25a      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x90>
 8003e02:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7b      	ldr	r2, [pc, #492]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xb4>
 8003e1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b73      	ldr	r3, [pc, #460]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a72      	ldr	r2, [pc, #456]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e34:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7ff f94e 	bl	80030f4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7ff f94a 	bl	80030f4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	@ 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e21f      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b61      	ldr	r3, [pc, #388]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xdc>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7ff f93a 	bl	80030f4 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7ff f936 	bl	80030f4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e20b      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b57      	ldr	r3, [pc, #348]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x104>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06f      	beq.n	8003f92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eb2:	4b50      	ldr	r3, [pc, #320]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003eca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	4b41      	ldr	r3, [pc, #260]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e1d3      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4937      	ldr	r1, [pc, #220]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7ff f8e3 	bl	80030f4 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f32:	f7ff f8df 	bl	80030f4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1b4      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b28      	ldr	r3, [pc, #160]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4925      	ldr	r1, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7ff f8c2 	bl	80030f4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7ff f8be 	bl	80030f4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e193      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7ff f8a2 	bl	80030f4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7ff f89e 	bl	80030f4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e173      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x234>
 8003fd2:	e01b      	b.n	800400c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7ff f88b 	bl	80030f4 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	e00e      	b.n	8004000 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7ff f887 	bl	80030f4 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d907      	bls.n	8004000 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e15c      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b8a      	ldr	r3, [pc, #552]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ea      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8097 	beq.w	8004148 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b83      	ldr	r3, [pc, #524]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b7f      	ldr	r3, [pc, #508]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a7e      	ldr	r2, [pc, #504]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b7c      	ldr	r3, [pc, #496]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b76      	ldr	r3, [pc, #472]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7ff f847 	bl	80030f4 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7ff f843 	bl	80030f4 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e118      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b6c      	ldr	r3, [pc, #432]	@ (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x31e>
 8004090:	4b66      	ldr	r3, [pc, #408]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004094:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	@ 0x70
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x340>
 80040a6:	4b61      	ldr	r3, [pc, #388]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	4a60      	ldr	r2, [pc, #384]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b2:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a5d      	ldr	r2, [pc, #372]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 80040c0:	4b5a      	ldr	r3, [pc, #360]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	4a59      	ldr	r2, [pc, #356]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	4b57      	ldr	r3, [pc, #348]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7ff f808 	bl	80030f4 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7ff f804 	bl	80030f4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0d7      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ee      	beq.n	80040e8 <HAL_RCC_OscConfig+0x368>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe fff2 	bl	80030f4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe ffee 	bl	80030f4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0c1      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	4a3a      	ldr	r2, [pc, #232]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004146:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80ad 	beq.w	80042ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b08      	cmp	r3, #8
 800415c:	d060      	beq.n	8004220 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d145      	bne.n	80041f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe ffc2 	bl	80030f4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe ffbe 	bl	80030f4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e093      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b29      	ldr	r3, [pc, #164]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	019b      	lsls	r3, r3, #6
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	491b      	ldr	r1, [pc, #108]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fe ff93 	bl	80030f4 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fe ff8f 	bl	80030f4 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e064      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e4:	4b11      	ldr	r3, [pc, #68]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x452>
 80041f0:	e05c      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe ff7c 	bl	80030f4 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fe ff78 	bl	80030f4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x480>
 800421e:	e045      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e040      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
 8004234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004238:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x538>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d030      	beq.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d129      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d122      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800426e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	4293      	cmp	r3, r2
 8004272:	d119      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d10f      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800

080042bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e042      	b.n	8004354 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fe fb38 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	@ 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fea1 	bl	8005048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	@ 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	d175      	bne.n	8004468 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_UART_Transmit+0x2c>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e06e      	b.n	800446a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439a:	f7fe feab 	bl	80030f4 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d0:	e02e      	b.n	8004430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fc05 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e03a      	b.n	800446a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	3302      	adds	r3, #2
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e007      	b.n	8004422 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1cb      	bne.n	80043d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	2140      	movs	r1, #64	@ 0x40
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fbd1 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e006      	b.n	800446a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
  }
}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08a      	sub	sp, #40	@ 0x28
 8004476:	af02      	add	r7, sp, #8
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b20      	cmp	r3, #32
 8004490:	f040 8081 	bne.w	8004596 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_Receive+0x2e>
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e079      	b.n	8004598 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2222      	movs	r2, #34	@ 0x22
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b8:	f7fe fe1c 	bl	80030f4 <HAL_GetTick>
 80044bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	d108      	bne.n	80044e6 <HAL_UART_Receive+0x74>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	e003      	b.n	80044ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80044ee:	e047      	b.n	8004580 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	2120      	movs	r1, #32
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fb76 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e042      	b.n	8004598 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10c      	bne.n	8004532 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	b29a      	uxth	r2, r3
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3302      	adds	r3, #2
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e01f      	b.n	8004572 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453a:	d007      	beq.n	800454c <HAL_UART_Receive+0xda>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_UART_Receive+0xe8>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	e008      	b.n	800456c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004566:	b2da      	uxtb	r2, r3
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3301      	adds	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1b2      	bne.n	80044f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e000      	b.n	8004598 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	@ 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d14a      	bne.n	8004650 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e043      	b.n	8004652 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	461a      	mov	r2, r3
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fb5e 	bl	8004c9e <UART_Start_Receive_IT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12c      	bne.n	800464a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d125      	bne.n	8004644 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	617b      	str	r3, [r7, #20]
   return(result);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f043 0310 	orr.w	r3, r3, #16
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6a39      	ldr	r1, [r7, #32]
 8004634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	61fb      	str	r3, [r7, #28]
   return(result);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004642:	e002      	b.n	800464a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800464a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800464e:	e000      	b.n	8004652 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3730      	adds	r7, #48	@ 0x30
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b0ba      	sub	sp, #232	@ 0xe8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800469a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_UART_IRQHandler+0x66>
 80046ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fc05 	bl	8004eca <UART_Receive_IT>
      return;
 80046c0:	e273      	b.n	8004baa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80de 	beq.w	8004888 <HAL_UART_IRQHandler+0x22c>
 80046cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80d1 	beq.w	8004888 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_UART_IRQHandler+0xae>
 80046f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xd2>
 8004716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f043 0202 	orr.w	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xf6>
 800473a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d011      	beq.n	8004782 <HAL_UART_IRQHandler+0x126>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800476a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f043 0208 	orr.w	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 820a 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_UART_IRQHandler+0x14e>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fb90 	bl	8004eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b4:	2b40      	cmp	r3, #64	@ 0x40
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <HAL_UART_IRQHandler+0x17a>
 80047ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04f      	beq.n	8004876 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa9b 	bl	8004d12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e6:	2b40      	cmp	r3, #64	@ 0x40
 80047e8:	d141      	bne.n	800486e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3314      	adds	r3, #20
 80047f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3314      	adds	r3, #20
 8004812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004816:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800481a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800482e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1d9      	bne.n	80047ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d013      	beq.n	8004866 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	4a8a      	ldr	r2, [pc, #552]	@ (8004a6c <HAL_UART_IRQHandler+0x410>)
 8004844:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fe03 	bl	8003456 <HAL_DMA_Abort_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004860:	4610      	mov	r0, r2
 8004862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004864:	e00e      	b.n	8004884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9b6 	bl	8004bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	e00a      	b.n	8004884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9b2 	bl	8004bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e006      	b.n	8004884 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9ae 	bl	8004bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004882:	e18d      	b.n	8004ba0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	bf00      	nop
    return;
 8004886:	e18b      	b.n	8004ba0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 8167 	bne.w	8004b60 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8160 	beq.w	8004b60 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8159 	beq.w	8004b60 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b40      	cmp	r3, #64	@ 0x40
 80048d0:	f040 80ce 	bne.w	8004a70 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a9 	beq.w	8004a3c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048f2:	429a      	cmp	r2, r3
 80048f4:	f080 80a2 	bcs.w	8004a3c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490a:	f000 8088 	beq.w	8004a1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004924:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800492c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800493a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800493e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004946:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1d9      	bne.n	800490e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800496a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800497e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004982:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004986:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e1      	bne.n	800495a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e3      	bne.n	8004996 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ee:	f023 0310 	bic.w	r3, r3, #16
 80049f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e3      	bne.n	80049dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fcac 	bl	8003376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fd fe07 	bl	8002648 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a3a:	e0b3      	b.n	8004ba4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a44:	429a      	cmp	r2, r3
 8004a46:	f040 80ad 	bne.w	8004ba4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a54:	f040 80a6 	bne.w	8004ba4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fd fdef 	bl	8002648 <HAL_UARTEx_RxEventCallback>
      return;
 8004a6a:	e09b      	b.n	8004ba4 <HAL_UART_IRQHandler+0x548>
 8004a6c:	08004dd9 	.word	0x08004dd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 808e 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8089 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8004abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e3      	bne.n	8004a96 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e3      	bne.n	8004ace <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e3      	bne.n	8004b14 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fd fd75 	bl	8002648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b5e:	e023      	b.n	8004ba8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_UART_IRQHandler+0x524>
 8004b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f93e 	bl	8004dfa <UART_Transmit_IT>
    return;
 8004b7e:	e014      	b.n	8004baa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <HAL_UART_IRQHandler+0x54e>
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f97e 	bl	8004e9a <UART_EndTransmit_IT>
    return;
 8004b9e:	e004      	b.n	8004baa <HAL_UART_IRQHandler+0x54e>
    return;
 8004ba0:	bf00      	nop
 8004ba2:	e002      	b.n	8004baa <HAL_UART_IRQHandler+0x54e>
      return;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_UART_IRQHandler+0x54e>
      return;
 8004ba8:	bf00      	nop
  }
}
 8004baa:	37e8      	adds	r7, #232	@ 0xe8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfc:	e03b      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d037      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fe fa75 	bl	80030f4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03a      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d023      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b80      	cmp	r3, #128	@ 0x80
 8004c32:	d020      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d01d      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d116      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f857 	bl	8004d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2208      	movs	r2, #8
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d0b4      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2222      	movs	r2, #34	@ 0x22
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0220 	orr.w	r2, r2, #32
 8004d02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b095      	sub	sp, #84	@ 0x54
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e5      	bne.n	8004d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d119      	bne.n	8004dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004daa:	61ba      	str	r2, [r7, #24]
 8004dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	613b      	str	r3, [r7, #16]
   return(result);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e5      	bne.n	8004d8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dcc:	bf00      	nop
 8004dce:	3754      	adds	r7, #84	@ 0x54
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fef3 	bl	8004bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b21      	cmp	r3, #33	@ 0x21
 8004e0c:	d13e      	bne.n	8004e8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e16:	d114      	bne.n	8004e42 <UART_Transmit_IT+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	621a      	str	r2, [r3, #32]
 8004e40:	e008      	b.n	8004e54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	1c59      	adds	r1, r3, #1
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6211      	str	r1, [r2, #32]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe78 	bl	8004bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b08c      	sub	sp, #48	@ 0x30
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b22      	cmp	r3, #34	@ 0x22
 8004ee4:	f040 80aa 	bne.w	800503c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef0:	d115      	bne.n	8004f1e <UART_Receive_IT+0x54>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d111      	bne.n	8004f1e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f1c:	e024      	b.n	8004f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2c:	d007      	beq.n	8004f3e <UART_Receive_IT+0x74>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <UART_Receive_IT+0x82>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e008      	b.n	8004f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4619      	mov	r1, r3
 8004f76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d15d      	bne.n	8005038 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0220 	bic.w	r2, r2, #32
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d135      	bne.n	800502e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe8:	623a      	str	r2, [r7, #32]
 8004fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	69f9      	ldr	r1, [r7, #28]
 8004fee:	6a3a      	ldr	r2, [r7, #32]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b10      	cmp	r3, #16
 8005008:	d10a      	bne.n	8005020 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fb0e 	bl	8002648 <HAL_UARTEx_RxEventCallback>
 800502c:	e002      	b.n	8005034 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fdc8 	bl	8004bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e002      	b.n	800503e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e000      	b.n	800503e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800503c:	2302      	movs	r3, #2
  }
}
 800503e:	4618      	mov	r0, r3
 8005040:	3730      	adds	r7, #48	@ 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800504c:	b0c0      	sub	sp, #256	@ 0x100
 800504e:	af00      	add	r7, sp, #0
 8005050:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050a0:	f021 010c 	bic.w	r1, r1, #12
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c2:	6999      	ldr	r1, [r3, #24]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	ea40 0301 	orr.w	r3, r0, r1
 80050ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005314 <UART_SetConfig+0x2cc>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d005      	beq.n	80050e8 <UART_SetConfig+0xa0>
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005318 <UART_SetConfig+0x2d0>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d104      	bne.n	80050f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7fe fc8c 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 80050ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050f0:	e003      	b.n	80050fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7fe fc73 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 80050f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005104:	f040 810c 	bne.w	8005320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005112:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	1891      	adds	r1, r2, r2
 8005120:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005122:	415b      	adcs	r3, r3
 8005124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800512a:	4621      	mov	r1, r4
 800512c:	eb12 0801 	adds.w	r8, r2, r1
 8005130:	4629      	mov	r1, r5
 8005132:	eb43 0901 	adc.w	r9, r3, r1
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514a:	4690      	mov	r8, r2
 800514c:	4699      	mov	r9, r3
 800514e:	4623      	mov	r3, r4
 8005150:	eb18 0303 	adds.w	r3, r8, r3
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005158:	462b      	mov	r3, r5
 800515a:	eb49 0303 	adc.w	r3, r9, r3
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800516e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005176:	460b      	mov	r3, r1
 8005178:	18db      	adds	r3, r3, r3
 800517a:	653b      	str	r3, [r7, #80]	@ 0x50
 800517c:	4613      	mov	r3, r2
 800517e:	eb42 0303 	adc.w	r3, r2, r3
 8005182:	657b      	str	r3, [r7, #84]	@ 0x54
 8005184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800518c:	f7fb fd2c 	bl	8000be8 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4b61      	ldr	r3, [pc, #388]	@ (800531c <UART_SetConfig+0x2d4>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011c      	lsls	r4, r3, #4
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051b8:	415b      	adcs	r3, r3
 80051ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051c0:	4641      	mov	r1, r8
 80051c2:	eb12 0a01 	adds.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0b01 	adc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051e0:	4692      	mov	sl, r2
 80051e2:	469b      	mov	fp, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ee:	464b      	mov	r3, r9
 80051f0:	eb4b 0303 	adc.w	r3, fp, r3
 80051f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005204:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800520c:	460b      	mov	r3, r1
 800520e:	18db      	adds	r3, r3, r3
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
 8005212:	4613      	mov	r3, r2
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	647b      	str	r3, [r7, #68]	@ 0x44
 800521a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800521e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005222:	f7fb fce1 	bl	8000be8 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4611      	mov	r1, r2
 800522c:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <UART_SetConfig+0x2d4>)
 800522e:	fba3 2301 	umull	r2, r3, r3, r1
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2264      	movs	r2, #100	@ 0x64
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	1acb      	subs	r3, r1, r3
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005242:	4b36      	ldr	r3, [pc, #216]	@ (800531c <UART_SetConfig+0x2d4>)
 8005244:	fba3 2302 	umull	r2, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005250:	441c      	add	r4, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800525c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800526c:	415b      	adcs	r3, r3
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6339      	str	r1, [r7, #48]	@ 0x30
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052c8:	460b      	mov	r3, r1
 80052ca:	18db      	adds	r3, r3, r3
 80052cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ce:	4613      	mov	r3, r2
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052de:	f7fb fc83 	bl	8000be8 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <UART_SetConfig+0x2d4>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	@ 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3332      	adds	r3, #50	@ 0x32
 80052fa:	4a08      	ldr	r2, [pc, #32]	@ (800531c <UART_SetConfig+0x2d4>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4422      	add	r2, r4
 800530e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005310:	e106      	b.n	8005520 <UART_SetConfig+0x4d8>
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800532a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800532e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005332:	4642      	mov	r2, r8
 8005334:	464b      	mov	r3, r9
 8005336:	1891      	adds	r1, r2, r2
 8005338:	6239      	str	r1, [r7, #32]
 800533a:	415b      	adcs	r3, r3
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
 800533e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005342:	4641      	mov	r1, r8
 8005344:	1854      	adds	r4, r2, r1
 8005346:	4649      	mov	r1, r9
 8005348:	eb43 0501 	adc.w	r5, r3, r1
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005368:	464b      	mov	r3, r9
 800536a:	eb45 0303 	adc.w	r3, r5, r3
 800536e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800537e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800538e:	4629      	mov	r1, r5
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005398:	4621      	mov	r1, r4
 800539a:	008a      	lsls	r2, r1, #2
 800539c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053a0:	f7fb fc22 	bl	8000be8 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b60      	ldr	r3, [pc, #384]	@ (800552c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011c      	lsls	r4, r3, #4
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	61b9      	str	r1, [r7, #24]
 80053cc:	415b      	adcs	r3, r3
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6139      	str	r1, [r7, #16]
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800541e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800542c:	4649      	mov	r1, r9
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	4641      	mov	r1, r8
 8005432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005436:	4641      	mov	r1, r8
 8005438:	008a      	lsls	r2, r1, #2
 800543a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800543e:	f7fb fbd3 	bl	8000be8 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4611      	mov	r1, r2
 8005448:	4b38      	ldr	r3, [pc, #224]	@ (800552c <UART_SetConfig+0x4e4>)
 800544a:	fba3 2301 	umull	r2, r3, r3, r1
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2264      	movs	r2, #100	@ 0x64
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	1acb      	subs	r3, r1, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	@ 0x32
 800545c:	4a33      	ldr	r2, [pc, #204]	@ (800552c <UART_SetConfig+0x4e4>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005468:	441c      	add	r4, r3
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	673b      	str	r3, [r7, #112]	@ 0x70
 8005472:	677a      	str	r2, [r7, #116]	@ 0x74
 8005474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005478:	4642      	mov	r2, r8
 800547a:	464b      	mov	r3, r9
 800547c:	1891      	adds	r1, r2, r2
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	415b      	adcs	r3, r3
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005488:	4641      	mov	r1, r8
 800548a:	1851      	adds	r1, r2, r1
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	4649      	mov	r1, r9
 8005490:	414b      	adcs	r3, r1
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054a0:	4659      	mov	r1, fp
 80054a2:	00cb      	lsls	r3, r1, #3
 80054a4:	4651      	mov	r1, sl
 80054a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054aa:	4651      	mov	r1, sl
 80054ac:	00ca      	lsls	r2, r1, #3
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	4642      	mov	r2, r8
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ba:	464b      	mov	r3, r9
 80054bc:	460a      	mov	r2, r1
 80054be:	eb42 0303 	adc.w	r3, r2, r3
 80054c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054dc:	4649      	mov	r1, r9
 80054de:	008b      	lsls	r3, r1, #2
 80054e0:	4641      	mov	r1, r8
 80054e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e6:	4641      	mov	r1, r8
 80054e8:	008a      	lsls	r2, r1, #2
 80054ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054ee:	f7fb fb7b 	bl	8000be8 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4b0d      	ldr	r3, [pc, #52]	@ (800552c <UART_SetConfig+0x4e4>)
 80054f8:	fba3 1302 	umull	r1, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	2164      	movs	r1, #100	@ 0x64
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	3332      	adds	r3, #50	@ 0x32
 800550a:	4a08      	ldr	r2, [pc, #32]	@ (800552c <UART_SetConfig+0x4e4>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4422      	add	r2, r4
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <malloc>:
 8005530:	4b02      	ldr	r3, [pc, #8]	@ (800553c <malloc+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f000 b82d 	b.w	8005594 <_malloc_r>
 800553a:	bf00      	nop
 800553c:	200001b0 	.word	0x200001b0

08005540 <free>:
 8005540:	4b02      	ldr	r3, [pc, #8]	@ (800554c <free+0xc>)
 8005542:	4601      	mov	r1, r0
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f001 bdd7 	b.w	80070f8 <_free_r>
 800554a:	bf00      	nop
 800554c:	200001b0 	.word	0x200001b0

08005550 <sbrk_aligned>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	4e0f      	ldr	r6, [pc, #60]	@ (8005590 <sbrk_aligned+0x40>)
 8005554:	460c      	mov	r4, r1
 8005556:	6831      	ldr	r1, [r6, #0]
 8005558:	4605      	mov	r5, r0
 800555a:	b911      	cbnz	r1, 8005562 <sbrk_aligned+0x12>
 800555c:	f000 ff14 	bl	8006388 <_sbrk_r>
 8005560:	6030      	str	r0, [r6, #0]
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 ff0f 	bl	8006388 <_sbrk_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d103      	bne.n	8005576 <sbrk_aligned+0x26>
 800556e:	f04f 34ff 	mov.w	r4, #4294967295
 8005572:	4620      	mov	r0, r4
 8005574:	bd70      	pop	{r4, r5, r6, pc}
 8005576:	1cc4      	adds	r4, r0, #3
 8005578:	f024 0403 	bic.w	r4, r4, #3
 800557c:	42a0      	cmp	r0, r4
 800557e:	d0f8      	beq.n	8005572 <sbrk_aligned+0x22>
 8005580:	1a21      	subs	r1, r4, r0
 8005582:	4628      	mov	r0, r5
 8005584:	f000 ff00 	bl	8006388 <_sbrk_r>
 8005588:	3001      	adds	r0, #1
 800558a:	d1f2      	bne.n	8005572 <sbrk_aligned+0x22>
 800558c:	e7ef      	b.n	800556e <sbrk_aligned+0x1e>
 800558e:	bf00      	nop
 8005590:	200003f0 	.word	0x200003f0

08005594 <_malloc_r>:
 8005594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005598:	1ccd      	adds	r5, r1, #3
 800559a:	f025 0503 	bic.w	r5, r5, #3
 800559e:	3508      	adds	r5, #8
 80055a0:	2d0c      	cmp	r5, #12
 80055a2:	bf38      	it	cc
 80055a4:	250c      	movcc	r5, #12
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	4606      	mov	r6, r0
 80055aa:	db01      	blt.n	80055b0 <_malloc_r+0x1c>
 80055ac:	42a9      	cmp	r1, r5
 80055ae:	d904      	bls.n	80055ba <_malloc_r+0x26>
 80055b0:	230c      	movs	r3, #12
 80055b2:	6033      	str	r3, [r6, #0]
 80055b4:	2000      	movs	r0, #0
 80055b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005690 <_malloc_r+0xfc>
 80055be:	f000 f869 	bl	8005694 <__malloc_lock>
 80055c2:	f8d8 3000 	ldr.w	r3, [r8]
 80055c6:	461c      	mov	r4, r3
 80055c8:	bb44      	cbnz	r4, 800561c <_malloc_r+0x88>
 80055ca:	4629      	mov	r1, r5
 80055cc:	4630      	mov	r0, r6
 80055ce:	f7ff ffbf 	bl	8005550 <sbrk_aligned>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	4604      	mov	r4, r0
 80055d6:	d158      	bne.n	800568a <_malloc_r+0xf6>
 80055d8:	f8d8 4000 	ldr.w	r4, [r8]
 80055dc:	4627      	mov	r7, r4
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d143      	bne.n	800566a <_malloc_r+0xd6>
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	d04b      	beq.n	800567e <_malloc_r+0xea>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	4639      	mov	r1, r7
 80055ea:	4630      	mov	r0, r6
 80055ec:	eb04 0903 	add.w	r9, r4, r3
 80055f0:	f000 feca 	bl	8006388 <_sbrk_r>
 80055f4:	4581      	cmp	r9, r0
 80055f6:	d142      	bne.n	800567e <_malloc_r+0xea>
 80055f8:	6821      	ldr	r1, [r4, #0]
 80055fa:	1a6d      	subs	r5, r5, r1
 80055fc:	4629      	mov	r1, r5
 80055fe:	4630      	mov	r0, r6
 8005600:	f7ff ffa6 	bl	8005550 <sbrk_aligned>
 8005604:	3001      	adds	r0, #1
 8005606:	d03a      	beq.n	800567e <_malloc_r+0xea>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	442b      	add	r3, r5
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	f8d8 3000 	ldr.w	r3, [r8]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	bb62      	cbnz	r2, 8005670 <_malloc_r+0xdc>
 8005616:	f8c8 7000 	str.w	r7, [r8]
 800561a:	e00f      	b.n	800563c <_malloc_r+0xa8>
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	1b52      	subs	r2, r2, r5
 8005620:	d420      	bmi.n	8005664 <_malloc_r+0xd0>
 8005622:	2a0b      	cmp	r2, #11
 8005624:	d917      	bls.n	8005656 <_malloc_r+0xc2>
 8005626:	1961      	adds	r1, r4, r5
 8005628:	42a3      	cmp	r3, r4
 800562a:	6025      	str	r5, [r4, #0]
 800562c:	bf18      	it	ne
 800562e:	6059      	strne	r1, [r3, #4]
 8005630:	6863      	ldr	r3, [r4, #4]
 8005632:	bf08      	it	eq
 8005634:	f8c8 1000 	streq.w	r1, [r8]
 8005638:	5162      	str	r2, [r4, r5]
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	4630      	mov	r0, r6
 800563e:	f000 f82f 	bl	80056a0 <__malloc_unlock>
 8005642:	f104 000b 	add.w	r0, r4, #11
 8005646:	1d23      	adds	r3, r4, #4
 8005648:	f020 0007 	bic.w	r0, r0, #7
 800564c:	1ac2      	subs	r2, r0, r3
 800564e:	bf1c      	itt	ne
 8005650:	1a1b      	subne	r3, r3, r0
 8005652:	50a3      	strne	r3, [r4, r2]
 8005654:	e7af      	b.n	80055b6 <_malloc_r+0x22>
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	42a3      	cmp	r3, r4
 800565a:	bf0c      	ite	eq
 800565c:	f8c8 2000 	streq.w	r2, [r8]
 8005660:	605a      	strne	r2, [r3, #4]
 8005662:	e7eb      	b.n	800563c <_malloc_r+0xa8>
 8005664:	4623      	mov	r3, r4
 8005666:	6864      	ldr	r4, [r4, #4]
 8005668:	e7ae      	b.n	80055c8 <_malloc_r+0x34>
 800566a:	463c      	mov	r4, r7
 800566c:	687f      	ldr	r7, [r7, #4]
 800566e:	e7b6      	b.n	80055de <_malloc_r+0x4a>
 8005670:	461a      	mov	r2, r3
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	42a3      	cmp	r3, r4
 8005676:	d1fb      	bne.n	8005670 <_malloc_r+0xdc>
 8005678:	2300      	movs	r3, #0
 800567a:	6053      	str	r3, [r2, #4]
 800567c:	e7de      	b.n	800563c <_malloc_r+0xa8>
 800567e:	230c      	movs	r3, #12
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	4630      	mov	r0, r6
 8005684:	f000 f80c 	bl	80056a0 <__malloc_unlock>
 8005688:	e794      	b.n	80055b4 <_malloc_r+0x20>
 800568a:	6005      	str	r5, [r0, #0]
 800568c:	e7d6      	b.n	800563c <_malloc_r+0xa8>
 800568e:	bf00      	nop
 8005690:	200003f4 	.word	0x200003f4

08005694 <__malloc_lock>:
 8005694:	4801      	ldr	r0, [pc, #4]	@ (800569c <__malloc_lock+0x8>)
 8005696:	f000 bec4 	b.w	8006422 <__retarget_lock_acquire_recursive>
 800569a:	bf00      	nop
 800569c:	20000538 	.word	0x20000538

080056a0 <__malloc_unlock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	@ (80056a8 <__malloc_unlock+0x8>)
 80056a2:	f000 bebf 	b.w	8006424 <__retarget_lock_release_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000538 	.word	0x20000538

080056ac <realloc>:
 80056ac:	4b02      	ldr	r3, [pc, #8]	@ (80056b8 <realloc+0xc>)
 80056ae:	460a      	mov	r2, r1
 80056b0:	4601      	mov	r1, r0
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	f000 b802 	b.w	80056bc <_realloc_r>
 80056b8:	200001b0 	.word	0x200001b0

080056bc <_realloc_r>:
 80056bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c0:	4607      	mov	r7, r0
 80056c2:	4614      	mov	r4, r2
 80056c4:	460d      	mov	r5, r1
 80056c6:	b921      	cbnz	r1, 80056d2 <_realloc_r+0x16>
 80056c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	4611      	mov	r1, r2
 80056ce:	f7ff bf61 	b.w	8005594 <_malloc_r>
 80056d2:	b92a      	cbnz	r2, 80056e0 <_realloc_r+0x24>
 80056d4:	f001 fd10 	bl	80070f8 <_free_r>
 80056d8:	4625      	mov	r5, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e0:	f002 f8e0 	bl	80078a4 <_malloc_usable_size_r>
 80056e4:	4284      	cmp	r4, r0
 80056e6:	4606      	mov	r6, r0
 80056e8:	d802      	bhi.n	80056f0 <_realloc_r+0x34>
 80056ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ee:	d8f4      	bhi.n	80056da <_realloc_r+0x1e>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4638      	mov	r0, r7
 80056f4:	f7ff ff4e 	bl	8005594 <_malloc_r>
 80056f8:	4680      	mov	r8, r0
 80056fa:	b908      	cbnz	r0, 8005700 <_realloc_r+0x44>
 80056fc:	4645      	mov	r5, r8
 80056fe:	e7ec      	b.n	80056da <_realloc_r+0x1e>
 8005700:	42b4      	cmp	r4, r6
 8005702:	4622      	mov	r2, r4
 8005704:	4629      	mov	r1, r5
 8005706:	bf28      	it	cs
 8005708:	4632      	movcs	r2, r6
 800570a:	f000 fe8c 	bl	8006426 <memcpy>
 800570e:	4629      	mov	r1, r5
 8005710:	4638      	mov	r0, r7
 8005712:	f001 fcf1 	bl	80070f8 <_free_r>
 8005716:	e7f1      	b.n	80056fc <_realloc_r+0x40>

08005718 <__cvt>:
 8005718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	ec57 6b10 	vmov	r6, r7, d0
 8005720:	2f00      	cmp	r7, #0
 8005722:	460c      	mov	r4, r1
 8005724:	4619      	mov	r1, r3
 8005726:	463b      	mov	r3, r7
 8005728:	bfbb      	ittet	lt
 800572a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800572e:	461f      	movlt	r7, r3
 8005730:	2300      	movge	r3, #0
 8005732:	232d      	movlt	r3, #45	@ 0x2d
 8005734:	700b      	strb	r3, [r1, #0]
 8005736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005738:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800573c:	4691      	mov	r9, r2
 800573e:	f023 0820 	bic.w	r8, r3, #32
 8005742:	bfbc      	itt	lt
 8005744:	4632      	movlt	r2, r6
 8005746:	4616      	movlt	r6, r2
 8005748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800574c:	d005      	beq.n	800575a <__cvt+0x42>
 800574e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005752:	d100      	bne.n	8005756 <__cvt+0x3e>
 8005754:	3401      	adds	r4, #1
 8005756:	2102      	movs	r1, #2
 8005758:	e000      	b.n	800575c <__cvt+0x44>
 800575a:	2103      	movs	r1, #3
 800575c:	ab03      	add	r3, sp, #12
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	ab02      	add	r3, sp, #8
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	ec47 6b10 	vmov	d0, r6, r7
 8005768:	4653      	mov	r3, sl
 800576a:	4622      	mov	r2, r4
 800576c:	f000 fef4 	bl	8006558 <_dtoa_r>
 8005770:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005774:	4605      	mov	r5, r0
 8005776:	d119      	bne.n	80057ac <__cvt+0x94>
 8005778:	f019 0f01 	tst.w	r9, #1
 800577c:	d00e      	beq.n	800579c <__cvt+0x84>
 800577e:	eb00 0904 	add.w	r9, r0, r4
 8005782:	2200      	movs	r2, #0
 8005784:	2300      	movs	r3, #0
 8005786:	4630      	mov	r0, r6
 8005788:	4639      	mov	r1, r7
 800578a:	f7fb f9bd 	bl	8000b08 <__aeabi_dcmpeq>
 800578e:	b108      	cbz	r0, 8005794 <__cvt+0x7c>
 8005790:	f8cd 900c 	str.w	r9, [sp, #12]
 8005794:	2230      	movs	r2, #48	@ 0x30
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	454b      	cmp	r3, r9
 800579a:	d31e      	bcc.n	80057da <__cvt+0xc2>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057a0:	1b5b      	subs	r3, r3, r5
 80057a2:	4628      	mov	r0, r5
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	b004      	add	sp, #16
 80057a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057b0:	eb00 0904 	add.w	r9, r0, r4
 80057b4:	d1e5      	bne.n	8005782 <__cvt+0x6a>
 80057b6:	7803      	ldrb	r3, [r0, #0]
 80057b8:	2b30      	cmp	r3, #48	@ 0x30
 80057ba:	d10a      	bne.n	80057d2 <__cvt+0xba>
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fb f9a0 	bl	8000b08 <__aeabi_dcmpeq>
 80057c8:	b918      	cbnz	r0, 80057d2 <__cvt+0xba>
 80057ca:	f1c4 0401 	rsb	r4, r4, #1
 80057ce:	f8ca 4000 	str.w	r4, [sl]
 80057d2:	f8da 3000 	ldr.w	r3, [sl]
 80057d6:	4499      	add	r9, r3
 80057d8:	e7d3      	b.n	8005782 <__cvt+0x6a>
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	9103      	str	r1, [sp, #12]
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e7d9      	b.n	8005796 <__cvt+0x7e>

080057e2 <__exponent>:
 80057e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e4:	2900      	cmp	r1, #0
 80057e6:	bfba      	itte	lt
 80057e8:	4249      	neglt	r1, r1
 80057ea:	232d      	movlt	r3, #45	@ 0x2d
 80057ec:	232b      	movge	r3, #43	@ 0x2b
 80057ee:	2909      	cmp	r1, #9
 80057f0:	7002      	strb	r2, [r0, #0]
 80057f2:	7043      	strb	r3, [r0, #1]
 80057f4:	dd29      	ble.n	800584a <__exponent+0x68>
 80057f6:	f10d 0307 	add.w	r3, sp, #7
 80057fa:	461d      	mov	r5, r3
 80057fc:	270a      	movs	r7, #10
 80057fe:	461a      	mov	r2, r3
 8005800:	fbb1 f6f7 	udiv	r6, r1, r7
 8005804:	fb07 1416 	mls	r4, r7, r6, r1
 8005808:	3430      	adds	r4, #48	@ 0x30
 800580a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800580e:	460c      	mov	r4, r1
 8005810:	2c63      	cmp	r4, #99	@ 0x63
 8005812:	f103 33ff 	add.w	r3, r3, #4294967295
 8005816:	4631      	mov	r1, r6
 8005818:	dcf1      	bgt.n	80057fe <__exponent+0x1c>
 800581a:	3130      	adds	r1, #48	@ 0x30
 800581c:	1e94      	subs	r4, r2, #2
 800581e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005822:	1c41      	adds	r1, r0, #1
 8005824:	4623      	mov	r3, r4
 8005826:	42ab      	cmp	r3, r5
 8005828:	d30a      	bcc.n	8005840 <__exponent+0x5e>
 800582a:	f10d 0309 	add.w	r3, sp, #9
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ac      	cmp	r4, r5
 8005832:	bf88      	it	hi
 8005834:	2300      	movhi	r3, #0
 8005836:	3302      	adds	r3, #2
 8005838:	4403      	add	r3, r0
 800583a:	1a18      	subs	r0, r3, r0
 800583c:	b003      	add	sp, #12
 800583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005840:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005844:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005848:	e7ed      	b.n	8005826 <__exponent+0x44>
 800584a:	2330      	movs	r3, #48	@ 0x30
 800584c:	3130      	adds	r1, #48	@ 0x30
 800584e:	7083      	strb	r3, [r0, #2]
 8005850:	70c1      	strb	r1, [r0, #3]
 8005852:	1d03      	adds	r3, r0, #4
 8005854:	e7f1      	b.n	800583a <__exponent+0x58>
	...

08005858 <_printf_float>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	b08d      	sub	sp, #52	@ 0x34
 800585e:	460c      	mov	r4, r1
 8005860:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005864:	4616      	mov	r6, r2
 8005866:	461f      	mov	r7, r3
 8005868:	4605      	mov	r5, r0
 800586a:	f000 fd55 	bl	8006318 <_localeconv_r>
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fa fd1c 	bl	80002b0 <strlen>
 8005878:	2300      	movs	r3, #0
 800587a:	930a      	str	r3, [sp, #40]	@ 0x28
 800587c:	f8d8 3000 	ldr.w	r3, [r8]
 8005880:	9005      	str	r0, [sp, #20]
 8005882:	3307      	adds	r3, #7
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	f103 0208 	add.w	r2, r3, #8
 800588c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005890:	f8d4 b000 	ldr.w	fp, [r4]
 8005894:	f8c8 2000 	str.w	r2, [r8]
 8005898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800589c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058a0:	9307      	str	r3, [sp, #28]
 80058a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80058a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ae:	4b9c      	ldr	r3, [pc, #624]	@ (8005b20 <_printf_float+0x2c8>)
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295
 80058b4:	f7fb f95a 	bl	8000b6c <__aeabi_dcmpun>
 80058b8:	bb70      	cbnz	r0, 8005918 <_printf_float+0xc0>
 80058ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058be:	4b98      	ldr	r3, [pc, #608]	@ (8005b20 <_printf_float+0x2c8>)
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295
 80058c4:	f7fb f934 	bl	8000b30 <__aeabi_dcmple>
 80058c8:	bb30      	cbnz	r0, 8005918 <_printf_float+0xc0>
 80058ca:	2200      	movs	r2, #0
 80058cc:	2300      	movs	r3, #0
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fb f923 	bl	8000b1c <__aeabi_dcmplt>
 80058d6:	b110      	cbz	r0, 80058de <_printf_float+0x86>
 80058d8:	232d      	movs	r3, #45	@ 0x2d
 80058da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058de:	4a91      	ldr	r2, [pc, #580]	@ (8005b24 <_printf_float+0x2cc>)
 80058e0:	4b91      	ldr	r3, [pc, #580]	@ (8005b28 <_printf_float+0x2d0>)
 80058e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80058e6:	bf8c      	ite	hi
 80058e8:	4690      	movhi	r8, r2
 80058ea:	4698      	movls	r8, r3
 80058ec:	2303      	movs	r3, #3
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	f02b 0304 	bic.w	r3, fp, #4
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	f04f 0900 	mov.w	r9, #0
 80058fa:	9700      	str	r7, [sp, #0]
 80058fc:	4633      	mov	r3, r6
 80058fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005900:	4621      	mov	r1, r4
 8005902:	4628      	mov	r0, r5
 8005904:	f000 f9d2 	bl	8005cac <_printf_common>
 8005908:	3001      	adds	r0, #1
 800590a:	f040 808d 	bne.w	8005a28 <_printf_float+0x1d0>
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	b00d      	add	sp, #52	@ 0x34
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	4640      	mov	r0, r8
 800591e:	4649      	mov	r1, r9
 8005920:	f7fb f924 	bl	8000b6c <__aeabi_dcmpun>
 8005924:	b140      	cbz	r0, 8005938 <_printf_float+0xe0>
 8005926:	464b      	mov	r3, r9
 8005928:	2b00      	cmp	r3, #0
 800592a:	bfbc      	itt	lt
 800592c:	232d      	movlt	r3, #45	@ 0x2d
 800592e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005932:	4a7e      	ldr	r2, [pc, #504]	@ (8005b2c <_printf_float+0x2d4>)
 8005934:	4b7e      	ldr	r3, [pc, #504]	@ (8005b30 <_printf_float+0x2d8>)
 8005936:	e7d4      	b.n	80058e2 <_printf_float+0x8a>
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800593e:	9206      	str	r2, [sp, #24]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	d13b      	bne.n	80059bc <_printf_float+0x164>
 8005944:	2306      	movs	r3, #6
 8005946:	6063      	str	r3, [r4, #4]
 8005948:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800594c:	2300      	movs	r3, #0
 800594e:	6022      	str	r2, [r4, #0]
 8005950:	9303      	str	r3, [sp, #12]
 8005952:	ab0a      	add	r3, sp, #40	@ 0x28
 8005954:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005958:	ab09      	add	r3, sp, #36	@ 0x24
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	ec49 8b10 	vmov	d0, r8, r9
 8005962:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005966:	4628      	mov	r0, r5
 8005968:	f7ff fed6 	bl	8005718 <__cvt>
 800596c:	9b06      	ldr	r3, [sp, #24]
 800596e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005970:	2b47      	cmp	r3, #71	@ 0x47
 8005972:	4680      	mov	r8, r0
 8005974:	d129      	bne.n	80059ca <_printf_float+0x172>
 8005976:	1cc8      	adds	r0, r1, #3
 8005978:	db02      	blt.n	8005980 <_printf_float+0x128>
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	4299      	cmp	r1, r3
 800597e:	dd41      	ble.n	8005a04 <_printf_float+0x1ac>
 8005980:	f1aa 0a02 	sub.w	sl, sl, #2
 8005984:	fa5f fa8a 	uxtb.w	sl, sl
 8005988:	3901      	subs	r1, #1
 800598a:	4652      	mov	r2, sl
 800598c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005990:	9109      	str	r1, [sp, #36]	@ 0x24
 8005992:	f7ff ff26 	bl	80057e2 <__exponent>
 8005996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005998:	1813      	adds	r3, r2, r0
 800599a:	2a01      	cmp	r2, #1
 800599c:	4681      	mov	r9, r0
 800599e:	6123      	str	r3, [r4, #16]
 80059a0:	dc02      	bgt.n	80059a8 <_printf_float+0x150>
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	07d2      	lsls	r2, r2, #31
 80059a6:	d501      	bpl.n	80059ac <_printf_float+0x154>
 80059a8:	3301      	adds	r3, #1
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0a2      	beq.n	80058fa <_printf_float+0xa2>
 80059b4:	232d      	movs	r3, #45	@ 0x2d
 80059b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ba:	e79e      	b.n	80058fa <_printf_float+0xa2>
 80059bc:	9a06      	ldr	r2, [sp, #24]
 80059be:	2a47      	cmp	r2, #71	@ 0x47
 80059c0:	d1c2      	bne.n	8005948 <_printf_float+0xf0>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1c0      	bne.n	8005948 <_printf_float+0xf0>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e7bd      	b.n	8005946 <_printf_float+0xee>
 80059ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059ce:	d9db      	bls.n	8005988 <_printf_float+0x130>
 80059d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059d4:	d118      	bne.n	8005a08 <_printf_float+0x1b0>
 80059d6:	2900      	cmp	r1, #0
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	dd0b      	ble.n	80059f4 <_printf_float+0x19c>
 80059dc:	6121      	str	r1, [r4, #16]
 80059de:	b913      	cbnz	r3, 80059e6 <_printf_float+0x18e>
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	07d0      	lsls	r0, r2, #31
 80059e4:	d502      	bpl.n	80059ec <_printf_float+0x194>
 80059e6:	3301      	adds	r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059ee:	f04f 0900 	mov.w	r9, #0
 80059f2:	e7db      	b.n	80059ac <_printf_float+0x154>
 80059f4:	b913      	cbnz	r3, 80059fc <_printf_float+0x1a4>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	07d2      	lsls	r2, r2, #31
 80059fa:	d501      	bpl.n	8005a00 <_printf_float+0x1a8>
 80059fc:	3302      	adds	r3, #2
 80059fe:	e7f4      	b.n	80059ea <_printf_float+0x192>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f2      	b.n	80059ea <_printf_float+0x192>
 8005a04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a0a:	4299      	cmp	r1, r3
 8005a0c:	db05      	blt.n	8005a1a <_printf_float+0x1c2>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6121      	str	r1, [r4, #16]
 8005a12:	07d8      	lsls	r0, r3, #31
 8005a14:	d5ea      	bpl.n	80059ec <_printf_float+0x194>
 8005a16:	1c4b      	adds	r3, r1, #1
 8005a18:	e7e7      	b.n	80059ea <_printf_float+0x192>
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	bfd4      	ite	le
 8005a1e:	f1c1 0202 	rsble	r2, r1, #2
 8005a22:	2201      	movgt	r2, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	e7e0      	b.n	80059ea <_printf_float+0x192>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	055a      	lsls	r2, r3, #21
 8005a2c:	d407      	bmi.n	8005a3e <_printf_float+0x1e6>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	4642      	mov	r2, r8
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d12b      	bne.n	8005a94 <_printf_float+0x23c>
 8005a3c:	e767      	b.n	800590e <_printf_float+0xb6>
 8005a3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a42:	f240 80dd 	bls.w	8005c00 <_printf_float+0x3a8>
 8005a46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f7fb f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d033      	beq.n	8005abe <_printf_float+0x266>
 8005a56:	4a37      	ldr	r2, [pc, #220]	@ (8005b34 <_printf_float+0x2dc>)
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	f43f af54 	beq.w	800590e <_printf_float+0xb6>
 8005a66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a6a:	4543      	cmp	r3, r8
 8005a6c:	db02      	blt.n	8005a74 <_printf_float+0x21c>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	07d8      	lsls	r0, r3, #31
 8005a72:	d50f      	bpl.n	8005a94 <_printf_float+0x23c>
 8005a74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af45 	beq.w	800590e <_printf_float+0xb6>
 8005a84:	f04f 0900 	mov.w	r9, #0
 8005a88:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a8c:	f104 0a1a 	add.w	sl, r4, #26
 8005a90:	45c8      	cmp	r8, r9
 8005a92:	dc09      	bgt.n	8005aa8 <_printf_float+0x250>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	079b      	lsls	r3, r3, #30
 8005a98:	f100 8103 	bmi.w	8005ca2 <_printf_float+0x44a>
 8005a9c:	68e0      	ldr	r0, [r4, #12]
 8005a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aa0:	4298      	cmp	r0, r3
 8005aa2:	bfb8      	it	lt
 8005aa4:	4618      	movlt	r0, r3
 8005aa6:	e734      	b.n	8005912 <_printf_float+0xba>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4652      	mov	r2, sl
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f af2b 	beq.w	800590e <_printf_float+0xb6>
 8005ab8:	f109 0901 	add.w	r9, r9, #1
 8005abc:	e7e8      	b.n	8005a90 <_printf_float+0x238>
 8005abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dc39      	bgt.n	8005b38 <_printf_float+0x2e0>
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <_printf_float+0x2dc>)
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af1d 	beq.w	800590e <_printf_float+0xb6>
 8005ad4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ad8:	ea59 0303 	orrs.w	r3, r9, r3
 8005adc:	d102      	bne.n	8005ae4 <_printf_float+0x28c>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	07d9      	lsls	r1, r3, #31
 8005ae2:	d5d7      	bpl.n	8005a94 <_printf_float+0x23c>
 8005ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	f43f af0d 	beq.w	800590e <_printf_float+0xb6>
 8005af4:	f04f 0a00 	mov.w	sl, #0
 8005af8:	f104 0b1a 	add.w	fp, r4, #26
 8005afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afe:	425b      	negs	r3, r3
 8005b00:	4553      	cmp	r3, sl
 8005b02:	dc01      	bgt.n	8005b08 <_printf_float+0x2b0>
 8005b04:	464b      	mov	r3, r9
 8005b06:	e793      	b.n	8005a30 <_printf_float+0x1d8>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	465a      	mov	r2, fp
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f aefb 	beq.w	800590e <_printf_float+0xb6>
 8005b18:	f10a 0a01 	add.w	sl, sl, #1
 8005b1c:	e7ee      	b.n	8005afc <_printf_float+0x2a4>
 8005b1e:	bf00      	nop
 8005b20:	7fefffff 	.word	0x7fefffff
 8005b24:	080093c9 	.word	0x080093c9
 8005b28:	080093c5 	.word	0x080093c5
 8005b2c:	080093d1 	.word	0x080093d1
 8005b30:	080093cd 	.word	0x080093cd
 8005b34:	0800950e 	.word	0x0800950e
 8005b38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b3e:	4553      	cmp	r3, sl
 8005b40:	bfa8      	it	ge
 8005b42:	4653      	movge	r3, sl
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	4699      	mov	r9, r3
 8005b48:	dc36      	bgt.n	8005bb8 <_printf_float+0x360>
 8005b4a:	f04f 0b00 	mov.w	fp, #0
 8005b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b52:	f104 021a 	add.w	r2, r4, #26
 8005b56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b58:	9306      	str	r3, [sp, #24]
 8005b5a:	eba3 0309 	sub.w	r3, r3, r9
 8005b5e:	455b      	cmp	r3, fp
 8005b60:	dc31      	bgt.n	8005bc6 <_printf_float+0x36e>
 8005b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b64:	459a      	cmp	sl, r3
 8005b66:	dc3a      	bgt.n	8005bde <_printf_float+0x386>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	07da      	lsls	r2, r3, #31
 8005b6c:	d437      	bmi.n	8005bde <_printf_float+0x386>
 8005b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b70:	ebaa 0903 	sub.w	r9, sl, r3
 8005b74:	9b06      	ldr	r3, [sp, #24]
 8005b76:	ebaa 0303 	sub.w	r3, sl, r3
 8005b7a:	4599      	cmp	r9, r3
 8005b7c:	bfa8      	it	ge
 8005b7e:	4699      	movge	r9, r3
 8005b80:	f1b9 0f00 	cmp.w	r9, #0
 8005b84:	dc33      	bgt.n	8005bee <_printf_float+0x396>
 8005b86:	f04f 0800 	mov.w	r8, #0
 8005b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b8e:	f104 0b1a 	add.w	fp, r4, #26
 8005b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b94:	ebaa 0303 	sub.w	r3, sl, r3
 8005b98:	eba3 0309 	sub.w	r3, r3, r9
 8005b9c:	4543      	cmp	r3, r8
 8005b9e:	f77f af79 	ble.w	8005a94 <_printf_float+0x23c>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	465a      	mov	r2, fp
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4628      	mov	r0, r5
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f aeae 	beq.w	800590e <_printf_float+0xb6>
 8005bb2:	f108 0801 	add.w	r8, r8, #1
 8005bb6:	e7ec      	b.n	8005b92 <_printf_float+0x33a>
 8005bb8:	4642      	mov	r2, r8
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b8      	blx	r7
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d1c2      	bne.n	8005b4a <_printf_float+0x2f2>
 8005bc4:	e6a3      	b.n	800590e <_printf_float+0xb6>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	9206      	str	r2, [sp, #24]
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	f43f ae9c 	beq.w	800590e <_printf_float+0xb6>
 8005bd6:	9a06      	ldr	r2, [sp, #24]
 8005bd8:	f10b 0b01 	add.w	fp, fp, #1
 8005bdc:	e7bb      	b.n	8005b56 <_printf_float+0x2fe>
 8005bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d1c0      	bne.n	8005b6e <_printf_float+0x316>
 8005bec:	e68f      	b.n	800590e <_printf_float+0xb6>
 8005bee:	9a06      	ldr	r2, [sp, #24]
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	4442      	add	r2, r8
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d1c3      	bne.n	8005b86 <_printf_float+0x32e>
 8005bfe:	e686      	b.n	800590e <_printf_float+0xb6>
 8005c00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c04:	f1ba 0f01 	cmp.w	sl, #1
 8005c08:	dc01      	bgt.n	8005c0e <_printf_float+0x3b6>
 8005c0a:	07db      	lsls	r3, r3, #31
 8005c0c:	d536      	bpl.n	8005c7c <_printf_float+0x424>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4642      	mov	r2, r8
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f ae78 	beq.w	800590e <_printf_float+0xb6>
 8005c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae70 	beq.w	800590e <_printf_float+0xb6>
 8005c2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c32:	2200      	movs	r2, #0
 8005c34:	2300      	movs	r3, #0
 8005c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c3a:	f7fa ff65 	bl	8000b08 <__aeabi_dcmpeq>
 8005c3e:	b9c0      	cbnz	r0, 8005c72 <_printf_float+0x41a>
 8005c40:	4653      	mov	r3, sl
 8005c42:	f108 0201 	add.w	r2, r8, #1
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d10c      	bne.n	8005c6a <_printf_float+0x412>
 8005c50:	e65d      	b.n	800590e <_printf_float+0xb6>
 8005c52:	2301      	movs	r3, #1
 8005c54:	465a      	mov	r2, fp
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae56 	beq.w	800590e <_printf_float+0xb6>
 8005c62:	f108 0801 	add.w	r8, r8, #1
 8005c66:	45d0      	cmp	r8, sl
 8005c68:	dbf3      	blt.n	8005c52 <_printf_float+0x3fa>
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c70:	e6df      	b.n	8005a32 <_printf_float+0x1da>
 8005c72:	f04f 0800 	mov.w	r8, #0
 8005c76:	f104 0b1a 	add.w	fp, r4, #26
 8005c7a:	e7f4      	b.n	8005c66 <_printf_float+0x40e>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	4642      	mov	r2, r8
 8005c80:	e7e1      	b.n	8005c46 <_printf_float+0x3ee>
 8005c82:	2301      	movs	r3, #1
 8005c84:	464a      	mov	r2, r9
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f ae3e 	beq.w	800590e <_printf_float+0xb6>
 8005c92:	f108 0801 	add.w	r8, r8, #1
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c9a:	1a5b      	subs	r3, r3, r1
 8005c9c:	4543      	cmp	r3, r8
 8005c9e:	dcf0      	bgt.n	8005c82 <_printf_float+0x42a>
 8005ca0:	e6fc      	b.n	8005a9c <_printf_float+0x244>
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	f104 0919 	add.w	r9, r4, #25
 8005caa:	e7f4      	b.n	8005c96 <_printf_float+0x43e>

08005cac <_printf_common>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	4698      	mov	r8, r3
 8005cb4:	688a      	ldr	r2, [r1, #8]
 8005cb6:	690b      	ldr	r3, [r1, #16]
 8005cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	bfb8      	it	lt
 8005cc0:	4613      	movlt	r3, r2
 8005cc2:	6033      	str	r3, [r6, #0]
 8005cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cc8:	4607      	mov	r7, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b10a      	cbz	r2, 8005cd2 <_printf_common+0x26>
 8005cce:	3301      	adds	r3, #1
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	0699      	lsls	r1, r3, #26
 8005cd6:	bf42      	ittt	mi
 8005cd8:	6833      	ldrmi	r3, [r6, #0]
 8005cda:	3302      	addmi	r3, #2
 8005cdc:	6033      	strmi	r3, [r6, #0]
 8005cde:	6825      	ldr	r5, [r4, #0]
 8005ce0:	f015 0506 	ands.w	r5, r5, #6
 8005ce4:	d106      	bne.n	8005cf4 <_printf_common+0x48>
 8005ce6:	f104 0a19 	add.w	sl, r4, #25
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	6832      	ldr	r2, [r6, #0]
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	42ab      	cmp	r3, r5
 8005cf2:	dc26      	bgt.n	8005d42 <_printf_common+0x96>
 8005cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	3b00      	subs	r3, #0
 8005cfc:	bf18      	it	ne
 8005cfe:	2301      	movne	r3, #1
 8005d00:	0692      	lsls	r2, r2, #26
 8005d02:	d42b      	bmi.n	8005d5c <_printf_common+0xb0>
 8005d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d08:	4641      	mov	r1, r8
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	47c8      	blx	r9
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d01e      	beq.n	8005d50 <_printf_common+0xa4>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	6922      	ldr	r2, [r4, #16]
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	bf02      	ittt	eq
 8005d1e:	68e5      	ldreq	r5, [r4, #12]
 8005d20:	6833      	ldreq	r3, [r6, #0]
 8005d22:	1aed      	subeq	r5, r5, r3
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	bf0c      	ite	eq
 8005d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d2c:	2500      	movne	r5, #0
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	bfc4      	itt	gt
 8005d32:	1a9b      	subgt	r3, r3, r2
 8005d34:	18ed      	addgt	r5, r5, r3
 8005d36:	2600      	movs	r6, #0
 8005d38:	341a      	adds	r4, #26
 8005d3a:	42b5      	cmp	r5, r6
 8005d3c:	d11a      	bne.n	8005d74 <_printf_common+0xc8>
 8005d3e:	2000      	movs	r0, #0
 8005d40:	e008      	b.n	8005d54 <_printf_common+0xa8>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4652      	mov	r2, sl
 8005d46:	4641      	mov	r1, r8
 8005d48:	4638      	mov	r0, r7
 8005d4a:	47c8      	blx	r9
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d103      	bne.n	8005d58 <_printf_common+0xac>
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d58:	3501      	adds	r5, #1
 8005d5a:	e7c6      	b.n	8005cea <_printf_common+0x3e>
 8005d5c:	18e1      	adds	r1, r4, r3
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	2030      	movs	r0, #48	@ 0x30
 8005d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d66:	4422      	add	r2, r4
 8005d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d70:	3302      	adds	r3, #2
 8005d72:	e7c7      	b.n	8005d04 <_printf_common+0x58>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4622      	mov	r2, r4
 8005d78:	4641      	mov	r1, r8
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	47c8      	blx	r9
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d0e6      	beq.n	8005d50 <_printf_common+0xa4>
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7d9      	b.n	8005d3a <_printf_common+0x8e>
	...

08005d88 <_printf_i>:
 8005d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	7e0f      	ldrb	r7, [r1, #24]
 8005d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d90:	2f78      	cmp	r7, #120	@ 0x78
 8005d92:	4691      	mov	r9, r2
 8005d94:	4680      	mov	r8, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	469a      	mov	sl, r3
 8005d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d9e:	d807      	bhi.n	8005db0 <_printf_i+0x28>
 8005da0:	2f62      	cmp	r7, #98	@ 0x62
 8005da2:	d80a      	bhi.n	8005dba <_printf_i+0x32>
 8005da4:	2f00      	cmp	r7, #0
 8005da6:	f000 80d1 	beq.w	8005f4c <_printf_i+0x1c4>
 8005daa:	2f58      	cmp	r7, #88	@ 0x58
 8005dac:	f000 80b8 	beq.w	8005f20 <_printf_i+0x198>
 8005db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005db8:	e03a      	b.n	8005e30 <_printf_i+0xa8>
 8005dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dbe:	2b15      	cmp	r3, #21
 8005dc0:	d8f6      	bhi.n	8005db0 <_printf_i+0x28>
 8005dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8005dc8 <_printf_i+0x40>)
 8005dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dc8:	08005e21 	.word	0x08005e21
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005db1 	.word	0x08005db1
 8005dd4:	08005db1 	.word	0x08005db1
 8005dd8:	08005db1 	.word	0x08005db1
 8005ddc:	08005db1 	.word	0x08005db1
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005db1 	.word	0x08005db1
 8005de8:	08005db1 	.word	0x08005db1
 8005dec:	08005db1 	.word	0x08005db1
 8005df0:	08005db1 	.word	0x08005db1
 8005df4:	08005f33 	.word	0x08005f33
 8005df8:	08005e5f 	.word	0x08005e5f
 8005dfc:	08005eed 	.word	0x08005eed
 8005e00:	08005db1 	.word	0x08005db1
 8005e04:	08005db1 	.word	0x08005db1
 8005e08:	08005f55 	.word	0x08005f55
 8005e0c:	08005db1 	.word	0x08005db1
 8005e10:	08005e5f 	.word	0x08005e5f
 8005e14:	08005db1 	.word	0x08005db1
 8005e18:	08005db1 	.word	0x08005db1
 8005e1c:	08005ef5 	.word	0x08005ef5
 8005e20:	6833      	ldr	r3, [r6, #0]
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6032      	str	r2, [r6, #0]
 8005e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e30:	2301      	movs	r3, #1
 8005e32:	e09c      	b.n	8005f6e <_printf_i+0x1e6>
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6031      	str	r1, [r6, #0]
 8005e3c:	0606      	lsls	r6, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xbc>
 8005e40:	681d      	ldr	r5, [r3, #0]
 8005e42:	e003      	b.n	8005e4c <_printf_i+0xc4>
 8005e44:	0645      	lsls	r5, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xb8>
 8005e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	da03      	bge.n	8005e58 <_printf_i+0xd0>
 8005e50:	232d      	movs	r3, #45	@ 0x2d
 8005e52:	426d      	negs	r5, r5
 8005e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e58:	4858      	ldr	r0, [pc, #352]	@ (8005fbc <_printf_i+0x234>)
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	e011      	b.n	8005e82 <_printf_i+0xfa>
 8005e5e:	6821      	ldr	r1, [r4, #0]
 8005e60:	6833      	ldr	r3, [r6, #0]
 8005e62:	0608      	lsls	r0, r1, #24
 8005e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e68:	d402      	bmi.n	8005e70 <_printf_i+0xe8>
 8005e6a:	0649      	lsls	r1, r1, #25
 8005e6c:	bf48      	it	mi
 8005e6e:	b2ad      	uxthmi	r5, r5
 8005e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e72:	4852      	ldr	r0, [pc, #328]	@ (8005fbc <_printf_i+0x234>)
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	bf14      	ite	ne
 8005e78:	230a      	movne	r3, #10
 8005e7a:	2308      	moveq	r3, #8
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e82:	6866      	ldr	r6, [r4, #4]
 8005e84:	60a6      	str	r6, [r4, #8]
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	db05      	blt.n	8005e96 <_printf_i+0x10e>
 8005e8a:	6821      	ldr	r1, [r4, #0]
 8005e8c:	432e      	orrs	r6, r5
 8005e8e:	f021 0104 	bic.w	r1, r1, #4
 8005e92:	6021      	str	r1, [r4, #0]
 8005e94:	d04b      	beq.n	8005f2e <_printf_i+0x1a6>
 8005e96:	4616      	mov	r6, r2
 8005e98:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e9c:	fb03 5711 	mls	r7, r3, r1, r5
 8005ea0:	5dc7      	ldrb	r7, [r0, r7]
 8005ea2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ea6:	462f      	mov	r7, r5
 8005ea8:	42bb      	cmp	r3, r7
 8005eaa:	460d      	mov	r5, r1
 8005eac:	d9f4      	bls.n	8005e98 <_printf_i+0x110>
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d10b      	bne.n	8005eca <_printf_i+0x142>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	07df      	lsls	r7, r3, #31
 8005eb6:	d508      	bpl.n	8005eca <_printf_i+0x142>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	6861      	ldr	r1, [r4, #4]
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	bfde      	ittt	le
 8005ec0:	2330      	movle	r3, #48	@ 0x30
 8005ec2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ec6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eca:	1b92      	subs	r2, r2, r6
 8005ecc:	6122      	str	r2, [r4, #16]
 8005ece:	f8cd a000 	str.w	sl, [sp]
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	aa03      	add	r2, sp, #12
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4640      	mov	r0, r8
 8005eda:	f7ff fee7 	bl	8005cac <_printf_common>
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d14a      	bne.n	8005f78 <_printf_i+0x1f0>
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	b004      	add	sp, #16
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	f043 0320 	orr.w	r3, r3, #32
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	4832      	ldr	r0, [pc, #200]	@ (8005fc0 <_printf_i+0x238>)
 8005ef6:	2778      	movs	r7, #120	@ 0x78
 8005ef8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	6831      	ldr	r1, [r6, #0]
 8005f00:	061f      	lsls	r7, r3, #24
 8005f02:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f06:	d402      	bmi.n	8005f0e <_printf_i+0x186>
 8005f08:	065f      	lsls	r7, r3, #25
 8005f0a:	bf48      	it	mi
 8005f0c:	b2ad      	uxthmi	r5, r5
 8005f0e:	6031      	str	r1, [r6, #0]
 8005f10:	07d9      	lsls	r1, r3, #31
 8005f12:	bf44      	itt	mi
 8005f14:	f043 0320 	orrmi.w	r3, r3, #32
 8005f18:	6023      	strmi	r3, [r4, #0]
 8005f1a:	b11d      	cbz	r5, 8005f24 <_printf_i+0x19c>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	e7ad      	b.n	8005e7c <_printf_i+0xf4>
 8005f20:	4826      	ldr	r0, [pc, #152]	@ (8005fbc <_printf_i+0x234>)
 8005f22:	e7e9      	b.n	8005ef8 <_printf_i+0x170>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	f023 0320 	bic.w	r3, r3, #32
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e7f6      	b.n	8005f1c <_printf_i+0x194>
 8005f2e:	4616      	mov	r6, r2
 8005f30:	e7bd      	b.n	8005eae <_printf_i+0x126>
 8005f32:	6833      	ldr	r3, [r6, #0]
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	6961      	ldr	r1, [r4, #20]
 8005f38:	1d18      	adds	r0, r3, #4
 8005f3a:	6030      	str	r0, [r6, #0]
 8005f3c:	062e      	lsls	r6, r5, #24
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	d501      	bpl.n	8005f46 <_printf_i+0x1be>
 8005f42:	6019      	str	r1, [r3, #0]
 8005f44:	e002      	b.n	8005f4c <_printf_i+0x1c4>
 8005f46:	0668      	lsls	r0, r5, #25
 8005f48:	d5fb      	bpl.n	8005f42 <_printf_i+0x1ba>
 8005f4a:	8019      	strh	r1, [r3, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	4616      	mov	r6, r2
 8005f52:	e7bc      	b.n	8005ece <_printf_i+0x146>
 8005f54:	6833      	ldr	r3, [r6, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	6032      	str	r2, [r6, #0]
 8005f5a:	681e      	ldr	r6, [r3, #0]
 8005f5c:	6862      	ldr	r2, [r4, #4]
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7fa f955 	bl	8000210 <memchr>
 8005f66:	b108      	cbz	r0, 8005f6c <_printf_i+0x1e4>
 8005f68:	1b80      	subs	r0, r0, r6
 8005f6a:	6060      	str	r0, [r4, #4]
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2300      	movs	r3, #0
 8005f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f76:	e7aa      	b.n	8005ece <_printf_i+0x146>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4640      	mov	r0, r8
 8005f80:	47d0      	blx	sl
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0ad      	beq.n	8005ee2 <_printf_i+0x15a>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	079b      	lsls	r3, r3, #30
 8005f8a:	d413      	bmi.n	8005fb4 <_printf_i+0x22c>
 8005f8c:	68e0      	ldr	r0, [r4, #12]
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	4298      	cmp	r0, r3
 8005f92:	bfb8      	it	lt
 8005f94:	4618      	movlt	r0, r3
 8005f96:	e7a6      	b.n	8005ee6 <_printf_i+0x15e>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	47d0      	blx	sl
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d09d      	beq.n	8005ee2 <_printf_i+0x15a>
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	9903      	ldr	r1, [sp, #12]
 8005fac:	1a5b      	subs	r3, r3, r1
 8005fae:	42ab      	cmp	r3, r5
 8005fb0:	dcf2      	bgt.n	8005f98 <_printf_i+0x210>
 8005fb2:	e7eb      	b.n	8005f8c <_printf_i+0x204>
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	f104 0619 	add.w	r6, r4, #25
 8005fba:	e7f5      	b.n	8005fa8 <_printf_i+0x220>
 8005fbc:	080093d5 	.word	0x080093d5
 8005fc0:	080093e6 	.word	0x080093e6

08005fc4 <std>:
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	4604      	mov	r4, r0
 8005fca:	e9c0 3300 	strd	r3, r3, [r0]
 8005fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fd2:	6083      	str	r3, [r0, #8]
 8005fd4:	8181      	strh	r1, [r0, #12]
 8005fd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fd8:	81c2      	strh	r2, [r0, #14]
 8005fda:	6183      	str	r3, [r0, #24]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	2208      	movs	r2, #8
 8005fe0:	305c      	adds	r0, #92	@ 0x5c
 8005fe2:	f000 f97a 	bl	80062da <memset>
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <std+0x58>)
 8005fe8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fea:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <std+0x5c>)
 8005fec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fee:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <std+0x60>)
 8005ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <std+0x64>)
 8005ff4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <std+0x68>)
 8005ff8:	6224      	str	r4, [r4, #32]
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d006      	beq.n	800600c <std+0x48>
 8005ffe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006002:	4294      	cmp	r4, r2
 8006004:	d002      	beq.n	800600c <std+0x48>
 8006006:	33d0      	adds	r3, #208	@ 0xd0
 8006008:	429c      	cmp	r4, r3
 800600a:	d105      	bne.n	8006018 <std+0x54>
 800600c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f000 ba04 	b.w	8006420 <__retarget_lock_init_recursive>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	08006251 	.word	0x08006251
 8006020:	08006277 	.word	0x08006277
 8006024:	080062af 	.word	0x080062af
 8006028:	080062d3 	.word	0x080062d3
 800602c:	200003f8 	.word	0x200003f8

08006030 <stdio_exit_handler>:
 8006030:	4a02      	ldr	r2, [pc, #8]	@ (800603c <stdio_exit_handler+0xc>)
 8006032:	4903      	ldr	r1, [pc, #12]	@ (8006040 <stdio_exit_handler+0x10>)
 8006034:	4803      	ldr	r0, [pc, #12]	@ (8006044 <stdio_exit_handler+0x14>)
 8006036:	f000 b869 	b.w	800610c <_fwalk_sglue>
 800603a:	bf00      	nop
 800603c:	20000038 	.word	0x20000038
 8006040:	08008545 	.word	0x08008545
 8006044:	200001b4 	.word	0x200001b4

08006048 <cleanup_stdio>:
 8006048:	6841      	ldr	r1, [r0, #4]
 800604a:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <cleanup_stdio+0x34>)
 800604c:	4299      	cmp	r1, r3
 800604e:	b510      	push	{r4, lr}
 8006050:	4604      	mov	r4, r0
 8006052:	d001      	beq.n	8006058 <cleanup_stdio+0x10>
 8006054:	f002 fa76 	bl	8008544 <_fflush_r>
 8006058:	68a1      	ldr	r1, [r4, #8]
 800605a:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <cleanup_stdio+0x38>)
 800605c:	4299      	cmp	r1, r3
 800605e:	d002      	beq.n	8006066 <cleanup_stdio+0x1e>
 8006060:	4620      	mov	r0, r4
 8006062:	f002 fa6f 	bl	8008544 <_fflush_r>
 8006066:	68e1      	ldr	r1, [r4, #12]
 8006068:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <cleanup_stdio+0x3c>)
 800606a:	4299      	cmp	r1, r3
 800606c:	d004      	beq.n	8006078 <cleanup_stdio+0x30>
 800606e:	4620      	mov	r0, r4
 8006070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006074:	f002 ba66 	b.w	8008544 <_fflush_r>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	200003f8 	.word	0x200003f8
 8006080:	20000460 	.word	0x20000460
 8006084:	200004c8 	.word	0x200004c8

08006088 <global_stdio_init.part.0>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <global_stdio_init.part.0+0x30>)
 800608c:	4c0b      	ldr	r4, [pc, #44]	@ (80060bc <global_stdio_init.part.0+0x34>)
 800608e:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <global_stdio_init.part.0+0x38>)
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4620      	mov	r0, r4
 8006094:	2200      	movs	r2, #0
 8006096:	2104      	movs	r1, #4
 8006098:	f7ff ff94 	bl	8005fc4 <std>
 800609c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060a0:	2201      	movs	r2, #1
 80060a2:	2109      	movs	r1, #9
 80060a4:	f7ff ff8e 	bl	8005fc4 <std>
 80060a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060ac:	2202      	movs	r2, #2
 80060ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b2:	2112      	movs	r1, #18
 80060b4:	f7ff bf86 	b.w	8005fc4 <std>
 80060b8:	20000530 	.word	0x20000530
 80060bc:	200003f8 	.word	0x200003f8
 80060c0:	08006031 	.word	0x08006031

080060c4 <__sfp_lock_acquire>:
 80060c4:	4801      	ldr	r0, [pc, #4]	@ (80060cc <__sfp_lock_acquire+0x8>)
 80060c6:	f000 b9ac 	b.w	8006422 <__retarget_lock_acquire_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000539 	.word	0x20000539

080060d0 <__sfp_lock_release>:
 80060d0:	4801      	ldr	r0, [pc, #4]	@ (80060d8 <__sfp_lock_release+0x8>)
 80060d2:	f000 b9a7 	b.w	8006424 <__retarget_lock_release_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000539 	.word	0x20000539

080060dc <__sinit>:
 80060dc:	b510      	push	{r4, lr}
 80060de:	4604      	mov	r4, r0
 80060e0:	f7ff fff0 	bl	80060c4 <__sfp_lock_acquire>
 80060e4:	6a23      	ldr	r3, [r4, #32]
 80060e6:	b11b      	cbz	r3, 80060f0 <__sinit+0x14>
 80060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ec:	f7ff bff0 	b.w	80060d0 <__sfp_lock_release>
 80060f0:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <__sinit+0x28>)
 80060f2:	6223      	str	r3, [r4, #32]
 80060f4:	4b04      	ldr	r3, [pc, #16]	@ (8006108 <__sinit+0x2c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f5      	bne.n	80060e8 <__sinit+0xc>
 80060fc:	f7ff ffc4 	bl	8006088 <global_stdio_init.part.0>
 8006100:	e7f2      	b.n	80060e8 <__sinit+0xc>
 8006102:	bf00      	nop
 8006104:	08006049 	.word	0x08006049
 8006108:	20000530 	.word	0x20000530

0800610c <_fwalk_sglue>:
 800610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006110:	4607      	mov	r7, r0
 8006112:	4688      	mov	r8, r1
 8006114:	4614      	mov	r4, r2
 8006116:	2600      	movs	r6, #0
 8006118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800611c:	f1b9 0901 	subs.w	r9, r9, #1
 8006120:	d505      	bpl.n	800612e <_fwalk_sglue+0x22>
 8006122:	6824      	ldr	r4, [r4, #0]
 8006124:	2c00      	cmp	r4, #0
 8006126:	d1f7      	bne.n	8006118 <_fwalk_sglue+0xc>
 8006128:	4630      	mov	r0, r6
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d907      	bls.n	8006144 <_fwalk_sglue+0x38>
 8006134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006138:	3301      	adds	r3, #1
 800613a:	d003      	beq.n	8006144 <_fwalk_sglue+0x38>
 800613c:	4629      	mov	r1, r5
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	4306      	orrs	r6, r0
 8006144:	3568      	adds	r5, #104	@ 0x68
 8006146:	e7e9      	b.n	800611c <_fwalk_sglue+0x10>

08006148 <sniprintf>:
 8006148:	b40c      	push	{r2, r3}
 800614a:	b530      	push	{r4, r5, lr}
 800614c:	4b18      	ldr	r3, [pc, #96]	@ (80061b0 <sniprintf+0x68>)
 800614e:	1e0c      	subs	r4, r1, #0
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	b09d      	sub	sp, #116	@ 0x74
 8006154:	da08      	bge.n	8006168 <sniprintf+0x20>
 8006156:	238b      	movs	r3, #139	@ 0x8b
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	b01d      	add	sp, #116	@ 0x74
 8006160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006164:	b002      	add	sp, #8
 8006166:	4770      	bx	lr
 8006168:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800616c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006176:	bf14      	ite	ne
 8006178:	f104 33ff 	addne.w	r3, r4, #4294967295
 800617c:	4623      	moveq	r3, r4
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006186:	9002      	str	r0, [sp, #8]
 8006188:	9006      	str	r0, [sp, #24]
 800618a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800618e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006190:	ab21      	add	r3, sp, #132	@ 0x84
 8006192:	a902      	add	r1, sp, #8
 8006194:	4628      	mov	r0, r5
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f001 fbf4 	bl	8007984 <_svfiprintf_r>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	bfbc      	itt	lt
 80061a0:	238b      	movlt	r3, #139	@ 0x8b
 80061a2:	602b      	strlt	r3, [r5, #0]
 80061a4:	2c00      	cmp	r4, #0
 80061a6:	d0da      	beq.n	800615e <sniprintf+0x16>
 80061a8:	9b02      	ldr	r3, [sp, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e7d6      	b.n	800615e <sniprintf+0x16>
 80061b0:	200001b0 	.word	0x200001b0

080061b4 <siprintf>:
 80061b4:	b40e      	push	{r1, r2, r3}
 80061b6:	b510      	push	{r4, lr}
 80061b8:	b09d      	sub	sp, #116	@ 0x74
 80061ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061bc:	9002      	str	r0, [sp, #8]
 80061be:	9006      	str	r0, [sp, #24]
 80061c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061c4:	480a      	ldr	r0, [pc, #40]	@ (80061f0 <siprintf+0x3c>)
 80061c6:	9107      	str	r1, [sp, #28]
 80061c8:	9104      	str	r1, [sp, #16]
 80061ca:	490a      	ldr	r1, [pc, #40]	@ (80061f4 <siprintf+0x40>)
 80061cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	2400      	movs	r4, #0
 80061d4:	a902      	add	r1, sp, #8
 80061d6:	6800      	ldr	r0, [r0, #0]
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061dc:	f001 fbd2 	bl	8007984 <_svfiprintf_r>
 80061e0:	9b02      	ldr	r3, [sp, #8]
 80061e2:	701c      	strb	r4, [r3, #0]
 80061e4:	b01d      	add	sp, #116	@ 0x74
 80061e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ea:	b003      	add	sp, #12
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	200001b0 	.word	0x200001b0
 80061f4:	ffff0208 	.word	0xffff0208

080061f8 <siscanf>:
 80061f8:	b40e      	push	{r1, r2, r3}
 80061fa:	b570      	push	{r4, r5, r6, lr}
 80061fc:	b09d      	sub	sp, #116	@ 0x74
 80061fe:	ac21      	add	r4, sp, #132	@ 0x84
 8006200:	2500      	movs	r5, #0
 8006202:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006206:	f854 6b04 	ldr.w	r6, [r4], #4
 800620a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800620e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006210:	9002      	str	r0, [sp, #8]
 8006212:	9006      	str	r0, [sp, #24]
 8006214:	f7fa f84c 	bl	80002b0 <strlen>
 8006218:	4b0b      	ldr	r3, [pc, #44]	@ (8006248 <siscanf+0x50>)
 800621a:	9003      	str	r0, [sp, #12]
 800621c:	9007      	str	r0, [sp, #28]
 800621e:	480b      	ldr	r0, [pc, #44]	@ (800624c <siscanf+0x54>)
 8006220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006222:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006226:	f8ad 3016 	strh.w	r3, [sp, #22]
 800622a:	4632      	mov	r2, r6
 800622c:	4623      	mov	r3, r4
 800622e:	a902      	add	r1, sp, #8
 8006230:	6800      	ldr	r0, [r0, #0]
 8006232:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006234:	9514      	str	r5, [sp, #80]	@ 0x50
 8006236:	9401      	str	r4, [sp, #4]
 8006238:	f001 fcfa 	bl	8007c30 <__ssvfiscanf_r>
 800623c:	b01d      	add	sp, #116	@ 0x74
 800623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006242:	b003      	add	sp, #12
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	08006273 	.word	0x08006273
 800624c:	200001b0 	.word	0x200001b0

08006250 <__sread>:
 8006250:	b510      	push	{r4, lr}
 8006252:	460c      	mov	r4, r1
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	f000 f884 	bl	8006364 <_read_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	bfab      	itete	ge
 8006260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006262:	89a3      	ldrhlt	r3, [r4, #12]
 8006264:	181b      	addge	r3, r3, r0
 8006266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800626a:	bfac      	ite	ge
 800626c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800626e:	81a3      	strhlt	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__seofread>:
 8006272:	2000      	movs	r0, #0
 8006274:	4770      	bx	lr

08006276 <__swrite>:
 8006276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627a:	461f      	mov	r7, r3
 800627c:	898b      	ldrh	r3, [r1, #12]
 800627e:	05db      	lsls	r3, r3, #23
 8006280:	4605      	mov	r5, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4616      	mov	r6, r2
 8006286:	d505      	bpl.n	8006294 <__swrite+0x1e>
 8006288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628c:	2302      	movs	r3, #2
 800628e:	2200      	movs	r2, #0
 8006290:	f000 f856 	bl	8006340 <_lseek_r>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	4632      	mov	r2, r6
 80062a2:	463b      	mov	r3, r7
 80062a4:	4628      	mov	r0, r5
 80062a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	f000 b87d 	b.w	80063a8 <_write_r>

080062ae <__sseek>:
 80062ae:	b510      	push	{r4, lr}
 80062b0:	460c      	mov	r4, r1
 80062b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b6:	f000 f843 	bl	8006340 <_lseek_r>
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	bf15      	itete	ne
 80062c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062ca:	81a3      	strheq	r3, [r4, #12]
 80062cc:	bf18      	it	ne
 80062ce:	81a3      	strhne	r3, [r4, #12]
 80062d0:	bd10      	pop	{r4, pc}

080062d2 <__sclose>:
 80062d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d6:	f000 b823 	b.w	8006320 <_close_r>

080062da <memset>:
 80062da:	4402      	add	r2, r0
 80062dc:	4603      	mov	r3, r0
 80062de:	4293      	cmp	r3, r2
 80062e0:	d100      	bne.n	80062e4 <memset+0xa>
 80062e2:	4770      	bx	lr
 80062e4:	f803 1b01 	strb.w	r1, [r3], #1
 80062e8:	e7f9      	b.n	80062de <memset+0x4>

080062ea <strstr>:
 80062ea:	780a      	ldrb	r2, [r1, #0]
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	b96a      	cbnz	r2, 800630c <strstr+0x22>
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d109      	bne.n	800630a <strstr+0x20>
 80062f6:	460c      	mov	r4, r1
 80062f8:	4605      	mov	r5, r0
 80062fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f6      	beq.n	80062f0 <strstr+0x6>
 8006302:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006306:	429e      	cmp	r6, r3
 8006308:	d0f7      	beq.n	80062fa <strstr+0x10>
 800630a:	3001      	adds	r0, #1
 800630c:	7803      	ldrb	r3, [r0, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ef      	bne.n	80062f2 <strstr+0x8>
 8006312:	4618      	mov	r0, r3
 8006314:	e7ec      	b.n	80062f0 <strstr+0x6>
	...

08006318 <_localeconv_r>:
 8006318:	4800      	ldr	r0, [pc, #0]	@ (800631c <_localeconv_r+0x4>)
 800631a:	4770      	bx	lr
 800631c:	20000134 	.word	0x20000134

08006320 <_close_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	@ (800633c <_close_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fc fdc4 	bl	8002eb8 <_close>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_close_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_close_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000534 	.word	0x20000534

08006340 <_lseek_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	@ (8006360 <_lseek_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fc fdd9 	bl	8002f06 <_lseek>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_lseek_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_lseek_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000534 	.word	0x20000534

08006364 <_read_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d07      	ldr	r5, [pc, #28]	@ (8006384 <_read_r+0x20>)
 8006368:	4604      	mov	r4, r0
 800636a:	4608      	mov	r0, r1
 800636c:	4611      	mov	r1, r2
 800636e:	2200      	movs	r2, #0
 8006370:	602a      	str	r2, [r5, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	f7fc fd67 	bl	8002e46 <_read>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_read_r+0x1e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_read_r+0x1e>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000534 	.word	0x20000534

08006388 <_sbrk_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d06      	ldr	r5, [pc, #24]	@ (80063a4 <_sbrk_r+0x1c>)
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	f7fc fdc4 	bl	8002f20 <_sbrk>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_sbrk_r+0x1a>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_sbrk_r+0x1a>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	20000534 	.word	0x20000534

080063a8 <_write_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	@ (80063c8 <_write_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fc fd62 	bl	8002e80 <_write>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_write_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_write_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	20000534 	.word	0x20000534

080063cc <__errno>:
 80063cc:	4b01      	ldr	r3, [pc, #4]	@ (80063d4 <__errno+0x8>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	200001b0 	.word	0x200001b0

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	@ (800641c <__libc_init_array+0x44>)
 80063ec:	f002 fbf4 	bl	8008bd8 <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	08009658 	.word	0x08009658
 8006414:	08009658 	.word	0x08009658
 8006418:	08009658 	.word	0x08009658
 800641c:	0800965c 	.word	0x0800965c

08006420 <__retarget_lock_init_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_acquire_recursive>:
 8006422:	4770      	bx	lr

08006424 <__retarget_lock_release_recursive>:
 8006424:	4770      	bx	lr

08006426 <memcpy>:
 8006426:	440a      	add	r2, r1
 8006428:	4291      	cmp	r1, r2
 800642a:	f100 33ff 	add.w	r3, r0, #4294967295
 800642e:	d100      	bne.n	8006432 <memcpy+0xc>
 8006430:	4770      	bx	lr
 8006432:	b510      	push	{r4, lr}
 8006434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800643c:	4291      	cmp	r1, r2
 800643e:	d1f9      	bne.n	8006434 <memcpy+0xe>
 8006440:	bd10      	pop	{r4, pc}

08006442 <quorem>:
 8006442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006446:	6903      	ldr	r3, [r0, #16]
 8006448:	690c      	ldr	r4, [r1, #16]
 800644a:	42a3      	cmp	r3, r4
 800644c:	4607      	mov	r7, r0
 800644e:	db7e      	blt.n	800654e <quorem+0x10c>
 8006450:	3c01      	subs	r4, #1
 8006452:	f101 0814 	add.w	r8, r1, #20
 8006456:	00a3      	lsls	r3, r4, #2
 8006458:	f100 0514 	add.w	r5, r0, #20
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800646c:	3301      	adds	r3, #1
 800646e:	429a      	cmp	r2, r3
 8006470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006474:	fbb2 f6f3 	udiv	r6, r2, r3
 8006478:	d32e      	bcc.n	80064d8 <quorem+0x96>
 800647a:	f04f 0a00 	mov.w	sl, #0
 800647e:	46c4      	mov	ip, r8
 8006480:	46ae      	mov	lr, r5
 8006482:	46d3      	mov	fp, sl
 8006484:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006488:	b298      	uxth	r0, r3
 800648a:	fb06 a000 	mla	r0, r6, r0, sl
 800648e:	0c02      	lsrs	r2, r0, #16
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	fb06 2303 	mla	r3, r6, r3, r2
 8006496:	f8de 2000 	ldr.w	r2, [lr]
 800649a:	b280      	uxth	r0, r0
 800649c:	b292      	uxth	r2, r2
 800649e:	1a12      	subs	r2, r2, r0
 80064a0:	445a      	add	r2, fp
 80064a2:	f8de 0000 	ldr.w	r0, [lr]
 80064a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80064b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80064b4:	b292      	uxth	r2, r2
 80064b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ba:	45e1      	cmp	r9, ip
 80064bc:	f84e 2b04 	str.w	r2, [lr], #4
 80064c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064c4:	d2de      	bcs.n	8006484 <quorem+0x42>
 80064c6:	9b00      	ldr	r3, [sp, #0]
 80064c8:	58eb      	ldr	r3, [r5, r3]
 80064ca:	b92b      	cbnz	r3, 80064d8 <quorem+0x96>
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	3b04      	subs	r3, #4
 80064d0:	429d      	cmp	r5, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	d32f      	bcc.n	8006536 <quorem+0xf4>
 80064d6:	613c      	str	r4, [r7, #16]
 80064d8:	4638      	mov	r0, r7
 80064da:	f001 f8db 	bl	8007694 <__mcmp>
 80064de:	2800      	cmp	r0, #0
 80064e0:	db25      	blt.n	800652e <quorem+0xec>
 80064e2:	4629      	mov	r1, r5
 80064e4:	2000      	movs	r0, #0
 80064e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ea:	f8d1 c000 	ldr.w	ip, [r1]
 80064ee:	fa1f fe82 	uxth.w	lr, r2
 80064f2:	fa1f f38c 	uxth.w	r3, ip
 80064f6:	eba3 030e 	sub.w	r3, r3, lr
 80064fa:	4403      	add	r3, r0
 80064fc:	0c12      	lsrs	r2, r2, #16
 80064fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006502:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800650c:	45c1      	cmp	r9, r8
 800650e:	f841 3b04 	str.w	r3, [r1], #4
 8006512:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006516:	d2e6      	bcs.n	80064e6 <quorem+0xa4>
 8006518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800651c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006520:	b922      	cbnz	r2, 800652c <quorem+0xea>
 8006522:	3b04      	subs	r3, #4
 8006524:	429d      	cmp	r5, r3
 8006526:	461a      	mov	r2, r3
 8006528:	d30b      	bcc.n	8006542 <quorem+0x100>
 800652a:	613c      	str	r4, [r7, #16]
 800652c:	3601      	adds	r6, #1
 800652e:	4630      	mov	r0, r6
 8006530:	b003      	add	sp, #12
 8006532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	3b04      	subs	r3, #4
 800653a:	2a00      	cmp	r2, #0
 800653c:	d1cb      	bne.n	80064d6 <quorem+0x94>
 800653e:	3c01      	subs	r4, #1
 8006540:	e7c6      	b.n	80064d0 <quorem+0x8e>
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	3b04      	subs	r3, #4
 8006546:	2a00      	cmp	r2, #0
 8006548:	d1ef      	bne.n	800652a <quorem+0xe8>
 800654a:	3c01      	subs	r4, #1
 800654c:	e7ea      	b.n	8006524 <quorem+0xe2>
 800654e:	2000      	movs	r0, #0
 8006550:	e7ee      	b.n	8006530 <quorem+0xee>
 8006552:	0000      	movs	r0, r0
 8006554:	0000      	movs	r0, r0
	...

08006558 <_dtoa_r>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	69c7      	ldr	r7, [r0, #28]
 800655e:	b097      	sub	sp, #92	@ 0x5c
 8006560:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006564:	ec55 4b10 	vmov	r4, r5, d0
 8006568:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800656a:	9107      	str	r1, [sp, #28]
 800656c:	4681      	mov	r9, r0
 800656e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006570:	9311      	str	r3, [sp, #68]	@ 0x44
 8006572:	b97f      	cbnz	r7, 8006594 <_dtoa_r+0x3c>
 8006574:	2010      	movs	r0, #16
 8006576:	f7fe ffdb 	bl	8005530 <malloc>
 800657a:	4602      	mov	r2, r0
 800657c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006580:	b920      	cbnz	r0, 800658c <_dtoa_r+0x34>
 8006582:	4ba9      	ldr	r3, [pc, #676]	@ (8006828 <_dtoa_r+0x2d0>)
 8006584:	21ef      	movs	r1, #239	@ 0xef
 8006586:	48a9      	ldr	r0, [pc, #676]	@ (800682c <_dtoa_r+0x2d4>)
 8006588:	f002 f926 	bl	80087d8 <__assert_func>
 800658c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006590:	6007      	str	r7, [r0, #0]
 8006592:	60c7      	str	r7, [r0, #12]
 8006594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	b159      	cbz	r1, 80065b4 <_dtoa_r+0x5c>
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	604a      	str	r2, [r1, #4]
 80065a0:	2301      	movs	r3, #1
 80065a2:	4093      	lsls	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
 80065a6:	4648      	mov	r0, r9
 80065a8:	f000 fe42 	bl	8007230 <_Bfree>
 80065ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	1e2b      	subs	r3, r5, #0
 80065b6:	bfb9      	ittee	lt
 80065b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80065bc:	9305      	strlt	r3, [sp, #20]
 80065be:	2300      	movge	r3, #0
 80065c0:	6033      	strge	r3, [r6, #0]
 80065c2:	9f05      	ldr	r7, [sp, #20]
 80065c4:	4b9a      	ldr	r3, [pc, #616]	@ (8006830 <_dtoa_r+0x2d8>)
 80065c6:	bfbc      	itt	lt
 80065c8:	2201      	movlt	r2, #1
 80065ca:	6032      	strlt	r2, [r6, #0]
 80065cc:	43bb      	bics	r3, r7
 80065ce:	d112      	bne.n	80065f6 <_dtoa_r+0x9e>
 80065d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065dc:	4323      	orrs	r3, r4
 80065de:	f000 855a 	beq.w	8007096 <_dtoa_r+0xb3e>
 80065e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006844 <_dtoa_r+0x2ec>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 855c 	beq.w	80070a6 <_dtoa_r+0xb4e>
 80065ee:	f10a 0303 	add.w	r3, sl, #3
 80065f2:	f000 bd56 	b.w	80070a2 <_dtoa_r+0xb4a>
 80065f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80065fa:	2200      	movs	r2, #0
 80065fc:	ec51 0b17 	vmov	r0, r1, d7
 8006600:	2300      	movs	r3, #0
 8006602:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006606:	f7fa fa7f 	bl	8000b08 <__aeabi_dcmpeq>
 800660a:	4680      	mov	r8, r0
 800660c:	b158      	cbz	r0, 8006626 <_dtoa_r+0xce>
 800660e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006610:	2301      	movs	r3, #1
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006616:	b113      	cbz	r3, 800661e <_dtoa_r+0xc6>
 8006618:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800661a:	4b86      	ldr	r3, [pc, #536]	@ (8006834 <_dtoa_r+0x2dc>)
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006848 <_dtoa_r+0x2f0>
 8006622:	f000 bd40 	b.w	80070a6 <_dtoa_r+0xb4e>
 8006626:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800662a:	aa14      	add	r2, sp, #80	@ 0x50
 800662c:	a915      	add	r1, sp, #84	@ 0x54
 800662e:	4648      	mov	r0, r9
 8006630:	f001 f8e0 	bl	80077f4 <__d2b>
 8006634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006638:	9002      	str	r0, [sp, #8]
 800663a:	2e00      	cmp	r6, #0
 800663c:	d078      	beq.n	8006730 <_dtoa_r+0x1d8>
 800663e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006640:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800664c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006658:	4619      	mov	r1, r3
 800665a:	2200      	movs	r2, #0
 800665c:	4b76      	ldr	r3, [pc, #472]	@ (8006838 <_dtoa_r+0x2e0>)
 800665e:	f7f9 fe33 	bl	80002c8 <__aeabi_dsub>
 8006662:	a36b      	add	r3, pc, #428	@ (adr r3, 8006810 <_dtoa_r+0x2b8>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 ffe6 	bl	8000638 <__aeabi_dmul>
 800666c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006818 <_dtoa_r+0x2c0>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 fe2b 	bl	80002cc <__adddf3>
 8006676:	4604      	mov	r4, r0
 8006678:	4630      	mov	r0, r6
 800667a:	460d      	mov	r5, r1
 800667c:	f7f9 ff72 	bl	8000564 <__aeabi_i2d>
 8006680:	a367      	add	r3, pc, #412	@ (adr r3, 8006820 <_dtoa_r+0x2c8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 ffd7 	bl	8000638 <__aeabi_dmul>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 fe1b 	bl	80002cc <__adddf3>
 8006696:	4604      	mov	r4, r0
 8006698:	460d      	mov	r5, r1
 800669a:	f7fa fa7d 	bl	8000b98 <__aeabi_d2iz>
 800669e:	2200      	movs	r2, #0
 80066a0:	4607      	mov	r7, r0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7fa fa38 	bl	8000b1c <__aeabi_dcmplt>
 80066ac:	b140      	cbz	r0, 80066c0 <_dtoa_r+0x168>
 80066ae:	4638      	mov	r0, r7
 80066b0:	f7f9 ff58 	bl	8000564 <__aeabi_i2d>
 80066b4:	4622      	mov	r2, r4
 80066b6:	462b      	mov	r3, r5
 80066b8:	f7fa fa26 	bl	8000b08 <__aeabi_dcmpeq>
 80066bc:	b900      	cbnz	r0, 80066c0 <_dtoa_r+0x168>
 80066be:	3f01      	subs	r7, #1
 80066c0:	2f16      	cmp	r7, #22
 80066c2:	d852      	bhi.n	800676a <_dtoa_r+0x212>
 80066c4:	4b5d      	ldr	r3, [pc, #372]	@ (800683c <_dtoa_r+0x2e4>)
 80066c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066d2:	f7fa fa23 	bl	8000b1c <__aeabi_dcmplt>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d049      	beq.n	800676e <_dtoa_r+0x216>
 80066da:	3f01      	subs	r7, #1
 80066dc:	2300      	movs	r3, #0
 80066de:	9310      	str	r3, [sp, #64]	@ 0x40
 80066e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066e2:	1b9b      	subs	r3, r3, r6
 80066e4:	1e5a      	subs	r2, r3, #1
 80066e6:	bf45      	ittet	mi
 80066e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80066ec:	9300      	strmi	r3, [sp, #0]
 80066ee:	2300      	movpl	r3, #0
 80066f0:	2300      	movmi	r3, #0
 80066f2:	9206      	str	r2, [sp, #24]
 80066f4:	bf54      	ite	pl
 80066f6:	9300      	strpl	r3, [sp, #0]
 80066f8:	9306      	strmi	r3, [sp, #24]
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	db39      	blt.n	8006772 <_dtoa_r+0x21a>
 80066fe:	9b06      	ldr	r3, [sp, #24]
 8006700:	970d      	str	r7, [sp, #52]	@ 0x34
 8006702:	443b      	add	r3, r7
 8006704:	9306      	str	r3, [sp, #24]
 8006706:	2300      	movs	r3, #0
 8006708:	9308      	str	r3, [sp, #32]
 800670a:	9b07      	ldr	r3, [sp, #28]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d863      	bhi.n	80067d8 <_dtoa_r+0x280>
 8006710:	2b05      	cmp	r3, #5
 8006712:	bfc4      	itt	gt
 8006714:	3b04      	subgt	r3, #4
 8006716:	9307      	strgt	r3, [sp, #28]
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	f1a3 0302 	sub.w	r3, r3, #2
 800671e:	bfcc      	ite	gt
 8006720:	2400      	movgt	r4, #0
 8006722:	2401      	movle	r4, #1
 8006724:	2b03      	cmp	r3, #3
 8006726:	d863      	bhi.n	80067f0 <_dtoa_r+0x298>
 8006728:	e8df f003 	tbb	[pc, r3]
 800672c:	2b375452 	.word	0x2b375452
 8006730:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006734:	441e      	add	r6, r3
 8006736:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800673a:	2b20      	cmp	r3, #32
 800673c:	bfc1      	itttt	gt
 800673e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006742:	409f      	lslgt	r7, r3
 8006744:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006748:	fa24 f303 	lsrgt.w	r3, r4, r3
 800674c:	bfd6      	itet	le
 800674e:	f1c3 0320 	rsble	r3, r3, #32
 8006752:	ea47 0003 	orrgt.w	r0, r7, r3
 8006756:	fa04 f003 	lslle.w	r0, r4, r3
 800675a:	f7f9 fef3 	bl	8000544 <__aeabi_ui2d>
 800675e:	2201      	movs	r2, #1
 8006760:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006764:	3e01      	subs	r6, #1
 8006766:	9212      	str	r2, [sp, #72]	@ 0x48
 8006768:	e776      	b.n	8006658 <_dtoa_r+0x100>
 800676a:	2301      	movs	r3, #1
 800676c:	e7b7      	b.n	80066de <_dtoa_r+0x186>
 800676e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006770:	e7b6      	b.n	80066e0 <_dtoa_r+0x188>
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	1bdb      	subs	r3, r3, r7
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	427b      	negs	r3, r7
 800677a:	9308      	str	r3, [sp, #32]
 800677c:	2300      	movs	r3, #0
 800677e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006780:	e7c3      	b.n	800670a <_dtoa_r+0x1b2>
 8006782:	2301      	movs	r3, #1
 8006784:	9309      	str	r3, [sp, #36]	@ 0x24
 8006786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006788:	eb07 0b03 	add.w	fp, r7, r3
 800678c:	f10b 0301 	add.w	r3, fp, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	bfb8      	it	lt
 8006796:	2301      	movlt	r3, #1
 8006798:	e006      	b.n	80067a8 <_dtoa_r+0x250>
 800679a:	2301      	movs	r3, #1
 800679c:	9309      	str	r3, [sp, #36]	@ 0x24
 800679e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd28      	ble.n	80067f6 <_dtoa_r+0x29e>
 80067a4:	469b      	mov	fp, r3
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80067ac:	2100      	movs	r1, #0
 80067ae:	2204      	movs	r2, #4
 80067b0:	f102 0514 	add.w	r5, r2, #20
 80067b4:	429d      	cmp	r5, r3
 80067b6:	d926      	bls.n	8006806 <_dtoa_r+0x2ae>
 80067b8:	6041      	str	r1, [r0, #4]
 80067ba:	4648      	mov	r0, r9
 80067bc:	f000 fcf8 	bl	80071b0 <_Balloc>
 80067c0:	4682      	mov	sl, r0
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d142      	bne.n	800684c <_dtoa_r+0x2f4>
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <_dtoa_r+0x2e8>)
 80067c8:	4602      	mov	r2, r0
 80067ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80067ce:	e6da      	b.n	8006586 <_dtoa_r+0x2e>
 80067d0:	2300      	movs	r3, #0
 80067d2:	e7e3      	b.n	800679c <_dtoa_r+0x244>
 80067d4:	2300      	movs	r3, #0
 80067d6:	e7d5      	b.n	8006784 <_dtoa_r+0x22c>
 80067d8:	2401      	movs	r4, #1
 80067da:	2300      	movs	r3, #0
 80067dc:	9307      	str	r3, [sp, #28]
 80067de:	9409      	str	r4, [sp, #36]	@ 0x24
 80067e0:	f04f 3bff 	mov.w	fp, #4294967295
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80067ea:	2312      	movs	r3, #18
 80067ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80067ee:	e7db      	b.n	80067a8 <_dtoa_r+0x250>
 80067f0:	2301      	movs	r3, #1
 80067f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f4:	e7f4      	b.n	80067e0 <_dtoa_r+0x288>
 80067f6:	f04f 0b01 	mov.w	fp, #1
 80067fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80067fe:	465b      	mov	r3, fp
 8006800:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006804:	e7d0      	b.n	80067a8 <_dtoa_r+0x250>
 8006806:	3101      	adds	r1, #1
 8006808:	0052      	lsls	r2, r2, #1
 800680a:	e7d1      	b.n	80067b0 <_dtoa_r+0x258>
 800680c:	f3af 8000 	nop.w
 8006810:	636f4361 	.word	0x636f4361
 8006814:	3fd287a7 	.word	0x3fd287a7
 8006818:	8b60c8b3 	.word	0x8b60c8b3
 800681c:	3fc68a28 	.word	0x3fc68a28
 8006820:	509f79fb 	.word	0x509f79fb
 8006824:	3fd34413 	.word	0x3fd34413
 8006828:	0800940e 	.word	0x0800940e
 800682c:	08009425 	.word	0x08009425
 8006830:	7ff00000 	.word	0x7ff00000
 8006834:	0800950f 	.word	0x0800950f
 8006838:	3ff80000 	.word	0x3ff80000
 800683c:	08009588 	.word	0x08009588
 8006840:	0800947d 	.word	0x0800947d
 8006844:	0800940a 	.word	0x0800940a
 8006848:	0800950e 	.word	0x0800950e
 800684c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006850:	6018      	str	r0, [r3, #0]
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	2b0e      	cmp	r3, #14
 8006856:	f200 80a1 	bhi.w	800699c <_dtoa_r+0x444>
 800685a:	2c00      	cmp	r4, #0
 800685c:	f000 809e 	beq.w	800699c <_dtoa_r+0x444>
 8006860:	2f00      	cmp	r7, #0
 8006862:	dd33      	ble.n	80068cc <_dtoa_r+0x374>
 8006864:	4b9c      	ldr	r3, [pc, #624]	@ (8006ad8 <_dtoa_r+0x580>)
 8006866:	f007 020f 	and.w	r2, r7, #15
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	ed93 7b00 	vldr	d7, [r3]
 8006872:	05f8      	lsls	r0, r7, #23
 8006874:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800687c:	d516      	bpl.n	80068ac <_dtoa_r+0x354>
 800687e:	4b97      	ldr	r3, [pc, #604]	@ (8006adc <_dtoa_r+0x584>)
 8006880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006888:	f7fa f800 	bl	800088c <__aeabi_ddiv>
 800688c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006890:	f004 040f 	and.w	r4, r4, #15
 8006894:	2603      	movs	r6, #3
 8006896:	4d91      	ldr	r5, [pc, #580]	@ (8006adc <_dtoa_r+0x584>)
 8006898:	b954      	cbnz	r4, 80068b0 <_dtoa_r+0x358>
 800689a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800689e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a2:	f7f9 fff3 	bl	800088c <__aeabi_ddiv>
 80068a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068aa:	e028      	b.n	80068fe <_dtoa_r+0x3a6>
 80068ac:	2602      	movs	r6, #2
 80068ae:	e7f2      	b.n	8006896 <_dtoa_r+0x33e>
 80068b0:	07e1      	lsls	r1, r4, #31
 80068b2:	d508      	bpl.n	80068c6 <_dtoa_r+0x36e>
 80068b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068bc:	f7f9 febc 	bl	8000638 <__aeabi_dmul>
 80068c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068c4:	3601      	adds	r6, #1
 80068c6:	1064      	asrs	r4, r4, #1
 80068c8:	3508      	adds	r5, #8
 80068ca:	e7e5      	b.n	8006898 <_dtoa_r+0x340>
 80068cc:	f000 80af 	beq.w	8006a2e <_dtoa_r+0x4d6>
 80068d0:	427c      	negs	r4, r7
 80068d2:	4b81      	ldr	r3, [pc, #516]	@ (8006ad8 <_dtoa_r+0x580>)
 80068d4:	4d81      	ldr	r5, [pc, #516]	@ (8006adc <_dtoa_r+0x584>)
 80068d6:	f004 020f 	and.w	r2, r4, #15
 80068da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068e6:	f7f9 fea7 	bl	8000638 <__aeabi_dmul>
 80068ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ee:	1124      	asrs	r4, r4, #4
 80068f0:	2300      	movs	r3, #0
 80068f2:	2602      	movs	r6, #2
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	f040 808f 	bne.w	8006a18 <_dtoa_r+0x4c0>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1d3      	bne.n	80068a6 <_dtoa_r+0x34e>
 80068fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006900:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8094 	beq.w	8006a32 <_dtoa_r+0x4da>
 800690a:	4b75      	ldr	r3, [pc, #468]	@ (8006ae0 <_dtoa_r+0x588>)
 800690c:	2200      	movs	r2, #0
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7fa f903 	bl	8000b1c <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f000 808b 	beq.w	8006a32 <_dtoa_r+0x4da>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8087 	beq.w	8006a32 <_dtoa_r+0x4da>
 8006924:	f1bb 0f00 	cmp.w	fp, #0
 8006928:	dd34      	ble.n	8006994 <_dtoa_r+0x43c>
 800692a:	4620      	mov	r0, r4
 800692c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ae4 <_dtoa_r+0x58c>)
 800692e:	2200      	movs	r2, #0
 8006930:	4629      	mov	r1, r5
 8006932:	f7f9 fe81 	bl	8000638 <__aeabi_dmul>
 8006936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800693a:	f107 38ff 	add.w	r8, r7, #4294967295
 800693e:	3601      	adds	r6, #1
 8006940:	465c      	mov	r4, fp
 8006942:	4630      	mov	r0, r6
 8006944:	f7f9 fe0e 	bl	8000564 <__aeabi_i2d>
 8006948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800694c:	f7f9 fe74 	bl	8000638 <__aeabi_dmul>
 8006950:	4b65      	ldr	r3, [pc, #404]	@ (8006ae8 <_dtoa_r+0x590>)
 8006952:	2200      	movs	r2, #0
 8006954:	f7f9 fcba 	bl	80002cc <__adddf3>
 8006958:	4605      	mov	r5, r0
 800695a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800695e:	2c00      	cmp	r4, #0
 8006960:	d16a      	bne.n	8006a38 <_dtoa_r+0x4e0>
 8006962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006966:	4b61      	ldr	r3, [pc, #388]	@ (8006aec <_dtoa_r+0x594>)
 8006968:	2200      	movs	r2, #0
 800696a:	f7f9 fcad 	bl	80002c8 <__aeabi_dsub>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006976:	462a      	mov	r2, r5
 8006978:	4633      	mov	r3, r6
 800697a:	f7fa f8ed 	bl	8000b58 <__aeabi_dcmpgt>
 800697e:	2800      	cmp	r0, #0
 8006980:	f040 8298 	bne.w	8006eb4 <_dtoa_r+0x95c>
 8006984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006988:	462a      	mov	r2, r5
 800698a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800698e:	f7fa f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8006992:	bb38      	cbnz	r0, 80069e4 <_dtoa_r+0x48c>
 8006994:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006998:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800699c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f2c0 8157 	blt.w	8006c52 <_dtoa_r+0x6fa>
 80069a4:	2f0e      	cmp	r7, #14
 80069a6:	f300 8154 	bgt.w	8006c52 <_dtoa_r+0x6fa>
 80069aa:	4b4b      	ldr	r3, [pc, #300]	@ (8006ad8 <_dtoa_r+0x580>)
 80069ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069b0:	ed93 7b00 	vldr	d7, [r3]
 80069b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	ed8d 7b00 	vstr	d7, [sp]
 80069bc:	f280 80e5 	bge.w	8006b8a <_dtoa_r+0x632>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f300 80e1 	bgt.w	8006b8a <_dtoa_r+0x632>
 80069c8:	d10c      	bne.n	80069e4 <_dtoa_r+0x48c>
 80069ca:	4b48      	ldr	r3, [pc, #288]	@ (8006aec <_dtoa_r+0x594>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	ec51 0b17 	vmov	r0, r1, d7
 80069d2:	f7f9 fe31 	bl	8000638 <__aeabi_dmul>
 80069d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069da:	f7fa f8b3 	bl	8000b44 <__aeabi_dcmpge>
 80069de:	2800      	cmp	r0, #0
 80069e0:	f000 8266 	beq.w	8006eb0 <_dtoa_r+0x958>
 80069e4:	2400      	movs	r4, #0
 80069e6:	4625      	mov	r5, r4
 80069e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069ea:	4656      	mov	r6, sl
 80069ec:	ea6f 0803 	mvn.w	r8, r3
 80069f0:	2700      	movs	r7, #0
 80069f2:	4621      	mov	r1, r4
 80069f4:	4648      	mov	r0, r9
 80069f6:	f000 fc1b 	bl	8007230 <_Bfree>
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	f000 80bd 	beq.w	8006b7a <_dtoa_r+0x622>
 8006a00:	b12f      	cbz	r7, 8006a0e <_dtoa_r+0x4b6>
 8006a02:	42af      	cmp	r7, r5
 8006a04:	d003      	beq.n	8006a0e <_dtoa_r+0x4b6>
 8006a06:	4639      	mov	r1, r7
 8006a08:	4648      	mov	r0, r9
 8006a0a:	f000 fc11 	bl	8007230 <_Bfree>
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4648      	mov	r0, r9
 8006a12:	f000 fc0d 	bl	8007230 <_Bfree>
 8006a16:	e0b0      	b.n	8006b7a <_dtoa_r+0x622>
 8006a18:	07e2      	lsls	r2, r4, #31
 8006a1a:	d505      	bpl.n	8006a28 <_dtoa_r+0x4d0>
 8006a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	3601      	adds	r6, #1
 8006a26:	2301      	movs	r3, #1
 8006a28:	1064      	asrs	r4, r4, #1
 8006a2a:	3508      	adds	r5, #8
 8006a2c:	e762      	b.n	80068f4 <_dtoa_r+0x39c>
 8006a2e:	2602      	movs	r6, #2
 8006a30:	e765      	b.n	80068fe <_dtoa_r+0x3a6>
 8006a32:	9c03      	ldr	r4, [sp, #12]
 8006a34:	46b8      	mov	r8, r7
 8006a36:	e784      	b.n	8006942 <_dtoa_r+0x3ea>
 8006a38:	4b27      	ldr	r3, [pc, #156]	@ (8006ad8 <_dtoa_r+0x580>)
 8006a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a44:	4454      	add	r4, sl
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d054      	beq.n	8006af4 <_dtoa_r+0x59c>
 8006a4a:	4929      	ldr	r1, [pc, #164]	@ (8006af0 <_dtoa_r+0x598>)
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	f7f9 ff1d 	bl	800088c <__aeabi_ddiv>
 8006a52:	4633      	mov	r3, r6
 8006a54:	462a      	mov	r2, r5
 8006a56:	f7f9 fc37 	bl	80002c8 <__aeabi_dsub>
 8006a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a5e:	4656      	mov	r6, sl
 8006a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a64:	f7fa f898 	bl	8000b98 <__aeabi_d2iz>
 8006a68:	4605      	mov	r5, r0
 8006a6a:	f7f9 fd7b 	bl	8000564 <__aeabi_i2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a76:	f7f9 fc27 	bl	80002c8 <__aeabi_dsub>
 8006a7a:	3530      	adds	r5, #48	@ 0x30
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a84:	f806 5b01 	strb.w	r5, [r6], #1
 8006a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a8c:	f7fa f846 	bl	8000b1c <__aeabi_dcmplt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d172      	bne.n	8006b7a <_dtoa_r+0x622>
 8006a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a98:	4911      	ldr	r1, [pc, #68]	@ (8006ae0 <_dtoa_r+0x588>)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7f9 fc14 	bl	80002c8 <__aeabi_dsub>
 8006aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006aa4:	f7fa f83a 	bl	8000b1c <__aeabi_dcmplt>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f040 80b4 	bne.w	8006c16 <_dtoa_r+0x6be>
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	f43f af70 	beq.w	8006994 <_dtoa_r+0x43c>
 8006ab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <_dtoa_r+0x58c>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f7f9 fdbc 	bl	8000638 <__aeabi_dmul>
 8006ac0:	4b08      	ldr	r3, [pc, #32]	@ (8006ae4 <_dtoa_r+0x58c>)
 8006ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006acc:	f7f9 fdb4 	bl	8000638 <__aeabi_dmul>
 8006ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad4:	e7c4      	b.n	8006a60 <_dtoa_r+0x508>
 8006ad6:	bf00      	nop
 8006ad8:	08009588 	.word	0x08009588
 8006adc:	08009560 	.word	0x08009560
 8006ae0:	3ff00000 	.word	0x3ff00000
 8006ae4:	40240000 	.word	0x40240000
 8006ae8:	401c0000 	.word	0x401c0000
 8006aec:	40140000 	.word	0x40140000
 8006af0:	3fe00000 	.word	0x3fe00000
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	f7f9 fd9e 	bl	8000638 <__aeabi_dmul>
 8006afc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b02:	4656      	mov	r6, sl
 8006b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b08:	f7fa f846 	bl	8000b98 <__aeabi_d2iz>
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	f7f9 fd29 	bl	8000564 <__aeabi_i2d>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b1a:	f7f9 fbd5 	bl	80002c8 <__aeabi_dsub>
 8006b1e:	3530      	adds	r5, #48	@ 0x30
 8006b20:	f806 5b01 	strb.w	r5, [r6], #1
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	42a6      	cmp	r6, r4
 8006b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	d124      	bne.n	8006b7e <_dtoa_r+0x626>
 8006b34:	4baf      	ldr	r3, [pc, #700]	@ (8006df4 <_dtoa_r+0x89c>)
 8006b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b3a:	f7f9 fbc7 	bl	80002cc <__adddf3>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b46:	f7fa f807 	bl	8000b58 <__aeabi_dcmpgt>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d163      	bne.n	8006c16 <_dtoa_r+0x6be>
 8006b4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b52:	49a8      	ldr	r1, [pc, #672]	@ (8006df4 <_dtoa_r+0x89c>)
 8006b54:	2000      	movs	r0, #0
 8006b56:	f7f9 fbb7 	bl	80002c8 <__aeabi_dsub>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b62:	f7f9 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f43f af14 	beq.w	8006994 <_dtoa_r+0x43c>
 8006b6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b6e:	1e73      	subs	r3, r6, #1
 8006b70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b76:	2b30      	cmp	r3, #48	@ 0x30
 8006b78:	d0f8      	beq.n	8006b6c <_dtoa_r+0x614>
 8006b7a:	4647      	mov	r7, r8
 8006b7c:	e03b      	b.n	8006bf6 <_dtoa_r+0x69e>
 8006b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8006df8 <_dtoa_r+0x8a0>)
 8006b80:	f7f9 fd5a 	bl	8000638 <__aeabi_dmul>
 8006b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b88:	e7bc      	b.n	8006b04 <_dtoa_r+0x5ac>
 8006b8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b8e:	4656      	mov	r6, sl
 8006b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fe78 	bl	800088c <__aeabi_ddiv>
 8006b9c:	f7f9 fffc 	bl	8000b98 <__aeabi_d2iz>
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	f7f9 fcdf 	bl	8000564 <__aeabi_i2d>
 8006ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006baa:	f7f9 fd45 	bl	8000638 <__aeabi_dmul>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bba:	f7f9 fb85 	bl	80002c8 <__aeabi_dsub>
 8006bbe:	f806 4b01 	strb.w	r4, [r6], #1
 8006bc2:	9d03      	ldr	r5, [sp, #12]
 8006bc4:	eba6 040a 	sub.w	r4, r6, sl
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	d133      	bne.n	8006c38 <_dtoa_r+0x6e0>
 8006bd0:	f7f9 fb7c 	bl	80002cc <__adddf3>
 8006bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	f7f9 ffbc 	bl	8000b58 <__aeabi_dcmpgt>
 8006be0:	b9c0      	cbnz	r0, 8006c14 <_dtoa_r+0x6bc>
 8006be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 8006bee:	b110      	cbz	r0, 8006bf6 <_dtoa_r+0x69e>
 8006bf0:	f018 0f01 	tst.w	r8, #1
 8006bf4:	d10e      	bne.n	8006c14 <_dtoa_r+0x6bc>
 8006bf6:	9902      	ldr	r1, [sp, #8]
 8006bf8:	4648      	mov	r0, r9
 8006bfa:	f000 fb19 	bl	8007230 <_Bfree>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	7033      	strb	r3, [r6, #0]
 8006c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c04:	3701      	adds	r7, #1
 8006c06:	601f      	str	r7, [r3, #0]
 8006c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 824b 	beq.w	80070a6 <_dtoa_r+0xb4e>
 8006c10:	601e      	str	r6, [r3, #0]
 8006c12:	e248      	b.n	80070a6 <_dtoa_r+0xb4e>
 8006c14:	46b8      	mov	r8, r7
 8006c16:	4633      	mov	r3, r6
 8006c18:	461e      	mov	r6, r3
 8006c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c1e:	2a39      	cmp	r2, #57	@ 0x39
 8006c20:	d106      	bne.n	8006c30 <_dtoa_r+0x6d8>
 8006c22:	459a      	cmp	sl, r3
 8006c24:	d1f8      	bne.n	8006c18 <_dtoa_r+0x6c0>
 8006c26:	2230      	movs	r2, #48	@ 0x30
 8006c28:	f108 0801 	add.w	r8, r8, #1
 8006c2c:	f88a 2000 	strb.w	r2, [sl]
 8006c30:	781a      	ldrb	r2, [r3, #0]
 8006c32:	3201      	adds	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e7a0      	b.n	8006b7a <_dtoa_r+0x622>
 8006c38:	4b6f      	ldr	r3, [pc, #444]	@ (8006df8 <_dtoa_r+0x8a0>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7f9 fcfc 	bl	8000638 <__aeabi_dmul>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	f7f9 ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d09f      	beq.n	8006b90 <_dtoa_r+0x638>
 8006c50:	e7d1      	b.n	8006bf6 <_dtoa_r+0x69e>
 8006c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	f000 80ea 	beq.w	8006e2e <_dtoa_r+0x8d6>
 8006c5a:	9a07      	ldr	r2, [sp, #28]
 8006c5c:	2a01      	cmp	r2, #1
 8006c5e:	f300 80cd 	bgt.w	8006dfc <_dtoa_r+0x8a4>
 8006c62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	f000 80c1 	beq.w	8006dec <_dtoa_r+0x894>
 8006c6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c6e:	9c08      	ldr	r4, [sp, #32]
 8006c70:	9e00      	ldr	r6, [sp, #0]
 8006c72:	9a00      	ldr	r2, [sp, #0]
 8006c74:	441a      	add	r2, r3
 8006c76:	9200      	str	r2, [sp, #0]
 8006c78:	9a06      	ldr	r2, [sp, #24]
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	4648      	mov	r0, r9
 8006c80:	9206      	str	r2, [sp, #24]
 8006c82:	f000 fb89 	bl	8007398 <__i2b>
 8006c86:	4605      	mov	r5, r0
 8006c88:	b166      	cbz	r6, 8006ca4 <_dtoa_r+0x74c>
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd09      	ble.n	8006ca4 <_dtoa_r+0x74c>
 8006c90:	42b3      	cmp	r3, r6
 8006c92:	9a00      	ldr	r2, [sp, #0]
 8006c94:	bfa8      	it	ge
 8006c96:	4633      	movge	r3, r6
 8006c98:	1ad2      	subs	r2, r2, r3
 8006c9a:	9200      	str	r2, [sp, #0]
 8006c9c:	9a06      	ldr	r2, [sp, #24]
 8006c9e:	1af6      	subs	r6, r6, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	9306      	str	r3, [sp, #24]
 8006ca4:	9b08      	ldr	r3, [sp, #32]
 8006ca6:	b30b      	cbz	r3, 8006cec <_dtoa_r+0x794>
 8006ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80c6 	beq.w	8006e3c <_dtoa_r+0x8e4>
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	f000 80c0 	beq.w	8006e36 <_dtoa_r+0x8de>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4622      	mov	r2, r4
 8006cba:	4648      	mov	r0, r9
 8006cbc:	f000 fc24 	bl	8007508 <__pow5mult>
 8006cc0:	9a02      	ldr	r2, [sp, #8]
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	4648      	mov	r0, r9
 8006cc8:	f000 fb7c 	bl	80073c4 <__multiply>
 8006ccc:	9902      	ldr	r1, [sp, #8]
 8006cce:	4680      	mov	r8, r0
 8006cd0:	4648      	mov	r0, r9
 8006cd2:	f000 faad 	bl	8007230 <_Bfree>
 8006cd6:	9b08      	ldr	r3, [sp, #32]
 8006cd8:	1b1b      	subs	r3, r3, r4
 8006cda:	9308      	str	r3, [sp, #32]
 8006cdc:	f000 80b1 	beq.w	8006e42 <_dtoa_r+0x8ea>
 8006ce0:	9a08      	ldr	r2, [sp, #32]
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	4648      	mov	r0, r9
 8006ce6:	f000 fc0f 	bl	8007508 <__pow5mult>
 8006cea:	9002      	str	r0, [sp, #8]
 8006cec:	2101      	movs	r1, #1
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 fb52 	bl	8007398 <__i2b>
 8006cf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 81d8 	beq.w	80070ae <_dtoa_r+0xb56>
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4601      	mov	r1, r0
 8006d02:	4648      	mov	r0, r9
 8006d04:	f000 fc00 	bl	8007508 <__pow5mult>
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	f300 809f 	bgt.w	8006e50 <_dtoa_r+0x8f8>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 8097 	bne.w	8006e48 <_dtoa_r+0x8f0>
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 8093 	bne.w	8006e4c <_dtoa_r+0x8f4>
 8006d26:	9b05      	ldr	r3, [sp, #20]
 8006d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d2c:	0d1b      	lsrs	r3, r3, #20
 8006d2e:	051b      	lsls	r3, r3, #20
 8006d30:	b133      	cbz	r3, 8006d40 <_dtoa_r+0x7e8>
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	9306      	str	r3, [sp, #24]
 8006d3e:	2301      	movs	r3, #1
 8006d40:	9308      	str	r3, [sp, #32]
 8006d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 81b8 	beq.w	80070ba <_dtoa_r+0xb62>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d50:	6918      	ldr	r0, [r3, #16]
 8006d52:	f000 fad5 	bl	8007300 <__hi0bits>
 8006d56:	f1c0 0020 	rsb	r0, r0, #32
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	4418      	add	r0, r3
 8006d5e:	f010 001f 	ands.w	r0, r0, #31
 8006d62:	f000 8082 	beq.w	8006e6a <_dtoa_r+0x912>
 8006d66:	f1c0 0320 	rsb	r3, r0, #32
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	dd73      	ble.n	8006e56 <_dtoa_r+0x8fe>
 8006d6e:	9b00      	ldr	r3, [sp, #0]
 8006d70:	f1c0 001c 	rsb	r0, r0, #28
 8006d74:	4403      	add	r3, r0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9b06      	ldr	r3, [sp, #24]
 8006d7a:	4403      	add	r3, r0
 8006d7c:	4406      	add	r6, r0
 8006d7e:	9306      	str	r3, [sp, #24]
 8006d80:	9b00      	ldr	r3, [sp, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd05      	ble.n	8006d92 <_dtoa_r+0x83a>
 8006d86:	9902      	ldr	r1, [sp, #8]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fc16 	bl	80075bc <__lshift>
 8006d90:	9002      	str	r0, [sp, #8]
 8006d92:	9b06      	ldr	r3, [sp, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd05      	ble.n	8006da4 <_dtoa_r+0x84c>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fc0d 	bl	80075bc <__lshift>
 8006da2:	4604      	mov	r4, r0
 8006da4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d061      	beq.n	8006e6e <_dtoa_r+0x916>
 8006daa:	9802      	ldr	r0, [sp, #8]
 8006dac:	4621      	mov	r1, r4
 8006dae:	f000 fc71 	bl	8007694 <__mcmp>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	da5b      	bge.n	8006e6e <_dtoa_r+0x916>
 8006db6:	2300      	movs	r3, #0
 8006db8:	9902      	ldr	r1, [sp, #8]
 8006dba:	220a      	movs	r2, #10
 8006dbc:	4648      	mov	r0, r9
 8006dbe:	f000 fa59 	bl	8007274 <__multadd>
 8006dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8177 	beq.w	80070be <_dtoa_r+0xb66>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	4648      	mov	r0, r9
 8006dd8:	f000 fa4c 	bl	8007274 <__multadd>
 8006ddc:	f1bb 0f00 	cmp.w	fp, #0
 8006de0:	4605      	mov	r5, r0
 8006de2:	dc6f      	bgt.n	8006ec4 <_dtoa_r+0x96c>
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	dc49      	bgt.n	8006e7e <_dtoa_r+0x926>
 8006dea:	e06b      	b.n	8006ec4 <_dtoa_r+0x96c>
 8006dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006df2:	e73c      	b.n	8006c6e <_dtoa_r+0x716>
 8006df4:	3fe00000 	.word	0x3fe00000
 8006df8:	40240000 	.word	0x40240000
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1e5c      	subs	r4, r3, #1
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	db09      	blt.n	8006e1a <_dtoa_r+0x8c2>
 8006e06:	1b1c      	subs	r4, r3, r4
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f6bf af30 	bge.w	8006c70 <_dtoa_r+0x718>
 8006e10:	9b00      	ldr	r3, [sp, #0]
 8006e12:	9a03      	ldr	r2, [sp, #12]
 8006e14:	1a9e      	subs	r6, r3, r2
 8006e16:	2300      	movs	r3, #0
 8006e18:	e72b      	b.n	8006c72 <_dtoa_r+0x71a>
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e1e:	9408      	str	r4, [sp, #32]
 8006e20:	1ae3      	subs	r3, r4, r3
 8006e22:	441a      	add	r2, r3
 8006e24:	9e00      	ldr	r6, [sp, #0]
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	e721      	b.n	8006c72 <_dtoa_r+0x71a>
 8006e2e:	9c08      	ldr	r4, [sp, #32]
 8006e30:	9e00      	ldr	r6, [sp, #0]
 8006e32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e34:	e728      	b.n	8006c88 <_dtoa_r+0x730>
 8006e36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006e3a:	e751      	b.n	8006ce0 <_dtoa_r+0x788>
 8006e3c:	9a08      	ldr	r2, [sp, #32]
 8006e3e:	9902      	ldr	r1, [sp, #8]
 8006e40:	e750      	b.n	8006ce4 <_dtoa_r+0x78c>
 8006e42:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e46:	e751      	b.n	8006cec <_dtoa_r+0x794>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e779      	b.n	8006d40 <_dtoa_r+0x7e8>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	e777      	b.n	8006d40 <_dtoa_r+0x7e8>
 8006e50:	2300      	movs	r3, #0
 8006e52:	9308      	str	r3, [sp, #32]
 8006e54:	e779      	b.n	8006d4a <_dtoa_r+0x7f2>
 8006e56:	d093      	beq.n	8006d80 <_dtoa_r+0x828>
 8006e58:	9a00      	ldr	r2, [sp, #0]
 8006e5a:	331c      	adds	r3, #28
 8006e5c:	441a      	add	r2, r3
 8006e5e:	9200      	str	r2, [sp, #0]
 8006e60:	9a06      	ldr	r2, [sp, #24]
 8006e62:	441a      	add	r2, r3
 8006e64:	441e      	add	r6, r3
 8006e66:	9206      	str	r2, [sp, #24]
 8006e68:	e78a      	b.n	8006d80 <_dtoa_r+0x828>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	e7f4      	b.n	8006e58 <_dtoa_r+0x900>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	46b8      	mov	r8, r7
 8006e74:	dc20      	bgt.n	8006eb8 <_dtoa_r+0x960>
 8006e76:	469b      	mov	fp, r3
 8006e78:	9b07      	ldr	r3, [sp, #28]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dd1e      	ble.n	8006ebc <_dtoa_r+0x964>
 8006e7e:	f1bb 0f00 	cmp.w	fp, #0
 8006e82:	f47f adb1 	bne.w	80069e8 <_dtoa_r+0x490>
 8006e86:	4621      	mov	r1, r4
 8006e88:	465b      	mov	r3, fp
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	4648      	mov	r0, r9
 8006e8e:	f000 f9f1 	bl	8007274 <__multadd>
 8006e92:	4601      	mov	r1, r0
 8006e94:	4604      	mov	r4, r0
 8006e96:	9802      	ldr	r0, [sp, #8]
 8006e98:	f000 fbfc 	bl	8007694 <__mcmp>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f77f ada3 	ble.w	80069e8 <_dtoa_r+0x490>
 8006ea2:	4656      	mov	r6, sl
 8006ea4:	2331      	movs	r3, #49	@ 0x31
 8006ea6:	f806 3b01 	strb.w	r3, [r6], #1
 8006eaa:	f108 0801 	add.w	r8, r8, #1
 8006eae:	e59f      	b.n	80069f0 <_dtoa_r+0x498>
 8006eb0:	9c03      	ldr	r4, [sp, #12]
 8006eb2:	46b8      	mov	r8, r7
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	e7f4      	b.n	8006ea2 <_dtoa_r+0x94a>
 8006eb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8101 	beq.w	80070c6 <_dtoa_r+0xb6e>
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	dd05      	ble.n	8006ed4 <_dtoa_r+0x97c>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4632      	mov	r2, r6
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fb75 	bl	80075bc <__lshift>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	9b08      	ldr	r3, [sp, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d05c      	beq.n	8006f94 <_dtoa_r+0xa3c>
 8006eda:	6869      	ldr	r1, [r5, #4]
 8006edc:	4648      	mov	r0, r9
 8006ede:	f000 f967 	bl	80071b0 <_Balloc>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	b928      	cbnz	r0, 8006ef2 <_dtoa_r+0x99a>
 8006ee6:	4b82      	ldr	r3, [pc, #520]	@ (80070f0 <_dtoa_r+0xb98>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006eee:	f7ff bb4a 	b.w	8006586 <_dtoa_r+0x2e>
 8006ef2:	692a      	ldr	r2, [r5, #16]
 8006ef4:	3202      	adds	r2, #2
 8006ef6:	0092      	lsls	r2, r2, #2
 8006ef8:	f105 010c 	add.w	r1, r5, #12
 8006efc:	300c      	adds	r0, #12
 8006efe:	f7ff fa92 	bl	8006426 <memcpy>
 8006f02:	2201      	movs	r2, #1
 8006f04:	4631      	mov	r1, r6
 8006f06:	4648      	mov	r0, r9
 8006f08:	f000 fb58 	bl	80075bc <__lshift>
 8006f0c:	f10a 0301 	add.w	r3, sl, #1
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	eb0a 030b 	add.w	r3, sl, fp
 8006f16:	9308      	str	r3, [sp, #32]
 8006f18:	9b04      	ldr	r3, [sp, #16]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	462f      	mov	r7, r5
 8006f20:	9306      	str	r3, [sp, #24]
 8006f22:	4605      	mov	r5, r0
 8006f24:	9b00      	ldr	r3, [sp, #0]
 8006f26:	9802      	ldr	r0, [sp, #8]
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f2e:	f7ff fa88 	bl	8006442 <quorem>
 8006f32:	4603      	mov	r3, r0
 8006f34:	3330      	adds	r3, #48	@ 0x30
 8006f36:	9003      	str	r0, [sp, #12]
 8006f38:	4639      	mov	r1, r7
 8006f3a:	9802      	ldr	r0, [sp, #8]
 8006f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3e:	f000 fba9 	bl	8007694 <__mcmp>
 8006f42:	462a      	mov	r2, r5
 8006f44:	9004      	str	r0, [sp, #16]
 8006f46:	4621      	mov	r1, r4
 8006f48:	4648      	mov	r0, r9
 8006f4a:	f000 fbbf 	bl	80076cc <__mdiff>
 8006f4e:	68c2      	ldr	r2, [r0, #12]
 8006f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f52:	4606      	mov	r6, r0
 8006f54:	bb02      	cbnz	r2, 8006f98 <_dtoa_r+0xa40>
 8006f56:	4601      	mov	r1, r0
 8006f58:	9802      	ldr	r0, [sp, #8]
 8006f5a:	f000 fb9b 	bl	8007694 <__mcmp>
 8006f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f60:	4602      	mov	r2, r0
 8006f62:	4631      	mov	r1, r6
 8006f64:	4648      	mov	r0, r9
 8006f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f6a:	f000 f961 	bl	8007230 <_Bfree>
 8006f6e:	9b07      	ldr	r3, [sp, #28]
 8006f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f72:	9e00      	ldr	r6, [sp, #0]
 8006f74:	ea42 0103 	orr.w	r1, r2, r3
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	4319      	orrs	r1, r3
 8006f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7e:	d10d      	bne.n	8006f9c <_dtoa_r+0xa44>
 8006f80:	2b39      	cmp	r3, #57	@ 0x39
 8006f82:	d027      	beq.n	8006fd4 <_dtoa_r+0xa7c>
 8006f84:	9a04      	ldr	r2, [sp, #16]
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	dd01      	ble.n	8006f8e <_dtoa_r+0xa36>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	3331      	adds	r3, #49	@ 0x31
 8006f8e:	f88b 3000 	strb.w	r3, [fp]
 8006f92:	e52e      	b.n	80069f2 <_dtoa_r+0x49a>
 8006f94:	4628      	mov	r0, r5
 8006f96:	e7b9      	b.n	8006f0c <_dtoa_r+0x9b4>
 8006f98:	2201      	movs	r2, #1
 8006f9a:	e7e2      	b.n	8006f62 <_dtoa_r+0xa0a>
 8006f9c:	9904      	ldr	r1, [sp, #16]
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	db04      	blt.n	8006fac <_dtoa_r+0xa54>
 8006fa2:	9807      	ldr	r0, [sp, #28]
 8006fa4:	4301      	orrs	r1, r0
 8006fa6:	9806      	ldr	r0, [sp, #24]
 8006fa8:	4301      	orrs	r1, r0
 8006faa:	d120      	bne.n	8006fee <_dtoa_r+0xa96>
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	ddee      	ble.n	8006f8e <_dtoa_r+0xa36>
 8006fb0:	9902      	ldr	r1, [sp, #8]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	f000 fb00 	bl	80075bc <__lshift>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	9002      	str	r0, [sp, #8]
 8006fc0:	f000 fb68 	bl	8007694 <__mcmp>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	dc02      	bgt.n	8006fd0 <_dtoa_r+0xa78>
 8006fca:	d1e0      	bne.n	8006f8e <_dtoa_r+0xa36>
 8006fcc:	07da      	lsls	r2, r3, #31
 8006fce:	d5de      	bpl.n	8006f8e <_dtoa_r+0xa36>
 8006fd0:	2b39      	cmp	r3, #57	@ 0x39
 8006fd2:	d1da      	bne.n	8006f8a <_dtoa_r+0xa32>
 8006fd4:	2339      	movs	r3, #57	@ 0x39
 8006fd6:	f88b 3000 	strb.w	r3, [fp]
 8006fda:	4633      	mov	r3, r6
 8006fdc:	461e      	mov	r6, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fe4:	2a39      	cmp	r2, #57	@ 0x39
 8006fe6:	d04e      	beq.n	8007086 <_dtoa_r+0xb2e>
 8006fe8:	3201      	adds	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e501      	b.n	80069f2 <_dtoa_r+0x49a>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	dd03      	ble.n	8006ffa <_dtoa_r+0xaa2>
 8006ff2:	2b39      	cmp	r3, #57	@ 0x39
 8006ff4:	d0ee      	beq.n	8006fd4 <_dtoa_r+0xa7c>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	e7c9      	b.n	8006f8e <_dtoa_r+0xa36>
 8006ffa:	9a00      	ldr	r2, [sp, #0]
 8006ffc:	9908      	ldr	r1, [sp, #32]
 8006ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007002:	428a      	cmp	r2, r1
 8007004:	d028      	beq.n	8007058 <_dtoa_r+0xb00>
 8007006:	9902      	ldr	r1, [sp, #8]
 8007008:	2300      	movs	r3, #0
 800700a:	220a      	movs	r2, #10
 800700c:	4648      	mov	r0, r9
 800700e:	f000 f931 	bl	8007274 <__multadd>
 8007012:	42af      	cmp	r7, r5
 8007014:	9002      	str	r0, [sp, #8]
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	f04f 020a 	mov.w	r2, #10
 800701e:	4639      	mov	r1, r7
 8007020:	4648      	mov	r0, r9
 8007022:	d107      	bne.n	8007034 <_dtoa_r+0xadc>
 8007024:	f000 f926 	bl	8007274 <__multadd>
 8007028:	4607      	mov	r7, r0
 800702a:	4605      	mov	r5, r0
 800702c:	9b00      	ldr	r3, [sp, #0]
 800702e:	3301      	adds	r3, #1
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	e777      	b.n	8006f24 <_dtoa_r+0x9cc>
 8007034:	f000 f91e 	bl	8007274 <__multadd>
 8007038:	4629      	mov	r1, r5
 800703a:	4607      	mov	r7, r0
 800703c:	2300      	movs	r3, #0
 800703e:	220a      	movs	r2, #10
 8007040:	4648      	mov	r0, r9
 8007042:	f000 f917 	bl	8007274 <__multadd>
 8007046:	4605      	mov	r5, r0
 8007048:	e7f0      	b.n	800702c <_dtoa_r+0xad4>
 800704a:	f1bb 0f00 	cmp.w	fp, #0
 800704e:	bfcc      	ite	gt
 8007050:	465e      	movgt	r6, fp
 8007052:	2601      	movle	r6, #1
 8007054:	4456      	add	r6, sl
 8007056:	2700      	movs	r7, #0
 8007058:	9902      	ldr	r1, [sp, #8]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2201      	movs	r2, #1
 800705e:	4648      	mov	r0, r9
 8007060:	f000 faac 	bl	80075bc <__lshift>
 8007064:	4621      	mov	r1, r4
 8007066:	9002      	str	r0, [sp, #8]
 8007068:	f000 fb14 	bl	8007694 <__mcmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	dcb4      	bgt.n	8006fda <_dtoa_r+0xa82>
 8007070:	d102      	bne.n	8007078 <_dtoa_r+0xb20>
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	07db      	lsls	r3, r3, #31
 8007076:	d4b0      	bmi.n	8006fda <_dtoa_r+0xa82>
 8007078:	4633      	mov	r3, r6
 800707a:	461e      	mov	r6, r3
 800707c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007080:	2a30      	cmp	r2, #48	@ 0x30
 8007082:	d0fa      	beq.n	800707a <_dtoa_r+0xb22>
 8007084:	e4b5      	b.n	80069f2 <_dtoa_r+0x49a>
 8007086:	459a      	cmp	sl, r3
 8007088:	d1a8      	bne.n	8006fdc <_dtoa_r+0xa84>
 800708a:	2331      	movs	r3, #49	@ 0x31
 800708c:	f108 0801 	add.w	r8, r8, #1
 8007090:	f88a 3000 	strb.w	r3, [sl]
 8007094:	e4ad      	b.n	80069f2 <_dtoa_r+0x49a>
 8007096:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80070f4 <_dtoa_r+0xb9c>
 800709c:	b11b      	cbz	r3, 80070a6 <_dtoa_r+0xb4e>
 800709e:	f10a 0308 	add.w	r3, sl, #8
 80070a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	4650      	mov	r0, sl
 80070a8:	b017      	add	sp, #92	@ 0x5c
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	9b07      	ldr	r3, [sp, #28]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f77f ae2e 	ble.w	8006d12 <_dtoa_r+0x7ba>
 80070b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070b8:	9308      	str	r3, [sp, #32]
 80070ba:	2001      	movs	r0, #1
 80070bc:	e64d      	b.n	8006d5a <_dtoa_r+0x802>
 80070be:	f1bb 0f00 	cmp.w	fp, #0
 80070c2:	f77f aed9 	ble.w	8006e78 <_dtoa_r+0x920>
 80070c6:	4656      	mov	r6, sl
 80070c8:	9802      	ldr	r0, [sp, #8]
 80070ca:	4621      	mov	r1, r4
 80070cc:	f7ff f9b9 	bl	8006442 <quorem>
 80070d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070d4:	f806 3b01 	strb.w	r3, [r6], #1
 80070d8:	eba6 020a 	sub.w	r2, r6, sl
 80070dc:	4593      	cmp	fp, r2
 80070de:	ddb4      	ble.n	800704a <_dtoa_r+0xaf2>
 80070e0:	9902      	ldr	r1, [sp, #8]
 80070e2:	2300      	movs	r3, #0
 80070e4:	220a      	movs	r2, #10
 80070e6:	4648      	mov	r0, r9
 80070e8:	f000 f8c4 	bl	8007274 <__multadd>
 80070ec:	9002      	str	r0, [sp, #8]
 80070ee:	e7eb      	b.n	80070c8 <_dtoa_r+0xb70>
 80070f0:	0800947d 	.word	0x0800947d
 80070f4:	08009401 	.word	0x08009401

080070f8 <_free_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4605      	mov	r5, r0
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d041      	beq.n	8007184 <_free_r+0x8c>
 8007100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007104:	1f0c      	subs	r4, r1, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	bfb8      	it	lt
 800710a:	18e4      	addlt	r4, r4, r3
 800710c:	f7fe fac2 	bl	8005694 <__malloc_lock>
 8007110:	4a1d      	ldr	r2, [pc, #116]	@ (8007188 <_free_r+0x90>)
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	b933      	cbnz	r3, 8007124 <_free_r+0x2c>
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	6014      	str	r4, [r2, #0]
 800711a:	4628      	mov	r0, r5
 800711c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007120:	f7fe babe 	b.w	80056a0 <__malloc_unlock>
 8007124:	42a3      	cmp	r3, r4
 8007126:	d908      	bls.n	800713a <_free_r+0x42>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	1821      	adds	r1, r4, r0
 800712c:	428b      	cmp	r3, r1
 800712e:	bf01      	itttt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	1809      	addeq	r1, r1, r0
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	e7ed      	b.n	8007116 <_free_r+0x1e>
 800713a:	461a      	mov	r2, r3
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	b10b      	cbz	r3, 8007144 <_free_r+0x4c>
 8007140:	42a3      	cmp	r3, r4
 8007142:	d9fa      	bls.n	800713a <_free_r+0x42>
 8007144:	6811      	ldr	r1, [r2, #0]
 8007146:	1850      	adds	r0, r2, r1
 8007148:	42a0      	cmp	r0, r4
 800714a:	d10b      	bne.n	8007164 <_free_r+0x6c>
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	4401      	add	r1, r0
 8007150:	1850      	adds	r0, r2, r1
 8007152:	4283      	cmp	r3, r0
 8007154:	6011      	str	r1, [r2, #0]
 8007156:	d1e0      	bne.n	800711a <_free_r+0x22>
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	6053      	str	r3, [r2, #4]
 800715e:	4408      	add	r0, r1
 8007160:	6010      	str	r0, [r2, #0]
 8007162:	e7da      	b.n	800711a <_free_r+0x22>
 8007164:	d902      	bls.n	800716c <_free_r+0x74>
 8007166:	230c      	movs	r3, #12
 8007168:	602b      	str	r3, [r5, #0]
 800716a:	e7d6      	b.n	800711a <_free_r+0x22>
 800716c:	6820      	ldr	r0, [r4, #0]
 800716e:	1821      	adds	r1, r4, r0
 8007170:	428b      	cmp	r3, r1
 8007172:	bf04      	itt	eq
 8007174:	6819      	ldreq	r1, [r3, #0]
 8007176:	685b      	ldreq	r3, [r3, #4]
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	bf04      	itt	eq
 800717c:	1809      	addeq	r1, r1, r0
 800717e:	6021      	streq	r1, [r4, #0]
 8007180:	6054      	str	r4, [r2, #4]
 8007182:	e7ca      	b.n	800711a <_free_r+0x22>
 8007184:	bd38      	pop	{r3, r4, r5, pc}
 8007186:	bf00      	nop
 8007188:	200003f4 	.word	0x200003f4

0800718c <__ascii_mbtowc>:
 800718c:	b082      	sub	sp, #8
 800718e:	b901      	cbnz	r1, 8007192 <__ascii_mbtowc+0x6>
 8007190:	a901      	add	r1, sp, #4
 8007192:	b142      	cbz	r2, 80071a6 <__ascii_mbtowc+0x1a>
 8007194:	b14b      	cbz	r3, 80071aa <__ascii_mbtowc+0x1e>
 8007196:	7813      	ldrb	r3, [r2, #0]
 8007198:	600b      	str	r3, [r1, #0]
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	1e10      	subs	r0, r2, #0
 800719e:	bf18      	it	ne
 80071a0:	2001      	movne	r0, #1
 80071a2:	b002      	add	sp, #8
 80071a4:	4770      	bx	lr
 80071a6:	4610      	mov	r0, r2
 80071a8:	e7fb      	b.n	80071a2 <__ascii_mbtowc+0x16>
 80071aa:	f06f 0001 	mvn.w	r0, #1
 80071ae:	e7f8      	b.n	80071a2 <__ascii_mbtowc+0x16>

080071b0 <_Balloc>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	69c6      	ldr	r6, [r0, #28]
 80071b4:	4604      	mov	r4, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	b976      	cbnz	r6, 80071d8 <_Balloc+0x28>
 80071ba:	2010      	movs	r0, #16
 80071bc:	f7fe f9b8 	bl	8005530 <malloc>
 80071c0:	4602      	mov	r2, r0
 80071c2:	61e0      	str	r0, [r4, #28]
 80071c4:	b920      	cbnz	r0, 80071d0 <_Balloc+0x20>
 80071c6:	4b18      	ldr	r3, [pc, #96]	@ (8007228 <_Balloc+0x78>)
 80071c8:	4818      	ldr	r0, [pc, #96]	@ (800722c <_Balloc+0x7c>)
 80071ca:	216b      	movs	r1, #107	@ 0x6b
 80071cc:	f001 fb04 	bl	80087d8 <__assert_func>
 80071d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d4:	6006      	str	r6, [r0, #0]
 80071d6:	60c6      	str	r6, [r0, #12]
 80071d8:	69e6      	ldr	r6, [r4, #28]
 80071da:	68f3      	ldr	r3, [r6, #12]
 80071dc:	b183      	cbz	r3, 8007200 <_Balloc+0x50>
 80071de:	69e3      	ldr	r3, [r4, #28]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071e6:	b9b8      	cbnz	r0, 8007218 <_Balloc+0x68>
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f605 	lsl.w	r6, r1, r5
 80071ee:	1d72      	adds	r2, r6, #5
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	4620      	mov	r0, r4
 80071f4:	f001 fb0e 	bl	8008814 <_calloc_r>
 80071f8:	b160      	cbz	r0, 8007214 <_Balloc+0x64>
 80071fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071fe:	e00e      	b.n	800721e <_Balloc+0x6e>
 8007200:	2221      	movs	r2, #33	@ 0x21
 8007202:	2104      	movs	r1, #4
 8007204:	4620      	mov	r0, r4
 8007206:	f001 fb05 	bl	8008814 <_calloc_r>
 800720a:	69e3      	ldr	r3, [r4, #28]
 800720c:	60f0      	str	r0, [r6, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e4      	bne.n	80071de <_Balloc+0x2e>
 8007214:	2000      	movs	r0, #0
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	6802      	ldr	r2, [r0, #0]
 800721a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800721e:	2300      	movs	r3, #0
 8007220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007224:	e7f7      	b.n	8007216 <_Balloc+0x66>
 8007226:	bf00      	nop
 8007228:	0800940e 	.word	0x0800940e
 800722c:	0800948e 	.word	0x0800948e

08007230 <_Bfree>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	69c6      	ldr	r6, [r0, #28]
 8007234:	4605      	mov	r5, r0
 8007236:	460c      	mov	r4, r1
 8007238:	b976      	cbnz	r6, 8007258 <_Bfree+0x28>
 800723a:	2010      	movs	r0, #16
 800723c:	f7fe f978 	bl	8005530 <malloc>
 8007240:	4602      	mov	r2, r0
 8007242:	61e8      	str	r0, [r5, #28]
 8007244:	b920      	cbnz	r0, 8007250 <_Bfree+0x20>
 8007246:	4b09      	ldr	r3, [pc, #36]	@ (800726c <_Bfree+0x3c>)
 8007248:	4809      	ldr	r0, [pc, #36]	@ (8007270 <_Bfree+0x40>)
 800724a:	218f      	movs	r1, #143	@ 0x8f
 800724c:	f001 fac4 	bl	80087d8 <__assert_func>
 8007250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007254:	6006      	str	r6, [r0, #0]
 8007256:	60c6      	str	r6, [r0, #12]
 8007258:	b13c      	cbz	r4, 800726a <_Bfree+0x3a>
 800725a:	69eb      	ldr	r3, [r5, #28]
 800725c:	6862      	ldr	r2, [r4, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007264:	6021      	str	r1, [r4, #0]
 8007266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	0800940e 	.word	0x0800940e
 8007270:	0800948e 	.word	0x0800948e

08007274 <__multadd>:
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	690d      	ldr	r5, [r1, #16]
 800727a:	4607      	mov	r7, r0
 800727c:	460c      	mov	r4, r1
 800727e:	461e      	mov	r6, r3
 8007280:	f101 0c14 	add.w	ip, r1, #20
 8007284:	2000      	movs	r0, #0
 8007286:	f8dc 3000 	ldr.w	r3, [ip]
 800728a:	b299      	uxth	r1, r3
 800728c:	fb02 6101 	mla	r1, r2, r1, r6
 8007290:	0c1e      	lsrs	r6, r3, #16
 8007292:	0c0b      	lsrs	r3, r1, #16
 8007294:	fb02 3306 	mla	r3, r2, r6, r3
 8007298:	b289      	uxth	r1, r1
 800729a:	3001      	adds	r0, #1
 800729c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072a0:	4285      	cmp	r5, r0
 80072a2:	f84c 1b04 	str.w	r1, [ip], #4
 80072a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072aa:	dcec      	bgt.n	8007286 <__multadd+0x12>
 80072ac:	b30e      	cbz	r6, 80072f2 <__multadd+0x7e>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	dc19      	bgt.n	80072e8 <__multadd+0x74>
 80072b4:	6861      	ldr	r1, [r4, #4]
 80072b6:	4638      	mov	r0, r7
 80072b8:	3101      	adds	r1, #1
 80072ba:	f7ff ff79 	bl	80071b0 <_Balloc>
 80072be:	4680      	mov	r8, r0
 80072c0:	b928      	cbnz	r0, 80072ce <__multadd+0x5a>
 80072c2:	4602      	mov	r2, r0
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <__multadd+0x84>)
 80072c6:	480d      	ldr	r0, [pc, #52]	@ (80072fc <__multadd+0x88>)
 80072c8:	21ba      	movs	r1, #186	@ 0xba
 80072ca:	f001 fa85 	bl	80087d8 <__assert_func>
 80072ce:	6922      	ldr	r2, [r4, #16]
 80072d0:	3202      	adds	r2, #2
 80072d2:	f104 010c 	add.w	r1, r4, #12
 80072d6:	0092      	lsls	r2, r2, #2
 80072d8:	300c      	adds	r0, #12
 80072da:	f7ff f8a4 	bl	8006426 <memcpy>
 80072de:	4621      	mov	r1, r4
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff ffa5 	bl	8007230 <_Bfree>
 80072e6:	4644      	mov	r4, r8
 80072e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072ec:	3501      	adds	r5, #1
 80072ee:	615e      	str	r6, [r3, #20]
 80072f0:	6125      	str	r5, [r4, #16]
 80072f2:	4620      	mov	r0, r4
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	0800947d 	.word	0x0800947d
 80072fc:	0800948e 	.word	0x0800948e

08007300 <__hi0bits>:
 8007300:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007304:	4603      	mov	r3, r0
 8007306:	bf36      	itet	cc
 8007308:	0403      	lslcc	r3, r0, #16
 800730a:	2000      	movcs	r0, #0
 800730c:	2010      	movcc	r0, #16
 800730e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007312:	bf3c      	itt	cc
 8007314:	021b      	lslcc	r3, r3, #8
 8007316:	3008      	addcc	r0, #8
 8007318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731c:	bf3c      	itt	cc
 800731e:	011b      	lslcc	r3, r3, #4
 8007320:	3004      	addcc	r0, #4
 8007322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007326:	bf3c      	itt	cc
 8007328:	009b      	lslcc	r3, r3, #2
 800732a:	3002      	addcc	r0, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	db05      	blt.n	800733c <__hi0bits+0x3c>
 8007330:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007334:	f100 0001 	add.w	r0, r0, #1
 8007338:	bf08      	it	eq
 800733a:	2020      	moveq	r0, #32
 800733c:	4770      	bx	lr

0800733e <__lo0bits>:
 800733e:	6803      	ldr	r3, [r0, #0]
 8007340:	4602      	mov	r2, r0
 8007342:	f013 0007 	ands.w	r0, r3, #7
 8007346:	d00b      	beq.n	8007360 <__lo0bits+0x22>
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	d421      	bmi.n	8007390 <__lo0bits+0x52>
 800734c:	0798      	lsls	r0, r3, #30
 800734e:	bf49      	itett	mi
 8007350:	085b      	lsrmi	r3, r3, #1
 8007352:	089b      	lsrpl	r3, r3, #2
 8007354:	2001      	movmi	r0, #1
 8007356:	6013      	strmi	r3, [r2, #0]
 8007358:	bf5c      	itt	pl
 800735a:	6013      	strpl	r3, [r2, #0]
 800735c:	2002      	movpl	r0, #2
 800735e:	4770      	bx	lr
 8007360:	b299      	uxth	r1, r3
 8007362:	b909      	cbnz	r1, 8007368 <__lo0bits+0x2a>
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	2010      	movs	r0, #16
 8007368:	b2d9      	uxtb	r1, r3
 800736a:	b909      	cbnz	r1, 8007370 <__lo0bits+0x32>
 800736c:	3008      	adds	r0, #8
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	0719      	lsls	r1, r3, #28
 8007372:	bf04      	itt	eq
 8007374:	091b      	lsreq	r3, r3, #4
 8007376:	3004      	addeq	r0, #4
 8007378:	0799      	lsls	r1, r3, #30
 800737a:	bf04      	itt	eq
 800737c:	089b      	lsreq	r3, r3, #2
 800737e:	3002      	addeq	r0, #2
 8007380:	07d9      	lsls	r1, r3, #31
 8007382:	d403      	bmi.n	800738c <__lo0bits+0x4e>
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	f100 0001 	add.w	r0, r0, #1
 800738a:	d003      	beq.n	8007394 <__lo0bits+0x56>
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4770      	bx	lr
 8007390:	2000      	movs	r0, #0
 8007392:	4770      	bx	lr
 8007394:	2020      	movs	r0, #32
 8007396:	4770      	bx	lr

08007398 <__i2b>:
 8007398:	b510      	push	{r4, lr}
 800739a:	460c      	mov	r4, r1
 800739c:	2101      	movs	r1, #1
 800739e:	f7ff ff07 	bl	80071b0 <_Balloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	b928      	cbnz	r0, 80073b2 <__i2b+0x1a>
 80073a6:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <__i2b+0x24>)
 80073a8:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <__i2b+0x28>)
 80073aa:	f240 1145 	movw	r1, #325	@ 0x145
 80073ae:	f001 fa13 	bl	80087d8 <__assert_func>
 80073b2:	2301      	movs	r3, #1
 80073b4:	6144      	str	r4, [r0, #20]
 80073b6:	6103      	str	r3, [r0, #16]
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	0800947d 	.word	0x0800947d
 80073c0:	0800948e 	.word	0x0800948e

080073c4 <__multiply>:
 80073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4617      	mov	r7, r2
 80073ca:	690a      	ldr	r2, [r1, #16]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bfa8      	it	ge
 80073d2:	463b      	movge	r3, r7
 80073d4:	4689      	mov	r9, r1
 80073d6:	bfa4      	itt	ge
 80073d8:	460f      	movge	r7, r1
 80073da:	4699      	movge	r9, r3
 80073dc:	693d      	ldr	r5, [r7, #16]
 80073de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	eb05 060a 	add.w	r6, r5, sl
 80073ea:	42b3      	cmp	r3, r6
 80073ec:	b085      	sub	sp, #20
 80073ee:	bfb8      	it	lt
 80073f0:	3101      	addlt	r1, #1
 80073f2:	f7ff fedd 	bl	80071b0 <_Balloc>
 80073f6:	b930      	cbnz	r0, 8007406 <__multiply+0x42>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b41      	ldr	r3, [pc, #260]	@ (8007500 <__multiply+0x13c>)
 80073fc:	4841      	ldr	r0, [pc, #260]	@ (8007504 <__multiply+0x140>)
 80073fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007402:	f001 f9e9 	bl	80087d8 <__assert_func>
 8007406:	f100 0414 	add.w	r4, r0, #20
 800740a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800740e:	4623      	mov	r3, r4
 8007410:	2200      	movs	r2, #0
 8007412:	4573      	cmp	r3, lr
 8007414:	d320      	bcc.n	8007458 <__multiply+0x94>
 8007416:	f107 0814 	add.w	r8, r7, #20
 800741a:	f109 0114 	add.w	r1, r9, #20
 800741e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007422:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	1beb      	subs	r3, r5, r7
 800742a:	3b15      	subs	r3, #21
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	3304      	adds	r3, #4
 8007432:	3715      	adds	r7, #21
 8007434:	42bd      	cmp	r5, r7
 8007436:	bf38      	it	cc
 8007438:	2304      	movcc	r3, #4
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	9b02      	ldr	r3, [sp, #8]
 800743e:	9103      	str	r1, [sp, #12]
 8007440:	428b      	cmp	r3, r1
 8007442:	d80c      	bhi.n	800745e <__multiply+0x9a>
 8007444:	2e00      	cmp	r6, #0
 8007446:	dd03      	ble.n	8007450 <__multiply+0x8c>
 8007448:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800744c:	2b00      	cmp	r3, #0
 800744e:	d055      	beq.n	80074fc <__multiply+0x138>
 8007450:	6106      	str	r6, [r0, #16]
 8007452:	b005      	add	sp, #20
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	f843 2b04 	str.w	r2, [r3], #4
 800745c:	e7d9      	b.n	8007412 <__multiply+0x4e>
 800745e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007462:	f1ba 0f00 	cmp.w	sl, #0
 8007466:	d01f      	beq.n	80074a8 <__multiply+0xe4>
 8007468:	46c4      	mov	ip, r8
 800746a:	46a1      	mov	r9, r4
 800746c:	2700      	movs	r7, #0
 800746e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007472:	f8d9 3000 	ldr.w	r3, [r9]
 8007476:	fa1f fb82 	uxth.w	fp, r2
 800747a:	b29b      	uxth	r3, r3
 800747c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007480:	443b      	add	r3, r7
 8007482:	f8d9 7000 	ldr.w	r7, [r9]
 8007486:	0c12      	lsrs	r2, r2, #16
 8007488:	0c3f      	lsrs	r7, r7, #16
 800748a:	fb0a 7202 	mla	r2, sl, r2, r7
 800748e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007498:	4565      	cmp	r5, ip
 800749a:	f849 3b04 	str.w	r3, [r9], #4
 800749e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80074a2:	d8e4      	bhi.n	800746e <__multiply+0xaa>
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	50e7      	str	r7, [r4, r3]
 80074a8:	9b03      	ldr	r3, [sp, #12]
 80074aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074ae:	3104      	adds	r1, #4
 80074b0:	f1b9 0f00 	cmp.w	r9, #0
 80074b4:	d020      	beq.n	80074f8 <__multiply+0x134>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	4647      	mov	r7, r8
 80074ba:	46a4      	mov	ip, r4
 80074bc:	f04f 0a00 	mov.w	sl, #0
 80074c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80074c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80074c8:	fb09 220b 	mla	r2, r9, fp, r2
 80074cc:	4452      	add	r2, sl
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d4:	f84c 3b04 	str.w	r3, [ip], #4
 80074d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80074dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80074e4:	fb09 330a 	mla	r3, r9, sl, r3
 80074e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80074ec:	42bd      	cmp	r5, r7
 80074ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074f2:	d8e5      	bhi.n	80074c0 <__multiply+0xfc>
 80074f4:	9a01      	ldr	r2, [sp, #4]
 80074f6:	50a3      	str	r3, [r4, r2]
 80074f8:	3404      	adds	r4, #4
 80074fa:	e79f      	b.n	800743c <__multiply+0x78>
 80074fc:	3e01      	subs	r6, #1
 80074fe:	e7a1      	b.n	8007444 <__multiply+0x80>
 8007500:	0800947d 	.word	0x0800947d
 8007504:	0800948e 	.word	0x0800948e

08007508 <__pow5mult>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	4615      	mov	r5, r2
 800750e:	f012 0203 	ands.w	r2, r2, #3
 8007512:	4607      	mov	r7, r0
 8007514:	460e      	mov	r6, r1
 8007516:	d007      	beq.n	8007528 <__pow5mult+0x20>
 8007518:	4c25      	ldr	r4, [pc, #148]	@ (80075b0 <__pow5mult+0xa8>)
 800751a:	3a01      	subs	r2, #1
 800751c:	2300      	movs	r3, #0
 800751e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007522:	f7ff fea7 	bl	8007274 <__multadd>
 8007526:	4606      	mov	r6, r0
 8007528:	10ad      	asrs	r5, r5, #2
 800752a:	d03d      	beq.n	80075a8 <__pow5mult+0xa0>
 800752c:	69fc      	ldr	r4, [r7, #28]
 800752e:	b97c      	cbnz	r4, 8007550 <__pow5mult+0x48>
 8007530:	2010      	movs	r0, #16
 8007532:	f7fd fffd 	bl	8005530 <malloc>
 8007536:	4602      	mov	r2, r0
 8007538:	61f8      	str	r0, [r7, #28]
 800753a:	b928      	cbnz	r0, 8007548 <__pow5mult+0x40>
 800753c:	4b1d      	ldr	r3, [pc, #116]	@ (80075b4 <__pow5mult+0xac>)
 800753e:	481e      	ldr	r0, [pc, #120]	@ (80075b8 <__pow5mult+0xb0>)
 8007540:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007544:	f001 f948 	bl	80087d8 <__assert_func>
 8007548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800754c:	6004      	str	r4, [r0, #0]
 800754e:	60c4      	str	r4, [r0, #12]
 8007550:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007558:	b94c      	cbnz	r4, 800756e <__pow5mult+0x66>
 800755a:	f240 2171 	movw	r1, #625	@ 0x271
 800755e:	4638      	mov	r0, r7
 8007560:	f7ff ff1a 	bl	8007398 <__i2b>
 8007564:	2300      	movs	r3, #0
 8007566:	f8c8 0008 	str.w	r0, [r8, #8]
 800756a:	4604      	mov	r4, r0
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	f04f 0900 	mov.w	r9, #0
 8007572:	07eb      	lsls	r3, r5, #31
 8007574:	d50a      	bpl.n	800758c <__pow5mult+0x84>
 8007576:	4631      	mov	r1, r6
 8007578:	4622      	mov	r2, r4
 800757a:	4638      	mov	r0, r7
 800757c:	f7ff ff22 	bl	80073c4 <__multiply>
 8007580:	4631      	mov	r1, r6
 8007582:	4680      	mov	r8, r0
 8007584:	4638      	mov	r0, r7
 8007586:	f7ff fe53 	bl	8007230 <_Bfree>
 800758a:	4646      	mov	r6, r8
 800758c:	106d      	asrs	r5, r5, #1
 800758e:	d00b      	beq.n	80075a8 <__pow5mult+0xa0>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	b938      	cbnz	r0, 80075a4 <__pow5mult+0x9c>
 8007594:	4622      	mov	r2, r4
 8007596:	4621      	mov	r1, r4
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff ff13 	bl	80073c4 <__multiply>
 800759e:	6020      	str	r0, [r4, #0]
 80075a0:	f8c0 9000 	str.w	r9, [r0]
 80075a4:	4604      	mov	r4, r0
 80075a6:	e7e4      	b.n	8007572 <__pow5mult+0x6a>
 80075a8:	4630      	mov	r0, r6
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	bf00      	nop
 80075b0:	08009550 	.word	0x08009550
 80075b4:	0800940e 	.word	0x0800940e
 80075b8:	0800948e 	.word	0x0800948e

080075bc <__lshift>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	6849      	ldr	r1, [r1, #4]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	4607      	mov	r7, r0
 80075ce:	4691      	mov	r9, r2
 80075d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075d4:	f108 0601 	add.w	r6, r8, #1
 80075d8:	42b3      	cmp	r3, r6
 80075da:	db0b      	blt.n	80075f4 <__lshift+0x38>
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff fde7 	bl	80071b0 <_Balloc>
 80075e2:	4605      	mov	r5, r0
 80075e4:	b948      	cbnz	r0, 80075fa <__lshift+0x3e>
 80075e6:	4602      	mov	r2, r0
 80075e8:	4b28      	ldr	r3, [pc, #160]	@ (800768c <__lshift+0xd0>)
 80075ea:	4829      	ldr	r0, [pc, #164]	@ (8007690 <__lshift+0xd4>)
 80075ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075f0:	f001 f8f2 	bl	80087d8 <__assert_func>
 80075f4:	3101      	adds	r1, #1
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	e7ee      	b.n	80075d8 <__lshift+0x1c>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f100 0114 	add.w	r1, r0, #20
 8007600:	f100 0210 	add.w	r2, r0, #16
 8007604:	4618      	mov	r0, r3
 8007606:	4553      	cmp	r3, sl
 8007608:	db33      	blt.n	8007672 <__lshift+0xb6>
 800760a:	6920      	ldr	r0, [r4, #16]
 800760c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007610:	f104 0314 	add.w	r3, r4, #20
 8007614:	f019 091f 	ands.w	r9, r9, #31
 8007618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800761c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007620:	d02b      	beq.n	800767a <__lshift+0xbe>
 8007622:	f1c9 0e20 	rsb	lr, r9, #32
 8007626:	468a      	mov	sl, r1
 8007628:	2200      	movs	r2, #0
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	fa00 f009 	lsl.w	r0, r0, r9
 8007630:	4310      	orrs	r0, r2
 8007632:	f84a 0b04 	str.w	r0, [sl], #4
 8007636:	f853 2b04 	ldr.w	r2, [r3], #4
 800763a:	459c      	cmp	ip, r3
 800763c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007640:	d8f3      	bhi.n	800762a <__lshift+0x6e>
 8007642:	ebac 0304 	sub.w	r3, ip, r4
 8007646:	3b15      	subs	r3, #21
 8007648:	f023 0303 	bic.w	r3, r3, #3
 800764c:	3304      	adds	r3, #4
 800764e:	f104 0015 	add.w	r0, r4, #21
 8007652:	4560      	cmp	r0, ip
 8007654:	bf88      	it	hi
 8007656:	2304      	movhi	r3, #4
 8007658:	50ca      	str	r2, [r1, r3]
 800765a:	b10a      	cbz	r2, 8007660 <__lshift+0xa4>
 800765c:	f108 0602 	add.w	r6, r8, #2
 8007660:	3e01      	subs	r6, #1
 8007662:	4638      	mov	r0, r7
 8007664:	612e      	str	r6, [r5, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	f7ff fde2 	bl	8007230 <_Bfree>
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	f842 0f04 	str.w	r0, [r2, #4]!
 8007676:	3301      	adds	r3, #1
 8007678:	e7c5      	b.n	8007606 <__lshift+0x4a>
 800767a:	3904      	subs	r1, #4
 800767c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007680:	f841 2f04 	str.w	r2, [r1, #4]!
 8007684:	459c      	cmp	ip, r3
 8007686:	d8f9      	bhi.n	800767c <__lshift+0xc0>
 8007688:	e7ea      	b.n	8007660 <__lshift+0xa4>
 800768a:	bf00      	nop
 800768c:	0800947d 	.word	0x0800947d
 8007690:	0800948e 	.word	0x0800948e

08007694 <__mcmp>:
 8007694:	690a      	ldr	r2, [r1, #16]
 8007696:	4603      	mov	r3, r0
 8007698:	6900      	ldr	r0, [r0, #16]
 800769a:	1a80      	subs	r0, r0, r2
 800769c:	b530      	push	{r4, r5, lr}
 800769e:	d10e      	bne.n	80076be <__mcmp+0x2a>
 80076a0:	3314      	adds	r3, #20
 80076a2:	3114      	adds	r1, #20
 80076a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076b4:	4295      	cmp	r5, r2
 80076b6:	d003      	beq.n	80076c0 <__mcmp+0x2c>
 80076b8:	d205      	bcs.n	80076c6 <__mcmp+0x32>
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	bd30      	pop	{r4, r5, pc}
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	d3f3      	bcc.n	80076ac <__mcmp+0x18>
 80076c4:	e7fb      	b.n	80076be <__mcmp+0x2a>
 80076c6:	2001      	movs	r0, #1
 80076c8:	e7f9      	b.n	80076be <__mcmp+0x2a>
	...

080076cc <__mdiff>:
 80076cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4689      	mov	r9, r1
 80076d2:	4606      	mov	r6, r0
 80076d4:	4611      	mov	r1, r2
 80076d6:	4648      	mov	r0, r9
 80076d8:	4614      	mov	r4, r2
 80076da:	f7ff ffdb 	bl	8007694 <__mcmp>
 80076de:	1e05      	subs	r5, r0, #0
 80076e0:	d112      	bne.n	8007708 <__mdiff+0x3c>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fd63 	bl	80071b0 <_Balloc>
 80076ea:	4602      	mov	r2, r0
 80076ec:	b928      	cbnz	r0, 80076fa <__mdiff+0x2e>
 80076ee:	4b3f      	ldr	r3, [pc, #252]	@ (80077ec <__mdiff+0x120>)
 80076f0:	f240 2137 	movw	r1, #567	@ 0x237
 80076f4:	483e      	ldr	r0, [pc, #248]	@ (80077f0 <__mdiff+0x124>)
 80076f6:	f001 f86f 	bl	80087d8 <__assert_func>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007700:	4610      	mov	r0, r2
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	bfbc      	itt	lt
 800770a:	464b      	movlt	r3, r9
 800770c:	46a1      	movlt	r9, r4
 800770e:	4630      	mov	r0, r6
 8007710:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007714:	bfba      	itte	lt
 8007716:	461c      	movlt	r4, r3
 8007718:	2501      	movlt	r5, #1
 800771a:	2500      	movge	r5, #0
 800771c:	f7ff fd48 	bl	80071b0 <_Balloc>
 8007720:	4602      	mov	r2, r0
 8007722:	b918      	cbnz	r0, 800772c <__mdiff+0x60>
 8007724:	4b31      	ldr	r3, [pc, #196]	@ (80077ec <__mdiff+0x120>)
 8007726:	f240 2145 	movw	r1, #581	@ 0x245
 800772a:	e7e3      	b.n	80076f4 <__mdiff+0x28>
 800772c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007730:	6926      	ldr	r6, [r4, #16]
 8007732:	60c5      	str	r5, [r0, #12]
 8007734:	f109 0310 	add.w	r3, r9, #16
 8007738:	f109 0514 	add.w	r5, r9, #20
 800773c:	f104 0e14 	add.w	lr, r4, #20
 8007740:	f100 0b14 	add.w	fp, r0, #20
 8007744:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007748:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	46d9      	mov	r9, fp
 8007750:	f04f 0c00 	mov.w	ip, #0
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	f85e 0b04 	ldr.w	r0, [lr], #4
 800775a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	fa1f f38a 	uxth.w	r3, sl
 8007764:	4619      	mov	r1, r3
 8007766:	b283      	uxth	r3, r0
 8007768:	1acb      	subs	r3, r1, r3
 800776a:	0c00      	lsrs	r0, r0, #16
 800776c:	4463      	add	r3, ip
 800776e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007772:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007776:	b29b      	uxth	r3, r3
 8007778:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800777c:	4576      	cmp	r6, lr
 800777e:	f849 3b04 	str.w	r3, [r9], #4
 8007782:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007786:	d8e5      	bhi.n	8007754 <__mdiff+0x88>
 8007788:	1b33      	subs	r3, r6, r4
 800778a:	3b15      	subs	r3, #21
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	3415      	adds	r4, #21
 8007792:	3304      	adds	r3, #4
 8007794:	42a6      	cmp	r6, r4
 8007796:	bf38      	it	cc
 8007798:	2304      	movcc	r3, #4
 800779a:	441d      	add	r5, r3
 800779c:	445b      	add	r3, fp
 800779e:	461e      	mov	r6, r3
 80077a0:	462c      	mov	r4, r5
 80077a2:	4544      	cmp	r4, r8
 80077a4:	d30e      	bcc.n	80077c4 <__mdiff+0xf8>
 80077a6:	f108 0103 	add.w	r1, r8, #3
 80077aa:	1b49      	subs	r1, r1, r5
 80077ac:	f021 0103 	bic.w	r1, r1, #3
 80077b0:	3d03      	subs	r5, #3
 80077b2:	45a8      	cmp	r8, r5
 80077b4:	bf38      	it	cc
 80077b6:	2100      	movcc	r1, #0
 80077b8:	440b      	add	r3, r1
 80077ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077be:	b191      	cbz	r1, 80077e6 <__mdiff+0x11a>
 80077c0:	6117      	str	r7, [r2, #16]
 80077c2:	e79d      	b.n	8007700 <__mdiff+0x34>
 80077c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80077c8:	46e6      	mov	lr, ip
 80077ca:	0c08      	lsrs	r0, r1, #16
 80077cc:	fa1c fc81 	uxtah	ip, ip, r1
 80077d0:	4471      	add	r1, lr
 80077d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077d6:	b289      	uxth	r1, r1
 80077d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077dc:	f846 1b04 	str.w	r1, [r6], #4
 80077e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077e4:	e7dd      	b.n	80077a2 <__mdiff+0xd6>
 80077e6:	3f01      	subs	r7, #1
 80077e8:	e7e7      	b.n	80077ba <__mdiff+0xee>
 80077ea:	bf00      	nop
 80077ec:	0800947d 	.word	0x0800947d
 80077f0:	0800948e 	.word	0x0800948e

080077f4 <__d2b>:
 80077f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077f8:	460f      	mov	r7, r1
 80077fa:	2101      	movs	r1, #1
 80077fc:	ec59 8b10 	vmov	r8, r9, d0
 8007800:	4616      	mov	r6, r2
 8007802:	f7ff fcd5 	bl	80071b0 <_Balloc>
 8007806:	4604      	mov	r4, r0
 8007808:	b930      	cbnz	r0, 8007818 <__d2b+0x24>
 800780a:	4602      	mov	r2, r0
 800780c:	4b23      	ldr	r3, [pc, #140]	@ (800789c <__d2b+0xa8>)
 800780e:	4824      	ldr	r0, [pc, #144]	@ (80078a0 <__d2b+0xac>)
 8007810:	f240 310f 	movw	r1, #783	@ 0x30f
 8007814:	f000 ffe0 	bl	80087d8 <__assert_func>
 8007818:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800781c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007820:	b10d      	cbz	r5, 8007826 <__d2b+0x32>
 8007822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	f1b8 0300 	subs.w	r3, r8, #0
 800782c:	d023      	beq.n	8007876 <__d2b+0x82>
 800782e:	4668      	mov	r0, sp
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	f7ff fd84 	bl	800733e <__lo0bits>
 8007836:	e9dd 1200 	ldrd	r1, r2, [sp]
 800783a:	b1d0      	cbz	r0, 8007872 <__d2b+0x7e>
 800783c:	f1c0 0320 	rsb	r3, r0, #32
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	430b      	orrs	r3, r1
 8007846:	40c2      	lsrs	r2, r0
 8007848:	6163      	str	r3, [r4, #20]
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	61a3      	str	r3, [r4, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	bf0c      	ite	eq
 8007854:	2201      	moveq	r2, #1
 8007856:	2202      	movne	r2, #2
 8007858:	6122      	str	r2, [r4, #16]
 800785a:	b1a5      	cbz	r5, 8007886 <__d2b+0x92>
 800785c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007860:	4405      	add	r5, r0
 8007862:	603d      	str	r5, [r7, #0]
 8007864:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007868:	6030      	str	r0, [r6, #0]
 800786a:	4620      	mov	r0, r4
 800786c:	b003      	add	sp, #12
 800786e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007872:	6161      	str	r1, [r4, #20]
 8007874:	e7ea      	b.n	800784c <__d2b+0x58>
 8007876:	a801      	add	r0, sp, #4
 8007878:	f7ff fd61 	bl	800733e <__lo0bits>
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	3020      	adds	r0, #32
 8007882:	2201      	movs	r2, #1
 8007884:	e7e8      	b.n	8007858 <__d2b+0x64>
 8007886:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800788a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800788e:	6038      	str	r0, [r7, #0]
 8007890:	6918      	ldr	r0, [r3, #16]
 8007892:	f7ff fd35 	bl	8007300 <__hi0bits>
 8007896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800789a:	e7e5      	b.n	8007868 <__d2b+0x74>
 800789c:	0800947d 	.word	0x0800947d
 80078a0:	0800948e 	.word	0x0800948e

080078a4 <_malloc_usable_size_r>:
 80078a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a8:	1f18      	subs	r0, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bfbc      	itt	lt
 80078ae:	580b      	ldrlt	r3, [r1, r0]
 80078b0:	18c0      	addlt	r0, r0, r3
 80078b2:	4770      	bx	lr

080078b4 <__ascii_wctomb>:
 80078b4:	4603      	mov	r3, r0
 80078b6:	4608      	mov	r0, r1
 80078b8:	b141      	cbz	r1, 80078cc <__ascii_wctomb+0x18>
 80078ba:	2aff      	cmp	r2, #255	@ 0xff
 80078bc:	d904      	bls.n	80078c8 <__ascii_wctomb+0x14>
 80078be:	228a      	movs	r2, #138	@ 0x8a
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295
 80078c6:	4770      	bx	lr
 80078c8:	700a      	strb	r2, [r1, #0]
 80078ca:	2001      	movs	r0, #1
 80078cc:	4770      	bx	lr

080078ce <__ssputs_r>:
 80078ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d2:	688e      	ldr	r6, [r1, #8]
 80078d4:	461f      	mov	r7, r3
 80078d6:	42be      	cmp	r6, r7
 80078d8:	680b      	ldr	r3, [r1, #0]
 80078da:	4682      	mov	sl, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	4690      	mov	r8, r2
 80078e0:	d82d      	bhi.n	800793e <__ssputs_r+0x70>
 80078e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078ea:	d026      	beq.n	800793a <__ssputs_r+0x6c>
 80078ec:	6965      	ldr	r5, [r4, #20]
 80078ee:	6909      	ldr	r1, [r1, #16]
 80078f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f4:	eba3 0901 	sub.w	r9, r3, r1
 80078f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078fc:	1c7b      	adds	r3, r7, #1
 80078fe:	444b      	add	r3, r9
 8007900:	106d      	asrs	r5, r5, #1
 8007902:	429d      	cmp	r5, r3
 8007904:	bf38      	it	cc
 8007906:	461d      	movcc	r5, r3
 8007908:	0553      	lsls	r3, r2, #21
 800790a:	d527      	bpl.n	800795c <__ssputs_r+0x8e>
 800790c:	4629      	mov	r1, r5
 800790e:	f7fd fe41 	bl	8005594 <_malloc_r>
 8007912:	4606      	mov	r6, r0
 8007914:	b360      	cbz	r0, 8007970 <__ssputs_r+0xa2>
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	464a      	mov	r2, r9
 800791a:	f7fe fd84 	bl	8006426 <memcpy>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	6126      	str	r6, [r4, #16]
 800792c:	6165      	str	r5, [r4, #20]
 800792e:	444e      	add	r6, r9
 8007930:	eba5 0509 	sub.w	r5, r5, r9
 8007934:	6026      	str	r6, [r4, #0]
 8007936:	60a5      	str	r5, [r4, #8]
 8007938:	463e      	mov	r6, r7
 800793a:	42be      	cmp	r6, r7
 800793c:	d900      	bls.n	8007940 <__ssputs_r+0x72>
 800793e:	463e      	mov	r6, r7
 8007940:	6820      	ldr	r0, [r4, #0]
 8007942:	4632      	mov	r2, r6
 8007944:	4641      	mov	r1, r8
 8007946:	f000 ff2d 	bl	80087a4 <memmove>
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	1b9b      	subs	r3, r3, r6
 800794e:	60a3      	str	r3, [r4, #8]
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	4433      	add	r3, r6
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	2000      	movs	r0, #0
 8007958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795c:	462a      	mov	r2, r5
 800795e:	f7fd fead 	bl	80056bc <_realloc_r>
 8007962:	4606      	mov	r6, r0
 8007964:	2800      	cmp	r0, #0
 8007966:	d1e0      	bne.n	800792a <__ssputs_r+0x5c>
 8007968:	6921      	ldr	r1, [r4, #16]
 800796a:	4650      	mov	r0, sl
 800796c:	f7ff fbc4 	bl	80070f8 <_free_r>
 8007970:	230c      	movs	r3, #12
 8007972:	f8ca 3000 	str.w	r3, [sl]
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	e7e9      	b.n	8007958 <__ssputs_r+0x8a>

08007984 <_svfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	4698      	mov	r8, r3
 800798a:	898b      	ldrh	r3, [r1, #12]
 800798c:	061b      	lsls	r3, r3, #24
 800798e:	b09d      	sub	sp, #116	@ 0x74
 8007990:	4607      	mov	r7, r0
 8007992:	460d      	mov	r5, r1
 8007994:	4614      	mov	r4, r2
 8007996:	d510      	bpl.n	80079ba <_svfiprintf_r+0x36>
 8007998:	690b      	ldr	r3, [r1, #16]
 800799a:	b973      	cbnz	r3, 80079ba <_svfiprintf_r+0x36>
 800799c:	2140      	movs	r1, #64	@ 0x40
 800799e:	f7fd fdf9 	bl	8005594 <_malloc_r>
 80079a2:	6028      	str	r0, [r5, #0]
 80079a4:	6128      	str	r0, [r5, #16]
 80079a6:	b930      	cbnz	r0, 80079b6 <_svfiprintf_r+0x32>
 80079a8:	230c      	movs	r3, #12
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	b01d      	add	sp, #116	@ 0x74
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	2340      	movs	r3, #64	@ 0x40
 80079b8:	616b      	str	r3, [r5, #20]
 80079ba:	2300      	movs	r3, #0
 80079bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079be:	2320      	movs	r3, #32
 80079c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c8:	2330      	movs	r3, #48	@ 0x30
 80079ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b68 <_svfiprintf_r+0x1e4>
 80079ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079d2:	f04f 0901 	mov.w	r9, #1
 80079d6:	4623      	mov	r3, r4
 80079d8:	469a      	mov	sl, r3
 80079da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079de:	b10a      	cbz	r2, 80079e4 <_svfiprintf_r+0x60>
 80079e0:	2a25      	cmp	r2, #37	@ 0x25
 80079e2:	d1f9      	bne.n	80079d8 <_svfiprintf_r+0x54>
 80079e4:	ebba 0b04 	subs.w	fp, sl, r4
 80079e8:	d00b      	beq.n	8007a02 <_svfiprintf_r+0x7e>
 80079ea:	465b      	mov	r3, fp
 80079ec:	4622      	mov	r2, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7ff ff6c 	bl	80078ce <__ssputs_r>
 80079f6:	3001      	adds	r0, #1
 80079f8:	f000 80a7 	beq.w	8007b4a <_svfiprintf_r+0x1c6>
 80079fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079fe:	445a      	add	r2, fp
 8007a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a02:	f89a 3000 	ldrb.w	r3, [sl]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 809f 	beq.w	8007b4a <_svfiprintf_r+0x1c6>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a16:	f10a 0a01 	add.w	sl, sl, #1
 8007a1a:	9304      	str	r3, [sp, #16]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a24:	4654      	mov	r4, sl
 8007a26:	2205      	movs	r2, #5
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	484e      	ldr	r0, [pc, #312]	@ (8007b68 <_svfiprintf_r+0x1e4>)
 8007a2e:	f7f8 fbef 	bl	8000210 <memchr>
 8007a32:	9a04      	ldr	r2, [sp, #16]
 8007a34:	b9d8      	cbnz	r0, 8007a6e <_svfiprintf_r+0xea>
 8007a36:	06d0      	lsls	r0, r2, #27
 8007a38:	bf44      	itt	mi
 8007a3a:	2320      	movmi	r3, #32
 8007a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a40:	0711      	lsls	r1, r2, #28
 8007a42:	bf44      	itt	mi
 8007a44:	232b      	movmi	r3, #43	@ 0x2b
 8007a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a50:	d015      	beq.n	8007a7e <_svfiprintf_r+0xfa>
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	4654      	mov	r4, sl
 8007a56:	2000      	movs	r0, #0
 8007a58:	f04f 0c0a 	mov.w	ip, #10
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a62:	3b30      	subs	r3, #48	@ 0x30
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d94b      	bls.n	8007b00 <_svfiprintf_r+0x17c>
 8007a68:	b1b0      	cbz	r0, 8007a98 <_svfiprintf_r+0x114>
 8007a6a:	9207      	str	r2, [sp, #28]
 8007a6c:	e014      	b.n	8007a98 <_svfiprintf_r+0x114>
 8007a6e:	eba0 0308 	sub.w	r3, r0, r8
 8007a72:	fa09 f303 	lsl.w	r3, r9, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	46a2      	mov	sl, r4
 8007a7c:	e7d2      	b.n	8007a24 <_svfiprintf_r+0xa0>
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	1d19      	adds	r1, r3, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	9103      	str	r1, [sp, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfbb      	ittet	lt
 8007a8a:	425b      	neglt	r3, r3
 8007a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a90:	9307      	strge	r3, [sp, #28]
 8007a92:	9307      	strlt	r3, [sp, #28]
 8007a94:	bfb8      	it	lt
 8007a96:	9204      	strlt	r2, [sp, #16]
 8007a98:	7823      	ldrb	r3, [r4, #0]
 8007a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a9c:	d10a      	bne.n	8007ab4 <_svfiprintf_r+0x130>
 8007a9e:	7863      	ldrb	r3, [r4, #1]
 8007aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa2:	d132      	bne.n	8007b0a <_svfiprintf_r+0x186>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9203      	str	r2, [sp, #12]
 8007aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ab0:	3402      	adds	r4, #2
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b78 <_svfiprintf_r+0x1f4>
 8007ab8:	7821      	ldrb	r1, [r4, #0]
 8007aba:	2203      	movs	r2, #3
 8007abc:	4650      	mov	r0, sl
 8007abe:	f7f8 fba7 	bl	8000210 <memchr>
 8007ac2:	b138      	cbz	r0, 8007ad4 <_svfiprintf_r+0x150>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	eba0 000a 	sub.w	r0, r0, sl
 8007aca:	2240      	movs	r2, #64	@ 0x40
 8007acc:	4082      	lsls	r2, r0
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	3401      	adds	r4, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad8:	4824      	ldr	r0, [pc, #144]	@ (8007b6c <_svfiprintf_r+0x1e8>)
 8007ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ade:	2206      	movs	r2, #6
 8007ae0:	f7f8 fb96 	bl	8000210 <memchr>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d036      	beq.n	8007b56 <_svfiprintf_r+0x1d2>
 8007ae8:	4b21      	ldr	r3, [pc, #132]	@ (8007b70 <_svfiprintf_r+0x1ec>)
 8007aea:	bb1b      	cbnz	r3, 8007b34 <_svfiprintf_r+0x1b0>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	3307      	adds	r3, #7
 8007af0:	f023 0307 	bic.w	r3, r3, #7
 8007af4:	3308      	adds	r3, #8
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	4433      	add	r3, r6
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	e76a      	b.n	80079d6 <_svfiprintf_r+0x52>
 8007b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b04:	460c      	mov	r4, r1
 8007b06:	2001      	movs	r0, #1
 8007b08:	e7a8      	b.n	8007a5c <_svfiprintf_r+0xd8>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	3401      	adds	r4, #1
 8007b0e:	9305      	str	r3, [sp, #20]
 8007b10:	4619      	mov	r1, r3
 8007b12:	f04f 0c0a 	mov.w	ip, #10
 8007b16:	4620      	mov	r0, r4
 8007b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1c:	3a30      	subs	r2, #48	@ 0x30
 8007b1e:	2a09      	cmp	r2, #9
 8007b20:	d903      	bls.n	8007b2a <_svfiprintf_r+0x1a6>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0c6      	beq.n	8007ab4 <_svfiprintf_r+0x130>
 8007b26:	9105      	str	r1, [sp, #20]
 8007b28:	e7c4      	b.n	8007ab4 <_svfiprintf_r+0x130>
 8007b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b2e:	4604      	mov	r4, r0
 8007b30:	2301      	movs	r3, #1
 8007b32:	e7f0      	b.n	8007b16 <_svfiprintf_r+0x192>
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b74 <_svfiprintf_r+0x1f0>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f7fd fe8a 	bl	8005858 <_printf_float>
 8007b44:	1c42      	adds	r2, r0, #1
 8007b46:	4606      	mov	r6, r0
 8007b48:	d1d6      	bne.n	8007af8 <_svfiprintf_r+0x174>
 8007b4a:	89ab      	ldrh	r3, [r5, #12]
 8007b4c:	065b      	lsls	r3, r3, #25
 8007b4e:	f53f af2d 	bmi.w	80079ac <_svfiprintf_r+0x28>
 8007b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b54:	e72c      	b.n	80079b0 <_svfiprintf_r+0x2c>
 8007b56:	ab03      	add	r3, sp, #12
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <_svfiprintf_r+0x1f0>)
 8007b5e:	a904      	add	r1, sp, #16
 8007b60:	4638      	mov	r0, r7
 8007b62:	f7fe f911 	bl	8005d88 <_printf_i>
 8007b66:	e7ed      	b.n	8007b44 <_svfiprintf_r+0x1c0>
 8007b68:	080094e7 	.word	0x080094e7
 8007b6c:	080094f1 	.word	0x080094f1
 8007b70:	08005859 	.word	0x08005859
 8007b74:	080078cf 	.word	0x080078cf
 8007b78:	080094ed 	.word	0x080094ed

08007b7c <_sungetc_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	1c4b      	adds	r3, r1, #1
 8007b80:	4614      	mov	r4, r2
 8007b82:	d103      	bne.n	8007b8c <_sungetc_r+0x10>
 8007b84:	f04f 35ff 	mov.w	r5, #4294967295
 8007b88:	4628      	mov	r0, r5
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	8993      	ldrh	r3, [r2, #12]
 8007b8e:	f023 0320 	bic.w	r3, r3, #32
 8007b92:	8193      	strh	r3, [r2, #12]
 8007b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b96:	6852      	ldr	r2, [r2, #4]
 8007b98:	b2cd      	uxtb	r5, r1
 8007b9a:	b18b      	cbz	r3, 8007bc0 <_sungetc_r+0x44>
 8007b9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	dd08      	ble.n	8007bb4 <_sungetc_r+0x38>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	1e5a      	subs	r2, r3, #1
 8007ba6:	6022      	str	r2, [r4, #0]
 8007ba8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	6063      	str	r3, [r4, #4]
 8007bb2:	e7e9      	b.n	8007b88 <_sungetc_r+0xc>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f000 fd26 	bl	8008606 <__submore>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0f1      	beq.n	8007ba2 <_sungetc_r+0x26>
 8007bbe:	e7e1      	b.n	8007b84 <_sungetc_r+0x8>
 8007bc0:	6921      	ldr	r1, [r4, #16]
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	b151      	cbz	r1, 8007bdc <_sungetc_r+0x60>
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	d208      	bcs.n	8007bdc <_sungetc_r+0x60>
 8007bca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007bce:	42a9      	cmp	r1, r5
 8007bd0:	d104      	bne.n	8007bdc <_sungetc_r+0x60>
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	3201      	adds	r2, #1
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	e7d5      	b.n	8007b88 <_sungetc_r+0xc>
 8007bdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8007be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007be6:	2303      	movs	r3, #3
 8007be8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007bea:	4623      	mov	r3, r4
 8007bec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e7dc      	b.n	8007bb0 <_sungetc_r+0x34>

08007bf6 <__ssrefill_r>:
 8007bf6:	b510      	push	{r4, lr}
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007bfc:	b169      	cbz	r1, 8007c1a <__ssrefill_r+0x24>
 8007bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c02:	4299      	cmp	r1, r3
 8007c04:	d001      	beq.n	8007c0a <__ssrefill_r+0x14>
 8007c06:	f7ff fa77 	bl	80070f8 <_free_r>
 8007c0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	2000      	movs	r0, #0
 8007c10:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c12:	b113      	cbz	r3, 8007c1a <__ssrefill_r+0x24>
 8007c14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f043 0320 	orr.w	r3, r3, #32
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2e:	e7f3      	b.n	8007c18 <__ssrefill_r+0x22>

08007c30 <__ssvfiscanf_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007c40:	49a6      	ldr	r1, [pc, #664]	@ (8007edc <__ssvfiscanf_r+0x2ac>)
 8007c42:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007c44:	f10d 0804 	add.w	r8, sp, #4
 8007c48:	49a5      	ldr	r1, [pc, #660]	@ (8007ee0 <__ssvfiscanf_r+0x2b0>)
 8007c4a:	4fa6      	ldr	r7, [pc, #664]	@ (8007ee4 <__ssvfiscanf_r+0x2b4>)
 8007c4c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007c50:	4606      	mov	r6, r0
 8007c52:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f892 9000 	ldrb.w	r9, [r2]
 8007c5a:	f1b9 0f00 	cmp.w	r9, #0
 8007c5e:	f000 8158 	beq.w	8007f12 <__ssvfiscanf_r+0x2e2>
 8007c62:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007c66:	f013 0308 	ands.w	r3, r3, #8
 8007c6a:	f102 0501 	add.w	r5, r2, #1
 8007c6e:	d019      	beq.n	8007ca4 <__ssvfiscanf_r+0x74>
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dd0f      	ble.n	8007c96 <__ssvfiscanf_r+0x66>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	5cba      	ldrb	r2, [r7, r2]
 8007c7c:	0712      	lsls	r2, r2, #28
 8007c7e:	d401      	bmi.n	8007c84 <__ssvfiscanf_r+0x54>
 8007c80:	462a      	mov	r2, r5
 8007c82:	e7e8      	b.n	8007c56 <__ssvfiscanf_r+0x26>
 8007c84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007c86:	3201      	adds	r2, #1
 8007c88:	9245      	str	r2, [sp, #276]	@ 0x114
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	3a01      	subs	r2, #1
 8007c90:	6062      	str	r2, [r4, #4]
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	e7ec      	b.n	8007c70 <__ssvfiscanf_r+0x40>
 8007c96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4798      	blx	r3
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0e9      	beq.n	8007c76 <__ssvfiscanf_r+0x46>
 8007ca2:	e7ed      	b.n	8007c80 <__ssvfiscanf_r+0x50>
 8007ca4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8007ca8:	f040 8085 	bne.w	8007db6 <__ssvfiscanf_r+0x186>
 8007cac:	9341      	str	r3, [sp, #260]	@ 0x104
 8007cae:	9343      	str	r3, [sp, #268]	@ 0x10c
 8007cb0:	7853      	ldrb	r3, [r2, #1]
 8007cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cb4:	bf02      	ittt	eq
 8007cb6:	2310      	moveq	r3, #16
 8007cb8:	1c95      	addeq	r5, r2, #2
 8007cba:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	46aa      	mov	sl, r5
 8007cc0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007cc4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d91e      	bls.n	8007d0a <__ssvfiscanf_r+0xda>
 8007ccc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8007ee8 <__ssvfiscanf_r+0x2b8>
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f7f8 fa9c 	bl	8000210 <memchr>
 8007cd8:	b138      	cbz	r0, 8007cea <__ssvfiscanf_r+0xba>
 8007cda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007cdc:	eba0 000b 	sub.w	r0, r0, fp
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4083      	lsls	r3, r0
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	9341      	str	r3, [sp, #260]	@ 0x104
 8007ce8:	4655      	mov	r5, sl
 8007cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cee:	2b78      	cmp	r3, #120	@ 0x78
 8007cf0:	d806      	bhi.n	8007d00 <__ssvfiscanf_r+0xd0>
 8007cf2:	2b57      	cmp	r3, #87	@ 0x57
 8007cf4:	d810      	bhi.n	8007d18 <__ssvfiscanf_r+0xe8>
 8007cf6:	2b25      	cmp	r3, #37	@ 0x25
 8007cf8:	d05d      	beq.n	8007db6 <__ssvfiscanf_r+0x186>
 8007cfa:	d857      	bhi.n	8007dac <__ssvfiscanf_r+0x17c>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d075      	beq.n	8007dec <__ssvfiscanf_r+0x1bc>
 8007d00:	2303      	movs	r3, #3
 8007d02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007d04:	230a      	movs	r3, #10
 8007d06:	9342      	str	r3, [sp, #264]	@ 0x108
 8007d08:	e088      	b.n	8007e1c <__ssvfiscanf_r+0x1ec>
 8007d0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007d0c:	fb02 1103 	mla	r1, r2, r3, r1
 8007d10:	3930      	subs	r1, #48	@ 0x30
 8007d12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007d14:	4655      	mov	r5, sl
 8007d16:	e7d2      	b.n	8007cbe <__ssvfiscanf_r+0x8e>
 8007d18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007d1c:	2a20      	cmp	r2, #32
 8007d1e:	d8ef      	bhi.n	8007d00 <__ssvfiscanf_r+0xd0>
 8007d20:	a101      	add	r1, pc, #4	@ (adr r1, 8007d28 <__ssvfiscanf_r+0xf8>)
 8007d22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007dfb 	.word	0x08007dfb
 8007d2c:	08007d01 	.word	0x08007d01
 8007d30:	08007d01 	.word	0x08007d01
 8007d34:	08007e55 	.word	0x08007e55
 8007d38:	08007d01 	.word	0x08007d01
 8007d3c:	08007d01 	.word	0x08007d01
 8007d40:	08007d01 	.word	0x08007d01
 8007d44:	08007d01 	.word	0x08007d01
 8007d48:	08007d01 	.word	0x08007d01
 8007d4c:	08007d01 	.word	0x08007d01
 8007d50:	08007d01 	.word	0x08007d01
 8007d54:	08007e6b 	.word	0x08007e6b
 8007d58:	08007e51 	.word	0x08007e51
 8007d5c:	08007db3 	.word	0x08007db3
 8007d60:	08007db3 	.word	0x08007db3
 8007d64:	08007db3 	.word	0x08007db3
 8007d68:	08007d01 	.word	0x08007d01
 8007d6c:	08007e0d 	.word	0x08007e0d
 8007d70:	08007d01 	.word	0x08007d01
 8007d74:	08007d01 	.word	0x08007d01
 8007d78:	08007d01 	.word	0x08007d01
 8007d7c:	08007d01 	.word	0x08007d01
 8007d80:	08007e7b 	.word	0x08007e7b
 8007d84:	08007e15 	.word	0x08007e15
 8007d88:	08007df3 	.word	0x08007df3
 8007d8c:	08007d01 	.word	0x08007d01
 8007d90:	08007d01 	.word	0x08007d01
 8007d94:	08007e77 	.word	0x08007e77
 8007d98:	08007d01 	.word	0x08007d01
 8007d9c:	08007e51 	.word	0x08007e51
 8007da0:	08007d01 	.word	0x08007d01
 8007da4:	08007d01 	.word	0x08007d01
 8007da8:	08007dfb 	.word	0x08007dfb
 8007dac:	3b45      	subs	r3, #69	@ 0x45
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d8a6      	bhi.n	8007d00 <__ssvfiscanf_r+0xd0>
 8007db2:	2305      	movs	r3, #5
 8007db4:	e031      	b.n	8007e1a <__ssvfiscanf_r+0x1ea>
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dd0d      	ble.n	8007dd8 <__ssvfiscanf_r+0x1a8>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	454a      	cmp	r2, r9
 8007dc2:	f040 80a6 	bne.w	8007f12 <__ssvfiscanf_r+0x2e2>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	6862      	ldr	r2, [r4, #4]
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6062      	str	r2, [r4, #4]
 8007dd4:	9345      	str	r3, [sp, #276]	@ 0x114
 8007dd6:	e753      	b.n	8007c80 <__ssvfiscanf_r+0x50>
 8007dd8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4798      	blx	r3
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0eb      	beq.n	8007dbc <__ssvfiscanf_r+0x18c>
 8007de4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f040 808b 	bne.w	8007f02 <__ssvfiscanf_r+0x2d2>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	e08b      	b.n	8007f0a <__ssvfiscanf_r+0x2da>
 8007df2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007df4:	f042 0220 	orr.w	r2, r2, #32
 8007df8:	9241      	str	r2, [sp, #260]	@ 0x104
 8007dfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007dfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e00:	9241      	str	r2, [sp, #260]	@ 0x104
 8007e02:	2210      	movs	r2, #16
 8007e04:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e06:	9242      	str	r2, [sp, #264]	@ 0x108
 8007e08:	d902      	bls.n	8007e10 <__ssvfiscanf_r+0x1e0>
 8007e0a:	e005      	b.n	8007e18 <__ssvfiscanf_r+0x1e8>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e10:	2303      	movs	r3, #3
 8007e12:	e002      	b.n	8007e1a <__ssvfiscanf_r+0x1ea>
 8007e14:	2308      	movs	r3, #8
 8007e16:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e18:	2304      	movs	r3, #4
 8007e1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd39      	ble.n	8007e96 <__ssvfiscanf_r+0x266>
 8007e22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e24:	0659      	lsls	r1, r3, #25
 8007e26:	d404      	bmi.n	8007e32 <__ssvfiscanf_r+0x202>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	781a      	ldrb	r2, [r3, #0]
 8007e2c:	5cba      	ldrb	r2, [r7, r2]
 8007e2e:	0712      	lsls	r2, r2, #28
 8007e30:	d438      	bmi.n	8007ea4 <__ssvfiscanf_r+0x274>
 8007e32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	dc47      	bgt.n	8007ec8 <__ssvfiscanf_r+0x298>
 8007e38:	466b      	mov	r3, sp
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	a941      	add	r1, sp, #260	@ 0x104
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f9ae 	bl	80081a0 <_scanf_chars>
 8007e44:	2801      	cmp	r0, #1
 8007e46:	d064      	beq.n	8007f12 <__ssvfiscanf_r+0x2e2>
 8007e48:	2802      	cmp	r0, #2
 8007e4a:	f47f af19 	bne.w	8007c80 <__ssvfiscanf_r+0x50>
 8007e4e:	e7c9      	b.n	8007de4 <__ssvfiscanf_r+0x1b4>
 8007e50:	220a      	movs	r2, #10
 8007e52:	e7d7      	b.n	8007e04 <__ssvfiscanf_r+0x1d4>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4640      	mov	r0, r8
 8007e58:	f000 fb9c 	bl	8008594 <__sccl>
 8007e5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e62:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e64:	4605      	mov	r5, r0
 8007e66:	2301      	movs	r3, #1
 8007e68:	e7d7      	b.n	8007e1a <__ssvfiscanf_r+0x1ea>
 8007e6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e70:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e72:	2300      	movs	r3, #0
 8007e74:	e7d1      	b.n	8007e1a <__ssvfiscanf_r+0x1ea>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e7cf      	b.n	8007e1a <__ssvfiscanf_r+0x1ea>
 8007e7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007e7c:	06c3      	lsls	r3, r0, #27
 8007e7e:	f53f aeff 	bmi.w	8007c80 <__ssvfiscanf_r+0x50>
 8007e82:	9b00      	ldr	r3, [sp, #0]
 8007e84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007e86:	1d19      	adds	r1, r3, #4
 8007e88:	9100      	str	r1, [sp, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	07c0      	lsls	r0, r0, #31
 8007e8e:	bf4c      	ite	mi
 8007e90:	801a      	strhmi	r2, [r3, #0]
 8007e92:	601a      	strpl	r2, [r3, #0]
 8007e94:	e6f4      	b.n	8007c80 <__ssvfiscanf_r+0x50>
 8007e96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4798      	blx	r3
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0bf      	beq.n	8007e22 <__ssvfiscanf_r+0x1f2>
 8007ea2:	e79f      	b.n	8007de4 <__ssvfiscanf_r+0x1b4>
 8007ea4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007ea6:	3201      	adds	r2, #1
 8007ea8:	9245      	str	r2, [sp, #276]	@ 0x114
 8007eaa:	6862      	ldr	r2, [r4, #4]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	6062      	str	r2, [r4, #4]
 8007eb2:	dd02      	ble.n	8007eba <__ssvfiscanf_r+0x28a>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	e7b6      	b.n	8007e28 <__ssvfiscanf_r+0x1f8>
 8007eba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4798      	blx	r3
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d0b0      	beq.n	8007e28 <__ssvfiscanf_r+0x1f8>
 8007ec6:	e78d      	b.n	8007de4 <__ssvfiscanf_r+0x1b4>
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	dc0f      	bgt.n	8007eec <__ssvfiscanf_r+0x2bc>
 8007ecc:	466b      	mov	r3, sp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	a941      	add	r1, sp, #260	@ 0x104
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f9be 	bl	8008254 <_scanf_i>
 8007ed8:	e7b4      	b.n	8007e44 <__ssvfiscanf_r+0x214>
 8007eda:	bf00      	nop
 8007edc:	08007b7d 	.word	0x08007b7d
 8007ee0:	08007bf7 	.word	0x08007bf7
 8007ee4:	080092c5 	.word	0x080092c5
 8007ee8:	080094ed 	.word	0x080094ed
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <__ssvfiscanf_r+0x2e8>)
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f43f aec6 	beq.w	8007c80 <__ssvfiscanf_r+0x50>
 8007ef4:	466b      	mov	r3, sp
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	a941      	add	r1, sp, #260	@ 0x104
 8007efa:	4630      	mov	r0, r6
 8007efc:	f3af 8000 	nop.w
 8007f00:	e7a0      	b.n	8007e44 <__ssvfiscanf_r+0x214>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	065b      	lsls	r3, r3, #25
 8007f06:	f53f af71 	bmi.w	8007dec <__ssvfiscanf_r+0x1bc>
 8007f0a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007f14:	e7f9      	b.n	8007f0a <__ssvfiscanf_r+0x2da>
 8007f16:	bf00      	nop
 8007f18:	00000000 	.word	0x00000000

08007f1c <__sfputc_r>:
 8007f1c:	6893      	ldr	r3, [r2, #8]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	b410      	push	{r4}
 8007f24:	6093      	str	r3, [r2, #8]
 8007f26:	da08      	bge.n	8007f3a <__sfputc_r+0x1e>
 8007f28:	6994      	ldr	r4, [r2, #24]
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	db01      	blt.n	8007f32 <__sfputc_r+0x16>
 8007f2e:	290a      	cmp	r1, #10
 8007f30:	d103      	bne.n	8007f3a <__sfputc_r+0x1e>
 8007f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f36:	f000 bba0 	b.w	800867a <__swbuf_r>
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	1c58      	adds	r0, r3, #1
 8007f3e:	6010      	str	r0, [r2, #0]
 8007f40:	7019      	strb	r1, [r3, #0]
 8007f42:	4608      	mov	r0, r1
 8007f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <__sfputs_r>:
 8007f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	460f      	mov	r7, r1
 8007f50:	4614      	mov	r4, r2
 8007f52:	18d5      	adds	r5, r2, r3
 8007f54:	42ac      	cmp	r4, r5
 8007f56:	d101      	bne.n	8007f5c <__sfputs_r+0x12>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e007      	b.n	8007f6c <__sfputs_r+0x22>
 8007f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f60:	463a      	mov	r2, r7
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ffda 	bl	8007f1c <__sfputc_r>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d1f3      	bne.n	8007f54 <__sfputs_r+0xa>
 8007f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f70 <_vfiprintf_r>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	460d      	mov	r5, r1
 8007f76:	b09d      	sub	sp, #116	@ 0x74
 8007f78:	4614      	mov	r4, r2
 8007f7a:	4698      	mov	r8, r3
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	b118      	cbz	r0, 8007f88 <_vfiprintf_r+0x18>
 8007f80:	6a03      	ldr	r3, [r0, #32]
 8007f82:	b90b      	cbnz	r3, 8007f88 <_vfiprintf_r+0x18>
 8007f84:	f7fe f8aa 	bl	80060dc <__sinit>
 8007f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f8a:	07d9      	lsls	r1, r3, #31
 8007f8c:	d405      	bmi.n	8007f9a <_vfiprintf_r+0x2a>
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	059a      	lsls	r2, r3, #22
 8007f92:	d402      	bmi.n	8007f9a <_vfiprintf_r+0x2a>
 8007f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f96:	f7fe fa44 	bl	8006422 <__retarget_lock_acquire_recursive>
 8007f9a:	89ab      	ldrh	r3, [r5, #12]
 8007f9c:	071b      	lsls	r3, r3, #28
 8007f9e:	d501      	bpl.n	8007fa4 <_vfiprintf_r+0x34>
 8007fa0:	692b      	ldr	r3, [r5, #16]
 8007fa2:	b99b      	cbnz	r3, 8007fcc <_vfiprintf_r+0x5c>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f000 fba6 	bl	80086f8 <__swsetup_r>
 8007fac:	b170      	cbz	r0, 8007fcc <_vfiprintf_r+0x5c>
 8007fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fb0:	07dc      	lsls	r4, r3, #31
 8007fb2:	d504      	bpl.n	8007fbe <_vfiprintf_r+0x4e>
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	b01d      	add	sp, #116	@ 0x74
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	0598      	lsls	r0, r3, #22
 8007fc2:	d4f7      	bmi.n	8007fb4 <_vfiprintf_r+0x44>
 8007fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fc6:	f7fe fa2d 	bl	8006424 <__retarget_lock_release_recursive>
 8007fca:	e7f3      	b.n	8007fb4 <_vfiprintf_r+0x44>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd0:	2320      	movs	r3, #32
 8007fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fda:	2330      	movs	r3, #48	@ 0x30
 8007fdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800818c <_vfiprintf_r+0x21c>
 8007fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fe4:	f04f 0901 	mov.w	r9, #1
 8007fe8:	4623      	mov	r3, r4
 8007fea:	469a      	mov	sl, r3
 8007fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff0:	b10a      	cbz	r2, 8007ff6 <_vfiprintf_r+0x86>
 8007ff2:	2a25      	cmp	r2, #37	@ 0x25
 8007ff4:	d1f9      	bne.n	8007fea <_vfiprintf_r+0x7a>
 8007ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8007ffa:	d00b      	beq.n	8008014 <_vfiprintf_r+0xa4>
 8007ffc:	465b      	mov	r3, fp
 8007ffe:	4622      	mov	r2, r4
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ffa1 	bl	8007f4a <__sfputs_r>
 8008008:	3001      	adds	r0, #1
 800800a:	f000 80a7 	beq.w	800815c <_vfiprintf_r+0x1ec>
 800800e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008010:	445a      	add	r2, fp
 8008012:	9209      	str	r2, [sp, #36]	@ 0x24
 8008014:	f89a 3000 	ldrb.w	r3, [sl]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 809f 	beq.w	800815c <_vfiprintf_r+0x1ec>
 800801e:	2300      	movs	r3, #0
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	9307      	str	r3, [sp, #28]
 8008030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008034:	931a      	str	r3, [sp, #104]	@ 0x68
 8008036:	4654      	mov	r4, sl
 8008038:	2205      	movs	r2, #5
 800803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803e:	4853      	ldr	r0, [pc, #332]	@ (800818c <_vfiprintf_r+0x21c>)
 8008040:	f7f8 f8e6 	bl	8000210 <memchr>
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	b9d8      	cbnz	r0, 8008080 <_vfiprintf_r+0x110>
 8008048:	06d1      	lsls	r1, r2, #27
 800804a:	bf44      	itt	mi
 800804c:	2320      	movmi	r3, #32
 800804e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008052:	0713      	lsls	r3, r2, #28
 8008054:	bf44      	itt	mi
 8008056:	232b      	movmi	r3, #43	@ 0x2b
 8008058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b2a      	cmp	r3, #42	@ 0x2a
 8008062:	d015      	beq.n	8008090 <_vfiprintf_r+0x120>
 8008064:	9a07      	ldr	r2, [sp, #28]
 8008066:	4654      	mov	r4, sl
 8008068:	2000      	movs	r0, #0
 800806a:	f04f 0c0a 	mov.w	ip, #10
 800806e:	4621      	mov	r1, r4
 8008070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008074:	3b30      	subs	r3, #48	@ 0x30
 8008076:	2b09      	cmp	r3, #9
 8008078:	d94b      	bls.n	8008112 <_vfiprintf_r+0x1a2>
 800807a:	b1b0      	cbz	r0, 80080aa <_vfiprintf_r+0x13a>
 800807c:	9207      	str	r2, [sp, #28]
 800807e:	e014      	b.n	80080aa <_vfiprintf_r+0x13a>
 8008080:	eba0 0308 	sub.w	r3, r0, r8
 8008084:	fa09 f303 	lsl.w	r3, r9, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	46a2      	mov	sl, r4
 800808e:	e7d2      	b.n	8008036 <_vfiprintf_r+0xc6>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	1d19      	adds	r1, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	9103      	str	r1, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfbb      	ittet	lt
 800809c:	425b      	neglt	r3, r3
 800809e:	f042 0202 	orrlt.w	r2, r2, #2
 80080a2:	9307      	strge	r3, [sp, #28]
 80080a4:	9307      	strlt	r3, [sp, #28]
 80080a6:	bfb8      	it	lt
 80080a8:	9204      	strlt	r2, [sp, #16]
 80080aa:	7823      	ldrb	r3, [r4, #0]
 80080ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ae:	d10a      	bne.n	80080c6 <_vfiprintf_r+0x156>
 80080b0:	7863      	ldrb	r3, [r4, #1]
 80080b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080b4:	d132      	bne.n	800811c <_vfiprintf_r+0x1ac>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9203      	str	r2, [sp, #12]
 80080be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080c2:	3402      	adds	r4, #2
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800819c <_vfiprintf_r+0x22c>
 80080ca:	7821      	ldrb	r1, [r4, #0]
 80080cc:	2203      	movs	r2, #3
 80080ce:	4650      	mov	r0, sl
 80080d0:	f7f8 f89e 	bl	8000210 <memchr>
 80080d4:	b138      	cbz	r0, 80080e6 <_vfiprintf_r+0x176>
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	eba0 000a 	sub.w	r0, r0, sl
 80080dc:	2240      	movs	r2, #64	@ 0x40
 80080de:	4082      	lsls	r2, r0
 80080e0:	4313      	orrs	r3, r2
 80080e2:	3401      	adds	r4, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ea:	4829      	ldr	r0, [pc, #164]	@ (8008190 <_vfiprintf_r+0x220>)
 80080ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080f0:	2206      	movs	r2, #6
 80080f2:	f7f8 f88d 	bl	8000210 <memchr>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d03f      	beq.n	800817a <_vfiprintf_r+0x20a>
 80080fa:	4b26      	ldr	r3, [pc, #152]	@ (8008194 <_vfiprintf_r+0x224>)
 80080fc:	bb1b      	cbnz	r3, 8008146 <_vfiprintf_r+0x1d6>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	f023 0307 	bic.w	r3, r3, #7
 8008106:	3308      	adds	r3, #8
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810c:	443b      	add	r3, r7
 800810e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008110:	e76a      	b.n	8007fe8 <_vfiprintf_r+0x78>
 8008112:	fb0c 3202 	mla	r2, ip, r2, r3
 8008116:	460c      	mov	r4, r1
 8008118:	2001      	movs	r0, #1
 800811a:	e7a8      	b.n	800806e <_vfiprintf_r+0xfe>
 800811c:	2300      	movs	r3, #0
 800811e:	3401      	adds	r4, #1
 8008120:	9305      	str	r3, [sp, #20]
 8008122:	4619      	mov	r1, r3
 8008124:	f04f 0c0a 	mov.w	ip, #10
 8008128:	4620      	mov	r0, r4
 800812a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812e:	3a30      	subs	r2, #48	@ 0x30
 8008130:	2a09      	cmp	r2, #9
 8008132:	d903      	bls.n	800813c <_vfiprintf_r+0x1cc>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0c6      	beq.n	80080c6 <_vfiprintf_r+0x156>
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	e7c4      	b.n	80080c6 <_vfiprintf_r+0x156>
 800813c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008140:	4604      	mov	r4, r0
 8008142:	2301      	movs	r3, #1
 8008144:	e7f0      	b.n	8008128 <_vfiprintf_r+0x1b8>
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4b12      	ldr	r3, [pc, #72]	@ (8008198 <_vfiprintf_r+0x228>)
 800814e:	a904      	add	r1, sp, #16
 8008150:	4630      	mov	r0, r6
 8008152:	f7fd fb81 	bl	8005858 <_printf_float>
 8008156:	4607      	mov	r7, r0
 8008158:	1c78      	adds	r0, r7, #1
 800815a:	d1d6      	bne.n	800810a <_vfiprintf_r+0x19a>
 800815c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800815e:	07d9      	lsls	r1, r3, #31
 8008160:	d405      	bmi.n	800816e <_vfiprintf_r+0x1fe>
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	059a      	lsls	r2, r3, #22
 8008166:	d402      	bmi.n	800816e <_vfiprintf_r+0x1fe>
 8008168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800816a:	f7fe f95b 	bl	8006424 <__retarget_lock_release_recursive>
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	065b      	lsls	r3, r3, #25
 8008172:	f53f af1f 	bmi.w	8007fb4 <_vfiprintf_r+0x44>
 8008176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008178:	e71e      	b.n	8007fb8 <_vfiprintf_r+0x48>
 800817a:	ab03      	add	r3, sp, #12
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	462a      	mov	r2, r5
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <_vfiprintf_r+0x228>)
 8008182:	a904      	add	r1, sp, #16
 8008184:	4630      	mov	r0, r6
 8008186:	f7fd fdff 	bl	8005d88 <_printf_i>
 800818a:	e7e4      	b.n	8008156 <_vfiprintf_r+0x1e6>
 800818c:	080094e7 	.word	0x080094e7
 8008190:	080094f1 	.word	0x080094f1
 8008194:	08005859 	.word	0x08005859
 8008198:	08007f4b 	.word	0x08007f4b
 800819c:	080094ed 	.word	0x080094ed

080081a0 <_scanf_chars>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	4615      	mov	r5, r2
 80081a6:	688a      	ldr	r2, [r1, #8]
 80081a8:	4680      	mov	r8, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b932      	cbnz	r2, 80081bc <_scanf_chars+0x1c>
 80081ae:	698a      	ldr	r2, [r1, #24]
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	bf14      	ite	ne
 80081b4:	f04f 32ff 	movne.w	r2, #4294967295
 80081b8:	2201      	moveq	r2, #1
 80081ba:	608a      	str	r2, [r1, #8]
 80081bc:	6822      	ldr	r2, [r4, #0]
 80081be:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008250 <_scanf_chars+0xb0>
 80081c2:	06d1      	lsls	r1, r2, #27
 80081c4:	bf5f      	itttt	pl
 80081c6:	681a      	ldrpl	r2, [r3, #0]
 80081c8:	1d11      	addpl	r1, r2, #4
 80081ca:	6019      	strpl	r1, [r3, #0]
 80081cc:	6816      	ldrpl	r6, [r2, #0]
 80081ce:	2700      	movs	r7, #0
 80081d0:	69a0      	ldr	r0, [r4, #24]
 80081d2:	b188      	cbz	r0, 80081f8 <_scanf_chars+0x58>
 80081d4:	2801      	cmp	r0, #1
 80081d6:	d107      	bne.n	80081e8 <_scanf_chars+0x48>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	6963      	ldr	r3, [r4, #20]
 80081de:	5c9b      	ldrb	r3, [r3, r2]
 80081e0:	b953      	cbnz	r3, 80081f8 <_scanf_chars+0x58>
 80081e2:	2f00      	cmp	r7, #0
 80081e4:	d031      	beq.n	800824a <_scanf_chars+0xaa>
 80081e6:	e022      	b.n	800822e <_scanf_chars+0x8e>
 80081e8:	2802      	cmp	r0, #2
 80081ea:	d120      	bne.n	800822e <_scanf_chars+0x8e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80081f4:	071b      	lsls	r3, r3, #28
 80081f6:	d41a      	bmi.n	800822e <_scanf_chars+0x8e>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	06da      	lsls	r2, r3, #27
 80081fc:	bf5e      	ittt	pl
 80081fe:	682b      	ldrpl	r3, [r5, #0]
 8008200:	781b      	ldrbpl	r3, [r3, #0]
 8008202:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008206:	682a      	ldr	r2, [r5, #0]
 8008208:	686b      	ldr	r3, [r5, #4]
 800820a:	3201      	adds	r2, #1
 800820c:	602a      	str	r2, [r5, #0]
 800820e:	68a2      	ldr	r2, [r4, #8]
 8008210:	3b01      	subs	r3, #1
 8008212:	3a01      	subs	r2, #1
 8008214:	606b      	str	r3, [r5, #4]
 8008216:	3701      	adds	r7, #1
 8008218:	60a2      	str	r2, [r4, #8]
 800821a:	b142      	cbz	r2, 800822e <_scanf_chars+0x8e>
 800821c:	2b00      	cmp	r3, #0
 800821e:	dcd7      	bgt.n	80081d0 <_scanf_chars+0x30>
 8008220:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008224:	4629      	mov	r1, r5
 8008226:	4640      	mov	r0, r8
 8008228:	4798      	blx	r3
 800822a:	2800      	cmp	r0, #0
 800822c:	d0d0      	beq.n	80081d0 <_scanf_chars+0x30>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	f013 0310 	ands.w	r3, r3, #16
 8008234:	d105      	bne.n	8008242 <_scanf_chars+0xa2>
 8008236:	68e2      	ldr	r2, [r4, #12]
 8008238:	3201      	adds	r2, #1
 800823a:	60e2      	str	r2, [r4, #12]
 800823c:	69a2      	ldr	r2, [r4, #24]
 800823e:	b102      	cbz	r2, 8008242 <_scanf_chars+0xa2>
 8008240:	7033      	strb	r3, [r6, #0]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	443b      	add	r3, r7
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	2000      	movs	r0, #0
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	bf00      	nop
 8008250:	080092c5 	.word	0x080092c5

08008254 <_scanf_i>:
 8008254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	4698      	mov	r8, r3
 800825a:	4b74      	ldr	r3, [pc, #464]	@ (800842c <_scanf_i+0x1d8>)
 800825c:	460c      	mov	r4, r1
 800825e:	4682      	mov	sl, r0
 8008260:	4616      	mov	r6, r2
 8008262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008266:	b087      	sub	sp, #28
 8008268:	ab03      	add	r3, sp, #12
 800826a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800826e:	4b70      	ldr	r3, [pc, #448]	@ (8008430 <_scanf_i+0x1dc>)
 8008270:	69a1      	ldr	r1, [r4, #24]
 8008272:	4a70      	ldr	r2, [pc, #448]	@ (8008434 <_scanf_i+0x1e0>)
 8008274:	2903      	cmp	r1, #3
 8008276:	bf08      	it	eq
 8008278:	461a      	moveq	r2, r3
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	9201      	str	r2, [sp, #4]
 800827e:	1e5a      	subs	r2, r3, #1
 8008280:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008284:	bf88      	it	hi
 8008286:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800828a:	4627      	mov	r7, r4
 800828c:	bf82      	ittt	hi
 800828e:	eb03 0905 	addhi.w	r9, r3, r5
 8008292:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008296:	60a3      	strhi	r3, [r4, #8]
 8008298:	f857 3b1c 	ldr.w	r3, [r7], #28
 800829c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80082a0:	bf98      	it	ls
 80082a2:	f04f 0900 	movls.w	r9, #0
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	463d      	mov	r5, r7
 80082aa:	f04f 0b00 	mov.w	fp, #0
 80082ae:	6831      	ldr	r1, [r6, #0]
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	7809      	ldrb	r1, [r1, #0]
 80082b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f7f7 ffa9 	bl	8000210 <memchr>
 80082be:	b328      	cbz	r0, 800830c <_scanf_i+0xb8>
 80082c0:	f1bb 0f01 	cmp.w	fp, #1
 80082c4:	d159      	bne.n	800837a <_scanf_i+0x126>
 80082c6:	6862      	ldr	r2, [r4, #4]
 80082c8:	b92a      	cbnz	r2, 80082d6 <_scanf_i+0x82>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	2108      	movs	r1, #8
 80082ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082d2:	6061      	str	r1, [r4, #4]
 80082d4:	6022      	str	r2, [r4, #0]
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80082dc:	6022      	str	r2, [r4, #0]
 80082de:	68a2      	ldr	r2, [r4, #8]
 80082e0:	1e51      	subs	r1, r2, #1
 80082e2:	60a1      	str	r1, [r4, #8]
 80082e4:	b192      	cbz	r2, 800830c <_scanf_i+0xb8>
 80082e6:	6832      	ldr	r2, [r6, #0]
 80082e8:	1c51      	adds	r1, r2, #1
 80082ea:	6031      	str	r1, [r6, #0]
 80082ec:	7812      	ldrb	r2, [r2, #0]
 80082ee:	f805 2b01 	strb.w	r2, [r5], #1
 80082f2:	6872      	ldr	r2, [r6, #4]
 80082f4:	3a01      	subs	r2, #1
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	6072      	str	r2, [r6, #4]
 80082fa:	dc07      	bgt.n	800830c <_scanf_i+0xb8>
 80082fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008300:	4631      	mov	r1, r6
 8008302:	4650      	mov	r0, sl
 8008304:	4790      	blx	r2
 8008306:	2800      	cmp	r0, #0
 8008308:	f040 8085 	bne.w	8008416 <_scanf_i+0x1c2>
 800830c:	f10b 0b01 	add.w	fp, fp, #1
 8008310:	f1bb 0f03 	cmp.w	fp, #3
 8008314:	d1cb      	bne.n	80082ae <_scanf_i+0x5a>
 8008316:	6863      	ldr	r3, [r4, #4]
 8008318:	b90b      	cbnz	r3, 800831e <_scanf_i+0xca>
 800831a:	230a      	movs	r3, #10
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	4945      	ldr	r1, [pc, #276]	@ (8008438 <_scanf_i+0x1e4>)
 8008322:	6960      	ldr	r0, [r4, #20]
 8008324:	1ac9      	subs	r1, r1, r3
 8008326:	f000 f935 	bl	8008594 <__sccl>
 800832a:	f04f 0b00 	mov.w	fp, #0
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	6822      	ldr	r2, [r4, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d03d      	beq.n	80083b2 <_scanf_i+0x15e>
 8008336:	6831      	ldr	r1, [r6, #0]
 8008338:	6960      	ldr	r0, [r4, #20]
 800833a:	f891 c000 	ldrb.w	ip, [r1]
 800833e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008342:	2800      	cmp	r0, #0
 8008344:	d035      	beq.n	80083b2 <_scanf_i+0x15e>
 8008346:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800834a:	d124      	bne.n	8008396 <_scanf_i+0x142>
 800834c:	0510      	lsls	r0, r2, #20
 800834e:	d522      	bpl.n	8008396 <_scanf_i+0x142>
 8008350:	f10b 0b01 	add.w	fp, fp, #1
 8008354:	f1b9 0f00 	cmp.w	r9, #0
 8008358:	d003      	beq.n	8008362 <_scanf_i+0x10e>
 800835a:	3301      	adds	r3, #1
 800835c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008360:	60a3      	str	r3, [r4, #8]
 8008362:	6873      	ldr	r3, [r6, #4]
 8008364:	3b01      	subs	r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	6073      	str	r3, [r6, #4]
 800836a:	dd1b      	ble.n	80083a4 <_scanf_i+0x150>
 800836c:	6833      	ldr	r3, [r6, #0]
 800836e:	3301      	adds	r3, #1
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	3b01      	subs	r3, #1
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	e7d9      	b.n	800832e <_scanf_i+0xda>
 800837a:	f1bb 0f02 	cmp.w	fp, #2
 800837e:	d1ae      	bne.n	80082de <_scanf_i+0x8a>
 8008380:	6822      	ldr	r2, [r4, #0]
 8008382:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008386:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800838a:	d1c4      	bne.n	8008316 <_scanf_i+0xc2>
 800838c:	2110      	movs	r1, #16
 800838e:	6061      	str	r1, [r4, #4]
 8008390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008394:	e7a2      	b.n	80082dc <_scanf_i+0x88>
 8008396:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800839a:	6022      	str	r2, [r4, #0]
 800839c:	780b      	ldrb	r3, [r1, #0]
 800839e:	f805 3b01 	strb.w	r3, [r5], #1
 80083a2:	e7de      	b.n	8008362 <_scanf_i+0x10e>
 80083a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80083a8:	4631      	mov	r1, r6
 80083aa:	4650      	mov	r0, sl
 80083ac:	4798      	blx	r3
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d0df      	beq.n	8008372 <_scanf_i+0x11e>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	05d9      	lsls	r1, r3, #23
 80083b6:	d50d      	bpl.n	80083d4 <_scanf_i+0x180>
 80083b8:	42bd      	cmp	r5, r7
 80083ba:	d909      	bls.n	80083d0 <_scanf_i+0x17c>
 80083bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80083c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083c4:	4632      	mov	r2, r6
 80083c6:	4650      	mov	r0, sl
 80083c8:	4798      	blx	r3
 80083ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80083ce:	464d      	mov	r5, r9
 80083d0:	42bd      	cmp	r5, r7
 80083d2:	d028      	beq.n	8008426 <_scanf_i+0x1d2>
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	f012 0210 	ands.w	r2, r2, #16
 80083da:	d113      	bne.n	8008404 <_scanf_i+0x1b0>
 80083dc:	702a      	strb	r2, [r5, #0]
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	9e01      	ldr	r6, [sp, #4]
 80083e2:	4639      	mov	r1, r7
 80083e4:	4650      	mov	r0, sl
 80083e6:	47b0      	blx	r6
 80083e8:	f8d8 3000 	ldr.w	r3, [r8]
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	f8c8 2000 	str.w	r2, [r8]
 80083f4:	f011 0f20 	tst.w	r1, #32
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	d00f      	beq.n	800841c <_scanf_i+0x1c8>
 80083fc:	6018      	str	r0, [r3, #0]
 80083fe:	68e3      	ldr	r3, [r4, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60e3      	str	r3, [r4, #12]
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	1bed      	subs	r5, r5, r7
 8008408:	445d      	add	r5, fp
 800840a:	442b      	add	r3, r5
 800840c:	6123      	str	r3, [r4, #16]
 800840e:	2000      	movs	r0, #0
 8008410:	b007      	add	sp, #28
 8008412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008416:	f04f 0b00 	mov.w	fp, #0
 800841a:	e7ca      	b.n	80083b2 <_scanf_i+0x15e>
 800841c:	07ca      	lsls	r2, r1, #31
 800841e:	bf4c      	ite	mi
 8008420:	8018      	strhmi	r0, [r3, #0]
 8008422:	6018      	strpl	r0, [r3, #0]
 8008424:	e7eb      	b.n	80083fe <_scanf_i+0x1aa>
 8008426:	2001      	movs	r0, #1
 8008428:	e7f2      	b.n	8008410 <_scanf_i+0x1bc>
 800842a:	bf00      	nop
 800842c:	0800909c 	.word	0x0800909c
 8008430:	08008931 	.word	0x08008931
 8008434:	08008a11 	.word	0x08008a11
 8008438:	08009508 	.word	0x08009508

0800843c <__sflush_r>:
 800843c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008444:	0716      	lsls	r6, r2, #28
 8008446:	4605      	mov	r5, r0
 8008448:	460c      	mov	r4, r1
 800844a:	d454      	bmi.n	80084f6 <__sflush_r+0xba>
 800844c:	684b      	ldr	r3, [r1, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dc02      	bgt.n	8008458 <__sflush_r+0x1c>
 8008452:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	dd48      	ble.n	80084ea <__sflush_r+0xae>
 8008458:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800845a:	2e00      	cmp	r6, #0
 800845c:	d045      	beq.n	80084ea <__sflush_r+0xae>
 800845e:	2300      	movs	r3, #0
 8008460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008464:	682f      	ldr	r7, [r5, #0]
 8008466:	6a21      	ldr	r1, [r4, #32]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	d030      	beq.n	80084ce <__sflush_r+0x92>
 800846c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	0759      	lsls	r1, r3, #29
 8008472:	d505      	bpl.n	8008480 <__sflush_r+0x44>
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800847a:	b10b      	cbz	r3, 8008480 <__sflush_r+0x44>
 800847c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008484:	6a21      	ldr	r1, [r4, #32]
 8008486:	4628      	mov	r0, r5
 8008488:	47b0      	blx	r6
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	d106      	bne.n	800849e <__sflush_r+0x62>
 8008490:	6829      	ldr	r1, [r5, #0]
 8008492:	291d      	cmp	r1, #29
 8008494:	d82b      	bhi.n	80084ee <__sflush_r+0xb2>
 8008496:	4a2a      	ldr	r2, [pc, #168]	@ (8008540 <__sflush_r+0x104>)
 8008498:	40ca      	lsrs	r2, r1
 800849a:	07d6      	lsls	r6, r2, #31
 800849c:	d527      	bpl.n	80084ee <__sflush_r+0xb2>
 800849e:	2200      	movs	r2, #0
 80084a0:	6062      	str	r2, [r4, #4]
 80084a2:	04d9      	lsls	r1, r3, #19
 80084a4:	6922      	ldr	r2, [r4, #16]
 80084a6:	6022      	str	r2, [r4, #0]
 80084a8:	d504      	bpl.n	80084b4 <__sflush_r+0x78>
 80084aa:	1c42      	adds	r2, r0, #1
 80084ac:	d101      	bne.n	80084b2 <__sflush_r+0x76>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	b903      	cbnz	r3, 80084b4 <__sflush_r+0x78>
 80084b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80084b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b6:	602f      	str	r7, [r5, #0]
 80084b8:	b1b9      	cbz	r1, 80084ea <__sflush_r+0xae>
 80084ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084be:	4299      	cmp	r1, r3
 80084c0:	d002      	beq.n	80084c8 <__sflush_r+0x8c>
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7fe fe18 	bl	80070f8 <_free_r>
 80084c8:	2300      	movs	r3, #0
 80084ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80084cc:	e00d      	b.n	80084ea <__sflush_r+0xae>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b0      	blx	r6
 80084d4:	4602      	mov	r2, r0
 80084d6:	1c50      	adds	r0, r2, #1
 80084d8:	d1c9      	bne.n	800846e <__sflush_r+0x32>
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d0c6      	beq.n	800846e <__sflush_r+0x32>
 80084e0:	2b1d      	cmp	r3, #29
 80084e2:	d001      	beq.n	80084e8 <__sflush_r+0xac>
 80084e4:	2b16      	cmp	r3, #22
 80084e6:	d11e      	bne.n	8008526 <__sflush_r+0xea>
 80084e8:	602f      	str	r7, [r5, #0]
 80084ea:	2000      	movs	r0, #0
 80084ec:	e022      	b.n	8008534 <__sflush_r+0xf8>
 80084ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f2:	b21b      	sxth	r3, r3
 80084f4:	e01b      	b.n	800852e <__sflush_r+0xf2>
 80084f6:	690f      	ldr	r7, [r1, #16]
 80084f8:	2f00      	cmp	r7, #0
 80084fa:	d0f6      	beq.n	80084ea <__sflush_r+0xae>
 80084fc:	0793      	lsls	r3, r2, #30
 80084fe:	680e      	ldr	r6, [r1, #0]
 8008500:	bf08      	it	eq
 8008502:	694b      	ldreq	r3, [r1, #20]
 8008504:	600f      	str	r7, [r1, #0]
 8008506:	bf18      	it	ne
 8008508:	2300      	movne	r3, #0
 800850a:	eba6 0807 	sub.w	r8, r6, r7
 800850e:	608b      	str	r3, [r1, #8]
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	dde9      	ble.n	80084ea <__sflush_r+0xae>
 8008516:	6a21      	ldr	r1, [r4, #32]
 8008518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800851a:	4643      	mov	r3, r8
 800851c:	463a      	mov	r2, r7
 800851e:	4628      	mov	r0, r5
 8008520:	47b0      	blx	r6
 8008522:	2800      	cmp	r0, #0
 8008524:	dc08      	bgt.n	8008538 <__sflush_r+0xfc>
 8008526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008538:	4407      	add	r7, r0
 800853a:	eba8 0800 	sub.w	r8, r8, r0
 800853e:	e7e7      	b.n	8008510 <__sflush_r+0xd4>
 8008540:	20400001 	.word	0x20400001

08008544 <_fflush_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	b913      	cbnz	r3, 8008554 <_fflush_r+0x10>
 800854e:	2500      	movs	r5, #0
 8008550:	4628      	mov	r0, r5
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	b118      	cbz	r0, 800855e <_fflush_r+0x1a>
 8008556:	6a03      	ldr	r3, [r0, #32]
 8008558:	b90b      	cbnz	r3, 800855e <_fflush_r+0x1a>
 800855a:	f7fd fdbf 	bl	80060dc <__sinit>
 800855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0f3      	beq.n	800854e <_fflush_r+0xa>
 8008566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008568:	07d0      	lsls	r0, r2, #31
 800856a:	d404      	bmi.n	8008576 <_fflush_r+0x32>
 800856c:	0599      	lsls	r1, r3, #22
 800856e:	d402      	bmi.n	8008576 <_fflush_r+0x32>
 8008570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008572:	f7fd ff56 	bl	8006422 <__retarget_lock_acquire_recursive>
 8008576:	4628      	mov	r0, r5
 8008578:	4621      	mov	r1, r4
 800857a:	f7ff ff5f 	bl	800843c <__sflush_r>
 800857e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008580:	07da      	lsls	r2, r3, #31
 8008582:	4605      	mov	r5, r0
 8008584:	d4e4      	bmi.n	8008550 <_fflush_r+0xc>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	059b      	lsls	r3, r3, #22
 800858a:	d4e1      	bmi.n	8008550 <_fflush_r+0xc>
 800858c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858e:	f7fd ff49 	bl	8006424 <__retarget_lock_release_recursive>
 8008592:	e7dd      	b.n	8008550 <_fflush_r+0xc>

08008594 <__sccl>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	780b      	ldrb	r3, [r1, #0]
 8008598:	4604      	mov	r4, r0
 800859a:	2b5e      	cmp	r3, #94	@ 0x5e
 800859c:	bf0b      	itete	eq
 800859e:	784b      	ldrbeq	r3, [r1, #1]
 80085a0:	1c4a      	addne	r2, r1, #1
 80085a2:	1c8a      	addeq	r2, r1, #2
 80085a4:	2100      	movne	r1, #0
 80085a6:	bf08      	it	eq
 80085a8:	2101      	moveq	r1, #1
 80085aa:	3801      	subs	r0, #1
 80085ac:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80085b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80085b4:	42a8      	cmp	r0, r5
 80085b6:	d1fb      	bne.n	80085b0 <__sccl+0x1c>
 80085b8:	b90b      	cbnz	r3, 80085be <__sccl+0x2a>
 80085ba:	1e50      	subs	r0, r2, #1
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	f081 0101 	eor.w	r1, r1, #1
 80085c2:	54e1      	strb	r1, [r4, r3]
 80085c4:	4610      	mov	r0, r2
 80085c6:	4602      	mov	r2, r0
 80085c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80085cc:	2d2d      	cmp	r5, #45	@ 0x2d
 80085ce:	d005      	beq.n	80085dc <__sccl+0x48>
 80085d0:	2d5d      	cmp	r5, #93	@ 0x5d
 80085d2:	d016      	beq.n	8008602 <__sccl+0x6e>
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	d0f1      	beq.n	80085bc <__sccl+0x28>
 80085d8:	462b      	mov	r3, r5
 80085da:	e7f2      	b.n	80085c2 <__sccl+0x2e>
 80085dc:	7846      	ldrb	r6, [r0, #1]
 80085de:	2e5d      	cmp	r6, #93	@ 0x5d
 80085e0:	d0fa      	beq.n	80085d8 <__sccl+0x44>
 80085e2:	42b3      	cmp	r3, r6
 80085e4:	dcf8      	bgt.n	80085d8 <__sccl+0x44>
 80085e6:	3002      	adds	r0, #2
 80085e8:	461a      	mov	r2, r3
 80085ea:	3201      	adds	r2, #1
 80085ec:	4296      	cmp	r6, r2
 80085ee:	54a1      	strb	r1, [r4, r2]
 80085f0:	dcfb      	bgt.n	80085ea <__sccl+0x56>
 80085f2:	1af2      	subs	r2, r6, r3
 80085f4:	3a01      	subs	r2, #1
 80085f6:	1c5d      	adds	r5, r3, #1
 80085f8:	42b3      	cmp	r3, r6
 80085fa:	bfa8      	it	ge
 80085fc:	2200      	movge	r2, #0
 80085fe:	18ab      	adds	r3, r5, r2
 8008600:	e7e1      	b.n	80085c6 <__sccl+0x32>
 8008602:	4610      	mov	r0, r2
 8008604:	e7da      	b.n	80085bc <__sccl+0x28>

08008606 <__submore>:
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800860e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008612:	4299      	cmp	r1, r3
 8008614:	d11d      	bne.n	8008652 <__submore+0x4c>
 8008616:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800861a:	f7fc ffbb 	bl	8005594 <_malloc_r>
 800861e:	b918      	cbnz	r0, 8008628 <__submore+0x22>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800862c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800862e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008632:	6360      	str	r0, [r4, #52]	@ 0x34
 8008634:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008638:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800863c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008640:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008644:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008648:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800864c:	6020      	str	r0, [r4, #0]
 800864e:	2000      	movs	r0, #0
 8008650:	e7e8      	b.n	8008624 <__submore+0x1e>
 8008652:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008654:	0077      	lsls	r7, r6, #1
 8008656:	463a      	mov	r2, r7
 8008658:	f7fd f830 	bl	80056bc <_realloc_r>
 800865c:	4605      	mov	r5, r0
 800865e:	2800      	cmp	r0, #0
 8008660:	d0de      	beq.n	8008620 <__submore+0x1a>
 8008662:	eb00 0806 	add.w	r8, r0, r6
 8008666:	4601      	mov	r1, r0
 8008668:	4632      	mov	r2, r6
 800866a:	4640      	mov	r0, r8
 800866c:	f7fd fedb 	bl	8006426 <memcpy>
 8008670:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008674:	f8c4 8000 	str.w	r8, [r4]
 8008678:	e7e9      	b.n	800864e <__submore+0x48>

0800867a <__swbuf_r>:
 800867a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867c:	460e      	mov	r6, r1
 800867e:	4614      	mov	r4, r2
 8008680:	4605      	mov	r5, r0
 8008682:	b118      	cbz	r0, 800868c <__swbuf_r+0x12>
 8008684:	6a03      	ldr	r3, [r0, #32]
 8008686:	b90b      	cbnz	r3, 800868c <__swbuf_r+0x12>
 8008688:	f7fd fd28 	bl	80060dc <__sinit>
 800868c:	69a3      	ldr	r3, [r4, #24]
 800868e:	60a3      	str	r3, [r4, #8]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	071a      	lsls	r2, r3, #28
 8008694:	d501      	bpl.n	800869a <__swbuf_r+0x20>
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	b943      	cbnz	r3, 80086ac <__swbuf_r+0x32>
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f000 f82b 	bl	80086f8 <__swsetup_r>
 80086a2:	b118      	cbz	r0, 80086ac <__swbuf_r+0x32>
 80086a4:	f04f 37ff 	mov.w	r7, #4294967295
 80086a8:	4638      	mov	r0, r7
 80086aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	1a98      	subs	r0, r3, r2
 80086b2:	6963      	ldr	r3, [r4, #20]
 80086b4:	b2f6      	uxtb	r6, r6
 80086b6:	4283      	cmp	r3, r0
 80086b8:	4637      	mov	r7, r6
 80086ba:	dc05      	bgt.n	80086c8 <__swbuf_r+0x4e>
 80086bc:	4621      	mov	r1, r4
 80086be:	4628      	mov	r0, r5
 80086c0:	f7ff ff40 	bl	8008544 <_fflush_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d1ed      	bne.n	80086a4 <__swbuf_r+0x2a>
 80086c8:	68a3      	ldr	r3, [r4, #8]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	60a3      	str	r3, [r4, #8]
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	6022      	str	r2, [r4, #0]
 80086d4:	701e      	strb	r6, [r3, #0]
 80086d6:	6962      	ldr	r2, [r4, #20]
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	429a      	cmp	r2, r3
 80086dc:	d004      	beq.n	80086e8 <__swbuf_r+0x6e>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	07db      	lsls	r3, r3, #31
 80086e2:	d5e1      	bpl.n	80086a8 <__swbuf_r+0x2e>
 80086e4:	2e0a      	cmp	r6, #10
 80086e6:	d1df      	bne.n	80086a8 <__swbuf_r+0x2e>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7ff ff2a 	bl	8008544 <_fflush_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0d9      	beq.n	80086a8 <__swbuf_r+0x2e>
 80086f4:	e7d6      	b.n	80086a4 <__swbuf_r+0x2a>
	...

080086f8 <__swsetup_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4b29      	ldr	r3, [pc, #164]	@ (80087a0 <__swsetup_r+0xa8>)
 80086fc:	4605      	mov	r5, r0
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	460c      	mov	r4, r1
 8008702:	b118      	cbz	r0, 800870c <__swsetup_r+0x14>
 8008704:	6a03      	ldr	r3, [r0, #32]
 8008706:	b90b      	cbnz	r3, 800870c <__swsetup_r+0x14>
 8008708:	f7fd fce8 	bl	80060dc <__sinit>
 800870c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008710:	0719      	lsls	r1, r3, #28
 8008712:	d422      	bmi.n	800875a <__swsetup_r+0x62>
 8008714:	06da      	lsls	r2, r3, #27
 8008716:	d407      	bmi.n	8008728 <__swsetup_r+0x30>
 8008718:	2209      	movs	r2, #9
 800871a:	602a      	str	r2, [r5, #0]
 800871c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008720:	81a3      	strh	r3, [r4, #12]
 8008722:	f04f 30ff 	mov.w	r0, #4294967295
 8008726:	e033      	b.n	8008790 <__swsetup_r+0x98>
 8008728:	0758      	lsls	r0, r3, #29
 800872a:	d512      	bpl.n	8008752 <__swsetup_r+0x5a>
 800872c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800872e:	b141      	cbz	r1, 8008742 <__swsetup_r+0x4a>
 8008730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008734:	4299      	cmp	r1, r3
 8008736:	d002      	beq.n	800873e <__swsetup_r+0x46>
 8008738:	4628      	mov	r0, r5
 800873a:	f7fe fcdd 	bl	80070f8 <_free_r>
 800873e:	2300      	movs	r3, #0
 8008740:	6363      	str	r3, [r4, #52]	@ 0x34
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	2300      	movs	r3, #0
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f043 0308 	orr.w	r3, r3, #8
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	b94b      	cbnz	r3, 8008772 <__swsetup_r+0x7a>
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d003      	beq.n	8008772 <__swsetup_r+0x7a>
 800876a:	4621      	mov	r1, r4
 800876c:	4628      	mov	r0, r5
 800876e:	f000 f989 	bl	8008a84 <__smakebuf_r>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	f013 0201 	ands.w	r2, r3, #1
 800877a:	d00a      	beq.n	8008792 <__swsetup_r+0x9a>
 800877c:	2200      	movs	r2, #0
 800877e:	60a2      	str	r2, [r4, #8]
 8008780:	6962      	ldr	r2, [r4, #20]
 8008782:	4252      	negs	r2, r2
 8008784:	61a2      	str	r2, [r4, #24]
 8008786:	6922      	ldr	r2, [r4, #16]
 8008788:	b942      	cbnz	r2, 800879c <__swsetup_r+0xa4>
 800878a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800878e:	d1c5      	bne.n	800871c <__swsetup_r+0x24>
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	0799      	lsls	r1, r3, #30
 8008794:	bf58      	it	pl
 8008796:	6962      	ldrpl	r2, [r4, #20]
 8008798:	60a2      	str	r2, [r4, #8]
 800879a:	e7f4      	b.n	8008786 <__swsetup_r+0x8e>
 800879c:	2000      	movs	r0, #0
 800879e:	e7f7      	b.n	8008790 <__swsetup_r+0x98>
 80087a0:	200001b0 	.word	0x200001b0

080087a4 <memmove>:
 80087a4:	4288      	cmp	r0, r1
 80087a6:	b510      	push	{r4, lr}
 80087a8:	eb01 0402 	add.w	r4, r1, r2
 80087ac:	d902      	bls.n	80087b4 <memmove+0x10>
 80087ae:	4284      	cmp	r4, r0
 80087b0:	4623      	mov	r3, r4
 80087b2:	d807      	bhi.n	80087c4 <memmove+0x20>
 80087b4:	1e43      	subs	r3, r0, #1
 80087b6:	42a1      	cmp	r1, r4
 80087b8:	d008      	beq.n	80087cc <memmove+0x28>
 80087ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087c2:	e7f8      	b.n	80087b6 <memmove+0x12>
 80087c4:	4402      	add	r2, r0
 80087c6:	4601      	mov	r1, r0
 80087c8:	428a      	cmp	r2, r1
 80087ca:	d100      	bne.n	80087ce <memmove+0x2a>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087d6:	e7f7      	b.n	80087c8 <memmove+0x24>

080087d8 <__assert_func>:
 80087d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087da:	4614      	mov	r4, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	4b09      	ldr	r3, [pc, #36]	@ (8008804 <__assert_func+0x2c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4605      	mov	r5, r0
 80087e4:	68d8      	ldr	r0, [r3, #12]
 80087e6:	b14c      	cbz	r4, 80087fc <__assert_func+0x24>
 80087e8:	4b07      	ldr	r3, [pc, #28]	@ (8008808 <__assert_func+0x30>)
 80087ea:	9100      	str	r1, [sp, #0]
 80087ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087f0:	4906      	ldr	r1, [pc, #24]	@ (800880c <__assert_func+0x34>)
 80087f2:	462b      	mov	r3, r5
 80087f4:	f000 f90e 	bl	8008a14 <fiprintf>
 80087f8:	f000 f9a2 	bl	8008b40 <abort>
 80087fc:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <__assert_func+0x38>)
 80087fe:	461c      	mov	r4, r3
 8008800:	e7f3      	b.n	80087ea <__assert_func+0x12>
 8008802:	bf00      	nop
 8008804:	200001b0 	.word	0x200001b0
 8008808:	08009513 	.word	0x08009513
 800880c:	08009520 	.word	0x08009520
 8008810:	0800954e 	.word	0x0800954e

08008814 <_calloc_r>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	fba1 5402 	umull	r5, r4, r1, r2
 800881a:	b934      	cbnz	r4, 800882a <_calloc_r+0x16>
 800881c:	4629      	mov	r1, r5
 800881e:	f7fc feb9 	bl	8005594 <_malloc_r>
 8008822:	4606      	mov	r6, r0
 8008824:	b928      	cbnz	r0, 8008832 <_calloc_r+0x1e>
 8008826:	4630      	mov	r0, r6
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	220c      	movs	r2, #12
 800882c:	6002      	str	r2, [r0, #0]
 800882e:	2600      	movs	r6, #0
 8008830:	e7f9      	b.n	8008826 <_calloc_r+0x12>
 8008832:	462a      	mov	r2, r5
 8008834:	4621      	mov	r1, r4
 8008836:	f7fd fd50 	bl	80062da <memset>
 800883a:	e7f4      	b.n	8008826 <_calloc_r+0x12>

0800883c <_strtol_l.isra.0>:
 800883c:	2b24      	cmp	r3, #36	@ 0x24
 800883e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008842:	4686      	mov	lr, r0
 8008844:	4690      	mov	r8, r2
 8008846:	d801      	bhi.n	800884c <_strtol_l.isra.0+0x10>
 8008848:	2b01      	cmp	r3, #1
 800884a:	d106      	bne.n	800885a <_strtol_l.isra.0+0x1e>
 800884c:	f7fd fdbe 	bl	80063cc <__errno>
 8008850:	2316      	movs	r3, #22
 8008852:	6003      	str	r3, [r0, #0]
 8008854:	2000      	movs	r0, #0
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885a:	4834      	ldr	r0, [pc, #208]	@ (800892c <_strtol_l.isra.0+0xf0>)
 800885c:	460d      	mov	r5, r1
 800885e:	462a      	mov	r2, r5
 8008860:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008864:	5d06      	ldrb	r6, [r0, r4]
 8008866:	f016 0608 	ands.w	r6, r6, #8
 800886a:	d1f8      	bne.n	800885e <_strtol_l.isra.0+0x22>
 800886c:	2c2d      	cmp	r4, #45	@ 0x2d
 800886e:	d110      	bne.n	8008892 <_strtol_l.isra.0+0x56>
 8008870:	782c      	ldrb	r4, [r5, #0]
 8008872:	2601      	movs	r6, #1
 8008874:	1c95      	adds	r5, r2, #2
 8008876:	f033 0210 	bics.w	r2, r3, #16
 800887a:	d115      	bne.n	80088a8 <_strtol_l.isra.0+0x6c>
 800887c:	2c30      	cmp	r4, #48	@ 0x30
 800887e:	d10d      	bne.n	800889c <_strtol_l.isra.0+0x60>
 8008880:	782a      	ldrb	r2, [r5, #0]
 8008882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008886:	2a58      	cmp	r2, #88	@ 0x58
 8008888:	d108      	bne.n	800889c <_strtol_l.isra.0+0x60>
 800888a:	786c      	ldrb	r4, [r5, #1]
 800888c:	3502      	adds	r5, #2
 800888e:	2310      	movs	r3, #16
 8008890:	e00a      	b.n	80088a8 <_strtol_l.isra.0+0x6c>
 8008892:	2c2b      	cmp	r4, #43	@ 0x2b
 8008894:	bf04      	itt	eq
 8008896:	782c      	ldrbeq	r4, [r5, #0]
 8008898:	1c95      	addeq	r5, r2, #2
 800889a:	e7ec      	b.n	8008876 <_strtol_l.isra.0+0x3a>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f6      	bne.n	800888e <_strtol_l.isra.0+0x52>
 80088a0:	2c30      	cmp	r4, #48	@ 0x30
 80088a2:	bf14      	ite	ne
 80088a4:	230a      	movne	r3, #10
 80088a6:	2308      	moveq	r3, #8
 80088a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80088ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088b0:	2200      	movs	r2, #0
 80088b2:	fbbc f9f3 	udiv	r9, ip, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80088bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80088c0:	2f09      	cmp	r7, #9
 80088c2:	d80f      	bhi.n	80088e4 <_strtol_l.isra.0+0xa8>
 80088c4:	463c      	mov	r4, r7
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	dd1b      	ble.n	8008902 <_strtol_l.isra.0+0xc6>
 80088ca:	1c57      	adds	r7, r2, #1
 80088cc:	d007      	beq.n	80088de <_strtol_l.isra.0+0xa2>
 80088ce:	4581      	cmp	r9, r0
 80088d0:	d314      	bcc.n	80088fc <_strtol_l.isra.0+0xc0>
 80088d2:	d101      	bne.n	80088d8 <_strtol_l.isra.0+0x9c>
 80088d4:	45a2      	cmp	sl, r4
 80088d6:	db11      	blt.n	80088fc <_strtol_l.isra.0+0xc0>
 80088d8:	fb00 4003 	mla	r0, r0, r3, r4
 80088dc:	2201      	movs	r2, #1
 80088de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088e2:	e7eb      	b.n	80088bc <_strtol_l.isra.0+0x80>
 80088e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80088e8:	2f19      	cmp	r7, #25
 80088ea:	d801      	bhi.n	80088f0 <_strtol_l.isra.0+0xb4>
 80088ec:	3c37      	subs	r4, #55	@ 0x37
 80088ee:	e7ea      	b.n	80088c6 <_strtol_l.isra.0+0x8a>
 80088f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80088f4:	2f19      	cmp	r7, #25
 80088f6:	d804      	bhi.n	8008902 <_strtol_l.isra.0+0xc6>
 80088f8:	3c57      	subs	r4, #87	@ 0x57
 80088fa:	e7e4      	b.n	80088c6 <_strtol_l.isra.0+0x8a>
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	e7ed      	b.n	80088de <_strtol_l.isra.0+0xa2>
 8008902:	1c53      	adds	r3, r2, #1
 8008904:	d108      	bne.n	8008918 <_strtol_l.isra.0+0xdc>
 8008906:	2322      	movs	r3, #34	@ 0x22
 8008908:	f8ce 3000 	str.w	r3, [lr]
 800890c:	4660      	mov	r0, ip
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	d0a0      	beq.n	8008856 <_strtol_l.isra.0+0x1a>
 8008914:	1e69      	subs	r1, r5, #1
 8008916:	e006      	b.n	8008926 <_strtol_l.isra.0+0xea>
 8008918:	b106      	cbz	r6, 800891c <_strtol_l.isra.0+0xe0>
 800891a:	4240      	negs	r0, r0
 800891c:	f1b8 0f00 	cmp.w	r8, #0
 8008920:	d099      	beq.n	8008856 <_strtol_l.isra.0+0x1a>
 8008922:	2a00      	cmp	r2, #0
 8008924:	d1f6      	bne.n	8008914 <_strtol_l.isra.0+0xd8>
 8008926:	f8c8 1000 	str.w	r1, [r8]
 800892a:	e794      	b.n	8008856 <_strtol_l.isra.0+0x1a>
 800892c:	080092c5 	.word	0x080092c5

08008930 <_strtol_r>:
 8008930:	f7ff bf84 	b.w	800883c <_strtol_l.isra.0>

08008934 <_strtoul_l.isra.0>:
 8008934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008938:	4e34      	ldr	r6, [pc, #208]	@ (8008a0c <_strtoul_l.isra.0+0xd8>)
 800893a:	4686      	mov	lr, r0
 800893c:	460d      	mov	r5, r1
 800893e:	4628      	mov	r0, r5
 8008940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008944:	5d37      	ldrb	r7, [r6, r4]
 8008946:	f017 0708 	ands.w	r7, r7, #8
 800894a:	d1f8      	bne.n	800893e <_strtoul_l.isra.0+0xa>
 800894c:	2c2d      	cmp	r4, #45	@ 0x2d
 800894e:	d110      	bne.n	8008972 <_strtoul_l.isra.0+0x3e>
 8008950:	782c      	ldrb	r4, [r5, #0]
 8008952:	2701      	movs	r7, #1
 8008954:	1c85      	adds	r5, r0, #2
 8008956:	f033 0010 	bics.w	r0, r3, #16
 800895a:	d115      	bne.n	8008988 <_strtoul_l.isra.0+0x54>
 800895c:	2c30      	cmp	r4, #48	@ 0x30
 800895e:	d10d      	bne.n	800897c <_strtoul_l.isra.0+0x48>
 8008960:	7828      	ldrb	r0, [r5, #0]
 8008962:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008966:	2858      	cmp	r0, #88	@ 0x58
 8008968:	d108      	bne.n	800897c <_strtoul_l.isra.0+0x48>
 800896a:	786c      	ldrb	r4, [r5, #1]
 800896c:	3502      	adds	r5, #2
 800896e:	2310      	movs	r3, #16
 8008970:	e00a      	b.n	8008988 <_strtoul_l.isra.0+0x54>
 8008972:	2c2b      	cmp	r4, #43	@ 0x2b
 8008974:	bf04      	itt	eq
 8008976:	782c      	ldrbeq	r4, [r5, #0]
 8008978:	1c85      	addeq	r5, r0, #2
 800897a:	e7ec      	b.n	8008956 <_strtoul_l.isra.0+0x22>
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f6      	bne.n	800896e <_strtoul_l.isra.0+0x3a>
 8008980:	2c30      	cmp	r4, #48	@ 0x30
 8008982:	bf14      	ite	ne
 8008984:	230a      	movne	r3, #10
 8008986:	2308      	moveq	r3, #8
 8008988:	f04f 38ff 	mov.w	r8, #4294967295
 800898c:	2600      	movs	r6, #0
 800898e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008992:	fb03 f908 	mul.w	r9, r3, r8
 8008996:	ea6f 0909 	mvn.w	r9, r9
 800899a:	4630      	mov	r0, r6
 800899c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80089a0:	f1bc 0f09 	cmp.w	ip, #9
 80089a4:	d810      	bhi.n	80089c8 <_strtoul_l.isra.0+0x94>
 80089a6:	4664      	mov	r4, ip
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	dd1e      	ble.n	80089ea <_strtoul_l.isra.0+0xb6>
 80089ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80089b0:	d007      	beq.n	80089c2 <_strtoul_l.isra.0+0x8e>
 80089b2:	4580      	cmp	r8, r0
 80089b4:	d316      	bcc.n	80089e4 <_strtoul_l.isra.0+0xb0>
 80089b6:	d101      	bne.n	80089bc <_strtoul_l.isra.0+0x88>
 80089b8:	45a1      	cmp	r9, r4
 80089ba:	db13      	blt.n	80089e4 <_strtoul_l.isra.0+0xb0>
 80089bc:	fb00 4003 	mla	r0, r0, r3, r4
 80089c0:	2601      	movs	r6, #1
 80089c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c6:	e7e9      	b.n	800899c <_strtoul_l.isra.0+0x68>
 80089c8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80089cc:	f1bc 0f19 	cmp.w	ip, #25
 80089d0:	d801      	bhi.n	80089d6 <_strtoul_l.isra.0+0xa2>
 80089d2:	3c37      	subs	r4, #55	@ 0x37
 80089d4:	e7e8      	b.n	80089a8 <_strtoul_l.isra.0+0x74>
 80089d6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80089da:	f1bc 0f19 	cmp.w	ip, #25
 80089de:	d804      	bhi.n	80089ea <_strtoul_l.isra.0+0xb6>
 80089e0:	3c57      	subs	r4, #87	@ 0x57
 80089e2:	e7e1      	b.n	80089a8 <_strtoul_l.isra.0+0x74>
 80089e4:	f04f 36ff 	mov.w	r6, #4294967295
 80089e8:	e7eb      	b.n	80089c2 <_strtoul_l.isra.0+0x8e>
 80089ea:	1c73      	adds	r3, r6, #1
 80089ec:	d106      	bne.n	80089fc <_strtoul_l.isra.0+0xc8>
 80089ee:	2322      	movs	r3, #34	@ 0x22
 80089f0:	f8ce 3000 	str.w	r3, [lr]
 80089f4:	4630      	mov	r0, r6
 80089f6:	b932      	cbnz	r2, 8008a06 <_strtoul_l.isra.0+0xd2>
 80089f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089fc:	b107      	cbz	r7, 8008a00 <_strtoul_l.isra.0+0xcc>
 80089fe:	4240      	negs	r0, r0
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	d0f9      	beq.n	80089f8 <_strtoul_l.isra.0+0xc4>
 8008a04:	b106      	cbz	r6, 8008a08 <_strtoul_l.isra.0+0xd4>
 8008a06:	1e69      	subs	r1, r5, #1
 8008a08:	6011      	str	r1, [r2, #0]
 8008a0a:	e7f5      	b.n	80089f8 <_strtoul_l.isra.0+0xc4>
 8008a0c:	080092c5 	.word	0x080092c5

08008a10 <_strtoul_r>:
 8008a10:	f7ff bf90 	b.w	8008934 <_strtoul_l.isra.0>

08008a14 <fiprintf>:
 8008a14:	b40e      	push	{r1, r2, r3}
 8008a16:	b503      	push	{r0, r1, lr}
 8008a18:	4601      	mov	r1, r0
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	4805      	ldr	r0, [pc, #20]	@ (8008a34 <fiprintf+0x20>)
 8008a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	f7ff faa3 	bl	8007f70 <_vfiprintf_r>
 8008a2a:	b002      	add	sp, #8
 8008a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a30:	b003      	add	sp, #12
 8008a32:	4770      	bx	lr
 8008a34:	200001b0 	.word	0x200001b0

08008a38 <__swhatbuf_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	2900      	cmp	r1, #0
 8008a42:	b096      	sub	sp, #88	@ 0x58
 8008a44:	4615      	mov	r5, r2
 8008a46:	461e      	mov	r6, r3
 8008a48:	da0d      	bge.n	8008a66 <__swhatbuf_r+0x2e>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2340      	movne	r3, #64	@ 0x40
 8008a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	6031      	str	r1, [r6, #0]
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	b016      	add	sp, #88	@ 0x58
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	466a      	mov	r2, sp
 8008a68:	f000 f848 	bl	8008afc <_fstat_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	dbec      	blt.n	8008a4a <__swhatbuf_r+0x12>
 8008a70:	9901      	ldr	r1, [sp, #4]
 8008a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a7a:	4259      	negs	r1, r3
 8008a7c:	4159      	adcs	r1, r3
 8008a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a82:	e7eb      	b.n	8008a5c <__swhatbuf_r+0x24>

08008a84 <__smakebuf_r>:
 8008a84:	898b      	ldrh	r3, [r1, #12]
 8008a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a88:	079d      	lsls	r5, r3, #30
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	d507      	bpl.n	8008aa0 <__smakebuf_r+0x1c>
 8008a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	6163      	str	r3, [r4, #20]
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	ab01      	add	r3, sp, #4
 8008aa2:	466a      	mov	r2, sp
 8008aa4:	f7ff ffc8 	bl	8008a38 <__swhatbuf_r>
 8008aa8:	9f00      	ldr	r7, [sp, #0]
 8008aaa:	4605      	mov	r5, r0
 8008aac:	4639      	mov	r1, r7
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7fc fd70 	bl	8005594 <_malloc_r>
 8008ab4:	b948      	cbnz	r0, 8008aca <__smakebuf_r+0x46>
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	059a      	lsls	r2, r3, #22
 8008abc:	d4ee      	bmi.n	8008a9c <__smakebuf_r+0x18>
 8008abe:	f023 0303 	bic.w	r3, r3, #3
 8008ac2:	f043 0302 	orr.w	r3, r3, #2
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	e7e2      	b.n	8008a90 <__smakebuf_r+0xc>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	6020      	str	r0, [r4, #0]
 8008ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ada:	b15b      	cbz	r3, 8008af4 <__smakebuf_r+0x70>
 8008adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 f81d 	bl	8008b20 <_isatty_r>
 8008ae6:	b128      	cbz	r0, 8008af4 <__smakebuf_r+0x70>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	431d      	orrs	r5, r3
 8008af8:	81a5      	strh	r5, [r4, #12]
 8008afa:	e7cf      	b.n	8008a9c <__smakebuf_r+0x18>

08008afc <_fstat_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4d07      	ldr	r5, [pc, #28]	@ (8008b1c <_fstat_r+0x20>)
 8008b00:	2300      	movs	r3, #0
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	4611      	mov	r1, r2
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	f7fa f9e1 	bl	8002ed0 <_fstat>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d102      	bne.n	8008b18 <_fstat_r+0x1c>
 8008b12:	682b      	ldr	r3, [r5, #0]
 8008b14:	b103      	cbz	r3, 8008b18 <_fstat_r+0x1c>
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000534 	.word	0x20000534

08008b20 <_isatty_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4d06      	ldr	r5, [pc, #24]	@ (8008b3c <_isatty_r+0x1c>)
 8008b24:	2300      	movs	r3, #0
 8008b26:	4604      	mov	r4, r0
 8008b28:	4608      	mov	r0, r1
 8008b2a:	602b      	str	r3, [r5, #0]
 8008b2c:	f7fa f9e0 	bl	8002ef0 <_isatty>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_isatty_r+0x1a>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_isatty_r+0x1a>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20000534 	.word	0x20000534

08008b40 <abort>:
 8008b40:	b508      	push	{r3, lr}
 8008b42:	2006      	movs	r0, #6
 8008b44:	f000 f82c 	bl	8008ba0 <raise>
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7fa f971 	bl	8002e30 <_exit>

08008b4e <_raise_r>:
 8008b4e:	291f      	cmp	r1, #31
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4605      	mov	r5, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	d904      	bls.n	8008b62 <_raise_r+0x14>
 8008b58:	2316      	movs	r3, #22
 8008b5a:	6003      	str	r3, [r0, #0]
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b64:	b112      	cbz	r2, 8008b6c <_raise_r+0x1e>
 8008b66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b6a:	b94b      	cbnz	r3, 8008b80 <_raise_r+0x32>
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f831 	bl	8008bd4 <_getpid_r>
 8008b72:	4622      	mov	r2, r4
 8008b74:	4601      	mov	r1, r0
 8008b76:	4628      	mov	r0, r5
 8008b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7c:	f000 b818 	b.w	8008bb0 <_kill_r>
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00a      	beq.n	8008b9a <_raise_r+0x4c>
 8008b84:	1c59      	adds	r1, r3, #1
 8008b86:	d103      	bne.n	8008b90 <_raise_r+0x42>
 8008b88:	2316      	movs	r3, #22
 8008b8a:	6003      	str	r3, [r0, #0]
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	e7e7      	b.n	8008b60 <_raise_r+0x12>
 8008b90:	2100      	movs	r1, #0
 8008b92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b96:	4620      	mov	r0, r4
 8008b98:	4798      	blx	r3
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7e0      	b.n	8008b60 <_raise_r+0x12>
	...

08008ba0 <raise>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <raise+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f7ff bfd2 	b.w	8008b4e <_raise_r>
 8008baa:	bf00      	nop
 8008bac:	200001b0 	.word	0x200001b0

08008bb0 <_kill_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	@ (8008bd0 <_kill_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7fa f927 	bl	8002e10 <_kill>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_kill_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_kill_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000534 	.word	0x20000534

08008bd4 <_getpid_r>:
 8008bd4:	f7fa b914 	b.w	8002e00 <_getpid>

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
