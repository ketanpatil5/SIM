
SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a8  080048a8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  0800490c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800490c  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af38  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d3  00000000  00000000  00010fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00013198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063e  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022065  00000000  00000000  00014026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d285  00000000  00000000  0003608b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8b05  00000000  00000000  00043310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010be15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  0010be58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004230 	.word	0x08004230

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004230 	.word	0x08004230

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Error_Handler>:
 */
#include "error_handler.h"
#include "sys_init.h"

void Error_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f2:	b672      	cpsid	i
}
 80005f4:	bf00      	nop
	__disable_irq();
	char Error[80];
    sprintf(Error,"ERROR\r\n");
 80005f6:	463b      	mov	r3, r7
 80005f8:	4908      	ldr	r1, [pc, #32]	@ (800061c <Error_Handler+0x30>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f962 	bl	80038c4 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)Error,strlen(Error),1000);
 8000600:	463b      	mov	r3, r7
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe04 	bl	8000210 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	4639      	mov	r1, r7
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <Error_Handler+0x34>)
 8000614:	f002 f836 	bl	8002684 <HAL_UART_Transmit>
//  HAL_NVIC_SystemReset();
  while(1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <Error_Handler+0x2c>
 800061c:	08004248 	.word	0x08004248
 8000620:	2000016c 	.word	0x2000016c

08000624 <send_at_command>:


char ATcommand[80];
uint8_t buffer[30] = {0};

void send_at_command(const char *cmd, char *response, int timeout_ms) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	@ 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
//    uart_write_bytes(UART_NUM, cmd, strlen(cmd));
//    uart_write_bytes(UART_NUM, "\r\n", 2);

	sprintf(ATcommand,cmd);
 8000630:	68f9      	ldr	r1, [r7, #12]
 8000632:	481e      	ldr	r0, [pc, #120]	@ (80006ac <send_at_command+0x88>)
 8000634:	f003 f946 	bl	80038c4 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000638:	481c      	ldr	r0, [pc, #112]	@ (80006ac <send_at_command+0x88>)
 800063a:	f7ff fde9 	bl	8000210 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000646:	4919      	ldr	r1, [pc, #100]	@ (80006ac <send_at_command+0x88>)
 8000648:	4819      	ldr	r0, [pc, #100]	@ (80006b0 <send_at_command+0x8c>)
 800064a:	f002 f81b 	bl	8002684 <HAL_UART_Transmit>
	HAL_UART_Receive (&huart1, buffer, 30, 100);
 800064e:	2364      	movs	r3, #100	@ 0x64
 8000650:	221e      	movs	r2, #30
 8000652:	4918      	ldr	r1, [pc, #96]	@ (80006b4 <send_at_command+0x90>)
 8000654:	4816      	ldr	r0, [pc, #88]	@ (80006b0 <send_at_command+0x8c>)
 8000656:	f002 f8a0 	bl	800279a <HAL_UART_Receive>
    // Wait for response
	if(strstr((char *)buffer,"OK")){
 800065a:	4917      	ldr	r1, [pc, #92]	@ (80006b8 <send_at_command+0x94>)
 800065c:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <send_at_command+0x90>)
 800065e:	f003 f95b 	bl	8003918 <strstr>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d013      	beq.n	8000690 <send_at_command+0x6c>
//	   ATisOK = 1
	   char AT[30];
	   sprintf(AT,"OK\r\n");
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4913      	ldr	r1, [pc, #76]	@ (80006bc <send_at_command+0x98>)
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f928 	bl	80038c4 <siprintf>
	   HAL_UART_Transmit(&huart2,(uint8_t *)AT,strlen(AT),1000);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdc9 	bl	8000210 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f107 0110 	add.w	r1, r7, #16
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <send_at_command+0x9c>)
 800068c:	f001 fffa 	bl	8002684 <HAL_UART_Transmit>

	}
	   HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000694:	f000 fece 	bl	8001434 <HAL_Delay>
	   memset(response,0,sizeof(buffer));
 8000698:	221e      	movs	r2, #30
 800069a:	2100      	movs	r1, #0
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f003 f933 	bl	8003908 <memset>
}
 80006a2:	bf00      	nop
 80006a4:	3730      	adds	r7, #48	@ 0x30
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000078 	.word	0x20000078
 80006b0:	20000124 	.word	0x20000124
 80006b4:	200000c8 	.word	0x200000c8
 80006b8:	08004250 	.word	0x08004250
 80006bc:	08004254 	.word	0x08004254
 80006c0:	2000016c 	.word	0x2000016c

080006c4 <mqtt_init>:

void mqtt_init(const char *broker, const char *accesstoken, const char *clientid) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 80006ca:	af02      	add	r7, sp, #8
 80006cc:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80006d0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80006d4:	6018      	str	r0, [r3, #0]
 80006d6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80006da:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80006de:	6019      	str	r1, [r3, #0]
 80006e0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80006e4:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80006e8:	601a      	str	r2, [r3, #0]
    char response[256];
//    generate_negative_pulse(GPIO_PIN, 10);
    send_at_command("AT\r\n",response,500);
 80006ea:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80006ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4885      	ldr	r0, [pc, #532]	@ (800090c <mqtt_init+0x248>)
 80006f6:	f7ff ff95 	bl	8000624 <send_at_command>
    HAL_Delay(2000);// New
 80006fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006fe:	f000 fe99 	bl	8001434 <HAL_Delay>
    send_at_command("AT+CFUN=1\r\n",response,500);
 8000702:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000706:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800070a:	4619      	mov	r1, r3
 800070c:	4880      	ldr	r0, [pc, #512]	@ (8000910 <mqtt_init+0x24c>)
 800070e:	f7ff ff89 	bl	8000624 <send_at_command>
    send_at_command("AT+CREG=2\r\n",response,500);
 8000712:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000716:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800071a:	4619      	mov	r1, r3
 800071c:	487d      	ldr	r0, [pc, #500]	@ (8000914 <mqtt_init+0x250>)
 800071e:	f7ff ff81 	bl	8000624 <send_at_command>
    send_at_command("AT+CEREG=2\r\n",response,500);
 8000722:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000726:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800072a:	4619      	mov	r1, r3
 800072c:	487a      	ldr	r0, [pc, #488]	@ (8000918 <mqtt_init+0x254>)
 800072e:	f7ff ff79 	bl	8000624 <send_at_command>
    // send_at_command("AT+COPS?\r\n",response,1000);
    send_at_command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r\n",response,500);
 8000732:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	4619      	mov	r1, r3
 800073c:	4877      	ldr	r0, [pc, #476]	@ (800091c <mqtt_init+0x258>)
 800073e:	f7ff ff71 	bl	8000624 <send_at_command>
    send_at_command("AT+CGACT=0,1\r\n",response,500);
 8000742:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	4619      	mov	r1, r3
 800074c:	4874      	ldr	r0, [pc, #464]	@ (8000920 <mqtt_init+0x25c>)
 800074e:	f7ff ff69 	bl	8000624 <send_at_command>
    send_at_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n",response,500);
 8000752:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000756:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800075a:	4619      	mov	r1, r3
 800075c:	4871      	ldr	r0, [pc, #452]	@ (8000924 <mqtt_init+0x260>)
 800075e:	f7ff ff61 	bl	8000624 <send_at_command>
    send_at_command("AT+CNTP\r\n",response,500);
 8000762:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000766:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800076a:	4619      	mov	r1, r3
 800076c:	486e      	ldr	r0, [pc, #440]	@ (8000928 <mqtt_init+0x264>)
 800076e:	f7ff ff59 	bl	8000624 <send_at_command>
    // send_at_command("AT+CCLK?\r\n",response,500);
    // send_at_command("AT+IPADDR\r\n",response,1000);
    send_at_command("AT+CGATT=1\r\n",response,500);
 8000772:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000776:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800077a:	4619      	mov	r1, r3
 800077c:	486b      	ldr	r0, [pc, #428]	@ (800092c <mqtt_init+0x268>)
 800077e:	f7ff ff51 	bl	8000624 <send_at_command>
    send_at_command("AT+CGPADDR=1\r\n",response,500);
 8000782:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000786:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800078a:	4619      	mov	r1, r3
 800078c:	4868      	ldr	r0, [pc, #416]	@ (8000930 <mqtt_init+0x26c>)
 800078e:	f7ff ff49 	bl	8000624 <send_at_command>
    // send_at_command("AT+CGACT?\r\n",response,1000);
    // send_at_command("AT+CEREG?\r\n",response,1000);
    send_at_command("AT+NETOPEN\r\n",response,500);
 8000792:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000796:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800079a:	4619      	mov	r1, r3
 800079c:	4865      	ldr	r0, [pc, #404]	@ (8000934 <mqtt_init+0x270>)
 800079e:	f7ff ff41 	bl	8000624 <send_at_command>
    // send_at_command("AT+NETOPEN?\r\n",response,1000);

    // send_at_command("AT+CSSLCFG=\"sslversion\",0,4\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"authmode\",0,1\r\n",response,500);
 80007a2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4862      	ldr	r0, [pc, #392]	@ (8000938 <mqtt_init+0x274>)
 80007ae:	f7ff ff39 	bl	8000624 <send_at_command>
    send_at_command("AT+CSSLCFG=\"cacert\",0,\"ca_cert.pem\"\r\n",response,500);
 80007b2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007ba:	4619      	mov	r1, r3
 80007bc:	485f      	ldr	r0, [pc, #380]	@ (800093c <mqtt_init+0x278>)
 80007be:	f7ff ff31 	bl	8000624 <send_at_command>
    // send_at_command("AT+CSSLCFG=\"clientcert\",0,\"client_cert.pem\"\r\n",response,1000);
    // send_at_command("AT+CSSLCFG=\"clientkey\",0,\"client_key.pem\"\r\n",response,1000);
    // send_at_command("AT+CSSLCFG=\"password\",0,\"password.pem\"\r\n",response,1000);
    send_at_command("AT+CSSLCFG=\"enableSNI\",0,1\r\n",response,500);
 80007c2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007ca:	4619      	mov	r1, r3
 80007cc:	485c      	ldr	r0, [pc, #368]	@ (8000940 <mqtt_init+0x27c>)
 80007ce:	f7ff ff29 	bl	8000624 <send_at_command>

    send_at_command("AT+CMQTTSTART\r\n", response, 500);
 80007d2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007da:	4619      	mov	r1, r3
 80007dc:	4859      	ldr	r0, [pc, #356]	@ (8000944 <mqtt_init+0x280>)
 80007de:	f7ff ff21 	bl	8000624 <send_at_command>
    send_at_command("AT+CCHSET=1,1\r\n", response, 500);
 80007e2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4856      	ldr	r0, [pc, #344]	@ (8000948 <mqtt_init+0x284>)
 80007ee:	f7ff ff19 	bl	8000624 <send_at_command>
    send_at_command("AT+CCHMODE=1\r\n", response, 500);
 80007f2:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 80007f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4853      	ldr	r0, [pc, #332]	@ (800094c <mqtt_init+0x288>)
 80007fe:	f7ff ff11 	bl	8000624 <send_at_command>
    send_at_command("AT+CCHSTART\r\n", response, 500);
 8000802:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000806:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800080a:	4619      	mov	r1, r3
 800080c:	4850      	ldr	r0, [pc, #320]	@ (8000950 <mqtt_init+0x28c>)
 800080e:	f7ff ff09 	bl	8000624 <send_at_command>
    send_at_command("AT+CCHADDR\r\n", response, 500);
 8000812:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000816:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800081a:	4619      	mov	r1, r3
 800081c:	484d      	ldr	r0, [pc, #308]	@ (8000954 <mqtt_init+0x290>)
 800081e:	f7ff ff01 	bl	8000624 <send_at_command>

    // send_at_command("AT+CCHOPEN\r\n", response, 500);
    send_at_command("AT+CCHCFG=\"sendtimeout\",0,60\r\n", response, 500);
 8000822:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000826:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800082a:	4619      	mov	r1, r3
 800082c:	484a      	ldr	r0, [pc, #296]	@ (8000958 <mqtt_init+0x294>)
 800082e:	f7ff fef9 	bl	8000624 <send_at_command>
    send_at_command("AT+CCHCFG=\"sslctx\",0,1\r\n", response, 500);
 8000832:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000836:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800083a:	4619      	mov	r1, r3
 800083c:	4847      	ldr	r0, [pc, #284]	@ (800095c <mqtt_init+0x298>)
 800083e:	f7ff fef1 	bl	8000624 <send_at_command>
    // send_at_command("AT+CCERTMOVE=\"ca_cert.pem\"\r\n", response, 500);
    send_at_command("AT+CMQTTSSLCFG=0,1\r\n", response, 500);
 8000842:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000846:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800084a:	4619      	mov	r1, r3
 800084c:	4844      	ldr	r0, [pc, #272]	@ (8000960 <mqtt_init+0x29c>)
 800084e:	f7ff fee9 	bl	8000624 <send_at_command>
    send_at_command("AT+CSSLCFG=0\r\n",response,500);
 8000852:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8000856:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800085a:	4619      	mov	r1, r3
 800085c:	4841      	ldr	r0, [pc, #260]	@ (8000964 <mqtt_init+0x2a0>)
 800085e:	f7ff fee1 	bl	8000624 <send_at_command>

    //Set ID
    char mqtt_id[128];
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMQTTACCQ=0,\"%s\",1\r\n",clientid);
 8000862:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000866:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800086a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a3d      	ldr	r2, [pc, #244]	@ (8000968 <mqtt_init+0x2a4>)
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	f002 fff0 	bl	8003858 <sniprintf>
    send_at_command(mqtt_id, response, 500);
 8000878:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 800087c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000880:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fecd 	bl	8000624 <send_at_command>

    send_at_command("AT+CMQTTCFG=\"checkUTF8\",0,1\r\n",response,1000);
 800088a:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800088e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000892:	4619      	mov	r1, r3
 8000894:	4835      	ldr	r0, [pc, #212]	@ (800096c <mqtt_init+0x2a8>)
 8000896:	f7ff fec5 	bl	8000624 <send_at_command>
    send_at_command("AT+CMQTTCFG=\"optimeout\",0,60\r\n",response,1000);
 800089a:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800089e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a2:	4619      	mov	r1, r3
 80008a4:	4832      	ldr	r0, [pc, #200]	@ (8000970 <mqtt_init+0x2ac>)
 80008a6:	f7ff febd 	bl	8000624 <send_at_command>
    // send_at_command("AT+CMQTTCONNECT?\r\n",response,100);
    // send_at_command("AT+CCERTLIST", response, 1000);
    // send_at_command("AT+CCERTDELE=\"ca_cert.pem\"", response, 1000);

    for(int i=0;i<3;i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80008b0:	e01f      	b.n	80008f2 <mqtt_init+0x22e>
    char mqtt_conn[256];
    snprintf(mqtt_conn, sizeof(mqtt_conn), "AT+CMQTTCONNECT=0,\"tcp://%s\",300,1,\"%s\"\r\n",broker, accesstoken);
 80008b2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80008b6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80008ba:	f107 0014 	add.w	r0, r7, #20
 80008be:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 80008c2:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <mqtt_init+0x2b0>)
 80008ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d2:	f002 ffc1 	bl	8003858 <sniprintf>
    send_at_command(mqtt_conn, response, 2500);
 80008d6:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe9e 	bl	8000624 <send_at_command>
    for(int i=0;i<3;i++){
 80008e8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80008ec:	3301      	adds	r3, #1
 80008ee:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 80008f2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dddb      	ble.n	80008b2 <mqtt_init+0x1ee>
    }
    HAL_Delay(1500);
 80008fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008fe:	f000 fd99 	bl	8001434 <HAL_Delay>
    // ESP_LOGI("MQTT", "MQTT connection response: %s", response);

}
 8000902:	bf00      	nop
 8000904:	f507 7726 	add.w	r7, r7, #664	@ 0x298
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	0800425c 	.word	0x0800425c
 8000910:	08004264 	.word	0x08004264
 8000914:	08004270 	.word	0x08004270
 8000918:	0800427c 	.word	0x0800427c
 800091c:	0800428c 	.word	0x0800428c
 8000920:	080042b4 	.word	0x080042b4
 8000924:	080042c4 	.word	0x080042c4
 8000928:	080042e4 	.word	0x080042e4
 800092c:	080042f0 	.word	0x080042f0
 8000930:	08004300 	.word	0x08004300
 8000934:	08004310 	.word	0x08004310
 8000938:	08004320 	.word	0x08004320
 800093c:	0800433c 	.word	0x0800433c
 8000940:	08004364 	.word	0x08004364
 8000944:	08004384 	.word	0x08004384
 8000948:	08004394 	.word	0x08004394
 800094c:	080043a4 	.word	0x080043a4
 8000950:	080043b4 	.word	0x080043b4
 8000954:	080043c4 	.word	0x080043c4
 8000958:	080043d4 	.word	0x080043d4
 800095c:	080043f4 	.word	0x080043f4
 8000960:	08004410 	.word	0x08004410
 8000964:	08004428 	.word	0x08004428
 8000968:	08004438 	.word	0x08004438
 800096c:	08004450 	.word	0x08004450
 8000970:	08004470 	.word	0x08004470
 8000974:	08004490 	.word	0x08004490

08000978 <mqtt_publish>:

void mqtt_publish(const char *topic, const char *data) {
 8000978:	b580      	push	{r7, lr}
 800097a:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
 800097e:	af00      	add	r7, sp, #0
 8000980:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8000984:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8000988:	6018      	str	r0, [r3, #0]
 800098a:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800098e:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8000992:	6019      	str	r1, [r3, #0]
    char response[256];

    // Set topic
    char mqtt_topic[128];
    int len;
    len=strlen(topic);
 8000994:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8000998:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	f7ff fc37 	bl	8000210 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    snprintf(mqtt_topic, sizeof(mqtt_topic), "AT+CMQTTTOPIC=0,%d\r\n", len);
 80009a8:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80009ac:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <mqtt_publish+0xd0>)
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	f002 ff50 	bl	8003858 <sniprintf>
    send_at_command(mqtt_topic, response, 1000);
 80009b8:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80009bc:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80009c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe2d 	bl	8000624 <send_at_command>
    send_at_command(topic,response,1000);
 80009ca:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80009ce:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80009d2:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80009d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	f7ff fe22 	bl	8000624 <send_at_command>

    // Send payload
    char mqtt_payload[512];
    len=strlen(data);
 80009e0:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 80009e4:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	f7ff fc11 	bl	8000210 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    snprintf(mqtt_payload, sizeof(mqtt_payload), "AT+CMQTTPAYLOAD=0,%d\r\n", len);
 80009f4:	f107 000c 	add.w	r0, r7, #12
 80009f8:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80009fc:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <mqtt_publish+0xd4>)
 80009fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a02:	f002 ff29 	bl	8003858 <sniprintf>
    send_at_command(mqtt_payload, response, 1000);
 8000a06:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe06 	bl	8000624 <send_at_command>
    send_at_command(data,response,1000);
 8000a18:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8000a1c:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8000a20:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8000a24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f7ff fdfb 	bl	8000624 <send_at_command>

    // Publish Data
    send_at_command("AT+CMQTTPUB=0,0,60,1\r\n",response,500);
 8000a2e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8000a32:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <mqtt_publish+0xd8>)
 8000a3a:	f7ff fdf3 	bl	8000624 <send_at_command>

    // send_at_command("AT+CMQTTDISC=0,60\r\n", response, 2000);
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);

    // ESP_LOGI("MQTT", "MQTT publish response: %s", response);
}
 8000a3e:	bf00      	nop
 8000a40:	f507 7764 	add.w	r7, r7, #912	@ 0x390
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	080044bc 	.word	0x080044bc
 8000a4c:	080044d4 	.word	0x080044d4
 8000a50:	080044ec 	.word	0x080044ec

08000a54 <gsm_init>:
    // send_at_command("AT+CMQTTSTOP\r\n",response,1000);


    // ESP_LOGI("MQTT", "MQTT Subscribe response: %s", response);
}
void gsm_init(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	@ 0x30
 8000a58:	af00      	add	r7, sp, #0

    // Initialize MQTT
    const char *broker = "thingsboard.cloud:8883";
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <gsm_init+0x40>)
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const char *accesstoken = "399kawoa7g4y9ovt57p6";
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <gsm_init+0x44>)
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    const char *clientid = "KP";
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <gsm_init+0x48>)
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24

    mqtt_init(broker, accesstoken, clientid);
 8000a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000a6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000a6c:	f7ff fe2a 	bl	80006c4 <mqtt_init>
    char msg[30];
    sprintf(msg, "{\"temperature\":%d}", Data[0]);
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <gsm_init+0x4c>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <gsm_init+0x50>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 ff22 	bl	80038c4 <siprintf>
//    mqtt_publish("v1/devices/me/telemetry", "{\"temperature\": 51, \"humidity\": 03, \"flowRate\": 4, \"energy\": 91, \"volume\": 563, \"totalVolume\": 64}");
     mqtt_publish("v1/devices/me/telemetry", msg);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <gsm_init+0x54>)
 8000a86:	f7ff ff77 	bl	8000978 <mqtt_publish>

    // mqtt_subscribe("v1/devices/me/telemetry");
}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08004548 	.word	0x08004548
 8000a98:	08004560 	.word	0x08004560
 8000a9c:	08004578 	.word	0x08004578
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	0800457c 	.word	0x0800457c
 8000aa8:	08004590 	.word	0x08004590

08000aac <main>:
#include "modbus.h"
#include "sms.h"


int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	@ 0x58
 8000ab0:	af00      	add	r7, sp, #0
//	  char mobileNumber[] = "+919405951862";
	  char ATcommand[80];
//	  uint8_t buffer[30] = {0};
//	  uint8_t ATisOK = 0;
  HAL_Init();
 8000ab2:	f000 fc4d 	bl	8001350 <HAL_Init>
  SystemClock_Config();
 8000ab6:	f000 fac5 	bl	8001044 <SystemClock_Config>
  MX_GPIO_Init();
 8000aba:	f000 fb85 	bl	80011c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000abe:	f000 fb2f 	bl	8001120 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 fb57 	bl	8001174 <MX_USART2_UART_Init>
  modbus_init();
 8000ac6:	f000 f8b3 	bl	8000c30 <modbus_init>
  sprintf(ATcommand,"modbus OK\r\n");
 8000aca:	463b      	mov	r3, r7
 8000acc:	4920      	ldr	r1, [pc, #128]	@ (8000b50 <main+0xa4>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fef8 	bl	80038c4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb9a 	bl	8000210 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4639      	mov	r1, r7
 8000ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae6:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <main+0xa8>)
 8000ae8:	f001 fdcc 	bl	8002684 <HAL_UART_Transmit>
  gsm_init();
 8000aec:	f7ff ffb2 	bl	8000a54 <gsm_init>
  sprintf(ATcommand,"gsm ok\r\n");
 8000af0:	463b      	mov	r3, r7
 8000af2:	4919      	ldr	r1, [pc, #100]	@ (8000b58 <main+0xac>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fee5 	bl	80038c4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000afa:	463b      	mov	r3, r7
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb87 	bl	8000210 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4639      	mov	r1, r7
 8000b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <main+0xa8>)
 8000b0e:	f001 fdb9 	bl	8002684 <HAL_UART_Transmit>
  char *phone ="+919405951862";
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <main+0xb0>)
 8000b14:	657b      	str	r3, [r7, #84]	@ 0x54
  char *msg ="Hello World\x1A";
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <main+0xb4>)
 8000b18:	653b      	str	r3, [r7, #80]	@ 0x50
  send_sms(phone, msg);
 8000b1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000b1c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000b1e:	f000 f8f7 	bl	8000d10 <send_sms>
  sprintf(ATcommand,"sms ok\r\n");
 8000b22:	463b      	mov	r3, r7
 8000b24:	490f      	ldr	r1, [pc, #60]	@ (8000b64 <main+0xb8>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fecc 	bl	80038c4 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb6e 	bl	8000210 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	4639      	mov	r1, r7
 8000b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <main+0xa8>)
 8000b40:	f001 fda0 	bl	8002684 <HAL_UART_Transmit>
 8000b44:	2300      	movs	r3, #0
//  sprintf(ATcommand,"Hello World, STM32 started%c",0x1a);
//  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
//  HAL_UART_Receive(&huart1, buffer, 30, 100);
//  memset(buffer,0,sizeof(buffer));
//  HAL_Delay(4000);
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3758      	adds	r7, #88	@ 0x58
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	080045a8 	.word	0x080045a8
 8000b54:	2000016c 	.word	0x2000016c
 8000b58:	080045b4 	.word	0x080045b4
 8000b5c:	080045c0 	.word	0x080045c0
 8000b60:	080045d0 	.word	0x080045d0
 8000b64:	080045e0 	.word	0x080045e0

08000b68 <HAL_UARTEx_RxEventCallback>:
uint8_t TxData[8];
uint16_t Data[10];


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
	Data[0] = RxData[3]<<8 | RxData[4];
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000b76:	78db      	ldrb	r3, [r3, #3]
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <HAL_UARTEx_RxEventCallback+0x84>)
 8000b8c:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000b90:	795b      	ldrb	r3, [r3, #5]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000b9a:	799b      	ldrb	r3, [r3, #6]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <HAL_UARTEx_RxEventCallback+0x84>)
 8000ba6:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000baa:	79db      	ldrb	r3, [r3, #7]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000bb4:	7a1b      	ldrb	r3, [r3, #8]
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_UARTEx_RxEventCallback+0x84>)
 8000bc0:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000bc4:	7a5b      	ldrb	r3, [r3, #9]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000bce:	7a9b      	ldrb	r3, [r3, #10]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <HAL_UARTEx_RxEventCallback+0x84>)
 8000bda:	80da      	strh	r2, [r3, #6]
//	Data[4] = RxData[11]<<8 | RxData[12];
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200000e8 	.word	0x200000e8
 8000bec:	20000110 	.word	0x20000110

08000bf0 <sendData>:

void sendData (uint8_t *data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bfe:	480a      	ldr	r0, [pc, #40]	@ (8000c28 <sendData+0x38>)
 8000c00:	f000 ff74 	bl	8001aec <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, data, 8, 1000);
 8000c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c08:	2208      	movs	r2, #8
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <sendData+0x3c>)
 8000c0e:	f001 fd39 	bl	8002684 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <sendData+0x38>)
 8000c1a:	f000 ff67 	bl	8001aec <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	200001b4 	.word	0x200001b4

08000c30 <modbus_init>:

void modbus_init(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 32);
 8000c36:	2220      	movs	r2, #32
 8000c38:	4916      	ldr	r1, [pc, #88]	@ (8000c94 <modbus_init+0x64>)
 8000c3a:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <modbus_init+0x68>)
 8000c3c:	f001 fe44 	bl	80028c8 <HAL_UARTEx_ReceiveToIdle_IT>

	  TxData[0] = 0x01;  // slave address
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <modbus_init+0x6c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
	//  TxData[1] = 0x03;  // Function code for Read Holding Registers
	  TxData[1] = 0x04;  // Function code for Read Input Registers
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <modbus_init+0x6c>)
 8000c48:	2204      	movs	r2, #4
 8000c4a:	705a      	strb	r2, [r3, #1]
	   */
	//  TxData[2] = 0;
	//  TxData[3] = 0x04;
	//  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[2] = 0;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <modbus_init+0x6c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x64;
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <modbus_init+0x6c>)
 8000c54:	2264      	movs	r2, #100	@ 0x64
 8000c56:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000001 = 1 +30001 = 30002

	  TxData[4] = 0;
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <modbus_init+0x6c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x02;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <modbus_init+0x6c>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  uint16_t crc = crc16(TxData, 6);
 8000c64:	2106      	movs	r1, #6
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <modbus_init+0x6c>)
 8000c68:	f000 f81a 	bl	8000ca0 <crc16>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	80fb      	strh	r3, [r7, #6]
	  TxData[6] = crc&0xFF;   // CRC LOW
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <modbus_init+0x6c>)
 8000c76:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <modbus_init+0x6c>)
 8000c82:	71da      	strb	r2, [r3, #7]

	  sendData(TxData);
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <modbus_init+0x6c>)
 8000c86:	f7ff ffb3 	bl	8000bf0 <sendData>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000e8 	.word	0x200000e8
 8000c98:	20000124 	.word	0x20000124
 8000c9c:	20000108 	.word	0x20000108

08000ca0 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000cac:	23ff      	movs	r3, #255	@ 0xff
 8000cae:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000cb4:	e013      	b.n	8000cde <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	4053      	eors	r3, r2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000cc6:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <crc16+0x68>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	4053      	eors	r3, r2
 8000cd2:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <crc16+0x6c>)
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	807a      	strh	r2, [r7, #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e6      	bne.n	8000cb6 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	b29b      	uxth	r3, r3
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	08004654 	.word	0x08004654
 8000d0c:	08004754 	.word	0x08004754

08000d10 <send_sms>:
 */
#include "main.h"
#include "sys_init.h"


void send_sms(const char *phone_number, const char *message) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0e2      	sub	sp, #392	@ 0x188
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000d1e:	6018      	str	r0, [r3, #0]
 8000d20:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d24:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000d28:	6019      	str	r1, [r3, #0]
	char response[256];
    send_at_command("AT\r\n",response,500);
 8000d2a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d2e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d32:	4619      	mov	r1, r3
 8000d34:	481f      	ldr	r0, [pc, #124]	@ (8000db4 <send_sms+0xa4>)
 8000d36:	f7ff fc75 	bl	8000624 <send_at_command>
    send_at_command("AT+CSMP?\r\n",response,500);
 8000d3a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d3e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d42:	4619      	mov	r1, r3
 8000d44:	481c      	ldr	r0, [pc, #112]	@ (8000db8 <send_sms+0xa8>)
 8000d46:	f7ff fc6d 	bl	8000624 <send_at_command>
    send_at_command("AT+CMGF=1\r\n",response,500);
 8000d4a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d4e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <send_sms+0xac>)
 8000d56:	f7ff fc65 	bl	8000624 <send_at_command>
    send_at_command("AT+CSMP=17,167,0,0\r\n",response,500);
 8000d5a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000d5e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4816      	ldr	r0, [pc, #88]	@ (8000dc0 <send_sms+0xb0>)
 8000d66:	f7ff fc5d 	bl	8000624 <send_at_command>

    //Set Number
    char mqtt_id[128];
    snprintf(mqtt_id, sizeof(mqtt_id), "AT+CMGS=\"%s\"\r\n",phone_number);
 8000d6a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d6e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8000d72:	f107 0008 	add.w	r0, r7, #8
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <send_sms+0xb4>)
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	f002 fd6c 	bl	8003858 <sniprintf>
    send_at_command(mqtt_id, response, 500);
 8000d80:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fc49 	bl	8000624 <send_at_command>
    send_at_command(message, response, 500);
 8000d92:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000d96:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d9a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000d9e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	f7ff fc3e 	bl	8000624 <send_at_command>

}
 8000da8:	bf00      	nop
 8000daa:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	080045ec 	.word	0x080045ec
 8000db8:	080045f4 	.word	0x080045f4
 8000dbc:	08004600 	.word	0x08004600
 8000dc0:	0800460c 	.word	0x0800460c
 8000dc4:	08004624 	.word	0x08004624

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	@ 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb4 <HAL_UART_MspInit+0x19c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12d      	bne.n	8000e96 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a5d      	ldr	r2, [pc, #372]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	4b57      	ldr	r3, [pc, #348]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a56      	ldr	r2, [pc, #344]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b54      	ldr	r3, [pc, #336]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e84:	2307      	movs	r3, #7
 8000e86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	484b      	ldr	r0, [pc, #300]	@ (8000fbc <HAL_UART_MspInit+0x1a4>)
 8000e90:	f000 fc98 	bl	80017c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e94:	e089      	b.n	8000faa <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a49      	ldr	r2, [pc, #292]	@ (8000fc0 <HAL_UART_MspInit+0x1a8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d12c      	bne.n	8000efa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	4b44      	ldr	r3, [pc, #272]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a43      	ldr	r2, [pc, #268]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b41      	ldr	r3, [pc, #260]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4832      	ldr	r0, [pc, #200]	@ (8000fbc <HAL_UART_MspInit+0x1a4>)
 8000ef4:	f000 fc66 	bl	80017c4 <HAL_GPIO_Init>
}
 8000ef8:	e057      	b.n	8000faa <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a31      	ldr	r2, [pc, #196]	@ (8000fc4 <HAL_UART_MspInit+0x1ac>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d152      	bne.n	8000faa <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f14:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f30:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f44:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_UART_MspInit+0x1a0>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f58:	2320      	movs	r3, #32
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4815      	ldr	r0, [pc, #84]	@ (8000fc8 <HAL_UART_MspInit+0x1b0>)
 8000f74:	f000 fc26 	bl	80017c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <HAL_UART_MspInit+0x1b4>)
 8000f96:	f000 fc15 	bl	80017c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2027      	movs	r0, #39	@ 0x27
 8000fa0:	f000 fb47 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fa4:	2027      	movs	r0, #39	@ 0x27
 8000fa6:	f000 fb60 	bl	800166a <HAL_NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3738      	adds	r7, #56	@ 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40004400 	.word	0x40004400
 8000fc4:	40004800 	.word	0x40004800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f9e5 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <USART3_IRQHandler+0x10>)
 8001036:	f001 fca5 	bl	8002984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001b4 	.word	0x200001b4

08001044 <SystemClock_Config>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;


extern void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2234      	movs	r2, #52	@ 0x34
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fc58 	bl	8003908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <SystemClock_Config+0xd4>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <SystemClock_Config+0xd4>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <SystemClock_Config+0xd4>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4b24      	ldr	r3, [pc, #144]	@ (800111c <SystemClock_Config+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <SystemClock_Config+0xd8>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <SystemClock_Config+0xd8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010bc:	2348      	movs	r3, #72	@ 0x48
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 ffe9 	bl	80020a8 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010dc:	f7ff fa86 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fd0e 	bl	8001b20 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800110a:	f7ff fa6f 	bl	80005ec <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_USART1_UART_Init>:

extern void MX_USART1_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <MX_USART1_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_USART1_UART_Init+0x4c>)
 8001158:	f001 fa44 	bl	80025e4 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f7ff fa43 	bl	80005ec <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000124 	.word	0x20000124
 8001170:	40011000 	.word	0x40011000

08001174 <MX_USART2_UART_Init>:

extern void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <MX_USART2_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011ae:	f001 fa19 	bl	80025e4 <HAL_UART_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80011b8:	f7ff fa18 	bl	80005ec <Error_Handler>
  }
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000016c 	.word	0x2000016c
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_GPIO_Init>:
    Error_Handler();
  }
}

extern void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <MX_GPIO_Init+0x9c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <MX_GPIO_Init+0x9c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <MX_GPIO_Init+0x9c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <MX_GPIO_Init+0x9c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <MX_GPIO_Init+0x9c>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_GPIO_Init+0x9c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_GPIO_Init+0x9c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <MX_GPIO_Init+0x9c>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_GPIO_Init+0x9c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001238:	480b      	ldr	r0, [pc, #44]	@ (8001268 <MX_GPIO_Init+0xa0>)
 800123a:	f000 fc57 	bl	8001aec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800123e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_GPIO_Init+0xa0>)
 8001258:	f000 fab4 	bl	80017c4 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f002 fb52 	bl	8003944 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	200001fc 	.word	0x200001fc
 80012d4:	20000350 	.word	0x20000350

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	@ (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	@ (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800132a:	f002 fb11 	bl	8003950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fbbd 	bl	8000aac <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001340:	080048b0 	.word	0x080048b0
  ldr r2, =_sbss
 8001344:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001348:	2000034c 	.word	0x2000034c

0800134c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f94f 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fd20 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f967 	bl	8001686 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f92f 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	20000200 	.word	0x20000200

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000200 	.word	0x20000200

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	@ (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	@ (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	@ (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff29 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff3e 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff8e 	bl	8001570 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5d 	bl	800151c <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff31 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff feb6 	bl	800141c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d008      	beq.n	80016d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e052      	b.n	8001776 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0216 	bic.w	r2, r2, #22
 80016de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d103      	bne.n	8001700 <HAL_DMA_Abort+0x62>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	e013      	b.n	800174a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fe7b 	bl	800141c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d90c      	bls.n	800174a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e015      	b.n	8001776 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e4      	bne.n	8001722 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	223f      	movs	r2, #63	@ 0x3f
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d004      	beq.n	800179c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00c      	b.n	80017b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2205      	movs	r2, #5
 80017a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e165      	b.n	8001aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8154 	bne.w	8001aa6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d005      	beq.n	8001816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	2b02      	cmp	r3, #2
 8001814:	d130      	bne.n	8001878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ae 	beq.w	8001aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001966:	4a58      	ldr	r2, [pc, #352]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4f      	ldr	r2, [pc, #316]	@ (8001acc <HAL_GPIO_Init+0x308>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x21a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad0 <HAL_GPIO_Init+0x30c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x216>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x212>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad8 <HAL_GPIO_Init+0x314>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x20e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	@ (8001adc <HAL_GPIO_Init+0x318>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x20a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae0 <HAL_GPIO_Init+0x31c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x206>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	@ (8001ae4 <HAL_GPIO_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x202>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x21c>
 80019de:	2300      	movs	r3, #0
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a22:	4a31      	ldr	r2, [pc, #196]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a52:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa0:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <HAL_GPIO_Init+0x324>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	f67f ae96 	bls.w	80017e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0cc      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b68      	ldr	r3, [pc, #416]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d90c      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b65      	ldr	r3, [pc, #404]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b8      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b74:	4b59      	ldr	r3, [pc, #356]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b8c:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	494d      	ldr	r1, [pc, #308]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d044      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d119      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e067      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4934      	ldr	r1, [pc, #208]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff fc04 	bl	800141c <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff fc00 	bl	800141c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d20c      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e032      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4916      	ldr	r1, [pc, #88]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490e      	ldr	r1, [pc, #56]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca6:	f000 f855 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490a      	ldr	r1, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	4a09      	ldr	r2, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fb64 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08004854 	.word	0x08004854
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08004864 	.word	0x08004864

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d30:	f7ff ffdc 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0b5b      	lsrs	r3, r3, #13
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4903      	ldr	r1, [pc, #12]	@ (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08004864 	.word	0x08004864

08001d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b0a6      	sub	sp, #152	@ 0x98
 8001d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7a:	4bc8      	ldr	r3, [pc, #800]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	f200 817e 	bhi.w	8002084 <HAL_RCC_GetSysClockFreq+0x330>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08002085 	.word	0x08002085
 8001d98:	08002085 	.word	0x08002085
 8001d9c:	08002085 	.word	0x08002085
 8001da0:	08001dcd 	.word	0x08001dcd
 8001da4:	08002085 	.word	0x08002085
 8001da8:	08002085 	.word	0x08002085
 8001dac:	08002085 	.word	0x08002085
 8001db0:	08001dd5 	.word	0x08001dd5
 8001db4:	08002085 	.word	0x08002085
 8001db8:	08002085 	.word	0x08002085
 8001dbc:	08002085 	.word	0x08002085
 8001dc0:	08001f3f 	.word	0x08001f3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4bb6      	ldr	r3, [pc, #728]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001dca:	e15f      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4bb5      	ldr	r3, [pc, #724]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001dd2:	e15b      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd4:	4bb1      	ldr	r3, [pc, #708]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de0:	4bae      	ldr	r3, [pc, #696]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d031      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4bab      	ldr	r3, [pc, #684]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	2200      	movs	r2, #0
 8001df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e00:	2300      	movs	r3, #0
 8001e02:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e04:	4ba7      	ldr	r3, [pc, #668]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e0a:	462a      	mov	r2, r5
 8001e0c:	fb03 f202 	mul.w	r2, r3, r2
 8001e10:	2300      	movs	r3, #0
 8001e12:	4621      	mov	r1, r4
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	4aa2      	ldr	r2, [pc, #648]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	fba1 1202 	umull	r1, r2, r1, r2
 8001e22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e24:	460a      	mov	r2, r1
 8001e26:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001e28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e2a:	4413      	add	r3, r2
 8001e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e32:	2200      	movs	r2, #0
 8001e34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e40:	f7fe fa3e 	bl	80002c0 <__aeabi_uldivmod>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4613      	mov	r3, r2
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e4e:	e064      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e50:	4b92      	ldr	r3, [pc, #584]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	2200      	movs	r2, #0
 8001e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e5a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e64:	2300      	movs	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0159      	lsls	r1, r3, #5
 8001e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e7e:	0150      	lsls	r0, r2, #5
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4621      	mov	r1, r4
 8001e86:	1a51      	subs	r1, r2, r1
 8001e88:	6139      	str	r1, [r7, #16]
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	018b      	lsls	r3, r1, #6
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	018a      	lsls	r2, r1, #6
 8001eac:	4651      	mov	r1, sl
 8001eae:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	eb63 0901 	sbc.w	r9, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ecc:	4690      	mov	r8, r2
 8001ece:	4699      	mov	r9, r3
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	eb18 0303 	adds.w	r3, r8, r3
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	462b      	mov	r3, r5
 8001eda:	eb49 0303 	adc.w	r3, r9, r3
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eec:	4629      	mov	r1, r5
 8001eee:	028b      	lsls	r3, r1, #10
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	028a      	lsls	r2, r1, #10
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f02:	2200      	movs	r2, #0
 8001f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f06:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f0c:	f7fe f9d8 	bl	80002c0 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f1a:	4b60      	ldr	r3, [pc, #384]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c1b      	lsrs	r3, r3, #16
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	3301      	adds	r3, #1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001f2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f3c:	e0a6      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3e:	4b57      	ldr	r3, [pc, #348]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4a:	4b54      	ldr	r3, [pc, #336]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d02a      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b51      	ldr	r3, [pc, #324]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f6c:	fb03 f201 	mul.w	r2, r3, r1
 8001f70:	2300      	movs	r3, #0
 8001f72:	fb00 f303 	mul.w	r3, r0, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	4a4a      	ldr	r2, [pc, #296]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f7a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f80:	460a      	mov	r2, r1
 8001f82:	673a      	str	r2, [r7, #112]	@ 0x70
 8001f84:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001f86:	4413      	add	r3, r2
 8001f88:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f8e:	2200      	movs	r2, #0
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f92:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001f9c:	f7fe f990 	bl	80002c0 <__aeabi_uldivmod>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001faa:	e05b      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fac:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fc8:	4642      	mov	r2, r8
 8001fca:	464b      	mov	r3, r9
 8001fcc:	f04f 0000 	mov.w	r0, #0
 8001fd0:	f04f 0100 	mov.w	r1, #0
 8001fd4:	0159      	lsls	r1, r3, #5
 8001fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fda:	0150      	lsls	r0, r2, #5
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fe6:	4649      	mov	r1, r9
 8001fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002000:	ebb2 040a 	subs.w	r4, r2, sl
 8002004:	eb63 050b 	sbc.w	r5, r3, fp
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	00eb      	lsls	r3, r5, #3
 8002012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002016:	00e2      	lsls	r2, r4, #3
 8002018:	4614      	mov	r4, r2
 800201a:	461d      	mov	r5, r3
 800201c:	4643      	mov	r3, r8
 800201e:	18e3      	adds	r3, r4, r3
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	464b      	mov	r3, r9
 8002024:	eb45 0303 	adc.w	r3, r5, r3
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002036:	4629      	mov	r1, r5
 8002038:	028b      	lsls	r3, r1, #10
 800203a:	4621      	mov	r1, r4
 800203c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002040:	4621      	mov	r1, r4
 8002042:	028a      	lsls	r2, r1, #10
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204c:	2200      	movs	r2, #0
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	61fa      	str	r2, [r7, #28]
 8002052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002056:	f7fe f933 	bl	80002c0 <__aeabi_uldivmod>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4613      	mov	r3, r2
 8002060:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_RCC_GetSysClockFreq+0x348>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0f1b      	lsrs	r3, r3, #28
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002072:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002082:	e003      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800208a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002090:	4618      	mov	r0, r3
 8002092:	3798      	adds	r7, #152	@ 0x98
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	017d7840 	.word	0x017d7840

080020a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e28d      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8083 	beq.w	80021ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020c8:	4b94      	ldr	r3, [pc, #592]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d019      	beq.n	8002108 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020d4:	4b91      	ldr	r3, [pc, #580]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020e0:	4b8e      	ldr	r3, [pc, #568]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b8b      	ldr	r3, [pc, #556]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b84      	ldr	r3, [pc, #528]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x124>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e25a      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x90>
 800212a:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7b      	ldr	r2, [pc, #492]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xcc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xb4>
 8002142:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a75      	ldr	r2, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b73      	ldr	r3, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a72      	ldr	r2, [pc, #456]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xcc>
 800215c:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b6c      	ldr	r3, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6b      	ldr	r2, [pc, #428]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f94e 	bl	800141c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff f94a 	bl	800141c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e21f      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b61      	ldr	r3, [pc, #388]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xdc>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f93a 	bl	800141c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff f936 	bl	800141c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e20b      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b57      	ldr	r3, [pc, #348]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x104>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06f      	beq.n	80022ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021da:	4b50      	ldr	r3, [pc, #320]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80021e6:	4b4d      	ldr	r3, [pc, #308]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b44      	ldr	r3, [pc, #272]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x186>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1d3      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4937      	ldr	r1, [pc, #220]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224c:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCC_OscConfig+0x278>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f8e3 	bl	800141c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7ff f8df 	bl	800141c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1b4      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b28      	ldr	r3, [pc, #160]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4925      	ldr	r1, [pc, #148]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_RCC_OscConfig+0x278>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff f8c2 	bl	800141c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229c:	f7ff f8be 	bl	800141c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e193      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d036      	beq.n	8002334 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff f8a2 	bl	800141c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff f89e 	bl	800141c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e173      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x234>
 80022fa:	e01b      	b.n	8002334 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_OscConfig+0x27c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7ff f88b 	bl	800141c <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	e00e      	b.n	8002328 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230a:	f7ff f887 	bl	800141c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d907      	bls.n	8002328 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e15c      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b8a      	ldr	r3, [pc, #552]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ea      	bne.n	800230a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8097 	beq.w	8002470 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b83      	ldr	r3, [pc, #524]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b7f      	ldr	r3, [pc, #508]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a7e      	ldr	r2, [pc, #504]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
 8002362:	4b7c      	ldr	r3, [pc, #496]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b79      	ldr	r3, [pc, #484]	@ (8002558 <HAL_RCC_OscConfig+0x4b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b76      	ldr	r3, [pc, #472]	@ (8002558 <HAL_RCC_OscConfig+0x4b0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a75      	ldr	r2, [pc, #468]	@ (8002558 <HAL_RCC_OscConfig+0x4b0>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff f847 	bl	800141c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff f843 	bl	800141c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e118      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002558 <HAL_RCC_OscConfig+0x4b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x31e>
 80023b8:	4b66      	ldr	r3, [pc, #408]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a65      	ldr	r2, [pc, #404]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x358>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x340>
 80023ce:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a60      	ldr	r2, [pc, #384]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	4b5e      	ldr	r3, [pc, #376]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023de:	4a5d      	ldr	r2, [pc, #372]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x358>
 80023e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	4a59      	ldr	r2, [pc, #356]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f4:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	4a56      	ldr	r2, [pc, #344]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff f808 	bl	800141c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7ff f804 	bl	800141c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0d7      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCC_OscConfig+0x368>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fff2 	bl	800141c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe ffee 	bl	800141c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0c1      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002452:	4b40      	ldr	r3, [pc, #256]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ee      	bne.n	800243c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b3b      	ldr	r3, [pc, #236]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	4a3a      	ldr	r2, [pc, #232]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80ad 	beq.w	80025d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247a:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d060      	beq.n	8002548 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d145      	bne.n	800251a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x4b4>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe ffc2 	bl	800141c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe ffbe 	bl	800141c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e093      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	019b      	lsls	r3, r3, #6
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	491b      	ldr	r1, [pc, #108]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x4b4>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe ff93 	bl	800141c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe ff8f 	bl	800141c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e064      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x452>
 8002518:	e05c      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_RCC_OscConfig+0x4b4>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe ff7c 	bl	800141c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe ff78 	bl	800141c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04d      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x480>
 8002546:	e045      	b.n	80025d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e040      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
 8002554:	40023800 	.word	0x40023800
 8002558:	40007000 	.word	0x40007000
 800255c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <HAL_RCC_OscConfig+0x538>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d030      	beq.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d129      	bne.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d122      	bne.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	4293      	cmp	r3, r2
 800259a:	d119      	bne.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10f      	bne.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fc04 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2224      	movs	r2, #36	@ 0x24
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fea1 	bl	8003370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800263c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800264c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800265c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d175      	bne.n	8002790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_UART_Transmit+0x2c>
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e06e      	b.n	8002792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	@ 0x21
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c2:	f7fe feab 	bl	800141c <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88fa      	ldrh	r2, [r7, #6]
 80026d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026dc:	d108      	bne.n	80026f0 <HAL_UART_Transmit+0x6c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e003      	b.n	80026f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f8:	e02e      	b.n	8002758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	@ 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fc05 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e03a      	b.n	8002792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3302      	adds	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e007      	b.n	800274a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3301      	adds	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1cb      	bne.n	80026fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fbd1 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e006      	b.n	8002792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b08a      	sub	sp, #40	@ 0x28
 800279e:	af02      	add	r7, sp, #8
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	f040 8081 	bne.w	80028be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_UART_Receive+0x2e>
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e079      	b.n	80028c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2222      	movs	r2, #34	@ 0x22
 80027d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fe1c 	bl	800141c <HAL_GetTick>
 80027e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fa:	d108      	bne.n	800280e <HAL_UART_Receive+0x74>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e003      	b.n	8002816 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002816:	e047      	b.n	80028a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	2120      	movs	r1, #32
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fb76 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e042      	b.n	80028c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284c:	b29a      	uxth	r2, r3
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3302      	adds	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e01f      	b.n	800289a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002862:	d007      	beq.n	8002874 <HAL_UART_Receive+0xda>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_UART_Receive+0xe8>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e008      	b.n	8002894 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800288e:	b2da      	uxtb	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1b2      	bne.n	8002818 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d14a      	bne.n	8002978 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e043      	b.n	800297a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	461a      	mov	r2, r3
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fb5e 	bl	8002fc6 <UART_Start_Receive_IT>
 800290a:	4603      	mov	r3, r0
 800290c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002914:	2b00      	cmp	r3, #0
 8002916:	d12c      	bne.n	8002972 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	2b01      	cmp	r3, #1
 800291e:	d125      	bne.n	800296c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	617b      	str	r3, [r7, #20]
   return(result);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f043 0310 	orr.w	r3, r3, #16
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002956:	627a      	str	r2, [r7, #36]	@ 0x24
 8002958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	61fb      	str	r3, [r7, #28]
   return(result);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e5      	bne.n	8002936 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800296a:	e002      	b.n	8002972 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002976:	e000      	b.n	800297a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3730      	adds	r7, #48	@ 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0ba      	sub	sp, #232	@ 0xe8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10f      	bne.n	80029ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_UART_IRQHandler+0x66>
 80029d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fc05 	bl	80031f2 <UART_Receive_IT>
      return;
 80029e8:	e273      	b.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80de 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x22c>
 80029f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80d1 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_UART_IRQHandler+0xae>
 8002a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_UART_IRQHandler+0xd2>
 8002a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xf6>
 8002a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d011      	beq.n	8002aaa <HAL_UART_IRQHandler+0x126>
 8002a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f043 0208 	orr.w	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 820a 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x14e>
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb90 	bl	80031f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002adc:	2b40      	cmp	r3, #64	@ 0x40
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_UART_IRQHandler+0x17a>
 8002af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04f      	beq.n	8002b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa9b 	bl	800303a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	d141      	bne.n	8002b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1d9      	bne.n	8002b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d013      	beq.n	8002b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	4a8a      	ldr	r2, [pc, #552]	@ (8002d94 <HAL_UART_IRQHandler+0x410>)
 8002b6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fe03 	bl	800177e <HAL_DMA_Abort_IT>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e00e      	b.n	8002bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9b6 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e00a      	b.n	8002bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9b2 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	e006      	b.n	8002bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9ae 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002baa:	e18d      	b.n	8002ec8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	bf00      	nop
    return;
 8002bae:	e18b      	b.n	8002ec8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8167 	bne.w	8002e88 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8160 	beq.w	8002e88 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8159 	beq.w	8002e88 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	f040 80ce 	bne.w	8002d98 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a9 	beq.w	8002d64 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	f080 80a2 	bcs.w	8002d64 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c32:	f000 8088 	beq.w	8002d46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1d9      	bne.n	8002c36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ca6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e1      	bne.n	8002c82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ce8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e3      	bne.n	8002cbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d16:	f023 0310 	bic.w	r3, r3, #16
 8002d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e3      	bne.n	8002d04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fcac 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fd ff03 	bl	8000b68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d62:	e0b3      	b.n	8002ecc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 80ad 	bne.w	8002ecc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7c:	f040 80a6 	bne.w	8002ecc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7fd feeb 	bl	8000b68 <HAL_UARTEx_RxEventCallback>
      return;
 8002d92:	e09b      	b.n	8002ecc <HAL_UART_IRQHandler+0x548>
 8002d94:	08003101 	.word	0x08003101
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 808e 	beq.w	8002ed0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8089 	beq.w	8002ed0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e3      	bne.n	8002dbe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	623b      	str	r3, [r7, #32]
   return(result);
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e60:	61fa      	str	r2, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd fe71 	bl	8000b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e86:	e023      	b.n	8002ed0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x524>
 8002e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f93e 	bl	8003122 <UART_Transmit_IT>
    return;
 8002ea6:	e014      	b.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
 8002eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f97e 	bl	80031c2 <UART_EndTransmit_IT>
    return;
 8002ec6:	e004      	b.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
    return;
 8002ec8:	bf00      	nop
 8002eca:	e002      	b.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
      return;
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <HAL_UART_IRQHandler+0x54e>
      return;
 8002ed0:	bf00      	nop
  }
}
 8002ed2:	37e8      	adds	r7, #232	@ 0xe8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f24:	e03b      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d037      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fa75 	bl	800141c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e03a      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d023      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b80      	cmp	r3, #128	@ 0x80
 8002f5a:	d020      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b40      	cmp	r3, #64	@ 0x40
 8002f60:	d01d      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d116      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f857 	bl	800303a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2208      	movs	r2, #8
 8002f90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00f      	b.n	8002fbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0b4      	beq.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2222      	movs	r2, #34	@ 0x22
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800300a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800303a:	b480      	push	{r7}
 800303c:	b095      	sub	sp, #84	@ 0x54
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003062:	643a      	str	r2, [r7, #64]	@ 0x40
 8003064:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003068:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e5      	bne.n	8003042 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	61fb      	str	r3, [r7, #28]
   return(result);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e5      	bne.n	8003076 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d119      	bne.n	80030e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f023 0310 	bic.w	r3, r3, #16
 80030c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d2:	61ba      	str	r2, [r7, #24]
 80030d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	613b      	str	r3, [r7, #16]
   return(result);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030f4:	bf00      	nop
 80030f6:	3754      	adds	r7, #84	@ 0x54
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fef3 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b21      	cmp	r3, #33	@ 0x21
 8003134:	d13e      	bne.n	80031b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d114      	bne.n	800316a <UART_Transmit_IT+0x48>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d110      	bne.n	800316a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]
 8003168:	e008      	b.n	800317c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6211      	str	r1, [r2, #32]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29b      	uxth	r3, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4619      	mov	r1, r3
 800318a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fe78 	bl	8002ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08c      	sub	sp, #48	@ 0x30
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b22      	cmp	r3, #34	@ 0x22
 800320c:	f040 80aa 	bne.w	8003364 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003218:	d115      	bne.n	8003246 <UART_Receive_IT+0x54>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d111      	bne.n	8003246 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	b29a      	uxth	r2, r3
 8003236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003238:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28
 8003244:	e024      	b.n	8003290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003254:	d007      	beq.n	8003266 <UART_Receive_IT+0x74>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <UART_Receive_IT+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e008      	b.n	8003286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003280:	b2da      	uxtb	r2, r3
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4619      	mov	r1, r3
 800329e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d15d      	bne.n	8003360 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0220 	bic.w	r2, r2, #32
 80032b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d135      	bne.n	8003356 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	623a      	str	r2, [r7, #32]
 8003312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	69f9      	ldr	r1, [r7, #28]
 8003316:	6a3a      	ldr	r2, [r7, #32]
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	61bb      	str	r3, [r7, #24]
   return(result);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d10a      	bne.n	8003348 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fc0a 	bl	8000b68 <HAL_UARTEx_RxEventCallback>
 8003354:	e002      	b.n	800335c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff fdc8 	bl	8002eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e002      	b.n	8003366 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3730      	adds	r7, #48	@ 0x30
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c0      	sub	sp, #256	@ 0x100
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033c8:	f021 010c 	bic.w	r1, r1, #12
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	6999      	ldr	r1, [r3, #24]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	ea40 0301 	orr.w	r3, r0, r1
 80033f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART_SetConfig+0x2cc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0xa0>
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8d      	ldr	r3, [pc, #564]	@ (8003640 <UART_SetConfig+0x2d0>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fc8c 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8003414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003418:	e003      	b.n	8003422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7fe fc73 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 800341e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342c:	f040 810c 	bne.w	8003648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800343a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800343e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1891      	adds	r1, r2, r2
 8003448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800344a:	415b      	adcs	r3, r3
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003452:	4621      	mov	r1, r4
 8003454:	eb12 0801 	adds.w	r8, r2, r1
 8003458:	4629      	mov	r1, r5
 800345a:	eb43 0901 	adc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	18db      	adds	r3, r3, r3
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a4:	4613      	mov	r3, r2
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b4:	f7fc ff04 	bl	80002c0 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <UART_SetConfig+0x2d4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034e0:	415b      	adcs	r3, r3
 80034e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034e8:	4641      	mov	r1, r8
 80034ea:	eb12 0a01 	adds.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0b01 	adc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003508:	4692      	mov	sl, r2
 800350a:	469b      	mov	fp, r3
 800350c:	4643      	mov	r3, r8
 800350e:	eb1a 0303 	adds.w	r3, sl, r3
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003516:	464b      	mov	r3, r9
 8003518:	eb4b 0303 	adc.w	r3, fp, r3
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003534:	460b      	mov	r3, r1
 8003536:	18db      	adds	r3, r3, r3
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
 800353a:	4613      	mov	r3, r2
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	647b      	str	r3, [r7, #68]	@ 0x44
 8003542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800354a:	f7fc feb9 	bl	80002c0 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b3b      	ldr	r3, [pc, #236]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800356a:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <UART_SetConfig+0x2d4>)
 800356c:	fba3 2302 	umull	r2, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003578:	441c      	add	r4, r3
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003594:	415b      	adcs	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035f0:	460b      	mov	r3, r1
 80035f2:	18db      	adds	r3, r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f6:	4613      	mov	r3, r2
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003606:	f7fc fe5b 	bl	80002c0 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0207 	and.w	r2, r3, #7
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003638:	e106      	b.n	8003848 <UART_SetConfig+0x4d8>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	1891      	adds	r1, r2, r2
 8003660:	6239      	str	r1, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	4641      	mov	r1, r8
 800366c:	1854      	adds	r4, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0501 	adc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003690:	464b      	mov	r3, r9
 8003692:	eb45 0303 	adc.w	r3, r5, r3
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036b6:	4629      	mov	r1, r5
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c0:	4621      	mov	r1, r4
 80036c2:	008a      	lsls	r2, r1, #2
 80036c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036c8:	f7fc fdfa 	bl	80002c0 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b60      	ldr	r3, [pc, #384]	@ (8003854 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	61b9      	str	r1, [r7, #24]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003766:	f7fc fdab 	bl	80002c0 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	@ 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	@ 0x32
 8003784:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	673b      	str	r3, [r7, #112]	@ 0x70
 800379a:	677a      	str	r2, [r7, #116]	@ 0x74
 800379c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003816:	f7fc fd53 	bl	80002c0 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	@ 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	3332      	adds	r3, #50	@ 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <sniprintf>:
 8003858:	b40c      	push	{r2, r3}
 800385a:	b530      	push	{r4, r5, lr}
 800385c:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <sniprintf+0x68>)
 800385e:	1e0c      	subs	r4, r1, #0
 8003860:	681d      	ldr	r5, [r3, #0]
 8003862:	b09d      	sub	sp, #116	@ 0x74
 8003864:	da08      	bge.n	8003878 <sniprintf+0x20>
 8003866:	238b      	movs	r3, #139	@ 0x8b
 8003868:	602b      	str	r3, [r5, #0]
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
 800386e:	b01d      	add	sp, #116	@ 0x74
 8003870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003874:	b002      	add	sp, #8
 8003876:	4770      	bx	lr
 8003878:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800387c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003886:	bf14      	ite	ne
 8003888:	f104 33ff 	addne.w	r3, r4, #4294967295
 800388c:	4623      	moveq	r3, r4
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	9307      	str	r3, [sp, #28]
 8003892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003896:	9002      	str	r0, [sp, #8]
 8003898:	9006      	str	r0, [sp, #24]
 800389a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800389e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038a0:	ab21      	add	r3, sp, #132	@ 0x84
 80038a2:	a902      	add	r1, sp, #8
 80038a4:	4628      	mov	r0, r5
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	f000 f9cc 	bl	8003c44 <_svfiprintf_r>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	bfbc      	itt	lt
 80038b0:	238b      	movlt	r3, #139	@ 0x8b
 80038b2:	602b      	strlt	r3, [r5, #0]
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	d0da      	beq.n	800386e <sniprintf+0x16>
 80038b8:	9b02      	ldr	r3, [sp, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e7d6      	b.n	800386e <sniprintf+0x16>
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <siprintf>:
 80038c4:	b40e      	push	{r1, r2, r3}
 80038c6:	b510      	push	{r4, lr}
 80038c8:	b09d      	sub	sp, #116	@ 0x74
 80038ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80038cc:	9002      	str	r0, [sp, #8]
 80038ce:	9006      	str	r0, [sp, #24]
 80038d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038d4:	480a      	ldr	r0, [pc, #40]	@ (8003900 <siprintf+0x3c>)
 80038d6:	9107      	str	r1, [sp, #28]
 80038d8:	9104      	str	r1, [sp, #16]
 80038da:	490a      	ldr	r1, [pc, #40]	@ (8003904 <siprintf+0x40>)
 80038dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e0:	9105      	str	r1, [sp, #20]
 80038e2:	2400      	movs	r4, #0
 80038e4:	a902      	add	r1, sp, #8
 80038e6:	6800      	ldr	r0, [r0, #0]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80038ec:	f000 f9aa 	bl	8003c44 <_svfiprintf_r>
 80038f0:	9b02      	ldr	r3, [sp, #8]
 80038f2:	701c      	strb	r4, [r3, #0]
 80038f4:	b01d      	add	sp, #116	@ 0x74
 80038f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fa:	b003      	add	sp, #12
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	2000000c 	.word	0x2000000c
 8003904:	ffff0208 	.word	0xffff0208

08003908 <memset>:
 8003908:	4402      	add	r2, r0
 800390a:	4603      	mov	r3, r0
 800390c:	4293      	cmp	r3, r2
 800390e:	d100      	bne.n	8003912 <memset+0xa>
 8003910:	4770      	bx	lr
 8003912:	f803 1b01 	strb.w	r1, [r3], #1
 8003916:	e7f9      	b.n	800390c <memset+0x4>

08003918 <strstr>:
 8003918:	780a      	ldrb	r2, [r1, #0]
 800391a:	b570      	push	{r4, r5, r6, lr}
 800391c:	b96a      	cbnz	r2, 800393a <strstr+0x22>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	429a      	cmp	r2, r3
 8003922:	d109      	bne.n	8003938 <strstr+0x20>
 8003924:	460c      	mov	r4, r1
 8003926:	4605      	mov	r5, r0
 8003928:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f6      	beq.n	800391e <strstr+0x6>
 8003930:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003934:	429e      	cmp	r6, r3
 8003936:	d0f7      	beq.n	8003928 <strstr+0x10>
 8003938:	3001      	adds	r0, #1
 800393a:	7803      	ldrb	r3, [r0, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <strstr+0x8>
 8003940:	4618      	mov	r0, r3
 8003942:	e7ec      	b.n	800391e <strstr+0x6>

08003944 <__errno>:
 8003944:	4b01      	ldr	r3, [pc, #4]	@ (800394c <__errno+0x8>)
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	2000000c 	.word	0x2000000c

08003950 <__libc_init_array>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4d0d      	ldr	r5, [pc, #52]	@ (8003988 <__libc_init_array+0x38>)
 8003954:	4c0d      	ldr	r4, [pc, #52]	@ (800398c <__libc_init_array+0x3c>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	2600      	movs	r6, #0
 800395c:	42a6      	cmp	r6, r4
 800395e:	d109      	bne.n	8003974 <__libc_init_array+0x24>
 8003960:	4d0b      	ldr	r5, [pc, #44]	@ (8003990 <__libc_init_array+0x40>)
 8003962:	4c0c      	ldr	r4, [pc, #48]	@ (8003994 <__libc_init_array+0x44>)
 8003964:	f000 fc64 	bl	8004230 <_init>
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	2600      	movs	r6, #0
 800396e:	42a6      	cmp	r6, r4
 8003970:	d105      	bne.n	800397e <__libc_init_array+0x2e>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	f855 3b04 	ldr.w	r3, [r5], #4
 8003978:	4798      	blx	r3
 800397a:	3601      	adds	r6, #1
 800397c:	e7ee      	b.n	800395c <__libc_init_array+0xc>
 800397e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003982:	4798      	blx	r3
 8003984:	3601      	adds	r6, #1
 8003986:	e7f2      	b.n	800396e <__libc_init_array+0x1e>
 8003988:	080048a8 	.word	0x080048a8
 800398c:	080048a8 	.word	0x080048a8
 8003990:	080048a8 	.word	0x080048a8
 8003994:	080048ac 	.word	0x080048ac

08003998 <__retarget_lock_acquire_recursive>:
 8003998:	4770      	bx	lr

0800399a <__retarget_lock_release_recursive>:
 800399a:	4770      	bx	lr

0800399c <_free_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4605      	mov	r5, r0
 80039a0:	2900      	cmp	r1, #0
 80039a2:	d041      	beq.n	8003a28 <_free_r+0x8c>
 80039a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a8:	1f0c      	subs	r4, r1, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfb8      	it	lt
 80039ae:	18e4      	addlt	r4, r4, r3
 80039b0:	f000 f8e0 	bl	8003b74 <__malloc_lock>
 80039b4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a2c <_free_r+0x90>)
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	b933      	cbnz	r3, 80039c8 <_free_r+0x2c>
 80039ba:	6063      	str	r3, [r4, #4]
 80039bc:	6014      	str	r4, [r2, #0]
 80039be:	4628      	mov	r0, r5
 80039c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039c4:	f000 b8dc 	b.w	8003b80 <__malloc_unlock>
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	d908      	bls.n	80039de <_free_r+0x42>
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	1821      	adds	r1, r4, r0
 80039d0:	428b      	cmp	r3, r1
 80039d2:	bf01      	itttt	eq
 80039d4:	6819      	ldreq	r1, [r3, #0]
 80039d6:	685b      	ldreq	r3, [r3, #4]
 80039d8:	1809      	addeq	r1, r1, r0
 80039da:	6021      	streq	r1, [r4, #0]
 80039dc:	e7ed      	b.n	80039ba <_free_r+0x1e>
 80039de:	461a      	mov	r2, r3
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b10b      	cbz	r3, 80039e8 <_free_r+0x4c>
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d9fa      	bls.n	80039de <_free_r+0x42>
 80039e8:	6811      	ldr	r1, [r2, #0]
 80039ea:	1850      	adds	r0, r2, r1
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d10b      	bne.n	8003a08 <_free_r+0x6c>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	4401      	add	r1, r0
 80039f4:	1850      	adds	r0, r2, r1
 80039f6:	4283      	cmp	r3, r0
 80039f8:	6011      	str	r1, [r2, #0]
 80039fa:	d1e0      	bne.n	80039be <_free_r+0x22>
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	6053      	str	r3, [r2, #4]
 8003a02:	4408      	add	r0, r1
 8003a04:	6010      	str	r0, [r2, #0]
 8003a06:	e7da      	b.n	80039be <_free_r+0x22>
 8003a08:	d902      	bls.n	8003a10 <_free_r+0x74>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	e7d6      	b.n	80039be <_free_r+0x22>
 8003a10:	6820      	ldr	r0, [r4, #0]
 8003a12:	1821      	adds	r1, r4, r0
 8003a14:	428b      	cmp	r3, r1
 8003a16:	bf04      	itt	eq
 8003a18:	6819      	ldreq	r1, [r3, #0]
 8003a1a:	685b      	ldreq	r3, [r3, #4]
 8003a1c:	6063      	str	r3, [r4, #4]
 8003a1e:	bf04      	itt	eq
 8003a20:	1809      	addeq	r1, r1, r0
 8003a22:	6021      	streq	r1, [r4, #0]
 8003a24:	6054      	str	r4, [r2, #4]
 8003a26:	e7ca      	b.n	80039be <_free_r+0x22>
 8003a28:	bd38      	pop	{r3, r4, r5, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000348 	.word	0x20000348

08003a30 <sbrk_aligned>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	4e0f      	ldr	r6, [pc, #60]	@ (8003a70 <sbrk_aligned+0x40>)
 8003a34:	460c      	mov	r4, r1
 8003a36:	6831      	ldr	r1, [r6, #0]
 8003a38:	4605      	mov	r5, r0
 8003a3a:	b911      	cbnz	r1, 8003a42 <sbrk_aligned+0x12>
 8003a3c:	f000 fba4 	bl	8004188 <_sbrk_r>
 8003a40:	6030      	str	r0, [r6, #0]
 8003a42:	4621      	mov	r1, r4
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 fb9f 	bl	8004188 <_sbrk_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d103      	bne.n	8003a56 <sbrk_aligned+0x26>
 8003a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a52:	4620      	mov	r0, r4
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
 8003a56:	1cc4      	adds	r4, r0, #3
 8003a58:	f024 0403 	bic.w	r4, r4, #3
 8003a5c:	42a0      	cmp	r0, r4
 8003a5e:	d0f8      	beq.n	8003a52 <sbrk_aligned+0x22>
 8003a60:	1a21      	subs	r1, r4, r0
 8003a62:	4628      	mov	r0, r5
 8003a64:	f000 fb90 	bl	8004188 <_sbrk_r>
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d1f2      	bne.n	8003a52 <sbrk_aligned+0x22>
 8003a6c:	e7ef      	b.n	8003a4e <sbrk_aligned+0x1e>
 8003a6e:	bf00      	nop
 8003a70:	20000344 	.word	0x20000344

08003a74 <_malloc_r>:
 8003a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a78:	1ccd      	adds	r5, r1, #3
 8003a7a:	f025 0503 	bic.w	r5, r5, #3
 8003a7e:	3508      	adds	r5, #8
 8003a80:	2d0c      	cmp	r5, #12
 8003a82:	bf38      	it	cc
 8003a84:	250c      	movcc	r5, #12
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	4606      	mov	r6, r0
 8003a8a:	db01      	blt.n	8003a90 <_malloc_r+0x1c>
 8003a8c:	42a9      	cmp	r1, r5
 8003a8e:	d904      	bls.n	8003a9a <_malloc_r+0x26>
 8003a90:	230c      	movs	r3, #12
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	2000      	movs	r0, #0
 8003a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b70 <_malloc_r+0xfc>
 8003a9e:	f000 f869 	bl	8003b74 <__malloc_lock>
 8003aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	bb44      	cbnz	r4, 8003afc <_malloc_r+0x88>
 8003aaa:	4629      	mov	r1, r5
 8003aac:	4630      	mov	r0, r6
 8003aae:	f7ff ffbf 	bl	8003a30 <sbrk_aligned>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	d158      	bne.n	8003b6a <_malloc_r+0xf6>
 8003ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8003abc:	4627      	mov	r7, r4
 8003abe:	2f00      	cmp	r7, #0
 8003ac0:	d143      	bne.n	8003b4a <_malloc_r+0xd6>
 8003ac2:	2c00      	cmp	r4, #0
 8003ac4:	d04b      	beq.n	8003b5e <_malloc_r+0xea>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	4639      	mov	r1, r7
 8003aca:	4630      	mov	r0, r6
 8003acc:	eb04 0903 	add.w	r9, r4, r3
 8003ad0:	f000 fb5a 	bl	8004188 <_sbrk_r>
 8003ad4:	4581      	cmp	r9, r0
 8003ad6:	d142      	bne.n	8003b5e <_malloc_r+0xea>
 8003ad8:	6821      	ldr	r1, [r4, #0]
 8003ada:	1a6d      	subs	r5, r5, r1
 8003adc:	4629      	mov	r1, r5
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f7ff ffa6 	bl	8003a30 <sbrk_aligned>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d03a      	beq.n	8003b5e <_malloc_r+0xea>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	442b      	add	r3, r5
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	f8d8 3000 	ldr.w	r3, [r8]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	bb62      	cbnz	r2, 8003b50 <_malloc_r+0xdc>
 8003af6:	f8c8 7000 	str.w	r7, [r8]
 8003afa:	e00f      	b.n	8003b1c <_malloc_r+0xa8>
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	1b52      	subs	r2, r2, r5
 8003b00:	d420      	bmi.n	8003b44 <_malloc_r+0xd0>
 8003b02:	2a0b      	cmp	r2, #11
 8003b04:	d917      	bls.n	8003b36 <_malloc_r+0xc2>
 8003b06:	1961      	adds	r1, r4, r5
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	6025      	str	r5, [r4, #0]
 8003b0c:	bf18      	it	ne
 8003b0e:	6059      	strne	r1, [r3, #4]
 8003b10:	6863      	ldr	r3, [r4, #4]
 8003b12:	bf08      	it	eq
 8003b14:	f8c8 1000 	streq.w	r1, [r8]
 8003b18:	5162      	str	r2, [r4, r5]
 8003b1a:	604b      	str	r3, [r1, #4]
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 f82f 	bl	8003b80 <__malloc_unlock>
 8003b22:	f104 000b 	add.w	r0, r4, #11
 8003b26:	1d23      	adds	r3, r4, #4
 8003b28:	f020 0007 	bic.w	r0, r0, #7
 8003b2c:	1ac2      	subs	r2, r0, r3
 8003b2e:	bf1c      	itt	ne
 8003b30:	1a1b      	subne	r3, r3, r0
 8003b32:	50a3      	strne	r3, [r4, r2]
 8003b34:	e7af      	b.n	8003a96 <_malloc_r+0x22>
 8003b36:	6862      	ldr	r2, [r4, #4]
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	bf0c      	ite	eq
 8003b3c:	f8c8 2000 	streq.w	r2, [r8]
 8003b40:	605a      	strne	r2, [r3, #4]
 8003b42:	e7eb      	b.n	8003b1c <_malloc_r+0xa8>
 8003b44:	4623      	mov	r3, r4
 8003b46:	6864      	ldr	r4, [r4, #4]
 8003b48:	e7ae      	b.n	8003aa8 <_malloc_r+0x34>
 8003b4a:	463c      	mov	r4, r7
 8003b4c:	687f      	ldr	r7, [r7, #4]
 8003b4e:	e7b6      	b.n	8003abe <_malloc_r+0x4a>
 8003b50:	461a      	mov	r2, r3
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	42a3      	cmp	r3, r4
 8003b56:	d1fb      	bne.n	8003b50 <_malloc_r+0xdc>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6053      	str	r3, [r2, #4]
 8003b5c:	e7de      	b.n	8003b1c <_malloc_r+0xa8>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 f80c 	bl	8003b80 <__malloc_unlock>
 8003b68:	e794      	b.n	8003a94 <_malloc_r+0x20>
 8003b6a:	6005      	str	r5, [r0, #0]
 8003b6c:	e7d6      	b.n	8003b1c <_malloc_r+0xa8>
 8003b6e:	bf00      	nop
 8003b70:	20000348 	.word	0x20000348

08003b74 <__malloc_lock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	@ (8003b7c <__malloc_lock+0x8>)
 8003b76:	f7ff bf0f 	b.w	8003998 <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	20000340 	.word	0x20000340

08003b80 <__malloc_unlock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__malloc_unlock+0x8>)
 8003b82:	f7ff bf0a 	b.w	800399a <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	20000340 	.word	0x20000340

08003b8c <__ssputs_r>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	688e      	ldr	r6, [r1, #8]
 8003b92:	461f      	mov	r7, r3
 8003b94:	42be      	cmp	r6, r7
 8003b96:	680b      	ldr	r3, [r1, #0]
 8003b98:	4682      	mov	sl, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4690      	mov	r8, r2
 8003b9e:	d82d      	bhi.n	8003bfc <__ssputs_r+0x70>
 8003ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ba8:	d026      	beq.n	8003bf8 <__ssputs_r+0x6c>
 8003baa:	6965      	ldr	r5, [r4, #20]
 8003bac:	6909      	ldr	r1, [r1, #16]
 8003bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bb2:	eba3 0901 	sub.w	r9, r3, r1
 8003bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bba:	1c7b      	adds	r3, r7, #1
 8003bbc:	444b      	add	r3, r9
 8003bbe:	106d      	asrs	r5, r5, #1
 8003bc0:	429d      	cmp	r5, r3
 8003bc2:	bf38      	it	cc
 8003bc4:	461d      	movcc	r5, r3
 8003bc6:	0553      	lsls	r3, r2, #21
 8003bc8:	d527      	bpl.n	8003c1a <__ssputs_r+0x8e>
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7ff ff52 	bl	8003a74 <_malloc_r>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	b360      	cbz	r0, 8003c2e <__ssputs_r+0xa2>
 8003bd4:	6921      	ldr	r1, [r4, #16]
 8003bd6:	464a      	mov	r2, r9
 8003bd8:	f000 fae6 	bl	80041a8 <memcpy>
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	6126      	str	r6, [r4, #16]
 8003bea:	6165      	str	r5, [r4, #20]
 8003bec:	444e      	add	r6, r9
 8003bee:	eba5 0509 	sub.w	r5, r5, r9
 8003bf2:	6026      	str	r6, [r4, #0]
 8003bf4:	60a5      	str	r5, [r4, #8]
 8003bf6:	463e      	mov	r6, r7
 8003bf8:	42be      	cmp	r6, r7
 8003bfa:	d900      	bls.n	8003bfe <__ssputs_r+0x72>
 8003bfc:	463e      	mov	r6, r7
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	4632      	mov	r2, r6
 8003c02:	4641      	mov	r1, r8
 8003c04:	f000 faa6 	bl	8004154 <memmove>
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	1b9b      	subs	r3, r3, r6
 8003c0c:	60a3      	str	r3, [r4, #8]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	4433      	add	r3, r6
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	2000      	movs	r0, #0
 8003c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1a:	462a      	mov	r2, r5
 8003c1c:	f000 fad2 	bl	80041c4 <_realloc_r>
 8003c20:	4606      	mov	r6, r0
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1e0      	bne.n	8003be8 <__ssputs_r+0x5c>
 8003c26:	6921      	ldr	r1, [r4, #16]
 8003c28:	4650      	mov	r0, sl
 8003c2a:	f7ff feb7 	bl	800399c <_free_r>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	f8ca 3000 	str.w	r3, [sl]
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	e7e9      	b.n	8003c16 <__ssputs_r+0x8a>
	...

08003c44 <_svfiprintf_r>:
 8003c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	4698      	mov	r8, r3
 8003c4a:	898b      	ldrh	r3, [r1, #12]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	b09d      	sub	sp, #116	@ 0x74
 8003c50:	4607      	mov	r7, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	4614      	mov	r4, r2
 8003c56:	d510      	bpl.n	8003c7a <_svfiprintf_r+0x36>
 8003c58:	690b      	ldr	r3, [r1, #16]
 8003c5a:	b973      	cbnz	r3, 8003c7a <_svfiprintf_r+0x36>
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	f7ff ff09 	bl	8003a74 <_malloc_r>
 8003c62:	6028      	str	r0, [r5, #0]
 8003c64:	6128      	str	r0, [r5, #16]
 8003c66:	b930      	cbnz	r0, 8003c76 <_svfiprintf_r+0x32>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	@ 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	2340      	movs	r3, #64	@ 0x40
 8003c78:	616b      	str	r3, [r5, #20]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c7e:	2320      	movs	r3, #32
 8003c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c88:	2330      	movs	r3, #48	@ 0x30
 8003c8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e28 <_svfiprintf_r+0x1e4>
 8003c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c92:	f04f 0901 	mov.w	r9, #1
 8003c96:	4623      	mov	r3, r4
 8003c98:	469a      	mov	sl, r3
 8003c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c9e:	b10a      	cbz	r2, 8003ca4 <_svfiprintf_r+0x60>
 8003ca0:	2a25      	cmp	r2, #37	@ 0x25
 8003ca2:	d1f9      	bne.n	8003c98 <_svfiprintf_r+0x54>
 8003ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ca8:	d00b      	beq.n	8003cc2 <_svfiprintf_r+0x7e>
 8003caa:	465b      	mov	r3, fp
 8003cac:	4622      	mov	r2, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f7ff ff6b 	bl	8003b8c <__ssputs_r>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f000 80a7 	beq.w	8003e0a <_svfiprintf_r+0x1c6>
 8003cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cbe:	445a      	add	r2, fp
 8003cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 809f 	beq.w	8003e0a <_svfiprintf_r+0x1c6>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cd6:	f10a 0a01 	add.w	sl, sl, #1
 8003cda:	9304      	str	r3, [sp, #16]
 8003cdc:	9307      	str	r3, [sp, #28]
 8003cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ce4:	4654      	mov	r4, sl
 8003ce6:	2205      	movs	r2, #5
 8003ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cec:	484e      	ldr	r0, [pc, #312]	@ (8003e28 <_svfiprintf_r+0x1e4>)
 8003cee:	f7fc fa97 	bl	8000220 <memchr>
 8003cf2:	9a04      	ldr	r2, [sp, #16]
 8003cf4:	b9d8      	cbnz	r0, 8003d2e <_svfiprintf_r+0xea>
 8003cf6:	06d0      	lsls	r0, r2, #27
 8003cf8:	bf44      	itt	mi
 8003cfa:	2320      	movmi	r3, #32
 8003cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d00:	0711      	lsls	r1, r2, #28
 8003d02:	bf44      	itt	mi
 8003d04:	232b      	movmi	r3, #43	@ 0x2b
 8003d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d10:	d015      	beq.n	8003d3e <_svfiprintf_r+0xfa>
 8003d12:	9a07      	ldr	r2, [sp, #28]
 8003d14:	4654      	mov	r4, sl
 8003d16:	2000      	movs	r0, #0
 8003d18:	f04f 0c0a 	mov.w	ip, #10
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d22:	3b30      	subs	r3, #48	@ 0x30
 8003d24:	2b09      	cmp	r3, #9
 8003d26:	d94b      	bls.n	8003dc0 <_svfiprintf_r+0x17c>
 8003d28:	b1b0      	cbz	r0, 8003d58 <_svfiprintf_r+0x114>
 8003d2a:	9207      	str	r2, [sp, #28]
 8003d2c:	e014      	b.n	8003d58 <_svfiprintf_r+0x114>
 8003d2e:	eba0 0308 	sub.w	r3, r0, r8
 8003d32:	fa09 f303 	lsl.w	r3, r9, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	46a2      	mov	sl, r4
 8003d3c:	e7d2      	b.n	8003ce4 <_svfiprintf_r+0xa0>
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	1d19      	adds	r1, r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	9103      	str	r1, [sp, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfbb      	ittet	lt
 8003d4a:	425b      	neglt	r3, r3
 8003d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003d50:	9307      	strge	r3, [sp, #28]
 8003d52:	9307      	strlt	r3, [sp, #28]
 8003d54:	bfb8      	it	lt
 8003d56:	9204      	strlt	r2, [sp, #16]
 8003d58:	7823      	ldrb	r3, [r4, #0]
 8003d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d5c:	d10a      	bne.n	8003d74 <_svfiprintf_r+0x130>
 8003d5e:	7863      	ldrb	r3, [r4, #1]
 8003d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d62:	d132      	bne.n	8003dca <_svfiprintf_r+0x186>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	1d1a      	adds	r2, r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	9203      	str	r2, [sp, #12]
 8003d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d70:	3402      	adds	r4, #2
 8003d72:	9305      	str	r3, [sp, #20]
 8003d74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e38 <_svfiprintf_r+0x1f4>
 8003d78:	7821      	ldrb	r1, [r4, #0]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	f7fc fa4f 	bl	8000220 <memchr>
 8003d82:	b138      	cbz	r0, 8003d94 <_svfiprintf_r+0x150>
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	eba0 000a 	sub.w	r0, r0, sl
 8003d8a:	2240      	movs	r2, #64	@ 0x40
 8003d8c:	4082      	lsls	r2, r0
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	3401      	adds	r4, #1
 8003d92:	9304      	str	r3, [sp, #16]
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	4824      	ldr	r0, [pc, #144]	@ (8003e2c <_svfiprintf_r+0x1e8>)
 8003d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d9e:	2206      	movs	r2, #6
 8003da0:	f7fc fa3e 	bl	8000220 <memchr>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d036      	beq.n	8003e16 <_svfiprintf_r+0x1d2>
 8003da8:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <_svfiprintf_r+0x1ec>)
 8003daa:	bb1b      	cbnz	r3, 8003df4 <_svfiprintf_r+0x1b0>
 8003dac:	9b03      	ldr	r3, [sp, #12]
 8003dae:	3307      	adds	r3, #7
 8003db0:	f023 0307 	bic.w	r3, r3, #7
 8003db4:	3308      	adds	r3, #8
 8003db6:	9303      	str	r3, [sp, #12]
 8003db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dba:	4433      	add	r3, r6
 8003dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dbe:	e76a      	b.n	8003c96 <_svfiprintf_r+0x52>
 8003dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	e7a8      	b.n	8003d1c <_svfiprintf_r+0xd8>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	3401      	adds	r4, #1
 8003dce:	9305      	str	r3, [sp, #20]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f04f 0c0a 	mov.w	ip, #10
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ddc:	3a30      	subs	r2, #48	@ 0x30
 8003dde:	2a09      	cmp	r2, #9
 8003de0:	d903      	bls.n	8003dea <_svfiprintf_r+0x1a6>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0c6      	beq.n	8003d74 <_svfiprintf_r+0x130>
 8003de6:	9105      	str	r1, [sp, #20]
 8003de8:	e7c4      	b.n	8003d74 <_svfiprintf_r+0x130>
 8003dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dee:	4604      	mov	r4, r0
 8003df0:	2301      	movs	r3, #1
 8003df2:	e7f0      	b.n	8003dd6 <_svfiprintf_r+0x192>
 8003df4:	ab03      	add	r3, sp, #12
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	462a      	mov	r2, r5
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8003e34 <_svfiprintf_r+0x1f0>)
 8003dfc:	a904      	add	r1, sp, #16
 8003dfe:	4638      	mov	r0, r7
 8003e00:	f3af 8000 	nop.w
 8003e04:	1c42      	adds	r2, r0, #1
 8003e06:	4606      	mov	r6, r0
 8003e08:	d1d6      	bne.n	8003db8 <_svfiprintf_r+0x174>
 8003e0a:	89ab      	ldrh	r3, [r5, #12]
 8003e0c:	065b      	lsls	r3, r3, #25
 8003e0e:	f53f af2d 	bmi.w	8003c6c <_svfiprintf_r+0x28>
 8003e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e14:	e72c      	b.n	8003c70 <_svfiprintf_r+0x2c>
 8003e16:	ab03      	add	r3, sp, #12
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <_svfiprintf_r+0x1f0>)
 8003e1e:	a904      	add	r1, sp, #16
 8003e20:	4638      	mov	r0, r7
 8003e22:	f000 f879 	bl	8003f18 <_printf_i>
 8003e26:	e7ed      	b.n	8003e04 <_svfiprintf_r+0x1c0>
 8003e28:	0800486c 	.word	0x0800486c
 8003e2c:	08004876 	.word	0x08004876
 8003e30:	00000000 	.word	0x00000000
 8003e34:	08003b8d 	.word	0x08003b8d
 8003e38:	08004872 	.word	0x08004872

08003e3c <_printf_common>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	4616      	mov	r6, r2
 8003e42:	4698      	mov	r8, r3
 8003e44:	688a      	ldr	r2, [r1, #8]
 8003e46:	690b      	ldr	r3, [r1, #16]
 8003e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bfb8      	it	lt
 8003e50:	4613      	movlt	r3, r2
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e58:	4607      	mov	r7, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b10a      	cbz	r2, 8003e62 <_printf_common+0x26>
 8003e5e:	3301      	adds	r3, #1
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	0699      	lsls	r1, r3, #26
 8003e66:	bf42      	ittt	mi
 8003e68:	6833      	ldrmi	r3, [r6, #0]
 8003e6a:	3302      	addmi	r3, #2
 8003e6c:	6033      	strmi	r3, [r6, #0]
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	f015 0506 	ands.w	r5, r5, #6
 8003e74:	d106      	bne.n	8003e84 <_printf_common+0x48>
 8003e76:	f104 0a19 	add.w	sl, r4, #25
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	6832      	ldr	r2, [r6, #0]
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	42ab      	cmp	r3, r5
 8003e82:	dc26      	bgt.n	8003ed2 <_printf_common+0x96>
 8003e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	3b00      	subs	r3, #0
 8003e8c:	bf18      	it	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	0692      	lsls	r2, r2, #26
 8003e92:	d42b      	bmi.n	8003eec <_printf_common+0xb0>
 8003e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e98:	4641      	mov	r1, r8
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c8      	blx	r9
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d01e      	beq.n	8003ee0 <_printf_common+0xa4>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	6922      	ldr	r2, [r4, #16]
 8003ea6:	f003 0306 	and.w	r3, r3, #6
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf02      	ittt	eq
 8003eae:	68e5      	ldreq	r5, [r4, #12]
 8003eb0:	6833      	ldreq	r3, [r6, #0]
 8003eb2:	1aed      	subeq	r5, r5, r3
 8003eb4:	68a3      	ldr	r3, [r4, #8]
 8003eb6:	bf0c      	ite	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	2500      	movne	r5, #0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfc4      	itt	gt
 8003ec2:	1a9b      	subgt	r3, r3, r2
 8003ec4:	18ed      	addgt	r5, r5, r3
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	341a      	adds	r4, #26
 8003eca:	42b5      	cmp	r5, r6
 8003ecc:	d11a      	bne.n	8003f04 <_printf_common+0xc8>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e008      	b.n	8003ee4 <_printf_common+0xa8>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4652      	mov	r2, sl
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	4638      	mov	r0, r7
 8003eda:	47c8      	blx	r9
 8003edc:	3001      	adds	r0, #1
 8003ede:	d103      	bne.n	8003ee8 <_printf_common+0xac>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	3501      	adds	r5, #1
 8003eea:	e7c6      	b.n	8003e7a <_printf_common+0x3e>
 8003eec:	18e1      	adds	r1, r4, r3
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	2030      	movs	r0, #48	@ 0x30
 8003ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ef6:	4422      	add	r2, r4
 8003ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f00:	3302      	adds	r3, #2
 8003f02:	e7c7      	b.n	8003e94 <_printf_common+0x58>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4622      	mov	r2, r4
 8003f08:	4641      	mov	r1, r8
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c8      	blx	r9
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d0e6      	beq.n	8003ee0 <_printf_common+0xa4>
 8003f12:	3601      	adds	r6, #1
 8003f14:	e7d9      	b.n	8003eca <_printf_common+0x8e>
	...

08003f18 <_printf_i>:
 8003f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	7e0f      	ldrb	r7, [r1, #24]
 8003f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f20:	2f78      	cmp	r7, #120	@ 0x78
 8003f22:	4691      	mov	r9, r2
 8003f24:	4680      	mov	r8, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	469a      	mov	sl, r3
 8003f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f2e:	d807      	bhi.n	8003f40 <_printf_i+0x28>
 8003f30:	2f62      	cmp	r7, #98	@ 0x62
 8003f32:	d80a      	bhi.n	8003f4a <_printf_i+0x32>
 8003f34:	2f00      	cmp	r7, #0
 8003f36:	f000 80d1 	beq.w	80040dc <_printf_i+0x1c4>
 8003f3a:	2f58      	cmp	r7, #88	@ 0x58
 8003f3c:	f000 80b8 	beq.w	80040b0 <_printf_i+0x198>
 8003f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f48:	e03a      	b.n	8003fc0 <_printf_i+0xa8>
 8003f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f4e:	2b15      	cmp	r3, #21
 8003f50:	d8f6      	bhi.n	8003f40 <_printf_i+0x28>
 8003f52:	a101      	add	r1, pc, #4	@ (adr r1, 8003f58 <_printf_i+0x40>)
 8003f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fc5 	.word	0x08003fc5
 8003f60:	08003f41 	.word	0x08003f41
 8003f64:	08003f41 	.word	0x08003f41
 8003f68:	08003f41 	.word	0x08003f41
 8003f6c:	08003f41 	.word	0x08003f41
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003f41 	.word	0x08003f41
 8003f78:	08003f41 	.word	0x08003f41
 8003f7c:	08003f41 	.word	0x08003f41
 8003f80:	08003f41 	.word	0x08003f41
 8003f84:	080040c3 	.word	0x080040c3
 8003f88:	08003fef 	.word	0x08003fef
 8003f8c:	0800407d 	.word	0x0800407d
 8003f90:	08003f41 	.word	0x08003f41
 8003f94:	08003f41 	.word	0x08003f41
 8003f98:	080040e5 	.word	0x080040e5
 8003f9c:	08003f41 	.word	0x08003f41
 8003fa0:	08003fef 	.word	0x08003fef
 8003fa4:	08003f41 	.word	0x08003f41
 8003fa8:	08003f41 	.word	0x08003f41
 8003fac:	08004085 	.word	0x08004085
 8003fb0:	6833      	ldr	r3, [r6, #0]
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6032      	str	r2, [r6, #0]
 8003fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e09c      	b.n	80040fe <_printf_i+0x1e6>
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	6820      	ldr	r0, [r4, #0]
 8003fc8:	1d19      	adds	r1, r3, #4
 8003fca:	6031      	str	r1, [r6, #0]
 8003fcc:	0606      	lsls	r6, r0, #24
 8003fce:	d501      	bpl.n	8003fd4 <_printf_i+0xbc>
 8003fd0:	681d      	ldr	r5, [r3, #0]
 8003fd2:	e003      	b.n	8003fdc <_printf_i+0xc4>
 8003fd4:	0645      	lsls	r5, r0, #25
 8003fd6:	d5fb      	bpl.n	8003fd0 <_printf_i+0xb8>
 8003fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fdc:	2d00      	cmp	r5, #0
 8003fde:	da03      	bge.n	8003fe8 <_printf_i+0xd0>
 8003fe0:	232d      	movs	r3, #45	@ 0x2d
 8003fe2:	426d      	negs	r5, r5
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe8:	4858      	ldr	r0, [pc, #352]	@ (800414c <_printf_i+0x234>)
 8003fea:	230a      	movs	r3, #10
 8003fec:	e011      	b.n	8004012 <_printf_i+0xfa>
 8003fee:	6821      	ldr	r1, [r4, #0]
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	0608      	lsls	r0, r1, #24
 8003ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ff8:	d402      	bmi.n	8004000 <_printf_i+0xe8>
 8003ffa:	0649      	lsls	r1, r1, #25
 8003ffc:	bf48      	it	mi
 8003ffe:	b2ad      	uxthmi	r5, r5
 8004000:	2f6f      	cmp	r7, #111	@ 0x6f
 8004002:	4852      	ldr	r0, [pc, #328]	@ (800414c <_printf_i+0x234>)
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	bf14      	ite	ne
 8004008:	230a      	movne	r3, #10
 800400a:	2308      	moveq	r3, #8
 800400c:	2100      	movs	r1, #0
 800400e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004012:	6866      	ldr	r6, [r4, #4]
 8004014:	60a6      	str	r6, [r4, #8]
 8004016:	2e00      	cmp	r6, #0
 8004018:	db05      	blt.n	8004026 <_printf_i+0x10e>
 800401a:	6821      	ldr	r1, [r4, #0]
 800401c:	432e      	orrs	r6, r5
 800401e:	f021 0104 	bic.w	r1, r1, #4
 8004022:	6021      	str	r1, [r4, #0]
 8004024:	d04b      	beq.n	80040be <_printf_i+0x1a6>
 8004026:	4616      	mov	r6, r2
 8004028:	fbb5 f1f3 	udiv	r1, r5, r3
 800402c:	fb03 5711 	mls	r7, r3, r1, r5
 8004030:	5dc7      	ldrb	r7, [r0, r7]
 8004032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004036:	462f      	mov	r7, r5
 8004038:	42bb      	cmp	r3, r7
 800403a:	460d      	mov	r5, r1
 800403c:	d9f4      	bls.n	8004028 <_printf_i+0x110>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d10b      	bne.n	800405a <_printf_i+0x142>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	07df      	lsls	r7, r3, #31
 8004046:	d508      	bpl.n	800405a <_printf_i+0x142>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6861      	ldr	r1, [r4, #4]
 800404c:	4299      	cmp	r1, r3
 800404e:	bfde      	ittt	le
 8004050:	2330      	movle	r3, #48	@ 0x30
 8004052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800405a:	1b92      	subs	r2, r2, r6
 800405c:	6122      	str	r2, [r4, #16]
 800405e:	f8cd a000 	str.w	sl, [sp]
 8004062:	464b      	mov	r3, r9
 8004064:	aa03      	add	r2, sp, #12
 8004066:	4621      	mov	r1, r4
 8004068:	4640      	mov	r0, r8
 800406a:	f7ff fee7 	bl	8003e3c <_printf_common>
 800406e:	3001      	adds	r0, #1
 8004070:	d14a      	bne.n	8004108 <_printf_i+0x1f0>
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	b004      	add	sp, #16
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	f043 0320 	orr.w	r3, r3, #32
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	4832      	ldr	r0, [pc, #200]	@ (8004150 <_printf_i+0x238>)
 8004086:	2778      	movs	r7, #120	@ 0x78
 8004088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	6831      	ldr	r1, [r6, #0]
 8004090:	061f      	lsls	r7, r3, #24
 8004092:	f851 5b04 	ldr.w	r5, [r1], #4
 8004096:	d402      	bmi.n	800409e <_printf_i+0x186>
 8004098:	065f      	lsls	r7, r3, #25
 800409a:	bf48      	it	mi
 800409c:	b2ad      	uxthmi	r5, r5
 800409e:	6031      	str	r1, [r6, #0]
 80040a0:	07d9      	lsls	r1, r3, #31
 80040a2:	bf44      	itt	mi
 80040a4:	f043 0320 	orrmi.w	r3, r3, #32
 80040a8:	6023      	strmi	r3, [r4, #0]
 80040aa:	b11d      	cbz	r5, 80040b4 <_printf_i+0x19c>
 80040ac:	2310      	movs	r3, #16
 80040ae:	e7ad      	b.n	800400c <_printf_i+0xf4>
 80040b0:	4826      	ldr	r0, [pc, #152]	@ (800414c <_printf_i+0x234>)
 80040b2:	e7e9      	b.n	8004088 <_printf_i+0x170>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f023 0320 	bic.w	r3, r3, #32
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	e7f6      	b.n	80040ac <_printf_i+0x194>
 80040be:	4616      	mov	r6, r2
 80040c0:	e7bd      	b.n	800403e <_printf_i+0x126>
 80040c2:	6833      	ldr	r3, [r6, #0]
 80040c4:	6825      	ldr	r5, [r4, #0]
 80040c6:	6961      	ldr	r1, [r4, #20]
 80040c8:	1d18      	adds	r0, r3, #4
 80040ca:	6030      	str	r0, [r6, #0]
 80040cc:	062e      	lsls	r6, r5, #24
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	d501      	bpl.n	80040d6 <_printf_i+0x1be>
 80040d2:	6019      	str	r1, [r3, #0]
 80040d4:	e002      	b.n	80040dc <_printf_i+0x1c4>
 80040d6:	0668      	lsls	r0, r5, #25
 80040d8:	d5fb      	bpl.n	80040d2 <_printf_i+0x1ba>
 80040da:	8019      	strh	r1, [r3, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	6123      	str	r3, [r4, #16]
 80040e0:	4616      	mov	r6, r2
 80040e2:	e7bc      	b.n	800405e <_printf_i+0x146>
 80040e4:	6833      	ldr	r3, [r6, #0]
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	6032      	str	r2, [r6, #0]
 80040ea:	681e      	ldr	r6, [r3, #0]
 80040ec:	6862      	ldr	r2, [r4, #4]
 80040ee:	2100      	movs	r1, #0
 80040f0:	4630      	mov	r0, r6
 80040f2:	f7fc f895 	bl	8000220 <memchr>
 80040f6:	b108      	cbz	r0, 80040fc <_printf_i+0x1e4>
 80040f8:	1b80      	subs	r0, r0, r6
 80040fa:	6060      	str	r0, [r4, #4]
 80040fc:	6863      	ldr	r3, [r4, #4]
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	2300      	movs	r3, #0
 8004102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004106:	e7aa      	b.n	800405e <_printf_i+0x146>
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	4632      	mov	r2, r6
 800410c:	4649      	mov	r1, r9
 800410e:	4640      	mov	r0, r8
 8004110:	47d0      	blx	sl
 8004112:	3001      	adds	r0, #1
 8004114:	d0ad      	beq.n	8004072 <_printf_i+0x15a>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	079b      	lsls	r3, r3, #30
 800411a:	d413      	bmi.n	8004144 <_printf_i+0x22c>
 800411c:	68e0      	ldr	r0, [r4, #12]
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	4298      	cmp	r0, r3
 8004122:	bfb8      	it	lt
 8004124:	4618      	movlt	r0, r3
 8004126:	e7a6      	b.n	8004076 <_printf_i+0x15e>
 8004128:	2301      	movs	r3, #1
 800412a:	4632      	mov	r2, r6
 800412c:	4649      	mov	r1, r9
 800412e:	4640      	mov	r0, r8
 8004130:	47d0      	blx	sl
 8004132:	3001      	adds	r0, #1
 8004134:	d09d      	beq.n	8004072 <_printf_i+0x15a>
 8004136:	3501      	adds	r5, #1
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	9903      	ldr	r1, [sp, #12]
 800413c:	1a5b      	subs	r3, r3, r1
 800413e:	42ab      	cmp	r3, r5
 8004140:	dcf2      	bgt.n	8004128 <_printf_i+0x210>
 8004142:	e7eb      	b.n	800411c <_printf_i+0x204>
 8004144:	2500      	movs	r5, #0
 8004146:	f104 0619 	add.w	r6, r4, #25
 800414a:	e7f5      	b.n	8004138 <_printf_i+0x220>
 800414c:	0800487d 	.word	0x0800487d
 8004150:	0800488e 	.word	0x0800488e

08004154 <memmove>:
 8004154:	4288      	cmp	r0, r1
 8004156:	b510      	push	{r4, lr}
 8004158:	eb01 0402 	add.w	r4, r1, r2
 800415c:	d902      	bls.n	8004164 <memmove+0x10>
 800415e:	4284      	cmp	r4, r0
 8004160:	4623      	mov	r3, r4
 8004162:	d807      	bhi.n	8004174 <memmove+0x20>
 8004164:	1e43      	subs	r3, r0, #1
 8004166:	42a1      	cmp	r1, r4
 8004168:	d008      	beq.n	800417c <memmove+0x28>
 800416a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800416e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004172:	e7f8      	b.n	8004166 <memmove+0x12>
 8004174:	4402      	add	r2, r0
 8004176:	4601      	mov	r1, r0
 8004178:	428a      	cmp	r2, r1
 800417a:	d100      	bne.n	800417e <memmove+0x2a>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004186:	e7f7      	b.n	8004178 <memmove+0x24>

08004188 <_sbrk_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_sbrk_r+0x1c>)
 800418c:	2300      	movs	r3, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fd f86a 	bl	800126c <_sbrk>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_sbrk_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_sbrk_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	2000033c 	.word	0x2000033c

080041a8 <memcpy>:
 80041a8:	440a      	add	r2, r1
 80041aa:	4291      	cmp	r1, r2
 80041ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b0:	d100      	bne.n	80041b4 <memcpy+0xc>
 80041b2:	4770      	bx	lr
 80041b4:	b510      	push	{r4, lr}
 80041b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041be:	4291      	cmp	r1, r2
 80041c0:	d1f9      	bne.n	80041b6 <memcpy+0xe>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <_realloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	4607      	mov	r7, r0
 80041ca:	4614      	mov	r4, r2
 80041cc:	460d      	mov	r5, r1
 80041ce:	b921      	cbnz	r1, 80041da <_realloc_r+0x16>
 80041d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d4:	4611      	mov	r1, r2
 80041d6:	f7ff bc4d 	b.w	8003a74 <_malloc_r>
 80041da:	b92a      	cbnz	r2, 80041e8 <_realloc_r+0x24>
 80041dc:	f7ff fbde 	bl	800399c <_free_r>
 80041e0:	4625      	mov	r5, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	f000 f81a 	bl	8004220 <_malloc_usable_size_r>
 80041ec:	4284      	cmp	r4, r0
 80041ee:	4606      	mov	r6, r0
 80041f0:	d802      	bhi.n	80041f8 <_realloc_r+0x34>
 80041f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041f6:	d8f4      	bhi.n	80041e2 <_realloc_r+0x1e>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4638      	mov	r0, r7
 80041fc:	f7ff fc3a 	bl	8003a74 <_malloc_r>
 8004200:	4680      	mov	r8, r0
 8004202:	b908      	cbnz	r0, 8004208 <_realloc_r+0x44>
 8004204:	4645      	mov	r5, r8
 8004206:	e7ec      	b.n	80041e2 <_realloc_r+0x1e>
 8004208:	42b4      	cmp	r4, r6
 800420a:	4622      	mov	r2, r4
 800420c:	4629      	mov	r1, r5
 800420e:	bf28      	it	cs
 8004210:	4632      	movcs	r2, r6
 8004212:	f7ff ffc9 	bl	80041a8 <memcpy>
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff fbbf 	bl	800399c <_free_r>
 800421e:	e7f1      	b.n	8004204 <_realloc_r+0x40>

08004220 <_malloc_usable_size_r>:
 8004220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004224:	1f18      	subs	r0, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfbc      	itt	lt
 800422a:	580b      	ldrlt	r3, [r1, r0]
 800422c:	18c0      	addlt	r0, r0, r3
 800422e:	4770      	bx	lr

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
